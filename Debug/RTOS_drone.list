
RTOS_drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a244  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  0800a3d8  0800a3d8  0001a3d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a538  0800a538  00020404  2**0
                  CONTENTS
  4 .ARM          00000008  0800a538  0800a538  0001a538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a540  0800a540  00020404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a540  0800a540  0001a540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800a548  0800a548  0001a548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000404  20000000  0800a550  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a054  20000408  0800a954  00020408  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2001a45c  0800a954  0002a45c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020404  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ce80  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003755  00000000  00000000  0003d2b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001680  00000000  00000000  00040a10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001548  00000000  00000000  00042090  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00007897  00000000  00000000  000435d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011a1f  00000000  00000000  0004ae6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cd5bb  00000000  00000000  0005c88e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00129e49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063f8  00000000  00000000  00129ec4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000408 	.word	0x20000408
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a3bc 	.word	0x0800a3bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000040c 	.word	0x2000040c
 80001cc:	0800a3bc 	.word	0x0800a3bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2iz>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a94:	d215      	bcs.n	8000ac2 <__aeabi_d2iz+0x36>
 8000a96:	d511      	bpl.n	8000abc <__aeabi_d2iz+0x30>
 8000a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d912      	bls.n	8000ac8 <__aeabi_d2iz+0x3c>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ab2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	4240      	negne	r0, r0
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ac6:	d105      	bne.n	8000ad4 <__aeabi_d2iz+0x48>
 8000ac8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	bf08      	it	eq
 8000ace:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ad2:	4770      	bx	lr
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_d2uiz>:
 8000adc:	004a      	lsls	r2, r1, #1
 8000ade:	d211      	bcs.n	8000b04 <__aeabi_d2uiz+0x28>
 8000ae0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae4:	d211      	bcs.n	8000b0a <__aeabi_d2uiz+0x2e>
 8000ae6:	d50d      	bpl.n	8000b04 <__aeabi_d2uiz+0x28>
 8000ae8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af0:	d40e      	bmi.n	8000b10 <__aeabi_d2uiz+0x34>
 8000af2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afe:	fa23 f002 	lsr.w	r0, r3, r2
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d102      	bne.n	8000b16 <__aeabi_d2uiz+0x3a>
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b14:	4770      	bx	lr
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	4770      	bx	lr

08000b1c <__aeabi_d2f>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b24:	bf24      	itt	cs
 8000b26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_d2f+0x30>
 8000b30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b44:	bf08      	it	eq
 8000b46:	f020 0001 	biceq.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b50:	d121      	bne.n	8000b96 <__aeabi_d2f+0x7a>
 8000b52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b56:	bfbc      	itt	lt
 8000b58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	4770      	bxlt	lr
 8000b5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b66:	f1c2 0218 	rsb	r2, r2, #24
 8000b6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b72:	fa20 f002 	lsr.w	r0, r0, r2
 8000b76:	bf18      	it	ne
 8000b78:	f040 0001 	orrne.w	r0, r0, #1
 8000b7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b88:	ea40 000c 	orr.w	r0, r0, ip
 8000b8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b94:	e7cc      	b.n	8000b30 <__aeabi_d2f+0x14>
 8000b96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9a:	d107      	bne.n	8000bac <__aeabi_d2f+0x90>
 8000b9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba0:	bf1e      	ittt	ne
 8000ba2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ba6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000baa:	4770      	bxne	lr
 8000bac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bd0:	f000 b972 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9e08      	ldr	r6, [sp, #32]
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	4688      	mov	r8, r1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d14b      	bne.n	8000c92 <__udivmoddi4+0xa6>
 8000bfa:	428a      	cmp	r2, r1
 8000bfc:	4615      	mov	r5, r2
 8000bfe:	d967      	bls.n	8000cd0 <__udivmoddi4+0xe4>
 8000c00:	fab2 f282 	clz	r2, r2
 8000c04:	b14a      	cbz	r2, 8000c1a <__udivmoddi4+0x2e>
 8000c06:	f1c2 0720 	rsb	r7, r2, #32
 8000c0a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c12:	4095      	lsls	r5, r2
 8000c14:	ea47 0803 	orr.w	r8, r7, r3
 8000c18:	4094      	lsls	r4, r2
 8000c1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1e:	0c23      	lsrs	r3, r4, #16
 8000c20:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c24:	fa1f fc85 	uxth.w	ip, r5
 8000c28:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c2c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c30:	fb07 f10c 	mul.w	r1, r7, ip
 8000c34:	4299      	cmp	r1, r3
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x60>
 8000c38:	18eb      	adds	r3, r5, r3
 8000c3a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c3e:	f080 811b 	bcs.w	8000e78 <__udivmoddi4+0x28c>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 8118 	bls.w	8000e78 <__udivmoddi4+0x28c>
 8000c48:	3f02      	subs	r7, #2
 8000c4a:	442b      	add	r3, r5
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c60:	45a4      	cmp	ip, r4
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x8c>
 8000c64:	192c      	adds	r4, r5, r4
 8000c66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x290>
 8000c6e:	45a4      	cmp	ip, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x290>
 8000c74:	3802      	subs	r0, #2
 8000c76:	442c      	add	r4, r5
 8000c78:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c7c:	eba4 040c 	sub.w	r4, r4, ip
 8000c80:	2700      	movs	r7, #0
 8000c82:	b11e      	cbz	r6, 8000c8c <__udivmoddi4+0xa0>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8c:	4639      	mov	r1, r7
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xbe>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	f000 80eb 	beq.w	8000e72 <__udivmoddi4+0x286>
 8000c9c:	2700      	movs	r7, #0
 8000c9e:	e9c6 0100 	strd	r0, r1, [r6]
 8000ca2:	4638      	mov	r0, r7
 8000ca4:	4639      	mov	r1, r7
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f783 	clz	r7, r3
 8000cae:	2f00      	cmp	r7, #0
 8000cb0:	d147      	bne.n	8000d42 <__udivmoddi4+0x156>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd0>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80fa 	bhi.w	8000eb0 <__udivmoddi4+0x2c4>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	4698      	mov	r8, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa0>
 8000cca:	e9c6 4800 	strd	r4, r8, [r6]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xe8>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 808f 	bne.w	8000dfc <__udivmoddi4+0x210>
 8000cde:	1b49      	subs	r1, r1, r5
 8000ce0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce4:	fa1f f885 	uxth.w	r8, r5
 8000ce8:	2701      	movs	r7, #1
 8000cea:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cee:	0c23      	lsrs	r3, r4, #16
 8000cf0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf8:	fb08 f10c 	mul.w	r1, r8, ip
 8000cfc:	4299      	cmp	r1, r3
 8000cfe:	d907      	bls.n	8000d10 <__udivmoddi4+0x124>
 8000d00:	18eb      	adds	r3, r5, r3
 8000d02:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x122>
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	f200 80cd 	bhi.w	8000ea8 <__udivmoddi4+0x2bc>
 8000d0e:	4684      	mov	ip, r0
 8000d10:	1a59      	subs	r1, r3, r1
 8000d12:	b2a3      	uxth	r3, r4
 8000d14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d18:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d1c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d20:	fb08 f800 	mul.w	r8, r8, r0
 8000d24:	45a0      	cmp	r8, r4
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0x14c>
 8000d28:	192c      	adds	r4, r5, r4
 8000d2a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x14a>
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	f200 80b6 	bhi.w	8000ea2 <__udivmoddi4+0x2b6>
 8000d36:	4618      	mov	r0, r3
 8000d38:	eba4 0408 	sub.w	r4, r4, r8
 8000d3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d40:	e79f      	b.n	8000c82 <__udivmoddi4+0x96>
 8000d42:	f1c7 0c20 	rsb	ip, r7, #32
 8000d46:	40bb      	lsls	r3, r7
 8000d48:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d4c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d50:	fa01 f407 	lsl.w	r4, r1, r7
 8000d54:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d58:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d5c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d60:	4325      	orrs	r5, r4
 8000d62:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d66:	0c2c      	lsrs	r4, r5, #16
 8000d68:	fb08 3319 	mls	r3, r8, r9, r3
 8000d6c:	fa1f fa8e 	uxth.w	sl, lr
 8000d70:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d74:	fb09 f40a 	mul.w	r4, r9, sl
 8000d78:	429c      	cmp	r4, r3
 8000d7a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d82:	d90b      	bls.n	8000d9c <__udivmoddi4+0x1b0>
 8000d84:	eb1e 0303 	adds.w	r3, lr, r3
 8000d88:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d8c:	f080 8087 	bcs.w	8000e9e <__udivmoddi4+0x2b2>
 8000d90:	429c      	cmp	r4, r3
 8000d92:	f240 8084 	bls.w	8000e9e <__udivmoddi4+0x2b2>
 8000d96:	f1a9 0902 	sub.w	r9, r9, #2
 8000d9a:	4473      	add	r3, lr
 8000d9c:	1b1b      	subs	r3, r3, r4
 8000d9e:	b2ad      	uxth	r5, r5
 8000da0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da4:	fb08 3310 	mls	r3, r8, r0, r3
 8000da8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dac:	fb00 fa0a 	mul.w	sl, r0, sl
 8000db0:	45a2      	cmp	sl, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1da>
 8000db4:	eb1e 0404 	adds.w	r4, lr, r4
 8000db8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dbc:	d26b      	bcs.n	8000e96 <__udivmoddi4+0x2aa>
 8000dbe:	45a2      	cmp	sl, r4
 8000dc0:	d969      	bls.n	8000e96 <__udivmoddi4+0x2aa>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	4474      	add	r4, lr
 8000dc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dca:	fba0 8902 	umull	r8, r9, r0, r2
 8000dce:	eba4 040a 	sub.w	r4, r4, sl
 8000dd2:	454c      	cmp	r4, r9
 8000dd4:	46c2      	mov	sl, r8
 8000dd6:	464b      	mov	r3, r9
 8000dd8:	d354      	bcc.n	8000e84 <__udivmoddi4+0x298>
 8000dda:	d051      	beq.n	8000e80 <__udivmoddi4+0x294>
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d069      	beq.n	8000eb4 <__udivmoddi4+0x2c8>
 8000de0:	ebb1 050a 	subs.w	r5, r1, sl
 8000de4:	eb64 0403 	sbc.w	r4, r4, r3
 8000de8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dec:	40fd      	lsrs	r5, r7
 8000dee:	40fc      	lsrs	r4, r7
 8000df0:	ea4c 0505 	orr.w	r5, ip, r5
 8000df4:	e9c6 5400 	strd	r5, r4, [r6]
 8000df8:	2700      	movs	r7, #0
 8000dfa:	e747      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f703 	lsr.w	r7, r0, r3
 8000e04:	4095      	lsls	r5, r2
 8000e06:	fa01 f002 	lsl.w	r0, r1, r2
 8000e0a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e12:	4338      	orrs	r0, r7
 8000e14:	0c01      	lsrs	r1, r0, #16
 8000e16:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e1a:	fa1f f885 	uxth.w	r8, r5
 8000e1e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e26:	fb07 f308 	mul.w	r3, r7, r8
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x256>
 8000e32:	1869      	adds	r1, r5, r1
 8000e34:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e38:	d22f      	bcs.n	8000e9a <__udivmoddi4+0x2ae>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d92d      	bls.n	8000e9a <__udivmoddi4+0x2ae>
 8000e3e:	3f02      	subs	r7, #2
 8000e40:	4429      	add	r1, r5
 8000e42:	1acb      	subs	r3, r1, r3
 8000e44:	b281      	uxth	r1, r0
 8000e46:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e4a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb00 f308 	mul.w	r3, r0, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x27e>
 8000e5a:	1869      	adds	r1, r5, r1
 8000e5c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e60:	d217      	bcs.n	8000e92 <__udivmoddi4+0x2a6>
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d915      	bls.n	8000e92 <__udivmoddi4+0x2a6>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4429      	add	r1, r5
 8000e6a:	1ac9      	subs	r1, r1, r3
 8000e6c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e70:	e73b      	b.n	8000cea <__udivmoddi4+0xfe>
 8000e72:	4637      	mov	r7, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e709      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000e78:	4607      	mov	r7, r0
 8000e7a:	e6e7      	b.n	8000c4c <__udivmoddi4+0x60>
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x8c>
 8000e80:	4541      	cmp	r1, r8
 8000e82:	d2ab      	bcs.n	8000ddc <__udivmoddi4+0x1f0>
 8000e84:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e88:	eb69 020e 	sbc.w	r2, r9, lr
 8000e8c:	3801      	subs	r0, #1
 8000e8e:	4613      	mov	r3, r2
 8000e90:	e7a4      	b.n	8000ddc <__udivmoddi4+0x1f0>
 8000e92:	4660      	mov	r0, ip
 8000e94:	e7e9      	b.n	8000e6a <__udivmoddi4+0x27e>
 8000e96:	4618      	mov	r0, r3
 8000e98:	e795      	b.n	8000dc6 <__udivmoddi4+0x1da>
 8000e9a:	4667      	mov	r7, ip
 8000e9c:	e7d1      	b.n	8000e42 <__udivmoddi4+0x256>
 8000e9e:	4681      	mov	r9, r0
 8000ea0:	e77c      	b.n	8000d9c <__udivmoddi4+0x1b0>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	442c      	add	r4, r5
 8000ea6:	e747      	b.n	8000d38 <__udivmoddi4+0x14c>
 8000ea8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eac:	442b      	add	r3, r5
 8000eae:	e72f      	b.n	8000d10 <__udivmoddi4+0x124>
 8000eb0:	4638      	mov	r0, r7
 8000eb2:	e708      	b.n	8000cc6 <__udivmoddi4+0xda>
 8000eb4:	4637      	mov	r7, r6
 8000eb6:	e6e9      	b.n	8000c8c <__udivmoddi4+0xa0>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ecc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	4a06      	ldr	r2, [pc, #24]	; (8000eec <vApplicationGetIdleTaskMemory+0x30>)
 8000ed2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2280      	movs	r2, #128	; 0x80
 8000ed8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000eda:	bf00      	nop
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000424 	.word	0x20000424
 8000eec:	20000484 	.word	0x20000484

08000ef0 <MX_TIM7_Init>:
  */

TIM_HandleTypeDef htim7;
volatile unsigned long ulHighFrequencyTimerTicks;
static void MX_TIM7_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000efe:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <MX_TIM7_Init+0x7c>)
 8000f00:	4a1b      	ldr	r2, [pc, #108]	; (8000f70 <MX_TIM7_Init+0x80>)
 8000f02:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 167;
 8000f04:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <MX_TIM7_Init+0x7c>)
 8000f06:	22a7      	movs	r2, #167	; 0xa7
 8000f08:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0a:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <MX_TIM7_Init+0x7c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100;
 8000f10:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <MX_TIM7_Init+0x7c>)
 8000f12:	2264      	movs	r2, #100	; 0x64
 8000f14:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <MX_TIM7_Init+0x7c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f1c:	4813      	ldr	r0, [pc, #76]	; (8000f6c <MX_TIM7_Init+0x7c>)
 8000f1e:	f005 fe99 	bl	8006c54 <HAL_TIM_Base_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	bf14      	ite	ne
 8000f28:	2301      	movne	r3, #1
 8000f2a:	2300      	moveq	r3, #0
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM7_Init+0x46>
  {
    Error_Handler();
 8000f32:	f003 fb77 	bl	8004624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f36:	2300      	movs	r3, #0
 8000f38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000f3e:	463b      	mov	r3, r7
 8000f40:	4619      	mov	r1, r3
 8000f42:	480a      	ldr	r0, [pc, #40]	; (8000f6c <MX_TIM7_Init+0x7c>)
 8000f44:	f006 fd2a 	bl	800799c <HAL_TIMEx_MasterConfigSynchronization>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	bf14      	ite	ne
 8000f4e:	2301      	movne	r3, #1
 8000f50:	2300      	moveq	r3, #0
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM7_Init+0x6c>
  {
    Error_Handler();
 8000f58:	f003 fb64 	bl	8004624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8000f5c:	4803      	ldr	r0, [pc, #12]	; (8000f6c <MX_TIM7_Init+0x7c>)
 8000f5e:	f005 fec8 	bl	8006cf2 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM7_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000684 	.word	0x20000684
 8000f70:	40001400 	.word	0x40001400

08000f74 <_ZSt5isnanf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f7e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f82:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f86:	eeb4 7a67 	vcmp.f32	s14, s15
 8000f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8e:	d701      	bvc.n	8000f94 <_ZSt5isnanf+0x20>
 8000f90:	2301      	movs	r3, #1
 8000f92:	e000      	b.n	8000f96 <_ZSt5isnanf+0x22>
 8000f94:	2300      	movs	r3, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	0000      	movs	r0, r0
 8000fa4:	0000      	movs	r0, r0
	...

08000fa8 <_Z4ftoadPci>:
	0.0000000005,		// 9
	0.00000000005		// 10
};

char * ftoa(double f, char * buf, int precision)
{
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b08b      	sub	sp, #44	; 0x2c
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	ed87 0b02 	vstr	d0, [r7, #8]
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
	char * ptr = buf;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
	char * p = ptr;
 8000fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbc:	623b      	str	r3, [r7, #32]
	char * p1;
	char c;
	long intPart;

	// check precision bounds
	if (precision > MAX_PRECISION)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	2b0a      	cmp	r3, #10
 8000fc2:	dd01      	ble.n	8000fc8 <_Z4ftoadPci+0x20>
		precision = MAX_PRECISION;
 8000fc4:	230a      	movs	r3, #10
 8000fc6:	603b      	str	r3, [r7, #0]

	// sign stuff
	if (f < 0)
 8000fc8:	f04f 0200 	mov.w	r2, #0
 8000fcc:	f04f 0300 	mov.w	r3, #0
 8000fd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fd4:	f7ff fd32 	bl	8000a3c <__aeabi_dcmplt>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00a      	beq.n	8000ff4 <_Z4ftoadPci+0x4c>
	{
		f = -f;
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000fe8:	60fb      	str	r3, [r7, #12]
		*ptr++ = '-';
 8000fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fec:	1c5a      	adds	r2, r3, #1
 8000fee:	627a      	str	r2, [r7, #36]	; 0x24
 8000ff0:	222d      	movs	r2, #45	; 0x2d
 8000ff2:	701a      	strb	r2, [r3, #0]
	}

	if (precision < 0)  // negative precision == automatic precision guess
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	da4f      	bge.n	800109a <_Z4ftoadPci+0xf2>
	{
		if (f < 1.0) precision = 6;
 8000ffa:	f04f 0200 	mov.w	r2, #0
 8000ffe:	4b82      	ldr	r3, [pc, #520]	; (8001208 <_Z4ftoadPci+0x260>)
 8001000:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001004:	f7ff fd1a 	bl	8000a3c <__aeabi_dcmplt>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d002      	beq.n	8001014 <_Z4ftoadPci+0x6c>
 800100e:	2306      	movs	r3, #6
 8001010:	603b      	str	r3, [r7, #0]
 8001012:	e042      	b.n	800109a <_Z4ftoadPci+0xf2>
		else if (f < 10.0) precision = 5;
 8001014:	f04f 0200 	mov.w	r2, #0
 8001018:	4b7c      	ldr	r3, [pc, #496]	; (800120c <_Z4ftoadPci+0x264>)
 800101a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800101e:	f7ff fd0d 	bl	8000a3c <__aeabi_dcmplt>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <_Z4ftoadPci+0x86>
 8001028:	2305      	movs	r3, #5
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	e035      	b.n	800109a <_Z4ftoadPci+0xf2>
		else if (f < 100.0) precision = 4;
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	4b77      	ldr	r3, [pc, #476]	; (8001210 <_Z4ftoadPci+0x268>)
 8001034:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001038:	f7ff fd00 	bl	8000a3c <__aeabi_dcmplt>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d002      	beq.n	8001048 <_Z4ftoadPci+0xa0>
 8001042:	2304      	movs	r3, #4
 8001044:	603b      	str	r3, [r7, #0]
 8001046:	e028      	b.n	800109a <_Z4ftoadPci+0xf2>
		else if (f < 1000.0) precision = 3;
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	4b71      	ldr	r3, [pc, #452]	; (8001214 <_Z4ftoadPci+0x26c>)
 800104e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001052:	f7ff fcf3 	bl	8000a3c <__aeabi_dcmplt>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d002      	beq.n	8001062 <_Z4ftoadPci+0xba>
 800105c:	2303      	movs	r3, #3
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	e01b      	b.n	800109a <_Z4ftoadPci+0xf2>
		else if (f < 10000.0) precision = 2;
 8001062:	a365      	add	r3, pc, #404	; (adr r3, 80011f8 <_Z4ftoadPci+0x250>)
 8001064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001068:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800106c:	f7ff fce6 	bl	8000a3c <__aeabi_dcmplt>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d002      	beq.n	800107c <_Z4ftoadPci+0xd4>
 8001076:	2302      	movs	r3, #2
 8001078:	603b      	str	r3, [r7, #0]
 800107a:	e00e      	b.n	800109a <_Z4ftoadPci+0xf2>
		else if (f < 100000.0) precision = 1;
 800107c:	a360      	add	r3, pc, #384	; (adr r3, 8001200 <_Z4ftoadPci+0x258>)
 800107e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001082:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001086:	f7ff fcd9 	bl	8000a3c <__aeabi_dcmplt>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d002      	beq.n	8001096 <_Z4ftoadPci+0xee>
 8001090:	2301      	movs	r3, #1
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	e001      	b.n	800109a <_Z4ftoadPci+0xf2>
		else precision = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	603b      	str	r3, [r7, #0]
	}

	// round value according the precision
	if (precision)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d00f      	beq.n	80010c0 <_Z4ftoadPci+0x118>
		f += rounders[precision];
 80010a0:	4a5d      	ldr	r2, [pc, #372]	; (8001218 <_Z4ftoadPci+0x270>)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	4413      	add	r3, r2
 80010a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4623      	mov	r3, r4
 80010b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010b4:	f7ff f89a 	bl	80001ec <__adddf3>
 80010b8:	4603      	mov	r3, r0
 80010ba:	460c      	mov	r4, r1
 80010bc:	e9c7 3402 	strd	r3, r4, [r7, #8]

	// integer part...
	intPart = f;
 80010c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010c4:	f7ff fce2 	bl	8000a8c <__aeabi_d2iz>
 80010c8:	4603      	mov	r3, r0
 80010ca:	61fb      	str	r3, [r7, #28]
	f -= intPart;
 80010cc:	69f8      	ldr	r0, [r7, #28]
 80010ce:	f7ff f9d9 	bl	8000484 <__aeabi_i2d>
 80010d2:	4603      	mov	r3, r0
 80010d4:	460c      	mov	r4, r1
 80010d6:	461a      	mov	r2, r3
 80010d8:	4623      	mov	r3, r4
 80010da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010de:	f7ff f883 	bl	80001e8 <__aeabi_dsub>
 80010e2:	4603      	mov	r3, r0
 80010e4:	460c      	mov	r4, r1
 80010e6:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (!intPart)
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d105      	bne.n	80010fc <_Z4ftoadPci+0x154>
		*ptr++ = '0';
 80010f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f2:	1c5a      	adds	r2, r3, #1
 80010f4:	627a      	str	r2, [r7, #36]	; 0x24
 80010f6:	2230      	movs	r2, #48	; 0x30
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	e038      	b.n	800116e <_Z4ftoadPci+0x1c6>
	else
	{
		// save start pointer
		p = ptr;
 80010fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fe:	623b      	str	r3, [r7, #32]

		// convert (reverse order)
		while (intPart)
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d01b      	beq.n	800113e <_Z4ftoadPci+0x196>
		{
			*p++ = '0' + intPart % 10;
 8001106:	69fa      	ldr	r2, [r7, #28]
 8001108:	4b44      	ldr	r3, [pc, #272]	; (800121c <_Z4ftoadPci+0x274>)
 800110a:	fb83 1302 	smull	r1, r3, r3, r2
 800110e:	1099      	asrs	r1, r3, #2
 8001110:	17d3      	asrs	r3, r2, #31
 8001112:	1ac9      	subs	r1, r1, r3
 8001114:	460b      	mov	r3, r1
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	440b      	add	r3, r1
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	1ad1      	subs	r1, r2, r3
 800111e:	b2ca      	uxtb	r2, r1
 8001120:	6a3b      	ldr	r3, [r7, #32]
 8001122:	1c59      	adds	r1, r3, #1
 8001124:	6239      	str	r1, [r7, #32]
 8001126:	3230      	adds	r2, #48	; 0x30
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	4a3b      	ldr	r2, [pc, #236]	; (800121c <_Z4ftoadPci+0x274>)
 8001130:	fb82 1203 	smull	r1, r2, r2, r3
 8001134:	1092      	asrs	r2, r2, #2
 8001136:	17db      	asrs	r3, r3, #31
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	61fb      	str	r3, [r7, #28]
		while (intPart)
 800113c:	e7e0      	b.n	8001100 <_Z4ftoadPci+0x158>
		}

		// save end pos
		p1 = p;
 800113e:	6a3b      	ldr	r3, [r7, #32]
 8001140:	61bb      	str	r3, [r7, #24]

		// reverse result
		while (p > ptr)
 8001142:	6a3a      	ldr	r2, [r7, #32]
 8001144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001146:	429a      	cmp	r2, r3
 8001148:	d90f      	bls.n	800116a <_Z4ftoadPci+0x1c2>
		{
			c = *--p;
 800114a:	6a3b      	ldr	r3, [r7, #32]
 800114c:	3b01      	subs	r3, #1
 800114e:	623b      	str	r3, [r7, #32]
 8001150:	6a3b      	ldr	r3, [r7, #32]
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	75fb      	strb	r3, [r7, #23]
			*p = *ptr;
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	781a      	ldrb	r2, [r3, #0]
 800115a:	6a3b      	ldr	r3, [r7, #32]
 800115c:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	1c5a      	adds	r2, r3, #1
 8001162:	627a      	str	r2, [r7, #36]	; 0x24
 8001164:	7dfa      	ldrb	r2, [r7, #23]
 8001166:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 8001168:	e7eb      	b.n	8001142 <_Z4ftoadPci+0x19a>
		}

		// restore end pos
		ptr = p1;
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
	}

	// decimal part
	if (precision)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d037      	beq.n	80011e4 <_Z4ftoadPci+0x23c>
	{
		// place decimal point
		*ptr++ = '.';
 8001174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001176:	1c5a      	adds	r2, r3, #1
 8001178:	627a      	str	r2, [r7, #36]	; 0x24
 800117a:	222e      	movs	r2, #46	; 0x2e
 800117c:	701a      	strb	r2, [r3, #0]

		// convert
		while (precision--)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	1e5a      	subs	r2, r3, #1
 8001182:	603a      	str	r2, [r7, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	bf14      	ite	ne
 8001188:	2301      	movne	r3, #1
 800118a:	2300      	moveq	r3, #0
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d028      	beq.n	80011e4 <_Z4ftoadPci+0x23c>
		{
			f *= 10.0;
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	4b1d      	ldr	r3, [pc, #116]	; (800120c <_Z4ftoadPci+0x264>)
 8001198:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800119c:	f7ff f9dc 	bl	8000558 <__aeabi_dmul>
 80011a0:	4603      	mov	r3, r0
 80011a2:	460c      	mov	r4, r1
 80011a4:	e9c7 3402 	strd	r3, r4, [r7, #8]
			c = f;
 80011a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011ac:	f7ff fc96 	bl	8000adc <__aeabi_d2uiz>
 80011b0:	4603      	mov	r3, r0
 80011b2:	75fb      	strb	r3, [r7, #23]
			*ptr++ = '0' + c;
 80011b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b6:	1c5a      	adds	r2, r3, #1
 80011b8:	627a      	str	r2, [r7, #36]	; 0x24
 80011ba:	7dfa      	ldrb	r2, [r7, #23]
 80011bc:	3230      	adds	r2, #48	; 0x30
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	701a      	strb	r2, [r3, #0]
			f -= c;
 80011c2:	7dfb      	ldrb	r3, [r7, #23]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f95d 	bl	8000484 <__aeabi_i2d>
 80011ca:	4603      	mov	r3, r0
 80011cc:	460c      	mov	r4, r1
 80011ce:	461a      	mov	r2, r3
 80011d0:	4623      	mov	r3, r4
 80011d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011d6:	f7ff f807 	bl	80001e8 <__aeabi_dsub>
 80011da:	4603      	mov	r3, r0
 80011dc:	460c      	mov	r4, r1
 80011de:	e9c7 3402 	strd	r3, r4, [r7, #8]
		while (precision--)
 80011e2:	e7cc      	b.n	800117e <_Z4ftoadPci+0x1d6>
		}
	}

	// terminating zero
	*ptr = 0;
 80011e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]

	return buf;
 80011ea:	687b      	ldr	r3, [r7, #4]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	372c      	adds	r7, #44	; 0x2c
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd90      	pop	{r4, r7, pc}
 80011f4:	f3af 8000 	nop.w
 80011f8:	00000000 	.word	0x00000000
 80011fc:	40c38800 	.word	0x40c38800
 8001200:	00000000 	.word	0x00000000
 8001204:	40f86a00 	.word	0x40f86a00
 8001208:	3ff00000 	.word	0x3ff00000
 800120c:	40240000 	.word	0x40240000
 8001210:	40590000 	.word	0x40590000
 8001214:	408f4000 	.word	0x408f4000
 8001218:	0800a4a8 	.word	0x0800a4a8
 800121c:	66666667 	.word	0x66666667

08001220 <_Z8init_MPUv>:
float b2 = 1.0000;
float roll_acc;
float a1 = -1.9382;
float a2 = 0.9400;

char init_MPU(){
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b091      	sub	sp, #68	; 0x44
 8001224:	af02      	add	r7, sp, #8
    char status = 1;
 8001226:	2301      	movs	r3, #1
 8001228:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    uint8_t d[2];
    uint8_t device_address = MPU_ADDRESS;
 800122c:	23d0      	movs	r3, #208	; 0xd0
 800122e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint8_t magnet_address = MAG_ADRRESS;
 8001232:	2318      	movs	r3, #24
 8001234:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29



  	char rx_data[25];
    while (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 2) != HAL_OK) {
 8001238:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800123c:	b299      	uxth	r1, r3
 800123e:	2302      	movs	r3, #2
 8001240:	2203      	movs	r2, #3
 8001242:	48bb      	ldr	r0, [pc, #748]	; (8001530 <_Z8init_MPUv+0x310>)
 8001244:	f004 fc3e 	bl	8005ac4 <HAL_I2C_IsDeviceReady>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	bf14      	ite	ne
 800124e:	2301      	movne	r3, #1
 8001250:	2300      	moveq	r3, #0
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d010      	beq.n	800127a <_Z8init_MPUv+0x5a>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_SET);
 8001258:	2201      	movs	r2, #1
 800125a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800125e:	48b5      	ldr	r0, [pc, #724]	; (8001534 <_Z8init_MPUv+0x314>)
 8001260:	f003 ffa0 	bl	80051a4 <HAL_GPIO_WritePin>
    	HAL_Delay(500);
 8001264:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001268:	f003 fcdc 	bl	8004c24 <HAL_Delay>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001272:	48b0      	ldr	r0, [pc, #704]	; (8001534 <_Z8init_MPUv+0x314>)
 8001274:	f003 ff96 	bl	80051a4 <HAL_GPIO_WritePin>
    while (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 2) != HAL_OK) {
 8001278:	e7de      	b.n	8001238 <_Z8init_MPUv+0x18>
      }

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_SET);
 800127a:	2201      	movs	r2, #1
 800127c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001280:	48ac      	ldr	r0, [pc, #688]	; (8001534 <_Z8init_MPUv+0x314>)
 8001282:	f003 ff8f 	bl	80051a4 <HAL_GPIO_WritePin>


//    HAL_UART_Transmit(&huart3,rx_data, strlen(rx_data),1000);

	/* Try to transmit via I2C */
	d[0] = PWR_MGMT_1;
 8001286:	236b      	movs	r3, #107	; 0x6b
 8001288:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    d[1] = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	if(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address , (uint8_t *)d, 2, 1000) != HAL_OK)
 8001292:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001296:	b299      	uxth	r1, r3
 8001298:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800129c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	2302      	movs	r3, #2
 80012a4:	48a2      	ldr	r0, [pc, #648]	; (8001530 <_Z8init_MPUv+0x310>)
 80012a6:	f004 f8e9 	bl	800547c <HAL_I2C_Master_Transmit>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0

	}

	/* Set data sample rate */

	d[0] = SAMPLE_RATE;
 80012ae:	2319      	movs	r3, #25
 80012b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = sample_1khz;
 80012b4:	2307      	movs	r3, #7
 80012b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80012ba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80012be:	b299      	uxth	r1, r3
 80012c0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80012c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2302      	movs	r3, #2
 80012cc:	4898      	ldr	r0, [pc, #608]	; (8001530 <_Z8init_MPUv+0x310>)
 80012ce:	f004 f8d5 	bl	800547c <HAL_I2C_Master_Transmit>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	bf14      	ite	ne
 80012d8:	2301      	movne	r3, #1
 80012da:	2300      	moveq	r3, #0
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d000      	beq.n	80012e4 <_Z8init_MPUv+0xc4>
 80012e2:	e7ea      	b.n	80012ba <_Z8init_MPUv+0x9a>

	d[0] = CONFIG;
 80012e4:	231a      	movs	r3, #26
 80012e6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = lpf;
 80012ea:	2301      	movs	r3, #1
 80012ec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80012f0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80012f4:	b299      	uxth	r1, r3
 80012f6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80012fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	2302      	movs	r3, #2
 8001302:	488b      	ldr	r0, [pc, #556]	; (8001530 <_Z8init_MPUv+0x310>)
 8001304:	f004 f8ba 	bl	800547c <HAL_I2C_Master_Transmit>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	bf14      	ite	ne
 800130e:	2301      	movne	r3, #1
 8001310:	2300      	moveq	r3, #0
 8001312:	b2db      	uxtb	r3, r3
 8001314:	2b00      	cmp	r3, #0
 8001316:	d000      	beq.n	800131a <_Z8init_MPUv+0xfa>
 8001318:	e7ea      	b.n	80012f0 <_Z8init_MPUv+0xd0>

	d[0] = GYRO_CONFIG;
 800131a:	231b      	movs	r3, #27
 800131c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = gyro_con;
 8001320:	2318      	movs	r3, #24
 8001322:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001326:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800132a:	b299      	uxth	r1, r3
 800132c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001330:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2302      	movs	r3, #2
 8001338:	487d      	ldr	r0, [pc, #500]	; (8001530 <_Z8init_MPUv+0x310>)
 800133a:	f004 f89f 	bl	800547c <HAL_I2C_Master_Transmit>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	bf14      	ite	ne
 8001344:	2301      	movne	r3, #1
 8001346:	2300      	moveq	r3, #0
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d000      	beq.n	8001350 <_Z8init_MPUv+0x130>
 800134e:	e7ea      	b.n	8001326 <_Z8init_MPUv+0x106>

	d[0] = ACCEL_CONFIG;
 8001350:	231c      	movs	r3, #28
 8001352:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = 0x00;
 8001356:	2300      	movs	r3, #0
 8001358:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 800135c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001360:	b299      	uxth	r1, r3
 8001362:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2302      	movs	r3, #2
 800136e:	4870      	ldr	r0, [pc, #448]	; (8001530 <_Z8init_MPUv+0x310>)
 8001370:	f004 f884 	bl	800547c <HAL_I2C_Master_Transmit>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	bf14      	ite	ne
 800137a:	2301      	movne	r3, #1
 800137c:	2300      	moveq	r3, #0
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	d000      	beq.n	8001386 <_Z8init_MPUv+0x166>
 8001384:	e7ea      	b.n	800135c <_Z8init_MPUv+0x13c>

	d[0] = ACCEL_CONFIG2;
 8001386:	231d      	movs	r3, #29
 8001388:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = 0x02;
 800138c:	2302      	movs	r3, #2
 800138e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001392:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001396:	b299      	uxth	r1, r3
 8001398:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800139c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	2302      	movs	r3, #2
 80013a4:	4862      	ldr	r0, [pc, #392]	; (8001530 <_Z8init_MPUv+0x310>)
 80013a6:	f004 f869 	bl	800547c <HAL_I2C_Master_Transmit>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	bf14      	ite	ne
 80013b0:	2301      	movne	r3, #1
 80013b2:	2300      	moveq	r3, #0
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d000      	beq.n	80013bc <_Z8init_MPUv+0x19c>
 80013ba:	e7ea      	b.n	8001392 <_Z8init_MPUv+0x172>


	d[0] = INIT_ENB;
 80013bc:	2338      	movs	r3, #56	; 0x38
 80013be:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = inter;
 80013c2:	2301      	movs	r3, #1
 80013c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80013c8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80013cc:	b299      	uxth	r1, r3
 80013ce:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80013d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	2302      	movs	r3, #2
 80013da:	4855      	ldr	r0, [pc, #340]	; (8001530 <_Z8init_MPUv+0x310>)
 80013dc:	f004 f84e 	bl	800547c <HAL_I2C_Master_Transmit>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	bf14      	ite	ne
 80013e6:	2301      	movne	r3, #1
 80013e8:	2300      	moveq	r3, #0
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d000      	beq.n	80013f2 <_Z8init_MPUv+0x1d2>
 80013f0:	e7ea      	b.n	80013c8 <_Z8init_MPUv+0x1a8>

	d[0] = USER_CTRL;
 80013f2:	236a      	movs	r3, #106	; 0x6a
 80013f4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    d[1] = zero;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80013fe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001402:	b299      	uxth	r1, r3
 8001404:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001408:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	2302      	movs	r3, #2
 8001410:	4847      	ldr	r0, [pc, #284]	; (8001530 <_Z8init_MPUv+0x310>)
 8001412:	f004 f833 	bl	800547c <HAL_I2C_Master_Transmit>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	bf14      	ite	ne
 800141c:	2301      	movne	r3, #1
 800141e:	2300      	moveq	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d000      	beq.n	8001428 <_Z8init_MPUv+0x208>
 8001426:	e7ea      	b.n	80013fe <_Z8init_MPUv+0x1de>

	d[0] = INT_BYPASS;
 8001428:	2337      	movs	r3, #55	; 0x37
 800142a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = stop_i2c_master;
 800142e:	2322      	movs	r3, #34	; 0x22
 8001430:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001434:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001438:	b299      	uxth	r1, r3
 800143a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800143e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	2302      	movs	r3, #2
 8001446:	483a      	ldr	r0, [pc, #232]	; (8001530 <_Z8init_MPUv+0x310>)
 8001448:	f004 f818 	bl	800547c <HAL_I2C_Master_Transmit>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	bf14      	ite	ne
 8001452:	2301      	movne	r3, #1
 8001454:	2300      	moveq	r3, #0
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b00      	cmp	r3, #0
 800145a:	d000      	beq.n	800145e <_Z8init_MPUv+0x23e>
 800145c:	e7ea      	b.n	8001434 <_Z8init_MPUv+0x214>

	if (HAL_I2C_IsDeviceReady(&hi2c1, magnet_address, 3, 200) != HAL_OK) {
 800145e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001462:	b299      	uxth	r1, r3
 8001464:	23c8      	movs	r3, #200	; 0xc8
 8001466:	2203      	movs	r2, #3
 8001468:	4831      	ldr	r0, [pc, #196]	; (8001530 <_Z8init_MPUv+0x310>)
 800146a:	f004 fb2b 	bl	8005ac4 <HAL_I2C_IsDeviceReady>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	bf14      	ite	ne
 8001474:	2301      	movne	r3, #1
 8001476:	2300      	moveq	r3, #0
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d01e      	beq.n	80014bc <_Z8init_MPUv+0x29c>
	    	strcpy( rx_data, "No Device \r \n");
 800147e:	f107 0308 	add.w	r3, r7, #8
 8001482:	4a2d      	ldr	r2, [pc, #180]	; (8001538 <_Z8init_MPUv+0x318>)
 8001484:	461c      	mov	r4, r3
 8001486:	4613      	mov	r3, r2
 8001488:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800148a:	c407      	stmia	r4!, {r0, r1, r2}
 800148c:	8023      	strh	r3, [r4, #0]
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001494:	4827      	ldr	r0, [pc, #156]	; (8001534 <_Z8init_MPUv+0x314>)
 8001496:	f003 fe85 	bl	80051a4 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_SET);
 800149a:	2201      	movs	r2, #1
 800149c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014a0:	4824      	ldr	r0, [pc, #144]	; (8001534 <_Z8init_MPUv+0x314>)
 80014a2:	f003 fe7f 	bl	80051a4 <HAL_GPIO_WritePin>
	    	HAL_Delay(500);
 80014a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014aa:	f003 fbbb 	bl	8004c24 <HAL_Delay>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014b4:	481f      	ldr	r0, [pc, #124]	; (8001534 <_Z8init_MPUv+0x314>)
 80014b6:	f003 fe75 	bl	80051a4 <HAL_GPIO_WritePin>
 80014ba:	e10c      	b.n	80016d6 <_Z8init_MPUv+0x4b6>
	      }
	      else{
	    	    d[0] = CNTL1_AD;
 80014bc:	230a      	movs	r3, #10
 80014be:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	    	  	d[1] = ROM_MODE;
 80014c2:	231f      	movs	r3, #31
 80014c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	    	  	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t) magnet_address,(uint8_t *)d,2,2)!=HAL_OK);
 80014c8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80014cc:	b299      	uxth	r1, r3
 80014ce:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80014d2:	2302      	movs	r3, #2
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	2302      	movs	r3, #2
 80014d8:	4815      	ldr	r0, [pc, #84]	; (8001530 <_Z8init_MPUv+0x310>)
 80014da:	f003 ffcf 	bl	800547c <HAL_I2C_Master_Transmit>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	bf14      	ite	ne
 80014e4:	2301      	movne	r3, #1
 80014e6:	2300      	moveq	r3, #0
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d000      	beq.n	80014f0 <_Z8init_MPUv+0x2d0>
 80014ee:	e7eb      	b.n	80014c8 <_Z8init_MPUv+0x2a8>

	    	  //	HAL_Delay(100);
	    	  	 for(long i = 1000000; i>0 ;i--){
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <_Z8init_MPUv+0x31c>)
 80014f2:	637b      	str	r3, [r7, #52]	; 0x34
 80014f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	dd03      	ble.n	8001502 <_Z8init_MPUv+0x2e2>
 80014fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014fc:	3b01      	subs	r3, #1
 80014fe:	637b      	str	r3, [r7, #52]	; 0x34
 8001500:	e7f8      	b.n	80014f4 <_Z8init_MPUv+0x2d4>

	    	  		    	      }

	    	  	uint8_t sensitive = ASAX_AD;
 8001502:	2310      	movs	r3, #16
 8001504:	71fb      	strb	r3, [r7, #7]
	    	  	uint8_t asa [3];
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address, &sensitive, 1, 1000) != HAL_OK);
 8001506:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800150a:	b299      	uxth	r1, r3
 800150c:	1dfa      	adds	r2, r7, #7
 800150e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2301      	movs	r3, #1
 8001516:	4806      	ldr	r0, [pc, #24]	; (8001530 <_Z8init_MPUv+0x310>)
 8001518:	f003 ffb0 	bl	800547c <HAL_I2C_Master_Transmit>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	bf14      	ite	ne
 8001522:	2301      	movne	r3, #1
 8001524:	2300      	moveq	r3, #0
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d009      	beq.n	8001540 <_Z8init_MPUv+0x320>
 800152c:	e7eb      	b.n	8001506 <_Z8init_MPUv+0x2e6>
 800152e:	bf00      	nop
 8001530:	200006c8 	.word	0x200006c8
 8001534:	40020400 	.word	0x40020400
 8001538:	0800a3d8 	.word	0x0800a3d8
 800153c:	000f4240 	.word	0x000f4240
	    	      while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)magnet_address, (uint8_t *)asa,(uint16_t) 3, 1000) != HAL_OK);
 8001540:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001544:	b299      	uxth	r1, r3
 8001546:	1d3a      	adds	r2, r7, #4
 8001548:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	2303      	movs	r3, #3
 8001550:	4864      	ldr	r0, [pc, #400]	; (80016e4 <_Z8init_MPUv+0x4c4>)
 8001552:	f004 f891 	bl	8005678 <HAL_I2C_Master_Receive>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	bf14      	ite	ne
 800155c:	2301      	movne	r3, #1
 800155e:	2300      	moveq	r3, #0
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d000      	beq.n	8001568 <_Z8init_MPUv+0x348>
 8001566:	e7eb      	b.n	8001540 <_Z8init_MPUv+0x320>

	    	      asax = (asa[0]-128)*0.5/128+1;
 8001568:	793b      	ldrb	r3, [r7, #4]
 800156a:	3b80      	subs	r3, #128	; 0x80
 800156c:	4618      	mov	r0, r3
 800156e:	f7fe ff89 	bl	8000484 <__aeabi_i2d>
 8001572:	f04f 0200 	mov.w	r2, #0
 8001576:	4b5c      	ldr	r3, [pc, #368]	; (80016e8 <_Z8init_MPUv+0x4c8>)
 8001578:	f7fe ffee 	bl	8000558 <__aeabi_dmul>
 800157c:	4603      	mov	r3, r0
 800157e:	460c      	mov	r4, r1
 8001580:	4618      	mov	r0, r3
 8001582:	4621      	mov	r1, r4
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	4b58      	ldr	r3, [pc, #352]	; (80016ec <_Z8init_MPUv+0x4cc>)
 800158a:	f7ff f90f 	bl	80007ac <__aeabi_ddiv>
 800158e:	4603      	mov	r3, r0
 8001590:	460c      	mov	r4, r1
 8001592:	4618      	mov	r0, r3
 8001594:	4621      	mov	r1, r4
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	4b55      	ldr	r3, [pc, #340]	; (80016f0 <_Z8init_MPUv+0x4d0>)
 800159c:	f7fe fe26 	bl	80001ec <__adddf3>
 80015a0:	4603      	mov	r3, r0
 80015a2:	460c      	mov	r4, r1
 80015a4:	4618      	mov	r0, r3
 80015a6:	4621      	mov	r1, r4
 80015a8:	f7ff fab8 	bl	8000b1c <__aeabi_d2f>
 80015ac:	4602      	mov	r2, r0
 80015ae:	4b51      	ldr	r3, [pc, #324]	; (80016f4 <_Z8init_MPUv+0x4d4>)
 80015b0:	601a      	str	r2, [r3, #0]
	    	      asay = (asa[1]-128)*0.5/128+1;
 80015b2:	797b      	ldrb	r3, [r7, #5]
 80015b4:	3b80      	subs	r3, #128	; 0x80
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ff64 	bl	8000484 <__aeabi_i2d>
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	4b49      	ldr	r3, [pc, #292]	; (80016e8 <_Z8init_MPUv+0x4c8>)
 80015c2:	f7fe ffc9 	bl	8000558 <__aeabi_dmul>
 80015c6:	4603      	mov	r3, r0
 80015c8:	460c      	mov	r4, r1
 80015ca:	4618      	mov	r0, r3
 80015cc:	4621      	mov	r1, r4
 80015ce:	f04f 0200 	mov.w	r2, #0
 80015d2:	4b46      	ldr	r3, [pc, #280]	; (80016ec <_Z8init_MPUv+0x4cc>)
 80015d4:	f7ff f8ea 	bl	80007ac <__aeabi_ddiv>
 80015d8:	4603      	mov	r3, r0
 80015da:	460c      	mov	r4, r1
 80015dc:	4618      	mov	r0, r3
 80015de:	4621      	mov	r1, r4
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	4b42      	ldr	r3, [pc, #264]	; (80016f0 <_Z8init_MPUv+0x4d0>)
 80015e6:	f7fe fe01 	bl	80001ec <__adddf3>
 80015ea:	4603      	mov	r3, r0
 80015ec:	460c      	mov	r4, r1
 80015ee:	4618      	mov	r0, r3
 80015f0:	4621      	mov	r1, r4
 80015f2:	f7ff fa93 	bl	8000b1c <__aeabi_d2f>
 80015f6:	4602      	mov	r2, r0
 80015f8:	4b3f      	ldr	r3, [pc, #252]	; (80016f8 <_Z8init_MPUv+0x4d8>)
 80015fa:	601a      	str	r2, [r3, #0]
	    	      asaz = (asa[2]-128)*0.5/128+1;
 80015fc:	79bb      	ldrb	r3, [r7, #6]
 80015fe:	3b80      	subs	r3, #128	; 0x80
 8001600:	4618      	mov	r0, r3
 8001602:	f7fe ff3f 	bl	8000484 <__aeabi_i2d>
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	4b37      	ldr	r3, [pc, #220]	; (80016e8 <_Z8init_MPUv+0x4c8>)
 800160c:	f7fe ffa4 	bl	8000558 <__aeabi_dmul>
 8001610:	4603      	mov	r3, r0
 8001612:	460c      	mov	r4, r1
 8001614:	4618      	mov	r0, r3
 8001616:	4621      	mov	r1, r4
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	4b33      	ldr	r3, [pc, #204]	; (80016ec <_Z8init_MPUv+0x4cc>)
 800161e:	f7ff f8c5 	bl	80007ac <__aeabi_ddiv>
 8001622:	4603      	mov	r3, r0
 8001624:	460c      	mov	r4, r1
 8001626:	4618      	mov	r0, r3
 8001628:	4621      	mov	r1, r4
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	4b30      	ldr	r3, [pc, #192]	; (80016f0 <_Z8init_MPUv+0x4d0>)
 8001630:	f7fe fddc 	bl	80001ec <__adddf3>
 8001634:	4603      	mov	r3, r0
 8001636:	460c      	mov	r4, r1
 8001638:	4618      	mov	r0, r3
 800163a:	4621      	mov	r1, r4
 800163c:	f7ff fa6e 	bl	8000b1c <__aeabi_d2f>
 8001640:	4602      	mov	r2, r0
 8001642:	4b2e      	ldr	r3, [pc, #184]	; (80016fc <_Z8init_MPUv+0x4dc>)
 8001644:	601a      	str	r2, [r3, #0]

	    	      d[0] = CNTL1_AD;
 8001646:	230a      	movs	r3, #10
 8001648:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	    	      d[1] = zero;
 800164c:	2300      	movs	r3, #0
 800164e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001652:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001656:	b299      	uxth	r1, r3
 8001658:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800165c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	2302      	movs	r3, #2
 8001664:	481f      	ldr	r0, [pc, #124]	; (80016e4 <_Z8init_MPUv+0x4c4>)
 8001666:	f003 ff09 	bl	800547c <HAL_I2C_Master_Transmit>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	bf14      	ite	ne
 8001670:	2301      	movne	r3, #1
 8001672:	2300      	moveq	r3, #0
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d000      	beq.n	800167c <_Z8init_MPUv+0x45c>
 800167a:	e7ea      	b.n	8001652 <_Z8init_MPUv+0x432>

	    	      for(long i = 1000000; i>0 ;i--){
 800167c:	4b20      	ldr	r3, [pc, #128]	; (8001700 <_Z8init_MPUv+0x4e0>)
 800167e:	633b      	str	r3, [r7, #48]	; 0x30
 8001680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001682:	2b00      	cmp	r3, #0
 8001684:	dd03      	ble.n	800168e <_Z8init_MPUv+0x46e>
 8001686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001688:	3b01      	subs	r3, #1
 800168a:	633b      	str	r3, [r7, #48]	; 0x30
 800168c:	e7f8      	b.n	8001680 <_Z8init_MPUv+0x460>

	    	      }

	    	      d[0] = CNTL1_AD;
 800168e:	230a      	movs	r3, #10
 8001690:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	    	      d[1] = 0x16;
 8001694:	2316      	movs	r3, #22
 8001696:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address,(uint8_t *)d,2,1000)!=HAL_OK);
 800169a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800169e:	b299      	uxth	r1, r3
 80016a0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80016a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2302      	movs	r3, #2
 80016ac:	480d      	ldr	r0, [pc, #52]	; (80016e4 <_Z8init_MPUv+0x4c4>)
 80016ae:	f003 fee5 	bl	800547c <HAL_I2C_Master_Transmit>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	bf14      	ite	ne
 80016b8:	2301      	movne	r3, #1
 80016ba:	2300      	moveq	r3, #0
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d000      	beq.n	80016c4 <_Z8init_MPUv+0x4a4>
 80016c2:	e7ea      	b.n	800169a <_Z8init_MPUv+0x47a>
	    	      for(long i = 1000000; i>0 ;i--){
 80016c4:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <_Z8init_MPUv+0x4e0>)
 80016c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	dd03      	ble.n	80016d6 <_Z8init_MPUv+0x4b6>
 80016ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d0:	3b01      	subs	r3, #1
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016d4:	e7f8      	b.n	80016c8 <_Z8init_MPUv+0x4a8>

	    	    }
	    	      //HAL_Delay(100);
	      }
  return status;
 80016d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80016da:	4618      	mov	r0, r3
 80016dc:	373c      	adds	r7, #60	; 0x3c
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd90      	pop	{r4, r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200006c8 	.word	0x200006c8
 80016e8:	3fe00000 	.word	0x3fe00000
 80016ec:	40600000 	.word	0x40600000
 80016f0:	3ff00000 	.word	0x3ff00000
 80016f4:	20000760 	.word	0x20000760
 80016f8:	20000764 	.word	0x20000764
 80016fc:	20000768 	.word	0x20000768
 8001700:	000f4240 	.word	0x000f4240

08001704 <_Z10adding_rawv>:
void adding_raw(){
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
	  Gyro_x_ += Gyro_x;
 8001708:	4b23      	ldr	r3, [pc, #140]	; (8001798 <_Z10adding_rawv+0x94>)
 800170a:	ed93 7a00 	vldr	s14, [r3]
 800170e:	4b23      	ldr	r3, [pc, #140]	; (800179c <_Z10adding_rawv+0x98>)
 8001710:	edd3 7a00 	vldr	s15, [r3]
 8001714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001718:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <_Z10adding_rawv+0x94>)
 800171a:	edc3 7a00 	vstr	s15, [r3]
	  Gyro_y_  += Gyro_y;
 800171e:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <_Z10adding_rawv+0x9c>)
 8001720:	ed93 7a00 	vldr	s14, [r3]
 8001724:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <_Z10adding_rawv+0xa0>)
 8001726:	edd3 7a00 	vldr	s15, [r3]
 800172a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800172e:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <_Z10adding_rawv+0x9c>)
 8001730:	edc3 7a00 	vstr	s15, [r3]
	  Gyro_z_  += Gyro_z;
 8001734:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <_Z10adding_rawv+0xa4>)
 8001736:	ed93 7a00 	vldr	s14, [r3]
 800173a:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <_Z10adding_rawv+0xa8>)
 800173c:	edd3 7a00 	vldr	s15, [r3]
 8001740:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001744:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <_Z10adding_rawv+0xa4>)
 8001746:	edc3 7a00 	vstr	s15, [r3]
	  Acc_x_  += Acc_x;
 800174a:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <_Z10adding_rawv+0xac>)
 800174c:	ed93 7a00 	vldr	s14, [r3]
 8001750:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <_Z10adding_rawv+0xb0>)
 8001752:	edd3 7a00 	vldr	s15, [r3]
 8001756:	ee77 7a27 	vadd.f32	s15, s14, s15
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <_Z10adding_rawv+0xac>)
 800175c:	edc3 7a00 	vstr	s15, [r3]
	  Acc_y_  += Acc_y;
 8001760:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <_Z10adding_rawv+0xb4>)
 8001762:	ed93 7a00 	vldr	s14, [r3]
 8001766:	4b15      	ldr	r3, [pc, #84]	; (80017bc <_Z10adding_rawv+0xb8>)
 8001768:	edd3 7a00 	vldr	s15, [r3]
 800176c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <_Z10adding_rawv+0xb4>)
 8001772:	edc3 7a00 	vstr	s15, [r3]
	  Acc_z_  += Acc_z;
 8001776:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <_Z10adding_rawv+0xbc>)
 8001778:	ed93 7a00 	vldr	s14, [r3]
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <_Z10adding_rawv+0xc0>)
 800177e:	edd3 7a00 	vldr	s15, [r3]
 8001782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <_Z10adding_rawv+0xbc>)
 8001788:	edc3 7a00 	vstr	s15, [r3]
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	200007c4 	.word	0x200007c4
 800179c:	200007ac 	.word	0x200007ac
 80017a0:	200007c8 	.word	0x200007c8
 80017a4:	200007b0 	.word	0x200007b0
 80017a8:	200007cc 	.word	0x200007cc
 80017ac:	200007b4 	.word	0x200007b4
 80017b0:	200007b8 	.word	0x200007b8
 80017b4:	200007a0 	.word	0x200007a0
 80017b8:	200007bc 	.word	0x200007bc
 80017bc:	200007a4 	.word	0x200007a4
 80017c0:	200007c0 	.word	0x200007c0
 80017c4:	200007a8 	.word	0x200007a8

080017c8 <_Z11process_MPUv>:
	  Acc_z_  = 0;

}


IMU_data process_MPU(){
 80017c8:	b590      	push	{r4, r7, lr}
 80017ca:	b08d      	sub	sp, #52	; 0x34
 80017cc:	af02      	add	r7, sp, #8
 80017ce:	6078      	str	r0, [r7, #4]
	IMU_data data_raw;
	uint8_t data[13];
    uint8_t mag_data[7];
	uint8_t status;
	uint8_t reg = ACCEL_XOUT_H;
 80017d0:	233b      	movs	r3, #59	; 0x3b
 80017d2:	73fb      	strb	r3, [r7, #15]
	uint8_t device_address = MPU_ADDRESS;
 80017d4:	23d0      	movs	r3, #208	; 0xd0
 80017d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t magnet_address = MAG_ADRRESS;
 80017da:	2318      	movs	r3, #24
 80017dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address, &reg, 1, 1000) != HAL_OK);
 80017e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017e4:	b299      	uxth	r1, r3
 80017e6:	f107 020f 	add.w	r2, r7, #15
 80017ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	2301      	movs	r3, #1
 80017f2:	48af      	ldr	r0, [pc, #700]	; (8001ab0 <_Z11process_MPUv+0x2e8>)
 80017f4:	f003 fe42 	bl	800547c <HAL_I2C_Master_Transmit>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	bf14      	ite	ne
 80017fe:	2301      	movne	r3, #1
 8001800:	2300      	moveq	r3, #0
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b00      	cmp	r3, #0
 8001806:	d000      	beq.n	800180a <_Z11process_MPUv+0x42>
 8001808:	e7ea      	b.n	80017e0 <_Z11process_MPUv+0x18>
	while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)device_address, data,14, 1000) != HAL_OK);
 800180a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800180e:	b299      	uxth	r1, r3
 8001810:	f107 0218 	add.w	r2, r7, #24
 8001814:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	230e      	movs	r3, #14
 800181c:	48a4      	ldr	r0, [pc, #656]	; (8001ab0 <_Z11process_MPUv+0x2e8>)
 800181e:	f003 ff2b 	bl	8005678 <HAL_I2C_Master_Receive>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	bf14      	ite	ne
 8001828:	2301      	movne	r3, #1
 800182a:	2300      	moveq	r3, #0
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d000      	beq.n	8001834 <_Z11process_MPUv+0x6c>
 8001832:	e7ea      	b.n	800180a <_Z11process_MPUv+0x42>

	Acc_x = (int16_t)(data[0] << 8 | data[1]);
 8001834:	7e3b      	ldrb	r3, [r7, #24]
 8001836:	021b      	lsls	r3, r3, #8
 8001838:	b21a      	sxth	r2, r3
 800183a:	7e7b      	ldrb	r3, [r7, #25]
 800183c:	b21b      	sxth	r3, r3
 800183e:	4313      	orrs	r3, r2
 8001840:	b21b      	sxth	r3, r3
 8001842:	ee07 3a90 	vmov	s15, r3
 8001846:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800184a:	4b9a      	ldr	r3, [pc, #616]	; (8001ab4 <_Z11process_MPUv+0x2ec>)
 800184c:	edc3 7a00 	vstr	s15, [r3]
	Acc_y = (int16_t)(data[2] << 8 | data[3]);
 8001850:	7ebb      	ldrb	r3, [r7, #26]
 8001852:	021b      	lsls	r3, r3, #8
 8001854:	b21a      	sxth	r2, r3
 8001856:	7efb      	ldrb	r3, [r7, #27]
 8001858:	b21b      	sxth	r3, r3
 800185a:	4313      	orrs	r3, r2
 800185c:	b21b      	sxth	r3, r3
 800185e:	ee07 3a90 	vmov	s15, r3
 8001862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001866:	4b94      	ldr	r3, [pc, #592]	; (8001ab8 <_Z11process_MPUv+0x2f0>)
 8001868:	edc3 7a00 	vstr	s15, [r3]
	Acc_z = (int16_t)(data[4] << 8 | data[5]);
 800186c:	7f3b      	ldrb	r3, [r7, #28]
 800186e:	021b      	lsls	r3, r3, #8
 8001870:	b21a      	sxth	r2, r3
 8001872:	7f7b      	ldrb	r3, [r7, #29]
 8001874:	b21b      	sxth	r3, r3
 8001876:	4313      	orrs	r3, r2
 8001878:	b21b      	sxth	r3, r3
 800187a:	ee07 3a90 	vmov	s15, r3
 800187e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001882:	4b8e      	ldr	r3, [pc, #568]	; (8001abc <_Z11process_MPUv+0x2f4>)
 8001884:	edc3 7a00 	vstr	s15, [r3]

    temp = (int16_t)(data[6] << 8 | data[7]);
 8001888:	7fbb      	ldrb	r3, [r7, #30]
 800188a:	021b      	lsls	r3, r3, #8
 800188c:	b21a      	sxth	r2, r3
 800188e:	7ffb      	ldrb	r3, [r7, #31]
 8001890:	b21b      	sxth	r3, r3
 8001892:	4313      	orrs	r3, r2
 8001894:	b21b      	sxth	r3, r3
 8001896:	ee07 3a90 	vmov	s15, r3
 800189a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800189e:	4b88      	ldr	r3, [pc, #544]	; (8001ac0 <_Z11process_MPUv+0x2f8>)
 80018a0:	edc3 7a00 	vstr	s15, [r3]

    Gyro_x = (int16_t)(data[8] << 8 | data[9]);
 80018a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018a8:	021b      	lsls	r3, r3, #8
 80018aa:	b21a      	sxth	r2, r3
 80018ac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80018b0:	b21b      	sxth	r3, r3
 80018b2:	4313      	orrs	r3, r2
 80018b4:	b21b      	sxth	r3, r3
 80018b6:	ee07 3a90 	vmov	s15, r3
 80018ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018be:	4b81      	ldr	r3, [pc, #516]	; (8001ac4 <_Z11process_MPUv+0x2fc>)
 80018c0:	edc3 7a00 	vstr	s15, [r3]
    Gyro_y = (int16_t)(data[10] << 8 | data[11]);
 80018c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80018c8:	021b      	lsls	r3, r3, #8
 80018ca:	b21a      	sxth	r2, r3
 80018cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80018d0:	b21b      	sxth	r3, r3
 80018d2:	4313      	orrs	r3, r2
 80018d4:	b21b      	sxth	r3, r3
 80018d6:	ee07 3a90 	vmov	s15, r3
 80018da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018de:	4b7a      	ldr	r3, [pc, #488]	; (8001ac8 <_Z11process_MPUv+0x300>)
 80018e0:	edc3 7a00 	vstr	s15, [r3]
    Gyro_z = (int16_t)(data[12] << 8 | data[13]);
 80018e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018e8:	021b      	lsls	r3, r3, #8
 80018ea:	b21a      	sxth	r2, r3
 80018ec:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80018f0:	b21b      	sxth	r3, r3
 80018f2:	4313      	orrs	r3, r2
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	ee07 3a90 	vmov	s15, r3
 80018fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018fe:	4b73      	ldr	r3, [pc, #460]	; (8001acc <_Z11process_MPUv+0x304>)
 8001900:	edc3 7a00 	vstr	s15, [r3]

	Acc_x= (Acc_x)/16384.0 - bAx ;
 8001904:	4b6b      	ldr	r3, [pc, #428]	; (8001ab4 <_Z11process_MPUv+0x2ec>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fdcd 	bl	80004a8 <__aeabi_f2d>
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	4b6f      	ldr	r3, [pc, #444]	; (8001ad0 <_Z11process_MPUv+0x308>)
 8001914:	f7fe ff4a 	bl	80007ac <__aeabi_ddiv>
 8001918:	4603      	mov	r3, r0
 800191a:	460c      	mov	r4, r1
 800191c:	4618      	mov	r0, r3
 800191e:	4621      	mov	r1, r4
 8001920:	4b6c      	ldr	r3, [pc, #432]	; (8001ad4 <_Z11process_MPUv+0x30c>)
 8001922:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001926:	461a      	mov	r2, r3
 8001928:	4623      	mov	r3, r4
 800192a:	f7fe fc5d 	bl	80001e8 <__aeabi_dsub>
 800192e:	4603      	mov	r3, r0
 8001930:	460c      	mov	r4, r1
 8001932:	4618      	mov	r0, r3
 8001934:	4621      	mov	r1, r4
 8001936:	f7ff f8f1 	bl	8000b1c <__aeabi_d2f>
 800193a:	4602      	mov	r2, r0
 800193c:	4b5d      	ldr	r3, [pc, #372]	; (8001ab4 <_Z11process_MPUv+0x2ec>)
 800193e:	601a      	str	r2, [r3, #0]
	Acc_y = (Acc_y)/16384.0 - bAy;
 8001940:	4b5d      	ldr	r3, [pc, #372]	; (8001ab8 <_Z11process_MPUv+0x2f0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fdaf 	bl	80004a8 <__aeabi_f2d>
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	4b60      	ldr	r3, [pc, #384]	; (8001ad0 <_Z11process_MPUv+0x308>)
 8001950:	f7fe ff2c 	bl	80007ac <__aeabi_ddiv>
 8001954:	4603      	mov	r3, r0
 8001956:	460c      	mov	r4, r1
 8001958:	4618      	mov	r0, r3
 800195a:	4621      	mov	r1, r4
 800195c:	4b5e      	ldr	r3, [pc, #376]	; (8001ad8 <_Z11process_MPUv+0x310>)
 800195e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001962:	461a      	mov	r2, r3
 8001964:	4623      	mov	r3, r4
 8001966:	f7fe fc3f 	bl	80001e8 <__aeabi_dsub>
 800196a:	4603      	mov	r3, r0
 800196c:	460c      	mov	r4, r1
 800196e:	4618      	mov	r0, r3
 8001970:	4621      	mov	r1, r4
 8001972:	f7ff f8d3 	bl	8000b1c <__aeabi_d2f>
 8001976:	4602      	mov	r2, r0
 8001978:	4b4f      	ldr	r3, [pc, #316]	; (8001ab8 <_Z11process_MPUv+0x2f0>)
 800197a:	601a      	str	r2, [r3, #0]
	Acc_z = (Acc_z)/16384.0 + bAz;
 800197c:	4b4f      	ldr	r3, [pc, #316]	; (8001abc <_Z11process_MPUv+0x2f4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fd91 	bl	80004a8 <__aeabi_f2d>
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	4b51      	ldr	r3, [pc, #324]	; (8001ad0 <_Z11process_MPUv+0x308>)
 800198c:	f7fe ff0e 	bl	80007ac <__aeabi_ddiv>
 8001990:	4603      	mov	r3, r0
 8001992:	460c      	mov	r4, r1
 8001994:	4618      	mov	r0, r3
 8001996:	4621      	mov	r1, r4
 8001998:	4b50      	ldr	r3, [pc, #320]	; (8001adc <_Z11process_MPUv+0x314>)
 800199a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800199e:	461a      	mov	r2, r3
 80019a0:	4623      	mov	r3, r4
 80019a2:	f7fe fc23 	bl	80001ec <__adddf3>
 80019a6:	4603      	mov	r3, r0
 80019a8:	460c      	mov	r4, r1
 80019aa:	4618      	mov	r0, r3
 80019ac:	4621      	mov	r1, r4
 80019ae:	f7ff f8b5 	bl	8000b1c <__aeabi_d2f>
 80019b2:	4602      	mov	r2, r0
 80019b4:	4b41      	ldr	r3, [pc, #260]	; (8001abc <_Z11process_MPUv+0x2f4>)
 80019b6:	601a      	str	r2, [r3, #0]

	Gyro_x = (Gyro_x )/16.4- bGx;
 80019b8:	4b42      	ldr	r3, [pc, #264]	; (8001ac4 <_Z11process_MPUv+0x2fc>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fd73 	bl	80004a8 <__aeabi_f2d>
 80019c2:	a339      	add	r3, pc, #228	; (adr r3, 8001aa8 <_Z11process_MPUv+0x2e0>)
 80019c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c8:	f7fe fef0 	bl	80007ac <__aeabi_ddiv>
 80019cc:	4603      	mov	r3, r0
 80019ce:	460c      	mov	r4, r1
 80019d0:	4618      	mov	r0, r3
 80019d2:	4621      	mov	r1, r4
 80019d4:	4b42      	ldr	r3, [pc, #264]	; (8001ae0 <_Z11process_MPUv+0x318>)
 80019d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80019da:	461a      	mov	r2, r3
 80019dc:	4623      	mov	r3, r4
 80019de:	f7fe fc03 	bl	80001e8 <__aeabi_dsub>
 80019e2:	4603      	mov	r3, r0
 80019e4:	460c      	mov	r4, r1
 80019e6:	4618      	mov	r0, r3
 80019e8:	4621      	mov	r1, r4
 80019ea:	f7ff f897 	bl	8000b1c <__aeabi_d2f>
 80019ee:	4602      	mov	r2, r0
 80019f0:	4b34      	ldr	r3, [pc, #208]	; (8001ac4 <_Z11process_MPUv+0x2fc>)
 80019f2:	601a      	str	r2, [r3, #0]
	Gyro_y = (Gyro_y )/16.4- bGy;
 80019f4:	4b34      	ldr	r3, [pc, #208]	; (8001ac8 <_Z11process_MPUv+0x300>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe fd55 	bl	80004a8 <__aeabi_f2d>
 80019fe:	a32a      	add	r3, pc, #168	; (adr r3, 8001aa8 <_Z11process_MPUv+0x2e0>)
 8001a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a04:	f7fe fed2 	bl	80007ac <__aeabi_ddiv>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	460c      	mov	r4, r1
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	4621      	mov	r1, r4
 8001a10:	4b34      	ldr	r3, [pc, #208]	; (8001ae4 <_Z11process_MPUv+0x31c>)
 8001a12:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a16:	461a      	mov	r2, r3
 8001a18:	4623      	mov	r3, r4
 8001a1a:	f7fe fbe5 	bl	80001e8 <__aeabi_dsub>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	460c      	mov	r4, r1
 8001a22:	4618      	mov	r0, r3
 8001a24:	4621      	mov	r1, r4
 8001a26:	f7ff f879 	bl	8000b1c <__aeabi_d2f>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	4b26      	ldr	r3, [pc, #152]	; (8001ac8 <_Z11process_MPUv+0x300>)
 8001a2e:	601a      	str	r2, [r3, #0]
	Gyro_z = (Gyro_z )/16.4- bGz;
 8001a30:	4b26      	ldr	r3, [pc, #152]	; (8001acc <_Z11process_MPUv+0x304>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe fd37 	bl	80004a8 <__aeabi_f2d>
 8001a3a:	a31b      	add	r3, pc, #108	; (adr r3, 8001aa8 <_Z11process_MPUv+0x2e0>)
 8001a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a40:	f7fe feb4 	bl	80007ac <__aeabi_ddiv>
 8001a44:	4603      	mov	r3, r0
 8001a46:	460c      	mov	r4, r1
 8001a48:	4618      	mov	r0, r3
 8001a4a:	4621      	mov	r1, r4
 8001a4c:	4b26      	ldr	r3, [pc, #152]	; (8001ae8 <_Z11process_MPUv+0x320>)
 8001a4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a52:	461a      	mov	r2, r3
 8001a54:	4623      	mov	r3, r4
 8001a56:	f7fe fbc7 	bl	80001e8 <__aeabi_dsub>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	460c      	mov	r4, r1
 8001a5e:	4618      	mov	r0, r3
 8001a60:	4621      	mov	r1, r4
 8001a62:	f7ff f85b 	bl	8000b1c <__aeabi_d2f>
 8001a66:	4602      	mov	r2, r0
 8001a68:	4b18      	ldr	r3, [pc, #96]	; (8001acc <_Z11process_MPUv+0x304>)
 8001a6a:	601a      	str	r2, [r3, #0]

    data_raw.Gyro_x = Gyro_x;
 8001a6c:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <_Z11process_MPUv+0x2fc>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	601a      	str	r2, [r3, #0]
    data_raw.Gyro_y = Gyro_y;
 8001a74:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <_Z11process_MPUv+0x300>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	605a      	str	r2, [r3, #4]
    data_raw.Gyro_z = Gyro_z;
 8001a7c:	4b13      	ldr	r3, [pc, #76]	; (8001acc <_Z11process_MPUv+0x304>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	609a      	str	r2, [r3, #8]
    data_raw.Acc_x = Acc_x;
 8001a84:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <_Z11process_MPUv+0x2ec>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	60da      	str	r2, [r3, #12]
    data_raw.Acc_y = Acc_y;
 8001a8c:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <_Z11process_MPUv+0x2f0>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	611a      	str	r2, [r3, #16]
    data_raw.Acc_z = Acc_z;
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <_Z11process_MPUv+0x2f4>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	615a      	str	r2, [r3, #20]
    return data_raw;
 8001a9c:	bf00      	nop
}
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	372c      	adds	r7, #44	; 0x2c
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd90      	pop	{r4, r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	66666666 	.word	0x66666666
 8001aac:	40306666 	.word	0x40306666
 8001ab0:	200006c8 	.word	0x200006c8
 8001ab4:	200007a0 	.word	0x200007a0
 8001ab8:	200007a4 	.word	0x200007a4
 8001abc:	200007a8 	.word	0x200007a8
 8001ac0:	2000075c 	.word	0x2000075c
 8001ac4:	200007ac 	.word	0x200007ac
 8001ac8:	200007b0 	.word	0x200007b0
 8001acc:	200007b4 	.word	0x200007b4
 8001ad0:	40d00000 	.word	0x40d00000
 8001ad4:	20000770 	.word	0x20000770
 8001ad8:	20000778 	.word	0x20000778
 8001adc:	20000780 	.word	0x20000780
 8001ae0:	20000788 	.word	0x20000788
 8001ae4:	20000790 	.word	0x20000790
 8001ae8:	20000798 	.word	0x20000798

08001aec <_Z11sbus_decodePh>:
#include <stdint.h>
uint16_t esc_value1;
uint16_t esc_value2;
uint16_t esc_value3;
uint16_t esc_value4;
void sbus_decode(uint8_t data[6]){
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
	esc_value1 = (data[0] << 3) | ((data[1] & 0b11100000)>>5);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	b21a      	sxth	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3301      	adds	r3, #1
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	095b      	lsrs	r3, r3, #5
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	b21b      	sxth	r3, r3
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	b21b      	sxth	r3, r3
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	4b23      	ldr	r3, [pc, #140]	; (8001b9c <_Z11sbus_decodePh+0xb0>)
 8001b10:	801a      	strh	r2, [r3, #0]
	esc_value2 = ((data[1] & 0b00011111)<<6)|((data[2] & 0b11111100)>>2);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3301      	adds	r3, #1
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	019b      	lsls	r3, r3, #6
 8001b1a:	b21b      	sxth	r3, r3
 8001b1c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001b20:	b21a      	sxth	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3302      	adds	r3, #2
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	089b      	lsrs	r3, r3, #2
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	b21b      	sxth	r3, r3
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	b21b      	sxth	r3, r3
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <_Z11sbus_decodePh+0xb4>)
 8001b36:	801a      	strh	r2, [r3, #0]
	esc_value3 = (((data[2] &0b00000011)<<9)|(data[3]<<1))|((data[4] & 0b10000000)>>7);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3302      	adds	r3, #2
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	025b      	lsls	r3, r3, #9
 8001b40:	b21b      	sxth	r3, r3
 8001b42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b46:	b21a      	sxth	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3303      	adds	r3, #3
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	b21b      	sxth	r3, r3
 8001b52:	4313      	orrs	r3, r2
 8001b54:	b21a      	sxth	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	09db      	lsrs	r3, r3, #7
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	b21b      	sxth	r3, r3
 8001b62:	4313      	orrs	r3, r2
 8001b64:	b21b      	sxth	r3, r3
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <_Z11sbus_decodePh+0xb8>)
 8001b6a:	801a      	strh	r2, [r3, #0]
	esc_value4 = ((data[4] & 0b01111111)<<4)|(data[5])>>4;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3304      	adds	r3, #4
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	b21b      	sxth	r3, r3
 8001b76:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8001b7a:	b21a      	sxth	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3305      	adds	r3, #5
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	111b      	asrs	r3, r3, #4
 8001b84:	b21b      	sxth	r3, r3
 8001b86:	4313      	orrs	r3, r2
 8001b88:	b21b      	sxth	r3, r3
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <_Z11sbus_decodePh+0xbc>)
 8001b8e:	801a      	strh	r2, [r3, #0]
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	200007dc 	.word	0x200007dc
 8001ba0:	200007de 	.word	0x200007de
 8001ba4:	200007e0 	.word	0x200007e0
 8001ba8:	200007e2 	.word	0x200007e2

08001bac <_ZN6Matrix9get_valueEPd>:
	int row;
	int col;
	double data[49];
	Matrix(int row, int col);
	virtual ~Matrix();
    int get_value(double* data){
 8001bac:	b490      	push	{r4, r7}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
    	for (int i = 0; i < row; i++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	da27      	bge.n	8001c14 <_ZN6Matrix9get_valueEPd+0x68>
    	    for (int j = 0; j < col; j++)
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	68ba      	ldr	r2, [r7, #8]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	da1c      	bge.n	8001c0c <_ZN6Matrix9get_valueEPd+0x60>
    	    	this->data[i*col + j] = data[i*col + j];
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	fb02 f203 	mul.w	r2, r2, r3
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	4413      	add	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	4413      	add	r3, r2
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6892      	ldr	r2, [r2, #8]
 8001bea:	68f9      	ldr	r1, [r7, #12]
 8001bec:	fb01 f102 	mul.w	r1, r1, r2
 8001bf0:	68ba      	ldr	r2, [r7, #8]
 8001bf2:	440a      	add	r2, r1
 8001bf4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	3202      	adds	r2, #2
 8001bfc:	00d2      	lsls	r2, r2, #3
 8001bfe:	440a      	add	r2, r1
 8001c00:	e9c2 3400 	strd	r3, r4, [r2]
    	    for (int j = 0; j < col; j++)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	3301      	adds	r3, #1
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	e7dd      	b.n	8001bc8 <_ZN6Matrix9get_valueEPd+0x1c>
    	for (int i = 0; i < row; i++)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	e7d2      	b.n	8001bba <_ZN6Matrix9get_valueEPd+0xe>
    	return 0;
 8001c14:	2300      	movs	r3, #0
    }
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc90      	pop	{r4, r7}
 8001c1e:	4770      	bx	lr

08001c20 <_ZN6Matrix5printE20__UART_HandleTypeDef>:
    int print(UART_HandleTypeDef huart){
 8001c20:	b084      	sub	sp, #16
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b088      	sub	sp, #32
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001c2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    	char buffer[10];
    	for (int i = 0; i < row; i++){
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	da49      	bge.n	8001cd4 <_ZN6Matrix5printE20__UART_HandleTypeDef+0xb4>
    	    	    for (int j = 0; j < col; j++){
 8001c40:	2300      	movs	r3, #0
 8001c42:	61bb      	str	r3, [r7, #24]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	da37      	bge.n	8001cbe <_ZN6Matrix5printE20__UART_HandleTypeDef+0x9e>
    	    	    	ftoa(this->data[i*col + j], buffer, 5);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	69fa      	ldr	r2, [r7, #28]
 8001c54:	fb02 f203 	mul.w	r2, r2, r3
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	3302      	adds	r3, #2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	4413      	add	r3, r2
 8001c64:	ed93 7b00 	vldr	d7, [r3]
 8001c68:	f107 030c 	add.w	r3, r7, #12
 8001c6c:	2105      	movs	r1, #5
 8001c6e:	4618      	mov	r0, r3
 8001c70:	eeb0 0a47 	vmov.f32	s0, s14
 8001c74:	eef0 0a67 	vmov.f32	s1, s15
 8001c78:	f7ff f996 	bl	8000fa8 <_Z4ftoadPci>
    	    	    	strcat(buffer," ");
 8001c7c:	f107 030c 	add.w	r3, r7, #12
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe faa5 	bl	80001d0 <strlen>
 8001c86:	4603      	mov	r3, r0
 8001c88:	461a      	mov	r2, r3
 8001c8a:	f107 030c 	add.w	r3, r7, #12
 8001c8e:	4413      	add	r3, r2
 8001c90:	4918      	ldr	r1, [pc, #96]	; (8001cf4 <_ZN6Matrix5printE20__UART_HandleTypeDef+0xd4>)
 8001c92:	461a      	mov	r2, r3
 8001c94:	460b      	mov	r3, r1
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	8013      	strh	r3, [r2, #0]
    	    	    	HAL_UART_Transmit(&huart,(uint8_t*) buffer, strlen(buffer),100);
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fa96 	bl	80001d0 <strlen>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	f107 010c 	add.w	r1, r7, #12
 8001cac:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001cb0:	2364      	movs	r3, #100	; 0x64
 8001cb2:	f005 ffa2 	bl	8007bfa <HAL_UART_Transmit>
    	    	    for (int j = 0; j < col; j++){
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	61bb      	str	r3, [r7, #24]
 8001cbc:	e7c2      	b.n	8001c44 <_ZN6Matrix5printE20__UART_HandleTypeDef+0x24>
    	    	    }
    	            HAL_UART_Transmit(&huart,(uint8_t*) "\n", 1,100);
 8001cbe:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001cc2:	2364      	movs	r3, #100	; 0x64
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	490c      	ldr	r1, [pc, #48]	; (8001cf8 <_ZN6Matrix5printE20__UART_HandleTypeDef+0xd8>)
 8001cc8:	f005 ff97 	bl	8007bfa <HAL_UART_Transmit>
    	for (int i = 0; i < row; i++){
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	e7b0      	b.n	8001c36 <_ZN6Matrix5printE20__UART_HandleTypeDef+0x16>
    	}
    	HAL_UART_Transmit(&huart,(uint8_t*) "\n", 1,100);
 8001cd4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001cd8:	2364      	movs	r3, #100	; 0x64
 8001cda:	2201      	movs	r2, #1
 8001cdc:	4906      	ldr	r1, [pc, #24]	; (8001cf8 <_ZN6Matrix5printE20__UART_HandleTypeDef+0xd8>)
 8001cde:	f005 ff8c 	bl	8007bfa <HAL_UART_Transmit>
    	return 0;
 8001ce2:	2300      	movs	r3, #0
    }
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3720      	adds	r7, #32
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cee:	b004      	add	sp, #16
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	0800a3e8 	.word	0x0800a3e8
 8001cf8:	0800a3ec 	.word	0x0800a3ec

08001cfc <_ZN6MatrixC1Eii>:
    double det();
};

Matrix::Matrix(int row, int col){
 8001cfc:	b490      	push	{r4, r7}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
 8001d08:	4a19      	ldr	r2, [pc, #100]	; (8001d70 <_ZN6MatrixC1Eii+0x74>)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	601a      	str	r2, [r3, #0]
	    this->row = row;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	68ba      	ldr	r2, [r7, #8]
 8001d12:	605a      	str	r2, [r3, #4]
	    this->col = col;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	609a      	str	r2, [r3, #8]


	    for (int i = 0; i < row; i++)
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	da1d      	bge.n	8001d62 <_ZN6MatrixC1Eii+0x66>
	    	   for (int j = 0; j < col; j++){
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	da13      	bge.n	8001d5a <_ZN6MatrixC1Eii+0x5e>
	    		   this->data[i*col + j] = 0;
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	fb02 f203 	mul.w	r2, r2, r3
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	3302      	adds	r3, #2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	441a      	add	r2, r3
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	f04f 0400 	mov.w	r4, #0
 8001d4e:	e9c2 3400 	strd	r3, r4, [r2]
	    	   for (int j = 0; j < col; j++){
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	3301      	adds	r3, #1
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	e7e7      	b.n	8001d2a <_ZN6MatrixC1Eii+0x2e>
	    for (int i = 0; i < row; i++)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	e7dd      	b.n	8001d1e <_ZN6MatrixC1Eii+0x22>
	    	   }
//	    			  this->data[i*col + j] = 0;
	}
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc90      	pop	{r4, r7}
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	0800a518 	.word	0x0800a518

08001d74 <_ZN6MatrixD1Ev>:

Matrix::~Matrix() {
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	4a04      	ldr	r2, [pc, #16]	; (8001d90 <_ZN6MatrixD1Ev+0x1c>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub

}
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4618      	mov	r0, r3
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	0800a518 	.word	0x0800a518

08001d94 <_ZN6MatrixD0Ev>:
Matrix::~Matrix() {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
}
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff ffe9 	bl	8001d74 <_ZN6MatrixD1Ev>
 8001da2:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f008 fa74 	bl	800a294 <_ZdlPvj>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <_ZN6MatrixC1ERKS_>:
class Matrix {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
 8001dc2:	4a0d      	ldr	r2, [pc, #52]	; (8001df8 <_ZN6MatrixC1ERKS_+0x40>)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	f102 0010 	add.w	r0, r2, #16
 8001de0:	3310      	adds	r3, #16
 8001de2:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8001de6:	4619      	mov	r1, r3
 8001de8:	f008 fa84 	bl	800a2f4 <memcpy>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	0800a518 	.word	0x0800a518

08001dfc <_Z8diag_matii>:

Matrix diag_mat(int row, int col) {
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b087      	sub	sp, #28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]

	// TODO Auto-generated constructor stub
	Matrix m = Matrix(row,col);
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	68b9      	ldr	r1, [r7, #8]
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f7ff ff75 	bl	8001cfc <_ZN6MatrixC1Eii>
	for (int i = 0; i < row; i++)
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	da20      	bge.n	8001e60 <_Z8diag_matii+0x64>
		for (int j = 0; j < col; j++)
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	da16      	bge.n	8001e58 <_Z8diag_matii+0x5c>
           if(i==j)
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d10e      	bne.n	8001e50 <_Z8diag_matii+0x54>
			 m.data[i*col + j] = 1;
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	fb02 f203 	mul.w	r2, r2, r3
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	3302      	adds	r3, #2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	441a      	add	r2, r3
 8001e46:	f04f 0300 	mov.w	r3, #0
 8001e4a:	4c08      	ldr	r4, [pc, #32]	; (8001e6c <_Z8diag_matii+0x70>)
 8001e4c:	e9c2 3400 	strd	r3, r4, [r2]
		for (int j = 0; j < col; j++)
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	3301      	adds	r3, #1
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	e7e4      	b.n	8001e22 <_Z8diag_matii+0x26>
	for (int i = 0; i < row; i++)
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	e7da      	b.n	8001e16 <_Z8diag_matii+0x1a>
   return m;
 8001e60:	bf00      	nop
}
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	371c      	adds	r7, #28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd90      	pop	{r4, r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	3ff00000 	.word	0x3ff00000

08001e70 <_Z7mul_mat6MatrixS_>:
        }
        // cout<< "\n";
    }
    return temp;
}
Matrix mul_mat(Matrix mat1, Matrix mat2) {
 8001e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e72:	b089      	sub	sp, #36	; 0x24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
   Matrix temp = Matrix(mat1.row, mat2.col);
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	6859      	ldr	r1, [r3, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	461a      	mov	r2, r3
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f7ff ff38 	bl	8001cfc <_ZN6MatrixC1Eii>
    if(mat2.row != mat1.col){
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d162      	bne.n	8001f5e <_Z7mul_mat6MatrixS_+0xee>

    }
    else{
   for (int i = 0; i < mat1.row; i++)
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61fb      	str	r3, [r7, #28]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	69fa      	ldr	r2, [r7, #28]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	da5b      	bge.n	8001f5e <_Z7mul_mat6MatrixS_+0xee>
	   for(int j = 0 ; j < mat2.col; j++)
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61bb      	str	r3, [r7, #24]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	da50      	bge.n	8001f56 <_Z7mul_mat6MatrixS_+0xe6>
	       for(int k = 0; k < mat1.col ; k++)
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	da45      	bge.n	8001f4e <_Z7mul_mat6MatrixS_+0xde>
	    	   temp.data[i*temp.col +j] += mat1.data[i*mat1.col + k] * mat2.data[k*mat2.col + j];
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	69fa      	ldr	r2, [r7, #28]
 8001ec8:	fb02 f203 	mul.w	r2, r2, r3
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	4413      	add	r3, r2
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	3302      	adds	r3, #2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	69fa      	ldr	r2, [r7, #28]
 8001ee2:	fb02 f203 	mul.w	r2, r2, r3
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	4413      	add	r3, r2
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	3302      	adds	r3, #2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	fb02 f203 	mul.w	r2, r2, r3
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	4413      	add	r3, r2
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	3302      	adds	r3, #2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f10:	f7fe fb22 	bl	8000558 <__aeabi_dmul>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4610      	mov	r0, r2
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	69fa      	ldr	r2, [r7, #28]
 8001f22:	fb02 f203 	mul.w	r2, r2, r3
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	18d6      	adds	r6, r2, r3
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	4620      	mov	r0, r4
 8001f30:	4629      	mov	r1, r5
 8001f32:	f7fe f95b 	bl	80001ec <__adddf3>
 8001f36:	4603      	mov	r3, r0
 8001f38:	460c      	mov	r4, r1
 8001f3a:	68f9      	ldr	r1, [r7, #12]
 8001f3c:	1cb2      	adds	r2, r6, #2
 8001f3e:	00d2      	lsls	r2, r2, #3
 8001f40:	440a      	add	r2, r1
 8001f42:	e9c2 3400 	strd	r3, r4, [r2]
	       for(int k = 0; k < mat1.col ; k++)
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	e7b4      	b.n	8001eb8 <_Z7mul_mat6MatrixS_+0x48>
	   for(int j = 0 ; j < mat2.col; j++)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	3301      	adds	r3, #1
 8001f52:	61bb      	str	r3, [r7, #24]
 8001f54:	e7a9      	b.n	8001eaa <_Z7mul_mat6MatrixS_+0x3a>
   for (int i = 0; i < mat1.row; i++)
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	61fb      	str	r3, [r7, #28]
 8001f5c:	e79e      	b.n	8001e9c <_Z7mul_mat6MatrixS_+0x2c>
    }
   return temp;
 8001f5e:	bf00      	nop
}
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	3724      	adds	r7, #36	; 0x24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f68 <_Z7add_mat6MatrixS_>:
Matrix add_mat(Matrix mat1, Matrix mat2) {
 8001f68:	b5b0      	push	{r4, r5, r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
   Matrix temp = Matrix(mat1.row, mat2.col);
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	6859      	ldr	r1, [r3, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f7ff febc 	bl	8001cfc <_ZN6MatrixC1Eii>
    if(mat2.row != mat1.row){
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d142      	bne.n	8002016 <_Z7add_mat6MatrixS_+0xae>

    }
    else{
   for (int i = 0; i < mat1.row; i++)
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	da3b      	bge.n	8002016 <_Z7add_mat6MatrixS_+0xae>
	   for(int j = 0 ; j < mat2.col; j++)
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	da30      	bge.n	800200e <_Z7add_mat6MatrixS_+0xa6>
	    	   temp.data[i*temp.col +j] = mat1.data[i*mat1.col + j] + mat2.data[i*mat2.col + j];
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	fb02 f203 	mul.w	r2, r2, r3
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	4413      	add	r3, r2
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	fb02 f203 	mul.w	r2, r2, r3
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	3302      	adds	r3, #2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4413      	add	r3, r2
 8001fdc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	6892      	ldr	r2, [r2, #8]
 8001fe4:	697d      	ldr	r5, [r7, #20]
 8001fe6:	fb05 f502 	mul.w	r5, r5, r2
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4415      	add	r5, r2
 8001fee:	461a      	mov	r2, r3
 8001ff0:	4623      	mov	r3, r4
 8001ff2:	f7fe f8fb 	bl	80001ec <__adddf3>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	460c      	mov	r4, r1
 8001ffa:	68f9      	ldr	r1, [r7, #12]
 8001ffc:	1caa      	adds	r2, r5, #2
 8001ffe:	00d2      	lsls	r2, r2, #3
 8002000:	440a      	add	r2, r1
 8002002:	e9c2 3400 	strd	r3, r4, [r2]
	   for(int j = 0 ; j < mat2.col; j++)
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	3301      	adds	r3, #1
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	e7c9      	b.n	8001fa2 <_Z7add_mat6MatrixS_+0x3a>
   for (int i = 0; i < mat1.row; i++)
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	3301      	adds	r3, #1
 8002012:	617b      	str	r3, [r7, #20]
 8002014:	e7be      	b.n	8001f94 <_Z7add_mat6MatrixS_+0x2c>
    }
   return temp;
 8002016:	bf00      	nop
}
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bdb0      	pop	{r4, r5, r7, pc}

08002020 <_Z7sub_mat6MatrixS_>:
Matrix sub_mat(Matrix mat1, Matrix mat2) {
 8002020:	b5b0      	push	{r4, r5, r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
   Matrix temp = Matrix(mat1.row, mat2.col);
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	6859      	ldr	r1, [r3, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	461a      	mov	r2, r3
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f7ff fe60 	bl	8001cfc <_ZN6MatrixC1Eii>
    if(mat2.row != mat1.row){
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	429a      	cmp	r2, r3
 8002046:	d142      	bne.n	80020ce <_Z7sub_mat6MatrixS_+0xae>

    }
    else{
   for (int i = 0; i < mat1.row; i++)
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	429a      	cmp	r2, r3
 8002054:	da3b      	bge.n	80020ce <_Z7sub_mat6MatrixS_+0xae>
	   for(int j = 0 ; j < mat2.col; j++)
 8002056:	2300      	movs	r3, #0
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	429a      	cmp	r2, r3
 8002062:	da30      	bge.n	80020c6 <_Z7sub_mat6MatrixS_+0xa6>
	    	   temp.data[i*temp.col +j] = mat1.data[i*mat1.col + j] - mat2.data[i*mat2.col + j];
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	fb02 f203 	mul.w	r2, r2, r3
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4413      	add	r3, r2
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	3302      	adds	r3, #2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4413      	add	r3, r2
 800207a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	fb02 f203 	mul.w	r2, r2, r3
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	4413      	add	r3, r2
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	3302      	adds	r3, #2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	4413      	add	r3, r2
 8002094:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	6892      	ldr	r2, [r2, #8]
 800209c:	697d      	ldr	r5, [r7, #20]
 800209e:	fb05 f502 	mul.w	r5, r5, r2
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4415      	add	r5, r2
 80020a6:	461a      	mov	r2, r3
 80020a8:	4623      	mov	r3, r4
 80020aa:	f7fe f89d 	bl	80001e8 <__aeabi_dsub>
 80020ae:	4603      	mov	r3, r0
 80020b0:	460c      	mov	r4, r1
 80020b2:	68f9      	ldr	r1, [r7, #12]
 80020b4:	1caa      	adds	r2, r5, #2
 80020b6:	00d2      	lsls	r2, r2, #3
 80020b8:	440a      	add	r2, r1
 80020ba:	e9c2 3400 	strd	r3, r4, [r2]
	   for(int j = 0 ; j < mat2.col; j++)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	3301      	adds	r3, #1
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	e7c9      	b.n	800205a <_Z7sub_mat6MatrixS_+0x3a>
   for (int i = 0; i < mat1.row; i++)
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	3301      	adds	r3, #1
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	e7be      	b.n	800204c <_Z7sub_mat6MatrixS_+0x2c>
    }
   return temp;
 80020ce:	bf00      	nop
}
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bdb0      	pop	{r4, r5, r7, pc}

080020d8 <_Z9transpose6Matrix>:

Matrix transpose(Matrix A) {
 80020d8:	b590      	push	{r4, r7, lr}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
    Matrix L = Matrix(A.col, A.row);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	6899      	ldr	r1, [r3, #8]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	461a      	mov	r2, r3
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff fe05 	bl	8001cfc <_ZN6MatrixC1Eii>

    for (int i = 0; i < A.row; i++)
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	da28      	bge.n	8002152 <_Z9transpose6Matrix+0x7a>
        for (int j = 0; j < A.col; j++) {
 8002100:	2300      	movs	r3, #0
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	429a      	cmp	r2, r3
 800210c:	da1d      	bge.n	800214a <_Z9transpose6Matrix+0x72>

                L.data[j * L.row+ i] = A.data[i * A.col + j];
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	fb02 f203 	mul.w	r2, r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	4413      	add	r3, r2
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6852      	ldr	r2, [r2, #4]
 8002120:	68b9      	ldr	r1, [r7, #8]
 8002122:	fb01 f102 	mul.w	r1, r1, r2
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	440a      	add	r2, r1
 800212a:	6839      	ldr	r1, [r7, #0]
 800212c:	3302      	adds	r3, #2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	440b      	add	r3, r1
 8002132:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	3202      	adds	r2, #2
 800213a:	00d2      	lsls	r2, r2, #3
 800213c:	440a      	add	r2, r1
 800213e:	e9c2 3400 	strd	r3, r4, [r2]
        for (int j = 0; j < A.col; j++) {
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	3301      	adds	r3, #1
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	e7dc      	b.n	8002104 <_Z9transpose6Matrix+0x2c>
    for (int i = 0; i < A.row; i++)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	3301      	adds	r3, #1
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	e7d1      	b.n	80020f6 <_Z9transpose6Matrix+0x1e>

        }

    return L;
 8002152:	bf00      	nop
}
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	bd90      	pop	{r4, r7, pc}

0800215c <_ZN6MatrixaSERKS_>:
class Matrix {
 800215c:	b4b0      	push	{r4, r5, r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f103 0110 	add.w	r1, r3, #16
 800217c:	2230      	movs	r2, #48	; 0x30
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	3310      	adds	r3, #16
 8002182:	2a00      	cmp	r2, #0
 8002184:	db07      	blt.n	8002196 <_ZN6MatrixaSERKS_+0x3a>
 8002186:	e9d3 4500 	ldrd	r4, r5, [r3]
 800218a:	e9c1 4500 	strd	r4, r5, [r1]
 800218e:	3108      	adds	r1, #8
 8002190:	3308      	adds	r3, #8
 8002192:	3a01      	subs	r2, #1
 8002194:	e7f5      	b.n	8002182 <_ZN6MatrixaSERKS_+0x26>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4618      	mov	r0, r3
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	bcb0      	pop	{r4, r5, r7}
 80021a0:	4770      	bx	lr
	...

080021a4 <_Z7inverse6Matrix>:
}

// Function to calculate and store inverse, returns false if
// matrix is singular
Matrix inverse(Matrix a)
{
 80021a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021a6:	b0ef      	sub	sp, #444	; 0x1bc
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	6018      	str	r0, [r3, #0]
 80021ae:	463b      	mov	r3, r7
 80021b0:	6019      	str	r1, [r3, #0]
    Matrix inverse = Matrix(a.col,a.col);
 80021b2:	463b      	mov	r3, r7
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6899      	ldr	r1, [r3, #8]
 80021b8:	463b      	mov	r3, r7
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	1d3b      	adds	r3, r7, #4
 80021c0:	6818      	ldr	r0, [r3, #0]
 80021c2:	f7ff fd9b 	bl	8001cfc <_ZN6MatrixC1Eii>
    Matrix temp = Matrix(a.col,2*a.col);
 80021c6:	463b      	mov	r3, r7
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6899      	ldr	r1, [r3, #8]
 80021cc:	463b      	mov	r3, r7
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	005a      	lsls	r2, r3, #1
 80021d4:	f107 0308 	add.w	r3, r7, #8
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fd8f 	bl	8001cfc <_ZN6MatrixC1Eii>
    uint8_t i,j,k;
    double d;
    int n = temp.row;
 80021de:	f107 0308 	add.w	r3, r7, #8
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
    int n2 = temp.col;
 80021e8:	f107 0308 	add.w	r3, r7, #8
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    for (i = 0; i < n; i++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
 80021f8:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 80021fc:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8002200:	429a      	cmp	r2, r3
 8002202:	dd56      	ble.n	80022b2 <_Z7inverse6Matrix+0x10e>
           for (j = 0; j < n2; j++){
 8002204:	2300      	movs	r3, #0
 8002206:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
 800220a:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 800220e:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8002212:	429a      	cmp	r2, r3
 8002214:	dd47      	ble.n	80022a6 <_Z7inverse6Matrix+0x102>
               if (j == (i + n))
 8002216:	f897 21b6 	ldrb.w	r2, [r7, #438]	; 0x1b6
 800221a:	f897 11b7 	ldrb.w	r1, [r7, #439]	; 0x1b7
 800221e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002222:	440b      	add	r3, r1
 8002224:	429a      	cmp	r2, r3
 8002226:	d112      	bne.n	800224e <_Z7inverse6Matrix+0xaa>
                   temp.data[i*n2 + j] = 1;
 8002228:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 800222c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8002230:	fb02 f203 	mul.w	r2, r2, r3
 8002234:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 8002238:	4413      	add	r3, r2
 800223a:	f107 0208 	add.w	r2, r7, #8
 800223e:	3302      	adds	r3, #2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	441a      	add	r2, r3
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	4cd5      	ldr	r4, [pc, #852]	; (80025a0 <_Z7inverse6Matrix+0x3fc>)
 800224a:	e9c2 3400 	strd	r3, r4, [r2]
               if(j < n){
 800224e:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 8002252:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8002256:	429a      	cmp	r2, r3
 8002258:	dd1f      	ble.n	800229a <_Z7inverse6Matrix+0xf6>
                   temp.data[i*n2 +j] = a.data[i*n +j];
 800225a:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 800225e:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8002262:	fb02 f203 	mul.w	r2, r2, r3
 8002266:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 800226a:	4413      	add	r3, r2
 800226c:	f897 21b7 	ldrb.w	r2, [r7, #439]	; 0x1b7
 8002270:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 8002274:	fb01 f102 	mul.w	r1, r1, r2
 8002278:	f897 21b6 	ldrb.w	r2, [r7, #438]	; 0x1b6
 800227c:	440a      	add	r2, r1
 800227e:	4639      	mov	r1, r7
 8002280:	6809      	ldr	r1, [r1, #0]
 8002282:	3302      	adds	r3, #2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	440b      	add	r3, r1
 8002288:	e9d3 3400 	ldrd	r3, r4, [r3]
 800228c:	f107 0108 	add.w	r1, r7, #8
 8002290:	3202      	adds	r2, #2
 8002292:	00d2      	lsls	r2, r2, #3
 8002294:	440a      	add	r2, r1
 8002296:	e9c2 3400 	strd	r3, r4, [r2]
           for (j = 0; j < n2; j++){
 800229a:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 800229e:	3301      	adds	r3, #1
 80022a0:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
 80022a4:	e7b1      	b.n	800220a <_Z7inverse6Matrix+0x66>
    for (i = 0; i < n; i++)
 80022a6:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 80022aa:	3301      	adds	r3, #1
 80022ac:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
 80022b0:	e7a2      	b.n	80021f8 <_Z7inverse6Matrix+0x54>
              }
           }
       /************** partial pivoting **************/
       for (i = n; i >= 1; i--)
 80022b2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80022b6:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
 80022ba:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d07e      	beq.n	80023c0 <_Z7inverse6Matrix+0x21c>
       {
           if (temp.data[(i - 1)*n2 + 1] < temp.data[i*n2 + 1])
 80022c2:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 80022c6:	3b01      	subs	r3, #1
 80022c8:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80022cc:	fb02 f303 	mul.w	r3, r2, r3
 80022d0:	3301      	adds	r3, #1
 80022d2:	f107 0208 	add.w	r2, r7, #8
 80022d6:	3302      	adds	r3, #2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4413      	add	r3, r2
 80022dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022e0:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 80022e4:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80022e8:	fb02 f303 	mul.w	r3, r2, r3
 80022ec:	3301      	adds	r3, #1
 80022ee:	f107 0208 	add.w	r2, r7, #8
 80022f2:	3302      	adds	r3, #2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	4413      	add	r3, r2
 80022f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80022fc:	461a      	mov	r2, r3
 80022fe:	4623      	mov	r3, r4
 8002300:	f7fe fb9c 	bl	8000a3c <__aeabi_dcmplt>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d054      	beq.n	80023b4 <_Z7inverse6Matrix+0x210>
               for (j = 0; j < n2; j++)
 800230a:	2300      	movs	r3, #0
 800230c:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
 8002310:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 8002314:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8002318:	429a      	cmp	r2, r3
 800231a:	dd4b      	ble.n	80023b4 <_Z7inverse6Matrix+0x210>
               {
                   d = temp.data[i*n2 + j];
 800231c:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 8002320:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8002324:	fb02 f203 	mul.w	r2, r2, r3
 8002328:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 800232c:	4413      	add	r3, r2
 800232e:	f107 0208 	add.w	r2, r7, #8
 8002332:	3302      	adds	r3, #2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	4413      	add	r3, r2
 8002338:	e9d3 3400 	ldrd	r3, r4, [r3]
 800233c:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
                   temp.data[i*n2 + j] = temp.data[(i - 1)*n2 + j];
 8002340:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 8002344:	3b01      	subs	r3, #1
 8002346:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800234a:	fb02 f203 	mul.w	r2, r2, r3
 800234e:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 8002352:	4413      	add	r3, r2
 8002354:	f897 21b7 	ldrb.w	r2, [r7, #439]	; 0x1b7
 8002358:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 800235c:	fb01 f102 	mul.w	r1, r1, r2
 8002360:	f897 21b6 	ldrb.w	r2, [r7, #438]	; 0x1b6
 8002364:	440a      	add	r2, r1
 8002366:	f107 0108 	add.w	r1, r7, #8
 800236a:	3302      	adds	r3, #2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	440b      	add	r3, r1
 8002370:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002374:	f107 0108 	add.w	r1, r7, #8
 8002378:	3202      	adds	r2, #2
 800237a:	00d2      	lsls	r2, r2, #3
 800237c:	440a      	add	r2, r1
 800237e:	e9c2 3400 	strd	r3, r4, [r2]
                   temp.data[(i - 1)*n2 + j] = d;
 8002382:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 8002386:	3b01      	subs	r3, #1
 8002388:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800238c:	fb02 f203 	mul.w	r2, r2, r3
 8002390:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 8002394:	4413      	add	r3, r2
 8002396:	f107 0208 	add.w	r2, r7, #8
 800239a:	3302      	adds	r3, #2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	441a      	add	r2, r3
 80023a0:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 80023a4:	e9c2 3400 	strd	r3, r4, [r2]
               for (j = 0; j < n2; j++)
 80023a8:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 80023ac:	3301      	adds	r3, #1
 80023ae:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
 80023b2:	e7ad      	b.n	8002310 <_Z7inverse6Matrix+0x16c>
       for (i = n; i >= 1; i--)
 80023b4:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 80023b8:	3b01      	subs	r3, #1
 80023ba:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
 80023be:	e77c      	b.n	80022ba <_Z7inverse6Matrix+0x116>
               }
       }
////
//       /********** reducing to diagonal  matrix ***********/
//
       for (i = 0; i < n; i++)
 80023c0:	2300      	movs	r3, #0
 80023c2:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
 80023c6:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 80023ca:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 80023ce:	429a      	cmp	r2, r3
 80023d0:	f340 8091 	ble.w	80024f6 <_Z7inverse6Matrix+0x352>
       {
           for (j = 0; j < n2; j++)
 80023d4:	2300      	movs	r3, #0
 80023d6:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
 80023da:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 80023de:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80023e2:	429a      	cmp	r2, r3
 80023e4:	f340 8081 	ble.w	80024ea <_Z7inverse6Matrix+0x346>
               if (j != i)
 80023e8:	f897 21b6 	ldrb.w	r2, [r7, #438]	; 0x1b6
 80023ec:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d074      	beq.n	80024de <_Z7inverse6Matrix+0x33a>
               {
                   d = temp.data[j*n2 + i] / temp.data[i*n2 + i];
 80023f4:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 80023f8:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80023fc:	fb02 f203 	mul.w	r2, r2, r3
 8002400:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 8002404:	4413      	add	r3, r2
 8002406:	f107 0208 	add.w	r2, r7, #8
 800240a:	3302      	adds	r3, #2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	4413      	add	r3, r2
 8002410:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002414:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002418:	3301      	adds	r3, #1
 800241a:	f897 21b7 	ldrb.w	r2, [r7, #439]	; 0x1b7
 800241e:	fb02 f303 	mul.w	r3, r2, r3
 8002422:	f107 0208 	add.w	r2, r7, #8
 8002426:	3302      	adds	r3, #2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	4413      	add	r3, r2
 800242c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002430:	461a      	mov	r2, r3
 8002432:	4623      	mov	r3, r4
 8002434:	f7fe f9ba 	bl	80007ac <__aeabi_ddiv>
 8002438:	4603      	mov	r3, r0
 800243a:	460c      	mov	r4, r1
 800243c:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
                   for (k = 0; k < n2; k++)
 8002440:	2300      	movs	r3, #0
 8002442:	f887 31b5 	strb.w	r3, [r7, #437]	; 0x1b5
 8002446:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 800244a:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800244e:	429a      	cmp	r2, r3
 8002450:	dd45      	ble.n	80024de <_Z7inverse6Matrix+0x33a>
                	   temp.data[j*n2 + k] -= temp.data[i*n2 + k] * d;
 8002452:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 8002456:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800245a:	fb02 f203 	mul.w	r2, r2, r3
 800245e:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 8002462:	4413      	add	r3, r2
 8002464:	f107 0208 	add.w	r2, r7, #8
 8002468:	3302      	adds	r3, #2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	4413      	add	r3, r2
 800246e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002472:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 8002476:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800247a:	fb02 f203 	mul.w	r2, r2, r3
 800247e:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 8002482:	4413      	add	r3, r2
 8002484:	f107 0208 	add.w	r2, r7, #8
 8002488:	3302      	adds	r3, #2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4413      	add	r3, r2
 800248e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002492:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8002496:	f7fe f85f 	bl	8000558 <__aeabi_dmul>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4610      	mov	r0, r2
 80024a0:	4619      	mov	r1, r3
 80024a2:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 80024a6:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80024aa:	fb02 f203 	mul.w	r2, r2, r3
 80024ae:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 80024b2:	18d6      	adds	r6, r2, r3
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	4620      	mov	r0, r4
 80024ba:	4629      	mov	r1, r5
 80024bc:	f7fd fe94 	bl	80001e8 <__aeabi_dsub>
 80024c0:	4603      	mov	r3, r0
 80024c2:	460c      	mov	r4, r1
 80024c4:	f107 0108 	add.w	r1, r7, #8
 80024c8:	1cb2      	adds	r2, r6, #2
 80024ca:	00d2      	lsls	r2, r2, #3
 80024cc:	440a      	add	r2, r1
 80024ce:	e9c2 3400 	strd	r3, r4, [r2]
                   for (k = 0; k < n2; k++)
 80024d2:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 80024d6:	3301      	adds	r3, #1
 80024d8:	f887 31b5 	strb.w	r3, [r7, #437]	; 0x1b5
 80024dc:	e7b3      	b.n	8002446 <_Z7inverse6Matrix+0x2a2>
           for (j = 0; j < n2; j++)
 80024de:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 80024e2:	3301      	adds	r3, #1
 80024e4:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
 80024e8:	e777      	b.n	80023da <_Z7inverse6Matrix+0x236>
       for (i = 0; i < n; i++)
 80024ea:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 80024ee:	3301      	adds	r3, #1
 80024f0:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
 80024f4:	e767      	b.n	80023c6 <_Z7inverse6Matrix+0x222>
               }
       }
//       /************** reducing to unit matrix *************/
       for (i = 0; i < n; i++)
 80024f6:	2300      	movs	r3, #0
 80024f8:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
 80024fc:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 8002500:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8002504:	429a      	cmp	r2, r3
 8002506:	dd4d      	ble.n	80025a4 <_Z7inverse6Matrix+0x400>
       {
           d = temp.data[i*n2 + i];
 8002508:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800250c:	3301      	adds	r3, #1
 800250e:	f897 21b7 	ldrb.w	r2, [r7, #439]	; 0x1b7
 8002512:	fb02 f303 	mul.w	r3, r2, r3
 8002516:	f107 0208 	add.w	r2, r7, #8
 800251a:	3302      	adds	r3, #2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4413      	add	r3, r2
 8002520:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002524:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
           for (j = 0; j <= n2; j++)
 8002528:	2300      	movs	r3, #0
 800252a:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
 800252e:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 8002532:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8002536:	429a      	cmp	r2, r3
 8002538:	db2b      	blt.n	8002592 <_Z7inverse6Matrix+0x3ee>
        	   temp.data[i*n2 + j] = temp.data[i*n2 + j] / d;
 800253a:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 800253e:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8002542:	fb02 f203 	mul.w	r2, r2, r3
 8002546:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 800254a:	4413      	add	r3, r2
 800254c:	f107 0208 	add.w	r2, r7, #8
 8002550:	3302      	adds	r3, #2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4413      	add	r3, r2
 8002556:	e9d3 0100 	ldrd	r0, r1, [r3]
 800255a:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 800255e:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8002562:	fb02 f203 	mul.w	r2, r2, r3
 8002566:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 800256a:	18d5      	adds	r5, r2, r3
 800256c:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8002570:	f7fe f91c 	bl	80007ac <__aeabi_ddiv>
 8002574:	4603      	mov	r3, r0
 8002576:	460c      	mov	r4, r1
 8002578:	f107 0108 	add.w	r1, r7, #8
 800257c:	1caa      	adds	r2, r5, #2
 800257e:	00d2      	lsls	r2, r2, #3
 8002580:	440a      	add	r2, r1
 8002582:	e9c2 3400 	strd	r3, r4, [r2]
           for (j = 0; j <= n2; j++)
 8002586:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 800258a:	3301      	adds	r3, #1
 800258c:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
 8002590:	e7cd      	b.n	800252e <_Z7inverse6Matrix+0x38a>
       for (i = 0; i < n; i++)
 8002592:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 8002596:	3301      	adds	r3, #1
 8002598:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
 800259c:	e7ae      	b.n	80024fc <_Z7inverse6Matrix+0x358>
 800259e:	bf00      	nop
 80025a0:	3ff00000 	.word	0x3ff00000
       }
       for(i = 0; i < n; i++){
 80025a4:	2300      	movs	r3, #0
 80025a6:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
 80025aa:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 80025ae:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 80025b2:	429a      	cmp	r2, r3
 80025b4:	dd37      	ble.n	8002626 <_Z7inverse6Matrix+0x482>
    	   for(j = 0; j < n; j++){
 80025b6:	2300      	movs	r3, #0
 80025b8:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
 80025bc:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 80025c0:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 80025c4:	429a      	cmp	r2, r3
 80025c6:	dd28      	ble.n	800261a <_Z7inverse6Matrix+0x476>
    		   inverse.data[i*n + j] = temp.data[i*n2 + j + n];
 80025c8:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 80025cc:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80025d0:	fb02 f203 	mul.w	r2, r2, r3
 80025d4:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 80025d8:	441a      	add	r2, r3
 80025da:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80025de:	4413      	add	r3, r2
 80025e0:	f897 21b7 	ldrb.w	r2, [r7, #439]	; 0x1b7
 80025e4:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 80025e8:	fb01 f102 	mul.w	r1, r1, r2
 80025ec:	f897 21b6 	ldrb.w	r2, [r7, #438]	; 0x1b6
 80025f0:	440a      	add	r2, r1
 80025f2:	f107 0108 	add.w	r1, r7, #8
 80025f6:	3302      	adds	r3, #2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	440b      	add	r3, r1
 80025fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002600:	1d39      	adds	r1, r7, #4
 8002602:	6809      	ldr	r1, [r1, #0]
 8002604:	3202      	adds	r2, #2
 8002606:	00d2      	lsls	r2, r2, #3
 8002608:	440a      	add	r2, r1
 800260a:	e9c2 3400 	strd	r3, r4, [r2]
    	   for(j = 0; j < n; j++){
 800260e:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 8002612:	3301      	adds	r3, #1
 8002614:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
 8002618:	e7d0      	b.n	80025bc <_Z7inverse6Matrix+0x418>
       for(i = 0; i < n; i++){
 800261a:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 800261e:	3301      	adds	r3, #1
 8002620:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
 8002624:	e7c1      	b.n	80025aa <_Z7inverse6Matrix+0x406>
    	   }
       }
    return inverse;
 8002626:	bf00      	nop
    Matrix temp = Matrix(a.col,2*a.col);
 8002628:	f107 0308 	add.w	r3, r7, #8
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff fba1 	bl	8001d74 <_ZN6MatrixD1Ev>
    return inverse;
 8002632:	1d3b      	adds	r3, r7, #4
 8002634:	1d3a      	adds	r2, r7, #4
 8002636:	6812      	ldr	r2, [r2, #0]
 8002638:	601a      	str	r2, [r3, #0]
}
 800263a:	1d3b      	adds	r3, r7, #4
 800263c:	6818      	ldr	r0, [r3, #0]
 800263e:	f507 77de 	add.w	r7, r7, #444	; 0x1bc
 8002642:	46bd      	mov	sp, r7
 8002644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002646:	bf00      	nop

08002648 <_ZN3EKF7loadEKFEPdS0_S0_S0_>:
	Matrix S = Matrix(3,3);
	Matrix R = Matrix(3,3);
	Matrix I = diag_mat(7, 7);
	Matrix w = Matrix(3,1);
public:
	void loadEKF(double* x_, double *P_, double* Q_, double*R_){
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
 8002654:	603b      	str	r3, [r7, #0]
	      this->x.get_value(x_);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	3308      	adds	r3, #8
 800265a:	68b9      	ldr	r1, [r7, #8]
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff faa5 	bl	8001bac <_ZN6Matrix9get_valueEPd>
	      this->P.get_value(P_);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff fa9e 	bl	8001bac <_ZN6Matrix9get_valueEPd>
	      this->Q.get_value(Q_);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002676:	6839      	ldr	r1, [r7, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff fa97 	bl	8001bac <_ZN6Matrix9get_valueEPd>
	      this->R.get_value(R_);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f503 6366 	add.w	r3, r3, #3680	; 0xe60
 8002684:	69b9      	ldr	r1, [r7, #24]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fa90 	bl	8001bac <_ZN6Matrix9get_valueEPd>
	}
 800268c:	bf00      	nop
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	0000      	movs	r0, r0
	...

08002698 <_ZN3EKF9updateEKFE8IMU_dataf>:
	EKF(double* x_, double *P_, double* Q_, double*R_);
	quaternion updateEKF(IMU_data data_imu, float dt){
 8002698:	b084      	sub	sp, #16
 800269a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800269c:	f5ad 4d91 	sub.w	sp, sp, #18560	; 0x4880
 80026a0:	b08b      	sub	sp, #44	; 0x2c
 80026a2:	af0e      	add	r7, sp, #56	; 0x38
 80026a4:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80026a8:	3c5c      	subs	r4, #92	; 0x5c
 80026aa:	6020      	str	r0, [r4, #0]
 80026ac:	f507 4091 	add.w	r0, r7, #18560	; 0x4880
 80026b0:	f100 000c 	add.w	r0, r0, #12
 80026b4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80026b8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80026bc:	3b60      	subs	r3, #96	; 0x60
 80026be:	ed83 0a00 	vstr	s0, [r3]
          quaternion state;
          if(!isnan(data_imu.Acc_x) &&!isnan(data_imu.Acc_y)&&!isnan(data_imu.Acc_z)&&!isnan(data_imu.Gyro_x)&&!isnan(data_imu.Gyro_y)&&!isnan(data_imu.Gyro_z)){
 80026c2:	f507 4391 	add.w	r3, r7, #18560	; 0x4880
 80026c6:	f103 0318 	add.w	r3, r3, #24
 80026ca:	edd3 7a00 	vldr	s15, [r3]
 80026ce:	eeb0 0a67 	vmov.f32	s0, s15
 80026d2:	f7fe fc4f 	bl	8000f74 <_ZSt5isnanf>
 80026d6:	4603      	mov	r3, r0
 80026d8:	f083 0301 	eor.w	r3, r3, #1
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d051      	beq.n	8002786 <_ZN3EKF9updateEKFE8IMU_dataf+0xee>
 80026e2:	f507 4391 	add.w	r3, r7, #18560	; 0x4880
 80026e6:	f103 031c 	add.w	r3, r3, #28
 80026ea:	edd3 7a00 	vldr	s15, [r3]
 80026ee:	eeb0 0a67 	vmov.f32	s0, s15
 80026f2:	f7fe fc3f 	bl	8000f74 <_ZSt5isnanf>
 80026f6:	4603      	mov	r3, r0
 80026f8:	f083 0301 	eor.w	r3, r3, #1
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d041      	beq.n	8002786 <_ZN3EKF9updateEKFE8IMU_dataf+0xee>
 8002702:	f507 4391 	add.w	r3, r7, #18560	; 0x4880
 8002706:	f103 0320 	add.w	r3, r3, #32
 800270a:	edd3 7a00 	vldr	s15, [r3]
 800270e:	eeb0 0a67 	vmov.f32	s0, s15
 8002712:	f7fe fc2f 	bl	8000f74 <_ZSt5isnanf>
 8002716:	4603      	mov	r3, r0
 8002718:	f083 0301 	eor.w	r3, r3, #1
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d031      	beq.n	8002786 <_ZN3EKF9updateEKFE8IMU_dataf+0xee>
 8002722:	f507 4391 	add.w	r3, r7, #18560	; 0x4880
 8002726:	f103 030c 	add.w	r3, r3, #12
 800272a:	edd3 7a00 	vldr	s15, [r3]
 800272e:	eeb0 0a67 	vmov.f32	s0, s15
 8002732:	f7fe fc1f 	bl	8000f74 <_ZSt5isnanf>
 8002736:	4603      	mov	r3, r0
 8002738:	f083 0301 	eor.w	r3, r3, #1
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d021      	beq.n	8002786 <_ZN3EKF9updateEKFE8IMU_dataf+0xee>
 8002742:	f507 4391 	add.w	r3, r7, #18560	; 0x4880
 8002746:	f103 0310 	add.w	r3, r3, #16
 800274a:	edd3 7a00 	vldr	s15, [r3]
 800274e:	eeb0 0a67 	vmov.f32	s0, s15
 8002752:	f7fe fc0f 	bl	8000f74 <_ZSt5isnanf>
 8002756:	4603      	mov	r3, r0
 8002758:	f083 0301 	eor.w	r3, r3, #1
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d011      	beq.n	8002786 <_ZN3EKF9updateEKFE8IMU_dataf+0xee>
 8002762:	f507 4391 	add.w	r3, r7, #18560	; 0x4880
 8002766:	f103 0314 	add.w	r3, r3, #20
 800276a:	edd3 7a00 	vldr	s15, [r3]
 800276e:	eeb0 0a67 	vmov.f32	s0, s15
 8002772:	f7fe fbff 	bl	8000f74 <_ZSt5isnanf>
 8002776:	4603      	mov	r3, r0
 8002778:	f083 0301 	eor.w	r3, r3, #1
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <_ZN3EKF9updateEKFE8IMU_dataf+0xee>
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <_ZN3EKF9updateEKFE8IMU_dataf+0xf0>
 8002786:	2300      	movs	r3, #0
 8002788:	2b00      	cmp	r3, #0
 800278a:	f001 8067 	beq.w	800385c <_ZN3EKF9updateEKFE8IMU_dataf+0x11c4>
          w.data[0] = data_imu.Gyro_x*DEC2RAD;
 800278e:	f507 4391 	add.w	r3, r7, #18560	; 0x4880
 8002792:	f103 030c 	add.w	r3, r3, #12
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f7fd fe85 	bl	80004a8 <__aeabi_f2d>
 800279e:	f20f 4340 	addw	r3, pc, #1088	; 0x440
 80027a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a6:	f7fd fed7 	bl	8000558 <__aeabi_dmul>
 80027aa:	4603      	mov	r3, r0
 80027ac:	460c      	mov	r4, r1
 80027ae:	4619      	mov	r1, r3
 80027b0:	4622      	mov	r2, r4
 80027b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80027b6:	3b5c      	subs	r3, #92	; 0x5c
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f503 538d 	add.w	r3, r3, #4512	; 0x11a0
 80027be:	e9c3 1200 	strd	r1, r2, [r3]
          w.data[1] = data_imu.Gyro_y*DEC2RAD;
 80027c2:	f507 4391 	add.w	r3, r7, #18560	; 0x4880
 80027c6:	f103 0310 	add.w	r3, r3, #16
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fd fe6b 	bl	80004a8 <__aeabi_f2d>
 80027d2:	f20f 430c 	addw	r3, pc, #1036	; 0x40c
 80027d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027da:	f7fd febd 	bl	8000558 <__aeabi_dmul>
 80027de:	4603      	mov	r3, r0
 80027e0:	460c      	mov	r4, r1
 80027e2:	4619      	mov	r1, r3
 80027e4:	4622      	mov	r2, r4
 80027e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80027ea:	3b5c      	subs	r3, #92	; 0x5c
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f503 538d 	add.w	r3, r3, #4512	; 0x11a0
 80027f2:	3308      	adds	r3, #8
 80027f4:	e9c3 1200 	strd	r1, r2, [r3]
          w.data[2] = data_imu.Gyro_z*DEC2RAD;
 80027f8:	f507 4391 	add.w	r3, r7, #18560	; 0x4880
 80027fc:	f103 0314 	add.w	r3, r3, #20
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f7fd fe50 	bl	80004a8 <__aeabi_f2d>
 8002808:	a3f5      	add	r3, pc, #980	; (adr r3, 8002be0 <_ZN3EKF9updateEKFE8IMU_dataf+0x548>)
 800280a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280e:	f7fd fea3 	bl	8000558 <__aeabi_dmul>
 8002812:	4603      	mov	r3, r0
 8002814:	460c      	mov	r4, r1
 8002816:	4619      	mov	r1, r3
 8002818:	4622      	mov	r2, r4
 800281a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800281e:	3b5c      	subs	r3, #92	; 0x5c
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f503 538d 	add.w	r3, r3, #4512	; 0x11a0
 8002826:	3310      	adds	r3, #16
 8002828:	e9c3 1200 	strd	r1, r2, [r3]

          y.data[0] = data_imu.Acc_x;
 800282c:	f507 4391 	add.w	r3, r7, #18560	; 0x4880
 8002830:	f103 0318 	add.w	r3, r3, #24
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7fd fe36 	bl	80004a8 <__aeabi_f2d>
 800283c:	460a      	mov	r2, r1
 800283e:	4601      	mov	r1, r0
 8002840:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002844:	3b5c      	subs	r3, #92	; 0x5c
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	e9c3 126c 	strd	r1, r2, [r3, #432]	; 0x1b0
          y.data[1] = data_imu.Acc_y;
 800284c:	f507 4391 	add.w	r3, r7, #18560	; 0x4880
 8002850:	f103 031c 	add.w	r3, r3, #28
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7fd fe26 	bl	80004a8 <__aeabi_f2d>
 800285c:	460a      	mov	r2, r1
 800285e:	4601      	mov	r1, r0
 8002860:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002864:	3b5c      	subs	r3, #92	; 0x5c
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	e9c3 126e 	strd	r1, r2, [r3, #440]	; 0x1b8
          y.data[2] = data_imu.Acc_z;
 800286c:	f507 4391 	add.w	r3, r7, #18560	; 0x4880
 8002870:	f103 0320 	add.w	r3, r3, #32
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7fd fe16 	bl	80004a8 <__aeabi_f2d>
 800287c:	460a      	mov	r2, r1
 800287e:	4601      	mov	r1, r0
 8002880:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002884:	3b5c      	subs	r3, #92	; 0x5c
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	e9c3 1270 	strd	r1, r2, [r3, #448]	; 0x1c0

          double x0,x1,x2,x3,x0_,x1_,x2_,x3_,x02,x12,x22,x32,x02_,x12_,x22_,x32_;
          x0 = this->x.data[0]*0.5*dt;
 800288c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002890:	3b5c      	subs	r3, #92	; 0x5c
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	4bce      	ldr	r3, [pc, #824]	; (8002bd8 <_ZN3EKF9updateEKFE8IMU_dataf+0x540>)
 800289e:	f7fd fe5b 	bl	8000558 <__aeabi_dmul>
 80028a2:	4603      	mov	r3, r0
 80028a4:	460c      	mov	r4, r1
 80028a6:	4625      	mov	r5, r4
 80028a8:	461c      	mov	r4, r3
 80028aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80028ae:	3b60      	subs	r3, #96	; 0x60
 80028b0:	6818      	ldr	r0, [r3, #0]
 80028b2:	f7fd fdf9 	bl	80004a8 <__aeabi_f2d>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4620      	mov	r0, r4
 80028bc:	4629      	mov	r1, r5
 80028be:	f7fd fe4b 	bl	8000558 <__aeabi_dmul>
 80028c2:	4603      	mov	r3, r0
 80028c4:	460c      	mov	r4, r1
 80028c6:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 80028ca:	f102 0268 	add.w	r2, r2, #104	; 0x68
 80028ce:	e9c2 3400 	strd	r3, r4, [r2]
          x1 = this->x.data[1]*0.5*dt;
 80028d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80028d6:	3b5c      	subs	r3, #92	; 0x5c
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	4bbd      	ldr	r3, [pc, #756]	; (8002bd8 <_ZN3EKF9updateEKFE8IMU_dataf+0x540>)
 80028e4:	f7fd fe38 	bl	8000558 <__aeabi_dmul>
 80028e8:	4603      	mov	r3, r0
 80028ea:	460c      	mov	r4, r1
 80028ec:	4625      	mov	r5, r4
 80028ee:	461c      	mov	r4, r3
 80028f0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80028f4:	3b60      	subs	r3, #96	; 0x60
 80028f6:	6818      	ldr	r0, [r3, #0]
 80028f8:	f7fd fdd6 	bl	80004a8 <__aeabi_f2d>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4620      	mov	r0, r4
 8002902:	4629      	mov	r1, r5
 8002904:	f7fd fe28 	bl	8000558 <__aeabi_dmul>
 8002908:	4603      	mov	r3, r0
 800290a:	460c      	mov	r4, r1
 800290c:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8002910:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8002914:	e9c2 3400 	strd	r3, r4, [r2]
          x2 = this->x.data[2]*0.5*dt;
 8002918:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800291c:	3b5c      	subs	r3, #92	; 0x5c
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	4bab      	ldr	r3, [pc, #684]	; (8002bd8 <_ZN3EKF9updateEKFE8IMU_dataf+0x540>)
 800292a:	f7fd fe15 	bl	8000558 <__aeabi_dmul>
 800292e:	4603      	mov	r3, r0
 8002930:	460c      	mov	r4, r1
 8002932:	4625      	mov	r5, r4
 8002934:	461c      	mov	r4, r3
 8002936:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800293a:	3b60      	subs	r3, #96	; 0x60
 800293c:	6818      	ldr	r0, [r3, #0]
 800293e:	f7fd fdb3 	bl	80004a8 <__aeabi_f2d>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4620      	mov	r0, r4
 8002948:	4629      	mov	r1, r5
 800294a:	f7fd fe05 	bl	8000558 <__aeabi_dmul>
 800294e:	4603      	mov	r3, r0
 8002950:	460c      	mov	r4, r1
 8002952:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8002956:	f102 0258 	add.w	r2, r2, #88	; 0x58
 800295a:	e9c2 3400 	strd	r3, r4, [r2]
          x3 = this->x.data[3]*0.5*dt;
 800295e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002962:	3b5c      	subs	r3, #92	; 0x5c
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	4b9a      	ldr	r3, [pc, #616]	; (8002bd8 <_ZN3EKF9updateEKFE8IMU_dataf+0x540>)
 8002970:	f7fd fdf2 	bl	8000558 <__aeabi_dmul>
 8002974:	4603      	mov	r3, r0
 8002976:	460c      	mov	r4, r1
 8002978:	4625      	mov	r5, r4
 800297a:	461c      	mov	r4, r3
 800297c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002980:	3b60      	subs	r3, #96	; 0x60
 8002982:	6818      	ldr	r0, [r3, #0]
 8002984:	f7fd fd90 	bl	80004a8 <__aeabi_f2d>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4620      	mov	r0, r4
 800298e:	4629      	mov	r1, r5
 8002990:	f7fd fde2 	bl	8000558 <__aeabi_dmul>
 8002994:	4603      	mov	r3, r0
 8002996:	460c      	mov	r4, r1
 8002998:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 800299c:	f102 0250 	add.w	r2, r2, #80	; 0x50
 80029a0:	e9c2 3400 	strd	r3, r4, [r2]

          x02 = this->x.data[0]*2;
 80029a4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80029a8:	3b5c      	subs	r3, #92	; 0x5c
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	f7fd fc1a 	bl	80001ec <__adddf3>
 80029b8:	4603      	mov	r3, r0
 80029ba:	460c      	mov	r4, r1
 80029bc:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 80029c0:	f102 0248 	add.w	r2, r2, #72	; 0x48
 80029c4:	e9c2 3400 	strd	r3, r4, [r2]
          x12 = this->x.data[1]*2;
 80029c8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80029cc:	3b5c      	subs	r3, #92	; 0x5c
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	f7fd fc08 	bl	80001ec <__adddf3>
 80029dc:	4603      	mov	r3, r0
 80029de:	460c      	mov	r4, r1
 80029e0:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 80029e4:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80029e8:	e9c2 3400 	strd	r3, r4, [r2]
          x22 = this->x.data[2]*2;
 80029ec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80029f0:	3b5c      	subs	r3, #92	; 0x5c
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	f7fd fbf6 	bl	80001ec <__adddf3>
 8002a00:	4603      	mov	r3, r0
 8002a02:	460c      	mov	r4, r1
 8002a04:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8002a08:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8002a0c:	e9c2 3400 	strd	r3, r4, [r2]
          x32 = this->x.data[3]*2;
 8002a10:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002a14:	3b5c      	subs	r3, #92	; 0x5c
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	f7fd fbe4 	bl	80001ec <__adddf3>
 8002a24:	4603      	mov	r3, r0
 8002a26:	460c      	mov	r4, r1
 8002a28:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8002a2c:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8002a30:	e9c2 3400 	strd	r3, r4, [r2]

          x0_ = -x0;
 8002a34:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002a38:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8002a42:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8002a46:	6013      	str	r3, [r2, #0]
 8002a48:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002a4c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002a56:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8002a5a:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002a5e:	6013      	str	r3, [r2, #0]
          x1_ = -x1;
 8002a60:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002a64:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8002a6e:	f102 0220 	add.w	r2, r2, #32
 8002a72:	6013      	str	r3, [r2, #0]
 8002a74:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002a78:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002a82:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8002a86:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8002a8a:	6013      	str	r3, [r2, #0]
          x2_ = -x2;
 8002a8c:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002a90:	f103 0358 	add.w	r3, r3, #88	; 0x58
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8002a9a:	f102 0218 	add.w	r2, r2, #24
 8002a9e:	6013      	str	r3, [r2, #0]
 8002aa0:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002aa4:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002aae:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8002ab2:	f102 021c 	add.w	r2, r2, #28
 8002ab6:	6013      	str	r3, [r2, #0]
          x3_ = -x3;
 8002ab8:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002abc:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8002ac6:	f102 0210 	add.w	r2, r2, #16
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002ad0:	f103 0354 	add.w	r3, r3, #84	; 0x54
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002ada:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8002ade:	f102 0214 	add.w	r2, r2, #20
 8002ae2:	6013      	str	r3, [r2, #0]

          x02_ = -x02;
 8002ae4:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002ae8:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8002af2:	f102 0208 	add.w	r2, r2, #8
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002afc:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002b06:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8002b0a:	f102 020c 	add.w	r2, r2, #12
 8002b0e:	6013      	str	r3, [r2, #0]
          x12_ = -x12;
 8002b10:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002b14:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002b24:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002b2e:	f507 4290 	add.w	r2, r7, #18432	; 0x4800
 8002b32:	f102 0204 	add.w	r2, r2, #4
 8002b36:	6013      	str	r3, [r2, #0]
          x22_ = -x22;
 8002b38:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002b3c:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f507 428f 	add.w	r2, r7, #18304	; 0x4780
 8002b46:	f102 0278 	add.w	r2, r2, #120	; 0x78
 8002b4a:	6013      	str	r3, [r2, #0]
 8002b4c:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002b50:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002b5a:	f507 428f 	add.w	r2, r7, #18304	; 0x4780
 8002b5e:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8002b62:	6013      	str	r3, [r2, #0]
          x32_ = -x32;
 8002b64:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002b68:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f507 428f 	add.w	r2, r7, #18304	; 0x4780
 8002b72:	f102 0270 	add.w	r2, r2, #112	; 0x70
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002b7c:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002b86:	f507 428f 	add.w	r2, r7, #18304	; 0x4780
 8002b8a:	f102 0274 	add.w	r2, r2, #116	; 0x74
 8002b8e:	6013      	str	r3, [r2, #0]
         A.data[0] = 1;
 8002b90:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002b94:	3b5c      	subs	r3, #92	; 0x5c
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	4c0f      	ldr	r4, [pc, #60]	; (8002bdc <_ZN3EKF9updateEKFE8IMU_dataf+0x544>)
 8002b9e:	e9c2 34d2 	strd	r3, r4, [r2, #840]	; 0x348
         A.data[8] = 1;
 8002ba2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002ba6:	3b5c      	subs	r3, #92	; 0x5c
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	f04f 0300 	mov.w	r3, #0
 8002bae:	4c0b      	ldr	r4, [pc, #44]	; (8002bdc <_ZN3EKF9updateEKFE8IMU_dataf+0x544>)
 8002bb0:	e9c2 34e2 	strd	r3, r4, [r2, #904]	; 0x388
         A.data[16] = 1;
 8002bb4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002bb8:	3b5c      	subs	r3, #92	; 0x5c
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	f04f 0300 	mov.w	r3, #0
 8002bc0:	4c06      	ldr	r4, [pc, #24]	; (8002bdc <_ZN3EKF9updateEKFE8IMU_dataf+0x544>)
 8002bc2:	e9c2 34f2 	strd	r3, r4, [r2, #968]	; 0x3c8
         A.data[24] = 1;
 8002bc6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002bca:	3b5c      	subs	r3, #92	; 0x5c
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f503 6281 	add.w	r2, r3, #1032	; 0x408
 8002bd2:	f04f 0300 	mov.w	r3, #0
 8002bd6:	e007      	b.n	8002be8 <_ZN3EKF9updateEKFE8IMU_dataf+0x550>
 8002bd8:	3fe00000 	.word	0x3fe00000
 8002bdc:	3ff00000 	.word	0x3ff00000
 8002be0:	a226e211 	.word	0xa226e211
 8002be4:	3f91df46 	.word	0x3f91df46
 8002be8:	4cb7      	ldr	r4, [pc, #732]	; (8002ec8 <_ZN3EKF9updateEKFE8IMU_dataf+0x830>)
 8002bea:	e9c2 3400 	strd	r3, r4, [r2]
         A.data[32] = 1;
 8002bee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002bf2:	3b5c      	subs	r3, #92	; 0x5c
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f503 6289 	add.w	r2, r3, #1096	; 0x448
 8002bfa:	f04f 0300 	mov.w	r3, #0
 8002bfe:	4cb2      	ldr	r4, [pc, #712]	; (8002ec8 <_ZN3EKF9updateEKFE8IMU_dataf+0x830>)
 8002c00:	e9c2 3400 	strd	r3, r4, [r2]
         A.data[40] = 1;
 8002c04:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002c08:	3b5c      	subs	r3, #92	; 0x5c
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f503 6291 	add.w	r2, r3, #1160	; 0x488
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	4cac      	ldr	r4, [pc, #688]	; (8002ec8 <_ZN3EKF9updateEKFE8IMU_dataf+0x830>)
 8002c16:	e9c2 3400 	strd	r3, r4, [r2]
         A.data[48] = 1;
 8002c1a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002c1e:	3b5c      	subs	r3, #92	; 0x5c
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f503 6299 	add.w	r2, r3, #1224	; 0x4c8
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	4ca7      	ldr	r4, [pc, #668]	; (8002ec8 <_ZN3EKF9updateEKFE8IMU_dataf+0x830>)
 8002c2c:	e9c2 3400 	strd	r3, r4, [r2]

         A.data[4] = x1;
 8002c30:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002c34:	3b5c      	subs	r3, #92	; 0x5c
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002c3c:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8002c40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c44:	e9c2 34da 	strd	r3, r4, [r2, #872]	; 0x368
         A.data[5] = x2;
 8002c48:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002c4c:	3b5c      	subs	r3, #92	; 0x5c
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002c54:	f103 0358 	add.w	r3, r3, #88	; 0x58
 8002c58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c5c:	e9c2 34dc 	strd	r3, r4, [r2, #880]	; 0x370
         A.data[6] = x3;
 8002c60:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002c64:	3b5c      	subs	r3, #92	; 0x5c
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002c6c:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8002c70:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c74:	e9c2 34de 	strd	r3, r4, [r2, #888]	; 0x378

         A.data[11] = x0_;
 8002c78:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002c7c:	3b5c      	subs	r3, #92	; 0x5c
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002c84:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002c88:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c8c:	e9c2 34e8 	strd	r3, r4, [r2, #928]	; 0x3a0
         A.data[12] = x3;
 8002c90:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002c94:	3b5c      	subs	r3, #92	; 0x5c
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002c9c:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8002ca0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ca4:	e9c2 34ea 	strd	r3, r4, [r2, #936]	; 0x3a8
         A.data[13] = x2_;
 8002ca8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002cac:	3b5c      	subs	r3, #92	; 0x5c
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002cb4:	f103 0318 	add.w	r3, r3, #24
 8002cb8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002cbc:	e9c2 34ec 	strd	r3, r4, [r2, #944]	; 0x3b0

         A.data[18] = x3_;
 8002cc0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002cc4:	3b5c      	subs	r3, #92	; 0x5c
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002ccc:	f103 0310 	add.w	r3, r3, #16
 8002cd0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002cd4:	e9c2 34f6 	strd	r3, r4, [r2, #984]	; 0x3d8
         A.data[19] = x0_;
 8002cd8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002cdc:	3b5c      	subs	r3, #92	; 0x5c
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002ce4:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002ce8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002cec:	e9c2 34f8 	strd	r3, r4, [r2, #992]	; 0x3e0
         A.data[20] = x1;
 8002cf0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002cf4:	3b5c      	subs	r3, #92	; 0x5c
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002cfc:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8002d00:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d04:	e9c2 34fa 	strd	r3, r4, [r2, #1000]	; 0x3e8

         A.data[25] = x2;
 8002d08:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d0c:	3b5c      	subs	r3, #92	; 0x5c
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f503 6282 	add.w	r2, r3, #1040	; 0x410
 8002d14:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002d18:	f103 0358 	add.w	r3, r3, #88	; 0x58
 8002d1c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d20:	e9c2 3400 	strd	r3, r4, [r2]
         A.data[26] = x1_;
 8002d24:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d28:	3b5c      	subs	r3, #92	; 0x5c
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8002d30:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002d34:	f103 0320 	add.w	r3, r3, #32
 8002d38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d3c:	e9c2 3400 	strd	r3, r4, [r2]
         A.data[27] = x0_;
 8002d40:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d44:	3b5c      	subs	r3, #92	; 0x5c
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f503 6284 	add.w	r2, r3, #1056	; 0x420
 8002d4c:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002d50:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002d54:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d58:	e9c2 3400 	strd	r3, r4, [r2]

         B.data[1] = x1_;
 8002d5c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d60:	3b5c      	subs	r3, #92	; 0x5c
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f503 629d 	add.w	r2, r3, #1256	; 0x4e8
 8002d68:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002d6c:	f103 0320 	add.w	r3, r3, #32
 8002d70:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d74:	e9c2 3400 	strd	r3, r4, [r2]
         B.data[2] = x2_;
 8002d78:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d7c:	3b5c      	subs	r3, #92	; 0x5c
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f503 629e 	add.w	r2, r3, #1264	; 0x4f0
 8002d84:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002d88:	f103 0318 	add.w	r3, r3, #24
 8002d8c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d90:	e9c2 3400 	strd	r3, r4, [r2]
         B.data[3] = x3_;
 8002d94:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d98:	3b5c      	subs	r3, #92	; 0x5c
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f503 629f 	add.w	r2, r3, #1272	; 0x4f8
 8002da0:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002da4:	f103 0310 	add.w	r3, r3, #16
 8002da8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002dac:	e9c2 3400 	strd	r3, r4, [r2]

         B.data[4] = x0;
 8002db0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002db4:	3b5c      	subs	r3, #92	; 0x5c
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f503 62a0 	add.w	r2, r3, #1280	; 0x500
 8002dbc:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002dc0:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8002dc4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002dc8:	e9c2 3400 	strd	r3, r4, [r2]
         B.data[5] = x3_;
 8002dcc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002dd0:	3b5c      	subs	r3, #92	; 0x5c
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 8002dd8:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002ddc:	f103 0310 	add.w	r3, r3, #16
 8002de0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002de4:	e9c2 3400 	strd	r3, r4, [r2]
         B.data[6] = x2;
 8002de8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002dec:	3b5c      	subs	r3, #92	; 0x5c
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 8002df4:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002df8:	f103 0358 	add.w	r3, r3, #88	; 0x58
 8002dfc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e00:	e9c2 3400 	strd	r3, r4, [r2]

         B.data[7] = x3;
 8002e04:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002e08:	3b5c      	subs	r3, #92	; 0x5c
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f503 62a3 	add.w	r2, r3, #1304	; 0x518
 8002e10:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002e14:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8002e18:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e1c:	e9c2 3400 	strd	r3, r4, [r2]
         B.data[8] = x0;
 8002e20:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002e24:	3b5c      	subs	r3, #92	; 0x5c
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f503 62a4 	add.w	r2, r3, #1312	; 0x520
 8002e2c:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002e30:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8002e34:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e38:	e9c2 3400 	strd	r3, r4, [r2]
         B.data[9] = x1_;
 8002e3c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002e40:	3b5c      	subs	r3, #92	; 0x5c
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f503 62a5 	add.w	r2, r3, #1320	; 0x528
 8002e48:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002e4c:	f103 0320 	add.w	r3, r3, #32
 8002e50:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e54:	e9c2 3400 	strd	r3, r4, [r2]

         B.data[10] = x2_;
 8002e58:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002e5c:	3b5c      	subs	r3, #92	; 0x5c
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f503 62a6 	add.w	r2, r3, #1328	; 0x530
 8002e64:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002e68:	f103 0318 	add.w	r3, r3, #24
 8002e6c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e70:	e9c2 3400 	strd	r3, r4, [r2]
         B.data[11] = x1;
 8002e74:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002e78:	3b5c      	subs	r3, #92	; 0x5c
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f503 62a7 	add.w	r2, r3, #1336	; 0x538
 8002e80:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002e84:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8002e88:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e8c:	e9c2 3400 	strd	r3, r4, [r2]
         B.data[12] = x0;
 8002e90:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002e94:	3b5c      	subs	r3, #92	; 0x5c
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f503 62a8 	add.w	r2, r3, #1344	; 0x540
 8002e9c:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002ea0:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8002ea4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ea8:	e9c2 3400 	strd	r3, r4, [r2]

         H.data[0] = x22_;
 8002eac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002eb0:	3b5c      	subs	r3, #92	; 0x5c
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f603 12a8 	addw	r2, r3, #2472	; 0x9a8
 8002eb8:	f507 438f 	add.w	r3, r7, #18304	; 0x4780
 8002ebc:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8002ec0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ec4:	e002      	b.n	8002ecc <_ZN3EKF9updateEKFE8IMU_dataf+0x834>
 8002ec6:	bf00      	nop
 8002ec8:	3ff00000 	.word	0x3ff00000
 8002ecc:	e9c2 3400 	strd	r3, r4, [r2]
         H.data[1] = x32;
 8002ed0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002ed4:	3b5c      	subs	r3, #92	; 0x5c
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f503 621b 	add.w	r2, r3, #2480	; 0x9b0
 8002edc:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002ee0:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002ee4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ee8:	e9c2 3400 	strd	r3, r4, [r2]
         H.data[2] = x02_;
 8002eec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002ef0:	3b5c      	subs	r3, #92	; 0x5c
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f603 12b8 	addw	r2, r3, #2488	; 0x9b8
 8002ef8:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002efc:	f103 0308 	add.w	r3, r3, #8
 8002f00:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f04:	e9c2 3400 	strd	r3, r4, [r2]
         H.data[3] = x12;
 8002f08:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f0c:	3b5c      	subs	r3, #92	; 0x5c
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f503 621c 	add.w	r2, r3, #2496	; 0x9c0
 8002f14:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002f18:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8002f1c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f20:	e9c2 3400 	strd	r3, r4, [r2]

         H.data[7] = x12;
 8002f24:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f28:	3b5c      	subs	r3, #92	; 0x5c
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f503 621e 	add.w	r2, r3, #2528	; 0x9e0
 8002f30:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002f34:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8002f38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f3c:	e9c2 3400 	strd	r3, r4, [r2]
         H.data[8] = x02;
 8002f40:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f44:	3b5c      	subs	r3, #92	; 0x5c
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f603 12e8 	addw	r2, r3, #2536	; 0x9e8
 8002f4c:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002f50:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8002f54:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f58:	e9c2 3400 	strd	r3, r4, [r2]
         H.data[9] = x32;
 8002f5c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f60:	3b5c      	subs	r3, #92	; 0x5c
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f503 621f 	add.w	r2, r3, #2544	; 0x9f0
 8002f68:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002f6c:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002f70:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f74:	e9c2 3400 	strd	r3, r4, [r2]
         H.data[10] = x22;
 8002f78:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f7c:	3b5c      	subs	r3, #92	; 0x5c
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f603 12f8 	addw	r2, r3, #2552	; 0x9f8
 8002f84:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002f88:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002f8c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f90:	e9c2 3400 	strd	r3, r4, [r2]

         H.data[14] = x02;
 8002f94:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f98:	3b5c      	subs	r3, #92	; 0x5c
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f603 2218 	addw	r2, r3, #2584	; 0xa18
 8002fa0:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002fa4:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8002fa8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002fac:	e9c2 3400 	strd	r3, r4, [r2]
         H.data[15] = x12_;
 8002fb0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002fb4:	3b5c      	subs	r3, #92	; 0x5c
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f503 6222 	add.w	r2, r3, #2592	; 0xa20
 8002fbc:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002fc0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002fc4:	e9c2 3400 	strd	r3, r4, [r2]
         H.data[16] = x22_;
 8002fc8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002fcc:	3b5c      	subs	r3, #92	; 0x5c
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f603 2228 	addw	r2, r3, #2600	; 0xa28
 8002fd4:	f507 438f 	add.w	r3, r7, #18304	; 0x4780
 8002fd8:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8002fdc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002fe0:	e9c2 3400 	strd	r3, r4, [r2]
         H.data[17] = x32;
 8002fe4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002fe8:	3b5c      	subs	r3, #92	; 0x5c
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f503 6223 	add.w	r2, r3, #2608	; 0xa30
 8002ff0:	f507 4390 	add.w	r3, r7, #18432	; 0x4800
 8002ff4:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002ff8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ffc:	e9c2 3400 	strd	r3, r4, [r2]


         x = add_mat(mul_mat(A,x),mul_mat(B,w));
 8003000:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003004:	3b5c      	subs	r3, #92	; 0x5c
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f103 0408 	add.w	r4, r3, #8
 800300c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003010:	3b5c      	subs	r3, #92	; 0x5c
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f503 724e 	add.w	r2, r3, #824	; 0x338
 8003018:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800301c:	3b50      	subs	r3, #80	; 0x50
 800301e:	4611      	mov	r1, r2
 8003020:	4618      	mov	r0, r3
 8003022:	f7fe fec9 	bl	8001db8 <_ZN6MatrixC1ERKS_>
 8003026:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800302a:	3b5c      	subs	r3, #92	; 0x5c
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f103 0208 	add.w	r2, r3, #8
 8003032:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8003036:	3b38      	subs	r3, #56	; 0x38
 8003038:	4611      	mov	r1, r2
 800303a:	4618      	mov	r0, r3
 800303c:	f7fe febc 	bl	8001db8 <_ZN6MatrixC1ERKS_>
 8003040:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8003044:	3b68      	subs	r3, #104	; 0x68
 8003046:	f507 621f 	add.w	r2, r7, #2544	; 0x9f0
 800304a:	3a38      	subs	r2, #56	; 0x38
 800304c:	f507 6107 	add.w	r1, r7, #2160	; 0x870
 8003050:	3950      	subs	r1, #80	; 0x50
 8003052:	4618      	mov	r0, r3
 8003054:	f7fe ff0c 	bl	8001e70 <_Z7mul_mat6MatrixS_>
 8003058:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800305c:	3b5c      	subs	r3, #92	; 0x5c
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f503 629a 	add.w	r2, r3, #1232	; 0x4d0
 8003064:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8003068:	3b08      	subs	r3, #8
 800306a:	4611      	mov	r1, r2
 800306c:	4618      	mov	r0, r3
 800306e:	f7fe fea3 	bl	8001db8 <_ZN6MatrixC1ERKS_>
 8003072:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003076:	3b5c      	subs	r3, #92	; 0x5c
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f503 528c 	add.w	r2, r3, #4480	; 0x1180
 800307e:	3210      	adds	r2, #16
 8003080:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 8003084:	3b30      	subs	r3, #48	; 0x30
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f7fe fe95 	bl	8001db8 <_ZN6MatrixC1ERKS_>
 800308e:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8003092:	3b20      	subs	r3, #32
 8003094:	f507 626b 	add.w	r2, r7, #3760	; 0xeb0
 8003098:	3a30      	subs	r2, #48	; 0x30
 800309a:	f507 614f 	add.w	r1, r7, #3312	; 0xcf0
 800309e:	3908      	subs	r1, #8
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7fe fee5 	bl	8001e70 <_Z7mul_mat6MatrixS_>
 80030a6:	f507 609e 	add.w	r0, r7, #1264	; 0x4f0
 80030aa:	f507 6237 	add.w	r2, r7, #2928	; 0xb70
 80030ae:	3a20      	subs	r2, #32
 80030b0:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80030b4:	3b68      	subs	r3, #104	; 0x68
 80030b6:	4619      	mov	r1, r3
 80030b8:	f7fe ff56 	bl	8001f68 <_Z7add_mat6MatrixS_>
 80030bc:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80030c0:	4619      	mov	r1, r3
 80030c2:	4620      	mov	r0, r4
 80030c4:	f7ff f84a 	bl	800215c <_ZN6MatrixaSERKS_>
 80030c8:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fe fe51 	bl	8001d74 <_ZN6MatrixD1Ev>
 80030d2:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 80030d6:	3b20      	subs	r3, #32
 80030d8:	4618      	mov	r0, r3
 80030da:	f7fe fe4b 	bl	8001d74 <_ZN6MatrixD1Ev>
 80030de:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 80030e2:	3b30      	subs	r3, #48	; 0x30
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fe fe45 	bl	8001d74 <_ZN6MatrixD1Ev>
 80030ea:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 80030ee:	3b08      	subs	r3, #8
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fe fe3f 	bl	8001d74 <_ZN6MatrixD1Ev>
 80030f6:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80030fa:	3b68      	subs	r3, #104	; 0x68
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fe fe39 	bl	8001d74 <_ZN6MatrixD1Ev>
 8003102:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8003106:	3b38      	subs	r3, #56	; 0x38
 8003108:	4618      	mov	r0, r3
 800310a:	f7fe fe33 	bl	8001d74 <_ZN6MatrixD1Ev>
 800310e:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8003112:	3b50      	subs	r3, #80	; 0x50
 8003114:	4618      	mov	r0, r3
 8003116:	f7fe fe2d 	bl	8001d74 <_ZN6MatrixD1Ev>
         P = mul_mat(mul_mat(A,P), transpose(A));
 800311a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800311e:	3b5c      	subs	r3, #92	; 0x5c
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f503 64cd 	add.w	r4, r3, #1640	; 0x668
 8003126:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800312a:	3b5c      	subs	r3, #92	; 0x5c
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f503 724e 	add.w	r2, r3, #824	; 0x338
 8003132:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8003136:	f103 0310 	add.w	r3, r3, #16
 800313a:	3b28      	subs	r3, #40	; 0x28
 800313c:	4611      	mov	r1, r2
 800313e:	4618      	mov	r0, r3
 8003140:	f7fe fe3a 	bl	8001db8 <_ZN6MatrixC1ERKS_>
 8003144:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003148:	3b5c      	subs	r3, #92	; 0x5c
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f503 62cd 	add.w	r2, r3, #1640	; 0x668
 8003150:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 8003154:	f103 0310 	add.w	r3, r3, #16
 8003158:	3b10      	subs	r3, #16
 800315a:	4611      	mov	r1, r2
 800315c:	4618      	mov	r0, r3
 800315e:	f7fe fe2b 	bl	8001db8 <_ZN6MatrixC1ERKS_>
 8003162:	f507 508d 	add.w	r0, r7, #4512	; 0x11a0
 8003166:	f100 0010 	add.w	r0, r0, #16
 800316a:	f507 52a7 	add.w	r2, r7, #5344	; 0x14e0
 800316e:	f102 0210 	add.w	r2, r2, #16
 8003172:	3a10      	subs	r2, #16
 8003174:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8003178:	f103 0310 	add.w	r3, r3, #16
 800317c:	3b28      	subs	r3, #40	; 0x28
 800317e:	4619      	mov	r1, r3
 8003180:	f7fe fe76 	bl	8001e70 <_Z7mul_mat6MatrixS_>
 8003184:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003188:	3b5c      	subs	r3, #92	; 0x5c
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f503 724e 	add.w	r2, r3, #824	; 0x338
 8003190:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 8003194:	f103 0310 	add.w	r3, r3, #16
 8003198:	3b20      	subs	r3, #32
 800319a:	4611      	mov	r1, r2
 800319c:	4618      	mov	r0, r3
 800319e:	f7fe fe0b 	bl	8001db8 <_ZN6MatrixC1ERKS_>
 80031a2:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 80031a6:	f103 0310 	add.w	r3, r3, #16
 80031aa:	3b38      	subs	r3, #56	; 0x38
 80031ac:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 80031b0:	f102 0210 	add.w	r2, r2, #16
 80031b4:	3a20      	subs	r2, #32
 80031b6:	4611      	mov	r1, r2
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7fe ff8d 	bl	80020d8 <_Z9transpose6Matrix>
 80031be:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80031c2:	f103 0310 	add.w	r3, r3, #16
 80031c6:	3b18      	subs	r3, #24
 80031c8:	f507 52b5 	add.w	r2, r7, #5792	; 0x16a0
 80031cc:	f102 0210 	add.w	r2, r2, #16
 80031d0:	3a38      	subs	r2, #56	; 0x38
 80031d2:	f507 518d 	add.w	r1, r7, #4512	; 0x11a0
 80031d6:	f101 0110 	add.w	r1, r1, #16
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fe fe48 	bl	8001e70 <_Z7mul_mat6MatrixS_>
 80031e0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80031e4:	f103 0310 	add.w	r3, r3, #16
 80031e8:	3b18      	subs	r3, #24
 80031ea:	4619      	mov	r1, r3
 80031ec:	4620      	mov	r0, r4
 80031ee:	f7fe ffb5 	bl	800215c <_ZN6MatrixaSERKS_>
 80031f2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80031f6:	f103 0310 	add.w	r3, r3, #16
 80031fa:	3b18      	subs	r3, #24
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fe fdb9 	bl	8001d74 <_ZN6MatrixD1Ev>
 8003202:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8003206:	f103 0310 	add.w	r3, r3, #16
 800320a:	3b38      	subs	r3, #56	; 0x38
 800320c:	4618      	mov	r0, r3
 800320e:	f7fe fdb1 	bl	8001d74 <_ZN6MatrixD1Ev>
 8003212:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 8003216:	f103 0310 	add.w	r3, r3, #16
 800321a:	3b20      	subs	r3, #32
 800321c:	4618      	mov	r0, r3
 800321e:	f7fe fda9 	bl	8001d74 <_ZN6MatrixD1Ev>
 8003222:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8003226:	f103 0310 	add.w	r3, r3, #16
 800322a:	4618      	mov	r0, r3
 800322c:	f7fe fda2 	bl	8001d74 <_ZN6MatrixD1Ev>
 8003230:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 8003234:	f103 0310 	add.w	r3, r3, #16
 8003238:	3b10      	subs	r3, #16
 800323a:	4618      	mov	r0, r3
 800323c:	f7fe fd9a 	bl	8001d74 <_ZN6MatrixD1Ev>
 8003240:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8003244:	f103 0310 	add.w	r3, r3, #16
 8003248:	3b28      	subs	r3, #40	; 0x28
 800324a:	4618      	mov	r0, r3
 800324c:	f7fe fd92 	bl	8001d74 <_ZN6MatrixD1Ev>
         Matrix tem = mul_mat(P,transpose(H));
 8003250:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003254:	3b5c      	subs	r3, #92	; 0x5c
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f503 62cd 	add.w	r2, r3, #1640	; 0x668
 800325c:	f507 53cd 	add.w	r3, r7, #6560	; 0x19a0
 8003260:	f103 0310 	add.w	r3, r3, #16
 8003264:	3b08      	subs	r3, #8
 8003266:	4611      	mov	r1, r2
 8003268:	4618      	mov	r0, r3
 800326a:	f7fe fda5 	bl	8001db8 <_ZN6MatrixC1ERKS_>
 800326e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003272:	3b5c      	subs	r3, #92	; 0x5c
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f603 1298 	addw	r2, r3, #2456	; 0x998
 800327a:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 800327e:	f103 0310 	add.w	r3, r3, #16
 8003282:	3b18      	subs	r3, #24
 8003284:	4611      	mov	r1, r2
 8003286:	4618      	mov	r0, r3
 8003288:	f7fe fd96 	bl	8001db8 <_ZN6MatrixC1ERKS_>
 800328c:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8003290:	f103 0310 	add.w	r3, r3, #16
 8003294:	3b30      	subs	r3, #48	; 0x30
 8003296:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 800329a:	f102 0210 	add.w	r2, r2, #16
 800329e:	3a18      	subs	r2, #24
 80032a0:	4611      	mov	r1, r2
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fe ff18 	bl	80020d8 <_Z9transpose6Matrix>
 80032a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80032ac:	3b58      	subs	r3, #88	; 0x58
 80032ae:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 80032b2:	f102 0210 	add.w	r2, r2, #16
 80032b6:	3a30      	subs	r2, #48	; 0x30
 80032b8:	f507 51cd 	add.w	r1, r7, #6560	; 0x19a0
 80032bc:	f101 0110 	add.w	r1, r1, #16
 80032c0:	3908      	subs	r1, #8
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fe fdd4 	bl	8001e70 <_Z7mul_mat6MatrixS_>
 80032c8:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80032cc:	f103 0310 	add.w	r3, r3, #16
 80032d0:	3b30      	subs	r3, #48	; 0x30
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fe fd4e 	bl	8001d74 <_ZN6MatrixD1Ev>
 80032d8:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 80032dc:	f103 0310 	add.w	r3, r3, #16
 80032e0:	3b18      	subs	r3, #24
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fe fd46 	bl	8001d74 <_ZN6MatrixD1Ev>
 80032e8:	f507 53cd 	add.w	r3, r7, #6560	; 0x19a0
 80032ec:	f103 0310 	add.w	r3, r3, #16
 80032f0:	3b08      	subs	r3, #8
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7fe fd3e 	bl	8001d74 <_ZN6MatrixD1Ev>
         Matrix S = mul_mat(H,tem);
 80032f8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80032fc:	3b5c      	subs	r3, #92	; 0x5c
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f603 1298 	addw	r2, r3, #2456	; 0x998
 8003304:	f507 53f3 	add.w	r3, r7, #7776	; 0x1e60
 8003308:	f103 0310 	add.w	r3, r3, #16
 800330c:	4611      	mov	r1, r2
 800330e:	4618      	mov	r0, r3
 8003310:	f7fe fd52 	bl	8001db8 <_ZN6MatrixC1ERKS_>
 8003314:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8003318:	3a58      	subs	r2, #88	; 0x58
 800331a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800331e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8003322:	3b28      	subs	r3, #40	; 0x28
 8003324:	4611      	mov	r1, r2
 8003326:	4618      	mov	r0, r3
 8003328:	f7fe fd46 	bl	8001db8 <_ZN6MatrixC1ERKS_>
 800332c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003330:	3b40      	subs	r3, #64	; 0x40
 8003332:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8003336:	f102 0230 	add.w	r2, r2, #48	; 0x30
 800333a:	3a28      	subs	r2, #40	; 0x28
 800333c:	f507 51f3 	add.w	r1, r7, #7776	; 0x1e60
 8003340:	f101 0110 	add.w	r1, r1, #16
 8003344:	4618      	mov	r0, r3
 8003346:	f7fe fd93 	bl	8001e70 <_Z7mul_mat6MatrixS_>
 800334a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800334e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8003352:	3b28      	subs	r3, #40	; 0x28
 8003354:	4618      	mov	r0, r3
 8003356:	f7fe fd0d 	bl	8001d74 <_ZN6MatrixD1Ev>
 800335a:	f507 53f3 	add.w	r3, r7, #7776	; 0x1e60
 800335e:	f103 0310 	add.w	r3, r3, #16
 8003362:	4618      	mov	r0, r3
 8003364:	f7fe fd06 	bl	8001d74 <_ZN6MatrixD1Ev>
         S = inverse(S);
 8003368:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 800336c:	3a40      	subs	r2, #64	; 0x40
 800336e:	f507 530d 	add.w	r3, r7, #9024	; 0x2340
 8003372:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8003376:	3b38      	subs	r3, #56	; 0x38
 8003378:	4611      	mov	r1, r2
 800337a:	4618      	mov	r0, r3
 800337c:	f7fe fd1c 	bl	8001db8 <_ZN6MatrixC1ERKS_>
 8003380:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 8003384:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8003388:	3b10      	subs	r3, #16
 800338a:	f507 520d 	add.w	r2, r7, #9024	; 0x2340
 800338e:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8003392:	3a38      	subs	r2, #56	; 0x38
 8003394:	4611      	mov	r1, r2
 8003396:	4618      	mov	r0, r3
 8003398:	f7fe ff04 	bl	80021a4 <_Z7inverse6Matrix>
 800339c:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 80033a0:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80033a4:	3a10      	subs	r2, #16
 80033a6:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80033aa:	3b40      	subs	r3, #64	; 0x40
 80033ac:	4611      	mov	r1, r2
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fe fed4 	bl	800215c <_ZN6MatrixaSERKS_>
 80033b4:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 80033b8:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80033bc:	3b10      	subs	r3, #16
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fe fcd8 	bl	8001d74 <_ZN6MatrixD1Ev>
 80033c4:	f507 530d 	add.w	r3, r7, #9024	; 0x2340
 80033c8:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80033cc:	3b38      	subs	r3, #56	; 0x38
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fe fcd0 	bl	8001d74 <_ZN6MatrixD1Ev>
         K = mul_mat(mul_mat(tem,transpose(H)),S);
 80033d4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80033d8:	3b5c      	subs	r3, #92	; 0x5c
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f503 6433 	add.w	r4, r3, #2864	; 0xb30
 80033e0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80033e4:	3a58      	subs	r2, #88	; 0x58
 80033e6:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 80033ea:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80033ee:	3b30      	subs	r3, #48	; 0x30
 80033f0:	4611      	mov	r1, r2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fe fce0 	bl	8001db8 <_ZN6MatrixC1ERKS_>
 80033f8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80033fc:	3b5c      	subs	r3, #92	; 0x5c
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f603 1298 	addw	r2, r3, #2456	; 0x998
 8003404:	f507 532c 	add.w	r3, r7, #11008	; 0x2b00
 8003408:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800340c:	4611      	mov	r1, r2
 800340e:	4618      	mov	r0, r3
 8003410:	f7fe fcd2 	bl	8001db8 <_ZN6MatrixC1ERKS_>
 8003414:	f507 5326 	add.w	r3, r7, #10624	; 0x2980
 8003418:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800341c:	3b18      	subs	r3, #24
 800341e:	f507 522c 	add.w	r2, r7, #11008	; 0x2b00
 8003422:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8003426:	4611      	mov	r1, r2
 8003428:	4618      	mov	r0, r3
 800342a:	f7fe fe55 	bl	80020d8 <_Z9transpose6Matrix>
 800342e:	f507 5319 	add.w	r3, r7, #9792	; 0x2640
 8003432:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8003436:	3b08      	subs	r3, #8
 8003438:	f507 5226 	add.w	r2, r7, #10624	; 0x2980
 800343c:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8003440:	3a18      	subs	r2, #24
 8003442:	f507 5120 	add.w	r1, r7, #10240	; 0x2800
 8003446:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800344a:	3930      	subs	r1, #48	; 0x30
 800344c:	4618      	mov	r0, r3
 800344e:	f7fe fd0f 	bl	8001e70 <_Z7mul_mat6MatrixS_>
 8003452:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8003456:	3a40      	subs	r2, #64	; 0x40
 8003458:	f507 5333 	add.w	r3, r7, #11456	; 0x2cc0
 800345c:	f103 0310 	add.w	r3, r3, #16
 8003460:	3b08      	subs	r3, #8
 8003462:	4611      	mov	r1, r2
 8003464:	4618      	mov	r0, r3
 8003466:	f7fe fca7 	bl	8001db8 <_ZN6MatrixC1ERKS_>
 800346a:	f507 5313 	add.w	r3, r7, #9408	; 0x24c0
 800346e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8003472:	3b20      	subs	r3, #32
 8003474:	f507 5233 	add.w	r2, r7, #11456	; 0x2cc0
 8003478:	f102 0210 	add.w	r2, r2, #16
 800347c:	3a08      	subs	r2, #8
 800347e:	f507 5119 	add.w	r1, r7, #9792	; 0x2640
 8003482:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003486:	3908      	subs	r1, #8
 8003488:	4618      	mov	r0, r3
 800348a:	f7fe fcf1 	bl	8001e70 <_Z7mul_mat6MatrixS_>
 800348e:	f507 5313 	add.w	r3, r7, #9408	; 0x24c0
 8003492:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8003496:	3b20      	subs	r3, #32
 8003498:	4619      	mov	r1, r3
 800349a:	4620      	mov	r0, r4
 800349c:	f7fe fe5e 	bl	800215c <_ZN6MatrixaSERKS_>
 80034a0:	f507 5313 	add.w	r3, r7, #9408	; 0x24c0
 80034a4:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80034a8:	3b20      	subs	r3, #32
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fe fc62 	bl	8001d74 <_ZN6MatrixD1Ev>
 80034b0:	f507 5333 	add.w	r3, r7, #11456	; 0x2cc0
 80034b4:	f103 0310 	add.w	r3, r3, #16
 80034b8:	3b08      	subs	r3, #8
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fe fc5a 	bl	8001d74 <_ZN6MatrixD1Ev>
 80034c0:	f507 5319 	add.w	r3, r7, #9792	; 0x2640
 80034c4:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80034c8:	3b08      	subs	r3, #8
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fe fc52 	bl	8001d74 <_ZN6MatrixD1Ev>
 80034d0:	f507 5326 	add.w	r3, r7, #10624	; 0x2980
 80034d4:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80034d8:	3b18      	subs	r3, #24
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fe fc4a 	bl	8001d74 <_ZN6MatrixD1Ev>
 80034e0:	f507 532c 	add.w	r3, r7, #11008	; 0x2b00
 80034e4:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7fe fc43 	bl	8001d74 <_ZN6MatrixD1Ev>
 80034ee:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 80034f2:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80034f6:	3b30      	subs	r3, #48	; 0x30
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fe fc3b 	bl	8001d74 <_ZN6MatrixD1Ev>
         Matrix inovation = sub_mat(y,mul_mat(H,x));
 80034fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003502:	3b5c      	subs	r3, #92	; 0x5c
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 800350a:	f507 5339 	add.w	r3, r7, #11840	; 0x2e40
 800350e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8003512:	3b10      	subs	r3, #16
 8003514:	4611      	mov	r1, r2
 8003516:	4618      	mov	r0, r3
 8003518:	f7fe fc4e 	bl	8001db8 <_ZN6MatrixC1ERKS_>
 800351c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003520:	3b5c      	subs	r3, #92	; 0x5c
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f603 1298 	addw	r2, r3, #2456	; 0x998
 8003528:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 800352c:	f103 0310 	add.w	r3, r3, #16
 8003530:	4611      	mov	r1, r2
 8003532:	4618      	mov	r0, r3
 8003534:	f7fe fc40 	bl	8001db8 <_ZN6MatrixC1ERKS_>
 8003538:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800353c:	3b5c      	subs	r3, #92	; 0x5c
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f103 0208 	add.w	r2, r3, #8
 8003544:	f507 534c 	add.w	r3, r7, #13056	; 0x3300
 8003548:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800354c:	3b08      	subs	r3, #8
 800354e:	4611      	mov	r1, r2
 8003550:	4618      	mov	r0, r3
 8003552:	f7fe fc31 	bl	8001db8 <_ZN6MatrixC1ERKS_>
 8003556:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 800355a:	f103 0310 	add.w	r3, r3, #16
 800355e:	3b18      	subs	r3, #24
 8003560:	f507 524c 	add.w	r2, r7, #13056	; 0x3300
 8003564:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8003568:	3a08      	subs	r2, #8
 800356a:	f507 5146 	add.w	r1, r7, #12672	; 0x3180
 800356e:	f101 0110 	add.w	r1, r1, #16
 8003572:	4618      	mov	r0, r3
 8003574:	f7fe fc7c 	bl	8001e70 <_Z7mul_mat6MatrixS_>
 8003578:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800357c:	3b28      	subs	r3, #40	; 0x28
 800357e:	f507 5240 	add.w	r2, r7, #12288	; 0x3000
 8003582:	f102 0210 	add.w	r2, r2, #16
 8003586:	3a18      	subs	r2, #24
 8003588:	f507 5139 	add.w	r1, r7, #11840	; 0x2e40
 800358c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003590:	3910      	subs	r1, #16
 8003592:	4618      	mov	r0, r3
 8003594:	f7fe fd44 	bl	8002020 <_Z7sub_mat6MatrixS_>
 8003598:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 800359c:	f103 0310 	add.w	r3, r3, #16
 80035a0:	3b18      	subs	r3, #24
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fe fbe6 	bl	8001d74 <_ZN6MatrixD1Ev>
 80035a8:	f507 534c 	add.w	r3, r7, #13056	; 0x3300
 80035ac:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80035b0:	3b08      	subs	r3, #8
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7fe fbde 	bl	8001d74 <_ZN6MatrixD1Ev>
 80035b8:	f507 5346 	add.w	r3, r7, #12672	; 0x3180
 80035bc:	f103 0310 	add.w	r3, r3, #16
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fe fbd7 	bl	8001d74 <_ZN6MatrixD1Ev>
 80035c6:	f507 5339 	add.w	r3, r7, #11840	; 0x2e40
 80035ca:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80035ce:	3b10      	subs	r3, #16
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fe fbcf 	bl	8001d74 <_ZN6MatrixD1Ev>
         x = add_mat(x,mul_mat(K,inovation));
 80035d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80035da:	3b5c      	subs	r3, #92	; 0x5c
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f103 0408 	add.w	r4, r3, #8
 80035e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80035e6:	3b5c      	subs	r3, #92	; 0x5c
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f103 0208 	add.w	r2, r3, #8
 80035ee:	f507 5359 	add.w	r3, r7, #13888	; 0x3640
 80035f2:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80035f6:	3b18      	subs	r3, #24
 80035f8:	4611      	mov	r1, r2
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fe fbdc 	bl	8001db8 <_ZN6MatrixC1ERKS_>
 8003600:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003604:	3b5c      	subs	r3, #92	; 0x5c
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f503 6233 	add.w	r2, r3, #2864	; 0xb30
 800360c:	f507 5366 	add.w	r3, r7, #14720	; 0x3980
 8003610:	f103 0308 	add.w	r3, r3, #8
 8003614:	4611      	mov	r1, r2
 8003616:	4618      	mov	r0, r3
 8003618:	f7fe fbce 	bl	8001db8 <_ZN6MatrixC1ERKS_>
 800361c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003620:	3b28      	subs	r3, #40	; 0x28
 8003622:	f507 526c 	add.w	r2, r7, #15104	; 0x3b00
 8003626:	f102 0220 	add.w	r2, r2, #32
 800362a:	4619      	mov	r1, r3
 800362c:	4610      	mov	r0, r2
 800362e:	f7fe fbc3 	bl	8001db8 <_ZN6MatrixC1ERKS_>
 8003632:	f507 535f 	add.w	r3, r7, #14272	; 0x37c0
 8003636:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800363a:	f507 526c 	add.w	r2, r7, #15104	; 0x3b00
 800363e:	f102 0220 	add.w	r2, r2, #32
 8003642:	f507 5166 	add.w	r1, r7, #14720	; 0x3980
 8003646:	f101 0108 	add.w	r1, r1, #8
 800364a:	4618      	mov	r0, r3
 800364c:	f7fe fc10 	bl	8001e70 <_Z7mul_mat6MatrixS_>
 8003650:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8003654:	f103 0310 	add.w	r3, r3, #16
 8003658:	3b10      	subs	r3, #16
 800365a:	f507 525f 	add.w	r2, r7, #14272	; 0x37c0
 800365e:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8003662:	f507 5159 	add.w	r1, r7, #13888	; 0x3640
 8003666:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800366a:	3918      	subs	r1, #24
 800366c:	4618      	mov	r0, r3
 800366e:	f7fe fc7b 	bl	8001f68 <_Z7add_mat6MatrixS_>
 8003672:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8003676:	f103 0310 	add.w	r3, r3, #16
 800367a:	3b10      	subs	r3, #16
 800367c:	4619      	mov	r1, r3
 800367e:	4620      	mov	r0, r4
 8003680:	f7fe fd6c 	bl	800215c <_ZN6MatrixaSERKS_>
 8003684:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8003688:	f103 0310 	add.w	r3, r3, #16
 800368c:	3b10      	subs	r3, #16
 800368e:	4618      	mov	r0, r3
 8003690:	f7fe fb70 	bl	8001d74 <_ZN6MatrixD1Ev>
 8003694:	f507 535f 	add.w	r3, r7, #14272	; 0x37c0
 8003698:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800369c:	4618      	mov	r0, r3
 800369e:	f7fe fb69 	bl	8001d74 <_ZN6MatrixD1Ev>
 80036a2:	f507 536c 	add.w	r3, r7, #15104	; 0x3b00
 80036a6:	f103 0320 	add.w	r3, r3, #32
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fe fb62 	bl	8001d74 <_ZN6MatrixD1Ev>
 80036b0:	f507 5366 	add.w	r3, r7, #14720	; 0x3980
 80036b4:	f103 0308 	add.w	r3, r3, #8
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7fe fb5b 	bl	8001d74 <_ZN6MatrixD1Ev>
 80036be:	f507 5359 	add.w	r3, r7, #13888	; 0x3640
 80036c2:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80036c6:	3b18      	subs	r3, #24
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fe fb53 	bl	8001d74 <_ZN6MatrixD1Ev>
         P = mul_mat(sub_mat(I,mul_mat(K,H)),P);
 80036ce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80036d2:	3b5c      	subs	r3, #92	; 0x5c
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f503 64cd 	add.w	r4, r3, #1640	; 0x668
 80036da:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80036de:	3b5c      	subs	r3, #92	; 0x5c
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f603 72f8 	addw	r2, r3, #4088	; 0xff8
 80036e6:	f507 537f 	add.w	r3, r7, #16320	; 0x3fc0
 80036ea:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80036ee:	4611      	mov	r1, r2
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fe fb61 	bl	8001db8 <_ZN6MatrixC1ERKS_>
 80036f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80036fa:	3b5c      	subs	r3, #92	; 0x5c
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f503 6233 	add.w	r2, r3, #2864	; 0xb30
 8003702:	f507 4386 	add.w	r3, r7, #17152	; 0x4300
 8003706:	f103 0318 	add.w	r3, r3, #24
 800370a:	4611      	mov	r1, r2
 800370c:	4618      	mov	r0, r3
 800370e:	f7fe fb53 	bl	8001db8 <_ZN6MatrixC1ERKS_>
 8003712:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003716:	3b5c      	subs	r3, #92	; 0x5c
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f603 1298 	addw	r2, r3, #2456	; 0x998
 800371e:	f507 4389 	add.w	r3, r7, #17536	; 0x4480
 8003722:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8003726:	4611      	mov	r1, r2
 8003728:	4618      	mov	r0, r3
 800372a:	f7fe fb45 	bl	8001db8 <_ZN6MatrixC1ERKS_>
 800372e:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8003732:	f507 4289 	add.w	r2, r7, #17536	; 0x4480
 8003736:	f102 0230 	add.w	r2, r2, #48	; 0x30
 800373a:	f507 4186 	add.w	r1, r7, #17152	; 0x4300
 800373e:	f101 0118 	add.w	r1, r1, #24
 8003742:	4618      	mov	r0, r3
 8003744:	f7fe fb94 	bl	8001e70 <_Z7mul_mat6MatrixS_>
 8003748:	f507 5379 	add.w	r3, r7, #15936	; 0x3e40
 800374c:	f103 0310 	add.w	r3, r3, #16
 8003750:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8003754:	f507 517f 	add.w	r1, r7, #16320	; 0x3fc0
 8003758:	f101 0128 	add.w	r1, r1, #40	; 0x28
 800375c:	4618      	mov	r0, r3
 800375e:	f7fe fc5f 	bl	8002020 <_Z7sub_mat6MatrixS_>
 8003762:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003766:	3b5c      	subs	r3, #92	; 0x5c
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f503 62cd 	add.w	r2, r3, #1640	; 0x668
 800376e:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
 8003772:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8003776:	4611      	mov	r1, r2
 8003778:	4618      	mov	r0, r3
 800377a:	f7fe fb1d 	bl	8001db8 <_ZN6MatrixC1ERKS_>
 800377e:	f507 5372 	add.w	r3, r7, #15488	; 0x3c80
 8003782:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8003786:	f507 428c 	add.w	r2, r7, #17920	; 0x4600
 800378a:	f102 0248 	add.w	r2, r2, #72	; 0x48
 800378e:	f507 5179 	add.w	r1, r7, #15936	; 0x3e40
 8003792:	f101 0110 	add.w	r1, r1, #16
 8003796:	4618      	mov	r0, r3
 8003798:	f7fe fb6a 	bl	8001e70 <_Z7mul_mat6MatrixS_>
 800379c:	f507 5372 	add.w	r3, r7, #15488	; 0x3c80
 80037a0:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80037a4:	4619      	mov	r1, r3
 80037a6:	4620      	mov	r0, r4
 80037a8:	f7fe fcd8 	bl	800215c <_ZN6MatrixaSERKS_>
 80037ac:	f507 5372 	add.w	r3, r7, #15488	; 0x3c80
 80037b0:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fe fadd 	bl	8001d74 <_ZN6MatrixD1Ev>
 80037ba:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
 80037be:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fe fad6 	bl	8001d74 <_ZN6MatrixD1Ev>
 80037c8:	f507 5379 	add.w	r3, r7, #15936	; 0x3e40
 80037cc:	f103 0310 	add.w	r3, r3, #16
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fe facf 	bl	8001d74 <_ZN6MatrixD1Ev>
 80037d6:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fe faca 	bl	8001d74 <_ZN6MatrixD1Ev>
 80037e0:	f507 4389 	add.w	r3, r7, #17536	; 0x4480
 80037e4:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fe fac3 	bl	8001d74 <_ZN6MatrixD1Ev>
 80037ee:	f507 4386 	add.w	r3, r7, #17152	; 0x4300
 80037f2:	f103 0318 	add.w	r3, r3, #24
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fe fabc 	bl	8001d74 <_ZN6MatrixD1Ev>
 80037fc:	f507 537f 	add.w	r3, r7, #16320	; 0x3fc0
 8003800:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8003804:	4618      	mov	r0, r3
 8003806:	f7fe fab5 	bl	8001d74 <_ZN6MatrixD1Ev>
//         mul_mat(B,w);
         x.print(huart3);
 800380a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800380e:	3b5c      	subs	r3, #92	; 0x5c
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f103 0c08 	add.w	ip, r3, #8
 8003816:	4e2c      	ldr	r6, [pc, #176]	; (80038c8 <_ZN3EKF9updateEKFE8IMU_dataf+0x1230>)
 8003818:	466d      	mov	r5, sp
 800381a:	f106 040c 	add.w	r4, r6, #12
 800381e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003820:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003822:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003824:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003826:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003828:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800382a:	6823      	ldr	r3, [r4, #0]
 800382c:	602b      	str	r3, [r5, #0]
 800382e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003832:	4660      	mov	r0, ip
 8003834:	f7fe f9f4 	bl	8001c20 <_ZN6Matrix5printE20__UART_HandleTypeDef>
         Matrix inovation = sub_mat(y,mul_mat(H,x));
 8003838:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800383c:	3b28      	subs	r3, #40	; 0x28
 800383e:	4618      	mov	r0, r3
 8003840:	f7fe fa98 	bl	8001d74 <_ZN6MatrixD1Ev>
         Matrix S = mul_mat(H,tem);
 8003844:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003848:	3b40      	subs	r3, #64	; 0x40
 800384a:	4618      	mov	r0, r3
 800384c:	f7fe fa92 	bl	8001d74 <_ZN6MatrixD1Ev>
         Matrix tem = mul_mat(P,transpose(H));
 8003850:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003854:	3b58      	subs	r3, #88	; 0x58
 8003856:	4618      	mov	r0, r3
 8003858:	f7fe fa8c 	bl	8001d74 <_ZN6MatrixD1Ev>


//         y_.print(huart3);
//         w.print(huart3);
          }
         return state;
 800385c:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8003860:	3b10      	subs	r3, #16
 8003862:	f507 448f 	add.w	r4, r7, #18304	; 0x4780
 8003866:	f104 0460 	add.w	r4, r4, #96	; 0x60
 800386a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800386c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003870:	f507 438f 	add.w	r3, r7, #18304	; 0x4780
 8003874:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8003878:	6818      	ldr	r0, [r3, #0]
 800387a:	f507 438f 	add.w	r3, r7, #18304	; 0x4780
 800387e:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8003882:	6819      	ldr	r1, [r3, #0]
 8003884:	f507 438f 	add.w	r3, r7, #18304	; 0x4780
 8003888:	f103 0368 	add.w	r3, r3, #104	; 0x68
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	f507 438f 	add.w	r3, r7, #18304	; 0x4780
 8003892:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	ee06 0a10 	vmov	s12, r0
 800389c:	ee06 1a90 	vmov	s13, r1
 80038a0:	ee07 2a10 	vmov	s14, r2
 80038a4:	ee07 3a90 	vmov	s15, r3
	}
 80038a8:	eeb0 0a46 	vmov.f32	s0, s12
 80038ac:	eef0 0a66 	vmov.f32	s1, s13
 80038b0:	eeb0 1a47 	vmov.f32	s2, s14
 80038b4:	eef0 1a67 	vmov.f32	s3, s15
 80038b8:	f507 4790 	add.w	r7, r7, #18432	; 0x4800
 80038bc:	3774      	adds	r7, #116	; 0x74
 80038be:	46bd      	mov	sp, r7
 80038c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80038c4:	b004      	add	sp, #16
 80038c6:	4770      	bx	lr
 80038c8:	2000071c 	.word	0x2000071c

080038cc <_ZN3EKFC1EPdS0_S0_S0_>:
	virtual ~EKF();
};
EKF::EKF(double* x_, double *P_, double* Q_, double*R_){
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
 80038d8:	603b      	str	r3, [r7, #0]
 80038da:	4a34      	ldr	r2, [pc, #208]	; (80039ac <_ZN3EKFC1EPdS0_S0_S0_+0xe0>)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	3308      	adds	r3, #8
 80038e4:	2201      	movs	r2, #1
 80038e6:	2107      	movs	r1, #7
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fe fa07 	bl	8001cfc <_ZN6MatrixC1Eii>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80038f4:	2201      	movs	r2, #1
 80038f6:	2103      	movs	r1, #3
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fe f9ff 	bl	8001cfc <_ZN6MatrixC1Eii>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8003904:	2207      	movs	r2, #7
 8003906:	2107      	movs	r1, #7
 8003908:	4618      	mov	r0, r3
 800390a:	f7fe f9f7 	bl	8001cfc <_ZN6MatrixC1Eii>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8003914:	2203      	movs	r2, #3
 8003916:	2107      	movs	r1, #7
 8003918:	4618      	mov	r0, r3
 800391a:	f7fe f9ef 	bl	8001cfc <_ZN6MatrixC1Eii>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 8003924:	2207      	movs	r2, #7
 8003926:	2107      	movs	r1, #7
 8003928:	4618      	mov	r0, r3
 800392a:	f7fe f9e7 	bl	8001cfc <_ZN6MatrixC1Eii>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003934:	2207      	movs	r2, #7
 8003936:	2107      	movs	r1, #7
 8003938:	4618      	mov	r0, r3
 800393a:	f7fe f9df 	bl	8001cfc <_ZN6MatrixC1Eii>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f603 1398 	addw	r3, r3, #2456	; 0x998
 8003944:	2207      	movs	r2, #7
 8003946:	2103      	movs	r1, #3
 8003948:	4618      	mov	r0, r3
 800394a:	f7fe f9d7 	bl	8001cfc <_ZN6MatrixC1Eii>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f503 6333 	add.w	r3, r3, #2864	; 0xb30
 8003954:	2203      	movs	r2, #3
 8003956:	2107      	movs	r1, #7
 8003958:	4618      	mov	r0, r3
 800395a:	f7fe f9cf 	bl	8001cfc <_ZN6MatrixC1Eii>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 8003964:	2203      	movs	r2, #3
 8003966:	2103      	movs	r1, #3
 8003968:	4618      	mov	r0, r3
 800396a:	f7fe f9c7 	bl	8001cfc <_ZN6MatrixC1Eii>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f503 6366 	add.w	r3, r3, #3680	; 0xe60
 8003974:	2203      	movs	r2, #3
 8003976:	2103      	movs	r1, #3
 8003978:	4618      	mov	r0, r3
 800397a:	f7fe f9bf 	bl	8001cfc <_ZN6MatrixC1Eii>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 8003984:	2207      	movs	r2, #7
 8003986:	2107      	movs	r1, #7
 8003988:	4618      	mov	r0, r3
 800398a:	f7fe fa37 	bl	8001dfc <_Z8diag_matii>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 8003994:	3310      	adds	r3, #16
 8003996:	2201      	movs	r2, #1
 8003998:	2103      	movs	r1, #3
 800399a:	4618      	mov	r0, r3
 800399c:	f7fe f9ae 	bl	8001cfc <_ZN6MatrixC1Eii>

}
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	0800a508 	.word	0x0800a508

080039b0 <_ZN3EKFD1Ev>:
EKF::~EKF() {
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	4a27      	ldr	r2, [pc, #156]	; (8003a58 <_ZN3EKFD1Ev+0xa8>)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 80039c4:	3310      	adds	r3, #16
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fe f9d4 	bl	8001d74 <_ZN6MatrixD1Ev>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fe f9ce 	bl	8001d74 <_ZN6MatrixD1Ev>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f503 6366 	add.w	r3, r3, #3680	; 0xe60
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fe f9c8 	bl	8001d74 <_ZN6MatrixD1Ev>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fe f9c2 	bl	8001d74 <_ZN6MatrixD1Ev>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f503 6333 	add.w	r3, r3, #2864	; 0xb30
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fe f9bc 	bl	8001d74 <_ZN6MatrixD1Ev>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f603 1398 	addw	r3, r3, #2456	; 0x998
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fe f9b6 	bl	8001d74 <_ZN6MatrixD1Ev>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fe f9b0 	bl	8001d74 <_ZN6MatrixD1Ev>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fe f9aa 	bl	8001d74 <_ZN6MatrixD1Ev>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fe f9a4 	bl	8001d74 <_ZN6MatrixD1Ev>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fe f99e 	bl	8001d74 <_ZN6MatrixD1Ev>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fe f998 	bl	8001d74 <_ZN6MatrixD1Ev>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3308      	adds	r3, #8
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fe f993 	bl	8001d74 <_ZN6MatrixD1Ev>
	// TODO Auto-generated destructor stub
	 // free(this->data);
}
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4618      	mov	r0, r3
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	0800a508 	.word	0x0800a508

08003a5c <_ZN3EKFD0Ev>:
EKF::~EKF() {
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
}
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7ff ffa3 	bl	80039b0 <_ZN3EKFD1Ev>
 8003a6a:	f241 3128 	movw	r1, #4904	; 0x1328
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f006 fc10 	bl	800a294 <_ZdlPvj>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4618      	mov	r0, r3
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <_Z8init_ESCv>:
IMU_data data_imu_raw;
IMU_data data_imu_buffer;
EULER_angle drone_state;
EKF ekf = EKF(x,P,Q,R);

void init_ESC(){
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start(&htim4);
 8003a84:	481e      	ldr	r0, [pc, #120]	; (8003b00 <_Z8init_ESCv+0x80>)
 8003a86:	f003 f910 	bl	8006caa <HAL_TIM_Base_Start>
	  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	481d      	ldr	r0, [pc, #116]	; (8003b04 <_Z8init_ESCv+0x84>)
 8003a8e:	f003 f989 	bl	8006da4 <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8003a92:	2104      	movs	r1, #4
 8003a94:	481b      	ldr	r0, [pc, #108]	; (8003b04 <_Z8init_ESCv+0x84>)
 8003a96:	f003 f985 	bl	8006da4 <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8003a9a:	2108      	movs	r1, #8
 8003a9c:	4819      	ldr	r0, [pc, #100]	; (8003b04 <_Z8init_ESCv+0x84>)
 8003a9e:	f003 f981 	bl	8006da4 <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8003aa2:	210c      	movs	r1, #12
 8003aa4:	4817      	ldr	r0, [pc, #92]	; (8003b04 <_Z8init_ESCv+0x84>)
 8003aa6:	f003 f97d 	bl	8006da4 <HAL_TIM_PWM_Start>
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1000);
 8003aaa:	4b16      	ldr	r3, [pc, #88]	; (8003b04 <_Z8init_ESCv+0x84>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ab2:	635a      	str	r2, [r3, #52]	; 0x34
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1000);
 8003ab4:	4b13      	ldr	r3, [pc, #76]	; (8003b04 <_Z8init_ESCv+0x84>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003abc:	639a      	str	r2, [r3, #56]	; 0x38
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 1000);
 8003abe:	4b11      	ldr	r3, [pc, #68]	; (8003b04 <_Z8init_ESCv+0x84>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ac6:	63da      	str	r2, [r3, #60]	; 0x3c
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1000);
 8003ac8:	4b0e      	ldr	r3, [pc, #56]	; (8003b04 <_Z8init_ESCv+0x84>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ad0:	641a      	str	r2, [r3, #64]	; 0x40
	    esc_value1 = 1000;
 8003ad2:	4b0d      	ldr	r3, [pc, #52]	; (8003b08 <_Z8init_ESCv+0x88>)
 8003ad4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ad8:	801a      	strh	r2, [r3, #0]
	    esc_value2 = 1000;
 8003ada:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <_Z8init_ESCv+0x8c>)
 8003adc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ae0:	801a      	strh	r2, [r3, #0]
	    esc_value3 = 1000;
 8003ae2:	4b0b      	ldr	r3, [pc, #44]	; (8003b10 <_Z8init_ESCv+0x90>)
 8003ae4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ae8:	801a      	strh	r2, [r3, #0]
	    esc_value4 = 1000;
 8003aea:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <_Z8init_ESCv+0x94>)
 8003aec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003af0:	801a      	strh	r2, [r3, #0]

	    HAL_Delay(3000);
 8003af2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003af6:	f001 f895 	bl	8004c24 <HAL_Delay>
}
 8003afa:	bf00      	nop
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	20000824 	.word	0x20000824
 8003b04:	200007e4 	.word	0x200007e4
 8003b08:	200007dc 	.word	0x200007dc
 8003b0c:	200007de 	.word	0x200007de
 8003b10:	200007e0 	.word	0x200007e0
 8003b14:	200007e2 	.word	0x200007e2

08003b18 <_Z7set_ESCv>:

void set_ESC(){
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,esc_value1);
 8003b1c:	4b0c      	ldr	r3, [pc, #48]	; (8003b50 <_Z7set_ESCv+0x38>)
 8003b1e:	881a      	ldrh	r2, [r3, #0]
 8003b20:	4b0c      	ldr	r3, [pc, #48]	; (8003b54 <_Z7set_ESCv+0x3c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	635a      	str	r2, [r3, #52]	; 0x34
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, esc_value2);
 8003b26:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <_Z7set_ESCv+0x40>)
 8003b28:	881a      	ldrh	r2, [r3, #0]
 8003b2a:	4b0a      	ldr	r3, [pc, #40]	; (8003b54 <_Z7set_ESCv+0x3c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	639a      	str	r2, [r3, #56]	; 0x38
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,esc_value3);
 8003b30:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <_Z7set_ESCv+0x44>)
 8003b32:	881a      	ldrh	r2, [r3, #0]
 8003b34:	4b07      	ldr	r3, [pc, #28]	; (8003b54 <_Z7set_ESCv+0x3c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	63da      	str	r2, [r3, #60]	; 0x3c
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,esc_value4);
 8003b3a:	4b09      	ldr	r3, [pc, #36]	; (8003b60 <_Z7set_ESCv+0x48>)
 8003b3c:	881a      	ldrh	r2, [r3, #0]
 8003b3e:	4b05      	ldr	r3, [pc, #20]	; (8003b54 <_Z7set_ESCv+0x3c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003b44:	bf00      	nop
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	200007dc 	.word	0x200007dc
 8003b54:	200007e4 	.word	0x200007e4
 8003b58:	200007de 	.word	0x200007de
 8003b5c:	200007e0 	.word	0x200007e0
 8003b60:	200007e2 	.word	0x200007e2

08003b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b64:	b5b0      	push	{r4, r5, r7, lr}
 8003b66:	b0a2      	sub	sp, #136	; 0x88
 8003b68:	af02      	add	r7, sp, #8


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b6a:	f001 f819 	bl	8004ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b6e:	f000 f8a7 	bl	8003cc0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b72:	f000 faf7 	bl	8004164 <_ZL12MX_GPIO_Initv>
  MX_USART3_UART_Init();
 8003b76:	f000 fac7 	bl	8004108 <_ZL19MX_USART3_UART_Initv>
  MX_I2C1_Init();
 8003b7a:	f000 f915 	bl	8003da8 <_ZL12MX_I2C1_Initv>
  MX_TIM1_Init();
 8003b7e:	f000 f947 	bl	8003e10 <_ZL12MX_TIM1_Initv>
  MX_USART1_UART_Init();
 8003b82:	f000 fa93 	bl	80040ac <_ZL19MX_USART1_UART_Initv>
  MX_TIM4_Init();
 8003b86:	f000 fa35 	bl	8003ff4 <_ZL12MX_TIM4_Initv>
  MX_TIM7_Init();
 8003b8a:	f7fd f9b1 	bl	8000ef0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, (uint8_t *) Rx_data, 1);
 8003b8e:	2201      	movs	r2, #1
 8003b90:	4939      	ldr	r1, [pc, #228]	; (8003c78 <main+0x114>)
 8003b92:	483a      	ldr	r0, [pc, #232]	; (8003c7c <main+0x118>)
 8003b94:	f004 f8ca 	bl	8007d2c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, (uint8_t *) Rx_data, 1);
 8003b98:	2201      	movs	r2, #1
 8003b9a:	4937      	ldr	r1, [pc, #220]	; (8003c78 <main+0x114>)
 8003b9c:	4838      	ldr	r0, [pc, #224]	; (8003c80 <main+0x11c>)
 8003b9e:	f004 f8c5 	bl	8007d2c <HAL_UART_Receive_IT>
  init_MPU();
 8003ba2:	f7fd fb3d 	bl	8001220 <_Z8init_MPUv>
  init_ESC();
 8003ba6:	f7ff ff6b 	bl	8003a80 <_Z8init_ESCv>
  MX_TIM7_Init();
 8003baa:	f7fd f9a1 	bl	8000ef0 <MX_TIM7_Init>
  ekf.loadEKF(x,P,Q,R);
 8003bae:	4b35      	ldr	r3, [pc, #212]	; (8003c84 <main+0x120>)
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	4b35      	ldr	r3, [pc, #212]	; (8003c88 <main+0x124>)
 8003bb4:	4a35      	ldr	r2, [pc, #212]	; (8003c8c <main+0x128>)
 8003bb6:	4936      	ldr	r1, [pc, #216]	; (8003c90 <main+0x12c>)
 8003bb8:	4836      	ldr	r0, [pc, #216]	; (8003c94 <main+0x130>)
 8003bba:	f7fe fd45 	bl	8002648 <_ZN3EKF7loadEKFEPdS0_S0_S0_>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of Queue */
  osMessageQDef(Queue, 32, uint16_t);
 8003bbe:	4b36      	ldr	r3, [pc, #216]	; (8003c98 <main+0x134>)
 8003bc0:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8003bc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  QueueHandle = osMessageCreate(osMessageQ(Queue), NULL);
 8003bca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003bce:	2100      	movs	r1, #0
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f004 ff7c 	bl	8008ace <osMessageCreate>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	4b30      	ldr	r3, [pc, #192]	; (8003c9c <main+0x138>)
 8003bda:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of read_MPU */
  osThreadDef(read_MPU, StartDefaultTask, osPriorityNormal, 0, 128);
 8003bdc:	4b30      	ldr	r3, [pc, #192]	; (8003ca0 <main+0x13c>)
 8003bde:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8003be2:	461d      	mov	r5, r3
 8003be4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003be6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003be8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003bec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  read_MPUHandle = osThreadCreate(osThread(read_MPU), NULL);
 8003bf0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f004 ff09 	bl	8008a0e <osThreadCreate>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	4b29      	ldr	r3, [pc, #164]	; (8003ca4 <main+0x140>)
 8003c00:	601a      	str	r2, [r3, #0]

  /* definition and creation of read_BMP */
  osThreadDef(read_BMP, StartTask02, osPriorityNormal, 0, 128);
 8003c02:	4b29      	ldr	r3, [pc, #164]	; (8003ca8 <main+0x144>)
 8003c04:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8003c08:	461d      	mov	r5, r3
 8003c0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  read_BMPHandle = osThreadCreate(osThread(read_BMP), NULL);
 8003c16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f004 fef6 	bl	8008a0e <osThreadCreate>
 8003c22:	4602      	mov	r2, r0
 8003c24:	4b21      	ldr	r3, [pc, #132]	; (8003cac <main+0x148>)
 8003c26:	601a      	str	r2, [r3, #0]

  /* definition and creation of receiveTask */
  osThreadDef(receiveTask, StartTask03, osPriorityHigh, 0, 128);
 8003c28:	4b21      	ldr	r3, [pc, #132]	; (8003cb0 <main+0x14c>)
 8003c2a:	f107 041c 	add.w	r4, r7, #28
 8003c2e:	461d      	mov	r5, r3
 8003c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveTaskHandle = osThreadCreate(osThread(receiveTask), NULL);
 8003c3c:	f107 031c 	add.w	r3, r7, #28
 8003c40:	2100      	movs	r1, #0
 8003c42:	4618      	mov	r0, r3
 8003c44:	f004 fee3 	bl	8008a0e <osThreadCreate>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	4b1a      	ldr	r3, [pc, #104]	; (8003cb4 <main+0x150>)
 8003c4c:	601a      	str	r2, [r3, #0]

  /* definition and creation of filterTask */
  osThreadDef(filterTask, filterFunction, osPriorityAboveNormal, 0, 6000);
 8003c4e:	4b1a      	ldr	r3, [pc, #104]	; (8003cb8 <main+0x154>)
 8003c50:	463c      	mov	r4, r7
 8003c52:	461d      	mov	r5, r3
 8003c54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  filterTaskHandle = osThreadCreate(osThread(filterTask), NULL);
 8003c60:	463b      	mov	r3, r7
 8003c62:	2100      	movs	r1, #0
 8003c64:	4618      	mov	r0, r3
 8003c66:	f004 fed2 	bl	8008a0e <osThreadCreate>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	4b13      	ldr	r3, [pc, #76]	; (8003cbc <main+0x158>)
 8003c6e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8003c70:	f004 fec6 	bl	8008a00 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003c74:	e7fe      	b.n	8003c74 <main+0x110>
 8003c76:	bf00      	nop
 8003c78:	200008b8 	.word	0x200008b8
 8003c7c:	2000071c 	.word	0x2000071c
 8003c80:	20000864 	.word	0x20000864
 8003c84:	20000348 	.word	0x20000348
 8003c88:	20000038 	.word	0x20000038
 8003c8c:	200001c0 	.word	0x200001c0
 8003c90:	20000000 	.word	0x20000000
 8003c94:	200008f8 	.word	0x200008f8
 8003c98:	0800a3f0 	.word	0x0800a3f0
 8003c9c:	200008b4 	.word	0x200008b4
 8003ca0:	0800a40c 	.word	0x0800a40c
 8003ca4:	200008a4 	.word	0x200008a4
 8003ca8:	0800a434 	.word	0x0800a434
 8003cac:	200008a8 	.word	0x200008a8
 8003cb0:	0800a45c 	.word	0x0800a45c
 8003cb4:	200008ac 	.word	0x200008ac
 8003cb8:	0800a484 	.word	0x0800a484
 8003cbc:	200008b0 	.word	0x200008b0

08003cc0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b094      	sub	sp, #80	; 0x50
 8003cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003cc6:	f107 0320 	add.w	r3, r7, #32
 8003cca:	2230      	movs	r2, #48	; 0x30
 8003ccc:	2100      	movs	r1, #0
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f006 fb1b 	bl	800a30a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003cd4:	f107 030c 	add.w	r3, r7, #12
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	605a      	str	r2, [r3, #4]
 8003cde:	609a      	str	r2, [r3, #8]
 8003ce0:	60da      	str	r2, [r3, #12]
 8003ce2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	60bb      	str	r3, [r7, #8]
 8003ce8:	4b2d      	ldr	r3, [pc, #180]	; (8003da0 <_Z18SystemClock_Configv+0xe0>)
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	4a2c      	ldr	r2, [pc, #176]	; (8003da0 <_Z18SystemClock_Configv+0xe0>)
 8003cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf2:	6413      	str	r3, [r2, #64]	; 0x40
 8003cf4:	4b2a      	ldr	r3, [pc, #168]	; (8003da0 <_Z18SystemClock_Configv+0xe0>)
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d00:	2300      	movs	r3, #0
 8003d02:	607b      	str	r3, [r7, #4]
 8003d04:	4b27      	ldr	r3, [pc, #156]	; (8003da4 <_Z18SystemClock_Configv+0xe4>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a26      	ldr	r2, [pc, #152]	; (8003da4 <_Z18SystemClock_Configv+0xe4>)
 8003d0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d0e:	6013      	str	r3, [r2, #0]
 8003d10:	4b24      	ldr	r3, [pc, #144]	; (8003da4 <_Z18SystemClock_Configv+0xe4>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d18:	607b      	str	r3, [r7, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d26:	2302      	movs	r3, #2
 8003d28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003d2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8003d30:	2306      	movs	r3, #6
 8003d32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003d34:	23a8      	movs	r3, #168	; 0xa8
 8003d36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003d38:	2302      	movs	r3, #2
 8003d3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003d3c:	2304      	movs	r3, #4
 8003d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d40:	f107 0320 	add.w	r3, r7, #32
 8003d44:	4618      	mov	r0, r3
 8003d46:	f002 fb17 	bl	8006378 <HAL_RCC_OscConfig>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	bf14      	ite	ne
 8003d50:	2301      	movne	r3, #1
 8003d52:	2300      	moveq	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8003d5a:	f000 fc63 	bl	8004624 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d5e:	230f      	movs	r3, #15
 8003d60:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d62:	2302      	movs	r3, #2
 8003d64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d66:	2300      	movs	r3, #0
 8003d68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003d6a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003d6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003d76:	f107 030c 	add.w	r3, r7, #12
 8003d7a:	2105      	movs	r1, #5
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f002 fd6b 	bl	8006858 <HAL_RCC_ClockConfig>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	bf14      	ite	ne
 8003d88:	2301      	movne	r3, #1
 8003d8a:	2300      	moveq	r3, #0
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8003d92:	f000 fc47 	bl	8004624 <Error_Handler>
  }
}
 8003d96:	bf00      	nop
 8003d98:	3750      	adds	r7, #80	; 0x50
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40023800 	.word	0x40023800
 8003da4:	40007000 	.word	0x40007000

08003da8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003dac:	4b15      	ldr	r3, [pc, #84]	; (8003e04 <_ZL12MX_I2C1_Initv+0x5c>)
 8003dae:	4a16      	ldr	r2, [pc, #88]	; (8003e08 <_ZL12MX_I2C1_Initv+0x60>)
 8003db0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003db2:	4b14      	ldr	r3, [pc, #80]	; (8003e04 <_ZL12MX_I2C1_Initv+0x5c>)
 8003db4:	4a15      	ldr	r2, [pc, #84]	; (8003e0c <_ZL12MX_I2C1_Initv+0x64>)
 8003db6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003db8:	4b12      	ldr	r3, [pc, #72]	; (8003e04 <_ZL12MX_I2C1_Initv+0x5c>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003dbe:	4b11      	ldr	r3, [pc, #68]	; (8003e04 <_ZL12MX_I2C1_Initv+0x5c>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003dc4:	4b0f      	ldr	r3, [pc, #60]	; (8003e04 <_ZL12MX_I2C1_Initv+0x5c>)
 8003dc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003dca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003dcc:	4b0d      	ldr	r3, [pc, #52]	; (8003e04 <_ZL12MX_I2C1_Initv+0x5c>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003dd2:	4b0c      	ldr	r3, [pc, #48]	; (8003e04 <_ZL12MX_I2C1_Initv+0x5c>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003dd8:	4b0a      	ldr	r3, [pc, #40]	; (8003e04 <_ZL12MX_I2C1_Initv+0x5c>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003dde:	4b09      	ldr	r3, [pc, #36]	; (8003e04 <_ZL12MX_I2C1_Initv+0x5c>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003de4:	4807      	ldr	r0, [pc, #28]	; (8003e04 <_ZL12MX_I2C1_Initv+0x5c>)
 8003de6:	f001 fa11 	bl	800520c <HAL_I2C_Init>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	bf14      	ite	ne
 8003df0:	2301      	movne	r3, #1
 8003df2:	2300      	moveq	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8003dfa:	f000 fc13 	bl	8004624 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003dfe:	bf00      	nop
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	200006c8 	.word	0x200006c8
 8003e08:	40005400 	.word	0x40005400
 8003e0c:	00061a80 	.word	0x00061a80

08003e10 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b096      	sub	sp, #88	; 0x58
 8003e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	605a      	str	r2, [r3, #4]
 8003e20:	609a      	str	r2, [r3, #8]
 8003e22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e32:	2200      	movs	r2, #0
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	605a      	str	r2, [r3, #4]
 8003e38:	609a      	str	r2, [r3, #8]
 8003e3a:	60da      	str	r2, [r3, #12]
 8003e3c:	611a      	str	r2, [r3, #16]
 8003e3e:	615a      	str	r2, [r3, #20]
 8003e40:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003e42:	1d3b      	adds	r3, r7, #4
 8003e44:	2220      	movs	r2, #32
 8003e46:	2100      	movs	r1, #0
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f006 fa5e 	bl	800a30a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003e4e:	4b67      	ldr	r3, [pc, #412]	; (8003fec <_ZL12MX_TIM1_Initv+0x1dc>)
 8003e50:	4a67      	ldr	r2, [pc, #412]	; (8003ff0 <_ZL12MX_TIM1_Initv+0x1e0>)
 8003e52:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8003e54:	4b65      	ldr	r3, [pc, #404]	; (8003fec <_ZL12MX_TIM1_Initv+0x1dc>)
 8003e56:	22a7      	movs	r2, #167	; 0xa7
 8003e58:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e5a:	4b64      	ldr	r3, [pc, #400]	; (8003fec <_ZL12MX_TIM1_Initv+0x1dc>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8003e60:	4b62      	ldr	r3, [pc, #392]	; (8003fec <_ZL12MX_TIM1_Initv+0x1dc>)
 8003e62:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003e66:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e68:	4b60      	ldr	r3, [pc, #384]	; (8003fec <_ZL12MX_TIM1_Initv+0x1dc>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e6e:	4b5f      	ldr	r3, [pc, #380]	; (8003fec <_ZL12MX_TIM1_Initv+0x1dc>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e74:	4b5d      	ldr	r3, [pc, #372]	; (8003fec <_ZL12MX_TIM1_Initv+0x1dc>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003e7a:	485c      	ldr	r0, [pc, #368]	; (8003fec <_ZL12MX_TIM1_Initv+0x1dc>)
 8003e7c:	f002 feea 	bl	8006c54 <HAL_TIM_Base_Init>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	bf14      	ite	ne
 8003e86:	2301      	movne	r3, #1
 8003e88:	2300      	moveq	r3, #0
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <_ZL12MX_TIM1_Initv+0x84>
  {
    Error_Handler();
 8003e90:	f000 fbc8 	bl	8004624 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e98:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003e9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	4852      	ldr	r0, [pc, #328]	; (8003fec <_ZL12MX_TIM1_Initv+0x1dc>)
 8003ea2:	f003 f98b 	bl	80071bc <HAL_TIM_ConfigClockSource>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	bf14      	ite	ne
 8003eac:	2301      	movne	r3, #1
 8003eae:	2300      	moveq	r3, #0
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <_ZL12MX_TIM1_Initv+0xaa>
  {
    Error_Handler();
 8003eb6:	f000 fbb5 	bl	8004624 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003eba:	484c      	ldr	r0, [pc, #304]	; (8003fec <_ZL12MX_TIM1_Initv+0x1dc>)
 8003ebc:	f002 ff3d 	bl	8006d3a <HAL_TIM_PWM_Init>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	bf14      	ite	ne
 8003ec6:	2301      	movne	r3, #1
 8003ec8:	2300      	moveq	r3, #0
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <_ZL12MX_TIM1_Initv+0xc4>
  {
    Error_Handler();
 8003ed0:	f000 fba8 	bl	8004624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003edc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	4842      	ldr	r0, [pc, #264]	; (8003fec <_ZL12MX_TIM1_Initv+0x1dc>)
 8003ee4:	f003 fd5a 	bl	800799c <HAL_TIMEx_MasterConfigSynchronization>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	bf14      	ite	ne
 8003eee:	2301      	movne	r3, #1
 8003ef0:	2300      	moveq	r3, #0
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <_ZL12MX_TIM1_Initv+0xec>
  {
    Error_Handler();
 8003ef8:	f000 fb94 	bl	8004624 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003efc:	2360      	movs	r3, #96	; 0x60
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f04:	2300      	movs	r3, #0
 8003f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003f10:	2300      	movs	r3, #0
 8003f12:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003f14:	2300      	movs	r3, #0
 8003f16:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4832      	ldr	r0, [pc, #200]	; (8003fec <_ZL12MX_TIM1_Initv+0x1dc>)
 8003f22:	f003 f885 	bl	8007030 <HAL_TIM_PWM_ConfigChannel>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	bf14      	ite	ne
 8003f2c:	2301      	movne	r3, #1
 8003f2e:	2300      	moveq	r3, #0
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <_ZL12MX_TIM1_Initv+0x12a>
  {
    Error_Handler();
 8003f36:	f000 fb75 	bl	8004624 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f3e:	2204      	movs	r2, #4
 8003f40:	4619      	mov	r1, r3
 8003f42:	482a      	ldr	r0, [pc, #168]	; (8003fec <_ZL12MX_TIM1_Initv+0x1dc>)
 8003f44:	f003 f874 	bl	8007030 <HAL_TIM_PWM_ConfigChannel>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	bf14      	ite	ne
 8003f4e:	2301      	movne	r3, #1
 8003f50:	2300      	moveq	r3, #0
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <_ZL12MX_TIM1_Initv+0x14c>
  {
    Error_Handler();
 8003f58:	f000 fb64 	bl	8004624 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f60:	2208      	movs	r2, #8
 8003f62:	4619      	mov	r1, r3
 8003f64:	4821      	ldr	r0, [pc, #132]	; (8003fec <_ZL12MX_TIM1_Initv+0x1dc>)
 8003f66:	f003 f863 	bl	8007030 <HAL_TIM_PWM_ConfigChannel>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	bf14      	ite	ne
 8003f70:	2301      	movne	r3, #1
 8003f72:	2300      	moveq	r3, #0
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <_ZL12MX_TIM1_Initv+0x16e>
  {
    Error_Handler();
 8003f7a:	f000 fb53 	bl	8004624 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f82:	220c      	movs	r2, #12
 8003f84:	4619      	mov	r1, r3
 8003f86:	4819      	ldr	r0, [pc, #100]	; (8003fec <_ZL12MX_TIM1_Initv+0x1dc>)
 8003f88:	f003 f852 	bl	8007030 <HAL_TIM_PWM_ConfigChannel>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	bf14      	ite	ne
 8003f92:	2301      	movne	r3, #1
 8003f94:	2300      	moveq	r3, #0
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <_ZL12MX_TIM1_Initv+0x190>
  {
    Error_Handler();
 8003f9c:	f000 fb42 	bl	8004624 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003fac:	2300      	movs	r3, #0
 8003fae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003fb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fb8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003fbe:	1d3b      	adds	r3, r7, #4
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	480a      	ldr	r0, [pc, #40]	; (8003fec <_ZL12MX_TIM1_Initv+0x1dc>)
 8003fc4:	f003 fd66 	bl	8007a94 <HAL_TIMEx_ConfigBreakDeadTime>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	bf14      	ite	ne
 8003fce:	2301      	movne	r3, #1
 8003fd0:	2300      	moveq	r3, #0
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <_ZL12MX_TIM1_Initv+0x1cc>
  {
    Error_Handler();
 8003fd8:	f000 fb24 	bl	8004624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003fdc:	4803      	ldr	r0, [pc, #12]	; (8003fec <_ZL12MX_TIM1_Initv+0x1dc>)
 8003fde:	f000 fc2f 	bl	8004840 <HAL_TIM_MspPostInit>

}
 8003fe2:	bf00      	nop
 8003fe4:	3758      	adds	r7, #88	; 0x58
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	200007e4 	.word	0x200007e4
 8003ff0:	40010000 	.word	0x40010000

08003ff4 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ffa:	f107 0308 	add.w	r3, r7, #8
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	605a      	str	r2, [r3, #4]
 8004004:	609a      	str	r2, [r3, #8]
 8004006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004008:	463b      	mov	r3, r7
 800400a:	2200      	movs	r2, #0
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004010:	4b24      	ldr	r3, [pc, #144]	; (80040a4 <_ZL12MX_TIM4_Initv+0xb0>)
 8004012:	4a25      	ldr	r2, [pc, #148]	; (80040a8 <_ZL12MX_TIM4_Initv+0xb4>)
 8004014:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 167;
 8004016:	4b23      	ldr	r3, [pc, #140]	; (80040a4 <_ZL12MX_TIM4_Initv+0xb0>)
 8004018:	22a7      	movs	r2, #167	; 0xa7
 800401a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800401c:	4b21      	ldr	r3, [pc, #132]	; (80040a4 <_ZL12MX_TIM4_Initv+0xb0>)
 800401e:	2200      	movs	r2, #0
 8004020:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8004022:	4b20      	ldr	r3, [pc, #128]	; (80040a4 <_ZL12MX_TIM4_Initv+0xb0>)
 8004024:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004028:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800402a:	4b1e      	ldr	r3, [pc, #120]	; (80040a4 <_ZL12MX_TIM4_Initv+0xb0>)
 800402c:	2200      	movs	r2, #0
 800402e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004030:	4b1c      	ldr	r3, [pc, #112]	; (80040a4 <_ZL12MX_TIM4_Initv+0xb0>)
 8004032:	2200      	movs	r2, #0
 8004034:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004036:	481b      	ldr	r0, [pc, #108]	; (80040a4 <_ZL12MX_TIM4_Initv+0xb0>)
 8004038:	f002 fe0c 	bl	8006c54 <HAL_TIM_Base_Init>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	bf14      	ite	ne
 8004042:	2301      	movne	r3, #1
 8004044:	2300      	moveq	r3, #0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 800404c:	f000 faea 	bl	8004624 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004054:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004056:	f107 0308 	add.w	r3, r7, #8
 800405a:	4619      	mov	r1, r3
 800405c:	4811      	ldr	r0, [pc, #68]	; (80040a4 <_ZL12MX_TIM4_Initv+0xb0>)
 800405e:	f003 f8ad 	bl	80071bc <HAL_TIM_ConfigClockSource>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	bf14      	ite	ne
 8004068:	2301      	movne	r3, #1
 800406a:	2300      	moveq	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <_ZL12MX_TIM4_Initv+0x82>
  {
    Error_Handler();
 8004072:	f000 fad7 	bl	8004624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004076:	2300      	movs	r3, #0
 8004078:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800407a:	2300      	movs	r3, #0
 800407c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800407e:	463b      	mov	r3, r7
 8004080:	4619      	mov	r1, r3
 8004082:	4808      	ldr	r0, [pc, #32]	; (80040a4 <_ZL12MX_TIM4_Initv+0xb0>)
 8004084:	f003 fc8a 	bl	800799c <HAL_TIMEx_MasterConfigSynchronization>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	bf14      	ite	ne
 800408e:	2301      	movne	r3, #1
 8004090:	2300      	moveq	r3, #0
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <_ZL12MX_TIM4_Initv+0xa8>
  {
    Error_Handler();
 8004098:	f000 fac4 	bl	8004624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800409c:	bf00      	nop
 800409e:	3718      	adds	r7, #24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	20000824 	.word	0x20000824
 80040a8:	40000800 	.word	0x40000800

080040ac <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80040b0:	4b13      	ldr	r3, [pc, #76]	; (8004100 <_ZL19MX_USART1_UART_Initv+0x54>)
 80040b2:	4a14      	ldr	r2, [pc, #80]	; (8004104 <_ZL19MX_USART1_UART_Initv+0x58>)
 80040b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80040b6:	4b12      	ldr	r3, [pc, #72]	; (8004100 <_ZL19MX_USART1_UART_Initv+0x54>)
 80040b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80040bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80040be:	4b10      	ldr	r3, [pc, #64]	; (8004100 <_ZL19MX_USART1_UART_Initv+0x54>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80040c4:	4b0e      	ldr	r3, [pc, #56]	; (8004100 <_ZL19MX_USART1_UART_Initv+0x54>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80040ca:	4b0d      	ldr	r3, [pc, #52]	; (8004100 <_ZL19MX_USART1_UART_Initv+0x54>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80040d0:	4b0b      	ldr	r3, [pc, #44]	; (8004100 <_ZL19MX_USART1_UART_Initv+0x54>)
 80040d2:	220c      	movs	r2, #12
 80040d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040d6:	4b0a      	ldr	r3, [pc, #40]	; (8004100 <_ZL19MX_USART1_UART_Initv+0x54>)
 80040d8:	2200      	movs	r2, #0
 80040da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80040dc:	4b08      	ldr	r3, [pc, #32]	; (8004100 <_ZL19MX_USART1_UART_Initv+0x54>)
 80040de:	2200      	movs	r2, #0
 80040e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80040e2:	4807      	ldr	r0, [pc, #28]	; (8004100 <_ZL19MX_USART1_UART_Initv+0x54>)
 80040e4:	f003 fd3c 	bl	8007b60 <HAL_UART_Init>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	bf14      	ite	ne
 80040ee:	2301      	movne	r3, #1
 80040f0:	2300      	moveq	r3, #0
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 80040f8:	f000 fa94 	bl	8004624 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80040fc:	bf00      	nop
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	20000864 	.word	0x20000864
 8004104:	40011000 	.word	0x40011000

08004108 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800410c:	4b13      	ldr	r3, [pc, #76]	; (800415c <_ZL19MX_USART3_UART_Initv+0x54>)
 800410e:	4a14      	ldr	r2, [pc, #80]	; (8004160 <_ZL19MX_USART3_UART_Initv+0x58>)
 8004110:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004112:	4b12      	ldr	r3, [pc, #72]	; (800415c <_ZL19MX_USART3_UART_Initv+0x54>)
 8004114:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004118:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800411a:	4b10      	ldr	r3, [pc, #64]	; (800415c <_ZL19MX_USART3_UART_Initv+0x54>)
 800411c:	2200      	movs	r2, #0
 800411e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004120:	4b0e      	ldr	r3, [pc, #56]	; (800415c <_ZL19MX_USART3_UART_Initv+0x54>)
 8004122:	2200      	movs	r2, #0
 8004124:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004126:	4b0d      	ldr	r3, [pc, #52]	; (800415c <_ZL19MX_USART3_UART_Initv+0x54>)
 8004128:	2200      	movs	r2, #0
 800412a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800412c:	4b0b      	ldr	r3, [pc, #44]	; (800415c <_ZL19MX_USART3_UART_Initv+0x54>)
 800412e:	220c      	movs	r2, #12
 8004130:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004132:	4b0a      	ldr	r3, [pc, #40]	; (800415c <_ZL19MX_USART3_UART_Initv+0x54>)
 8004134:	2200      	movs	r2, #0
 8004136:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004138:	4b08      	ldr	r3, [pc, #32]	; (800415c <_ZL19MX_USART3_UART_Initv+0x54>)
 800413a:	2200      	movs	r2, #0
 800413c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800413e:	4807      	ldr	r0, [pc, #28]	; (800415c <_ZL19MX_USART3_UART_Initv+0x54>)
 8004140:	f003 fd0e 	bl	8007b60 <HAL_UART_Init>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	bf14      	ite	ne
 800414a:	2301      	movne	r3, #1
 800414c:	2300      	moveq	r3, #0
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8004154:	f000 fa66 	bl	8004624 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004158:	bf00      	nop
 800415a:	bd80      	pop	{r7, pc}
 800415c:	2000071c 	.word	0x2000071c
 8004160:	40004800 	.word	0x40004800

08004164 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b08a      	sub	sp, #40	; 0x28
 8004168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800416a:	f107 0314 	add.w	r3, r7, #20
 800416e:	2200      	movs	r2, #0
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	605a      	str	r2, [r3, #4]
 8004174:	609a      	str	r2, [r3, #8]
 8004176:	60da      	str	r2, [r3, #12]
 8004178:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800417a:	2300      	movs	r3, #0
 800417c:	613b      	str	r3, [r7, #16]
 800417e:	4b3a      	ldr	r3, [pc, #232]	; (8004268 <_ZL12MX_GPIO_Initv+0x104>)
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	4a39      	ldr	r2, [pc, #228]	; (8004268 <_ZL12MX_GPIO_Initv+0x104>)
 8004184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004188:	6313      	str	r3, [r2, #48]	; 0x30
 800418a:	4b37      	ldr	r3, [pc, #220]	; (8004268 <_ZL12MX_GPIO_Initv+0x104>)
 800418c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004192:	613b      	str	r3, [r7, #16]
 8004194:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004196:	2300      	movs	r3, #0
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	4b33      	ldr	r3, [pc, #204]	; (8004268 <_ZL12MX_GPIO_Initv+0x104>)
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419e:	4a32      	ldr	r2, [pc, #200]	; (8004268 <_ZL12MX_GPIO_Initv+0x104>)
 80041a0:	f043 0301 	orr.w	r3, r3, #1
 80041a4:	6313      	str	r3, [r2, #48]	; 0x30
 80041a6:	4b30      	ldr	r3, [pc, #192]	; (8004268 <_ZL12MX_GPIO_Initv+0x104>)
 80041a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80041b2:	2300      	movs	r3, #0
 80041b4:	60bb      	str	r3, [r7, #8]
 80041b6:	4b2c      	ldr	r3, [pc, #176]	; (8004268 <_ZL12MX_GPIO_Initv+0x104>)
 80041b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ba:	4a2b      	ldr	r2, [pc, #172]	; (8004268 <_ZL12MX_GPIO_Initv+0x104>)
 80041bc:	f043 0304 	orr.w	r3, r3, #4
 80041c0:	6313      	str	r3, [r2, #48]	; 0x30
 80041c2:	4b29      	ldr	r3, [pc, #164]	; (8004268 <_ZL12MX_GPIO_Initv+0x104>)
 80041c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c6:	f003 0304 	and.w	r3, r3, #4
 80041ca:	60bb      	str	r3, [r7, #8]
 80041cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80041ce:	2300      	movs	r3, #0
 80041d0:	607b      	str	r3, [r7, #4]
 80041d2:	4b25      	ldr	r3, [pc, #148]	; (8004268 <_ZL12MX_GPIO_Initv+0x104>)
 80041d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d6:	4a24      	ldr	r2, [pc, #144]	; (8004268 <_ZL12MX_GPIO_Initv+0x104>)
 80041d8:	f043 0302 	orr.w	r3, r3, #2
 80041dc:	6313      	str	r3, [r2, #48]	; 0x30
 80041de:	4b22      	ldr	r3, [pc, #136]	; (8004268 <_ZL12MX_GPIO_Initv+0x104>)
 80041e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	607b      	str	r3, [r7, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80041ea:	2200      	movs	r2, #0
 80041ec:	2110      	movs	r1, #16
 80041ee:	481f      	ldr	r0, [pc, #124]	; (800426c <_ZL12MX_GPIO_Initv+0x108>)
 80041f0:	f000 ffd8 	bl	80051a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80041f4:	2200      	movs	r2, #0
 80041f6:	2130      	movs	r1, #48	; 0x30
 80041f8:	481d      	ldr	r0, [pc, #116]	; (8004270 <_ZL12MX_GPIO_Initv+0x10c>)
 80041fa:	f000 ffd3 	bl	80051a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80041fe:	2200      	movs	r2, #0
 8004200:	f243 0104 	movw	r1, #12292	; 0x3004
 8004204:	481b      	ldr	r0, [pc, #108]	; (8004274 <_ZL12MX_GPIO_Initv+0x110>)
 8004206:	f000 ffcd 	bl	80051a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800420a:	2310      	movs	r3, #16
 800420c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800420e:	2301      	movs	r3, #1
 8004210:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004212:	2300      	movs	r3, #0
 8004214:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004216:	2300      	movs	r3, #0
 8004218:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800421a:	f107 0314 	add.w	r3, r7, #20
 800421e:	4619      	mov	r1, r3
 8004220:	4812      	ldr	r0, [pc, #72]	; (800426c <_ZL12MX_GPIO_Initv+0x108>)
 8004222:	f000 fe25 	bl	8004e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004226:	2330      	movs	r3, #48	; 0x30
 8004228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800422a:	2301      	movs	r3, #1
 800422c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422e:	2300      	movs	r3, #0
 8004230:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004232:	2300      	movs	r3, #0
 8004234:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004236:	f107 0314 	add.w	r3, r7, #20
 800423a:	4619      	mov	r1, r3
 800423c:	480c      	ldr	r0, [pc, #48]	; (8004270 <_ZL12MX_GPIO_Initv+0x10c>)
 800423e:	f000 fe17 	bl	8004e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13;
 8004242:	f243 0304 	movw	r3, #12292	; 0x3004
 8004246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004248:	2301      	movs	r3, #1
 800424a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800424c:	2300      	movs	r3, #0
 800424e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004250:	2300      	movs	r3, #0
 8004252:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004254:	f107 0314 	add.w	r3, r7, #20
 8004258:	4619      	mov	r1, r3
 800425a:	4806      	ldr	r0, [pc, #24]	; (8004274 <_ZL12MX_GPIO_Initv+0x110>)
 800425c:	f000 fe08 	bl	8004e70 <HAL_GPIO_Init>

}
 8004260:	bf00      	nop
 8004262:	3728      	adds	r7, #40	; 0x28
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40023800 	.word	0x40023800
 800426c:	40020000 	.word	0x40020000
 8004270:	40020800 	.word	0x40020800
 8004274:	40020400 	.word	0x40020400

08004278 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8004280:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004284:	4839      	ldr	r0, [pc, #228]	; (800436c <HAL_UART_RxCpltCallback+0xf4>)
 8004286:	f000 ffa6 	bl	80051d6 <HAL_GPIO_TogglePin>
	if (huart->Instance == USART3)  //current UART
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a38      	ldr	r2, [pc, #224]	; (8004370 <HAL_UART_RxCpltCallback+0xf8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d12a      	bne.n	80042ea <HAL_UART_RxCpltCallback+0x72>
	{
		if(Rx_data[0] == 's'){
 8004294:	4b37      	ldr	r3, [pc, #220]	; (8004374 <HAL_UART_RxCpltCallback+0xfc>)
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	2b73      	cmp	r3, #115	; 0x73
 800429a:	d110      	bne.n	80042be <HAL_UART_RxCpltCallback+0x46>
			i = 0;
 800429c:	4b36      	ldr	r3, [pc, #216]	; (8004378 <HAL_UART_RxCpltCallback+0x100>)
 800429e:	2200      	movs	r2, #0
 80042a0:	601a      	str	r2, [r3, #0]
             for(int count =0; count< 6; count++)
 80042a2:	2300      	movs	r3, #0
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b05      	cmp	r3, #5
 80042aa:	dc1e      	bgt.n	80042ea <HAL_UART_RxCpltCallback+0x72>
            	 Rx_buffer[count] = 0x00;
 80042ac:	4a33      	ldr	r2, [pc, #204]	; (800437c <HAL_UART_RxCpltCallback+0x104>)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	4413      	add	r3, r2
 80042b2:	2200      	movs	r2, #0
 80042b4:	701a      	strb	r2, [r3, #0]
             for(int count =0; count< 6; count++)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	3301      	adds	r3, #1
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	e7f3      	b.n	80042a6 <HAL_UART_RxCpltCallback+0x2e>
		}
		else{
			if(Rx_data[0] != 'e'){
 80042be:	4b2d      	ldr	r3, [pc, #180]	; (8004374 <HAL_UART_RxCpltCallback+0xfc>)
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b65      	cmp	r3, #101	; 0x65
 80042c4:	d00b      	beq.n	80042de <HAL_UART_RxCpltCallback+0x66>
			 Rx_buffer[i] = Rx_data[0];
 80042c6:	4b2c      	ldr	r3, [pc, #176]	; (8004378 <HAL_UART_RxCpltCallback+0x100>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a2a      	ldr	r2, [pc, #168]	; (8004374 <HAL_UART_RxCpltCallback+0xfc>)
 80042cc:	7811      	ldrb	r1, [r2, #0]
 80042ce:	4a2b      	ldr	r2, [pc, #172]	; (800437c <HAL_UART_RxCpltCallback+0x104>)
 80042d0:	54d1      	strb	r1, [r2, r3]
			 i++;
 80042d2:	4b29      	ldr	r3, [pc, #164]	; (8004378 <HAL_UART_RxCpltCallback+0x100>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	3301      	adds	r3, #1
 80042d8:	4a27      	ldr	r2, [pc, #156]	; (8004378 <HAL_UART_RxCpltCallback+0x100>)
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	e005      	b.n	80042ea <HAL_UART_RxCpltCallback+0x72>
//			 HAL_UART_Receive_IT(&huart3, (uint8_t *) Rx_data, 1);

			}
			else{
				sbus_decode(Rx_buffer);
 80042de:	4827      	ldr	r0, [pc, #156]	; (800437c <HAL_UART_RxCpltCallback+0x104>)
 80042e0:	f7fd fc04 	bl	8001aec <_Z11sbus_decodePh>
                Rx_data[0] = 0;
 80042e4:	4b23      	ldr	r3, [pc, #140]	; (8004374 <HAL_UART_RxCpltCallback+0xfc>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	701a      	strb	r2, [r3, #0]
//				HAL_UART_Receive_IT(&huart3, (uint8_t *) Rx_data, 1);
			}
		}
	}
	if (huart->Instance == USART1)  //current UART
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a24      	ldr	r2, [pc, #144]	; (8004380 <HAL_UART_RxCpltCallback+0x108>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d12c      	bne.n	800434e <HAL_UART_RxCpltCallback+0xd6>
	{
		if(Rx_data[0] == 's'){
 80042f4:	4b1f      	ldr	r3, [pc, #124]	; (8004374 <HAL_UART_RxCpltCallback+0xfc>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b73      	cmp	r3, #115	; 0x73
 80042fa:	d110      	bne.n	800431e <HAL_UART_RxCpltCallback+0xa6>
			i = 0;
 80042fc:	4b1e      	ldr	r3, [pc, #120]	; (8004378 <HAL_UART_RxCpltCallback+0x100>)
 80042fe:	2200      	movs	r2, #0
 8004300:	601a      	str	r2, [r3, #0]
             for(int count =0; count< 6; count++)
 8004302:	2300      	movs	r3, #0
 8004304:	60bb      	str	r3, [r7, #8]
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	2b05      	cmp	r3, #5
 800430a:	dc20      	bgt.n	800434e <HAL_UART_RxCpltCallback+0xd6>
            	 Rx_buffer[count] = 0x00;
 800430c:	4a1b      	ldr	r2, [pc, #108]	; (800437c <HAL_UART_RxCpltCallback+0x104>)
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	4413      	add	r3, r2
 8004312:	2200      	movs	r2, #0
 8004314:	701a      	strb	r2, [r3, #0]
             for(int count =0; count< 6; count++)
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	3301      	adds	r3, #1
 800431a:	60bb      	str	r3, [r7, #8]
 800431c:	e7f3      	b.n	8004306 <HAL_UART_RxCpltCallback+0x8e>
		}
		else{
			if(Rx_data[0] != 'e'){
 800431e:	4b15      	ldr	r3, [pc, #84]	; (8004374 <HAL_UART_RxCpltCallback+0xfc>)
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	2b65      	cmp	r3, #101	; 0x65
 8004324:	d00b      	beq.n	800433e <HAL_UART_RxCpltCallback+0xc6>
			 Rx_buffer[i] = Rx_data[0];
 8004326:	4b14      	ldr	r3, [pc, #80]	; (8004378 <HAL_UART_RxCpltCallback+0x100>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a12      	ldr	r2, [pc, #72]	; (8004374 <HAL_UART_RxCpltCallback+0xfc>)
 800432c:	7811      	ldrb	r1, [r2, #0]
 800432e:	4a13      	ldr	r2, [pc, #76]	; (800437c <HAL_UART_RxCpltCallback+0x104>)
 8004330:	54d1      	strb	r1, [r2, r3]
			 i++;
 8004332:	4b11      	ldr	r3, [pc, #68]	; (8004378 <HAL_UART_RxCpltCallback+0x100>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	3301      	adds	r3, #1
 8004338:	4a0f      	ldr	r2, [pc, #60]	; (8004378 <HAL_UART_RxCpltCallback+0x100>)
 800433a:	6013      	str	r3, [r2, #0]
 800433c:	e007      	b.n	800434e <HAL_UART_RxCpltCallback+0xd6>
//			 HAL_UART_Receive_IT(&huart3, (uint8_t *) Rx_data, 1);

			}
			else{
				sbus_decode(Rx_buffer);
 800433e:	480f      	ldr	r0, [pc, #60]	; (800437c <HAL_UART_RxCpltCallback+0x104>)
 8004340:	f7fd fbd4 	bl	8001aec <_Z11sbus_decodePh>
				set_ESC();
 8004344:	f7ff fbe8 	bl	8003b18 <_Z7set_ESCv>
                Rx_data[0] = 0;
 8004348:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <HAL_UART_RxCpltCallback+0xfc>)
 800434a:	2200      	movs	r2, #0
 800434c:	701a      	strb	r2, [r3, #0]

//				HAL_UART_Receive_IT(&huart3, (uint8_t *) Rx_data, 1);
			}
		}
	}
	 HAL_UART_Receive_IT(&huart1, (uint8_t *) Rx_data, 1);
 800434e:	2201      	movs	r2, #1
 8004350:	4908      	ldr	r1, [pc, #32]	; (8004374 <HAL_UART_RxCpltCallback+0xfc>)
 8004352:	480c      	ldr	r0, [pc, #48]	; (8004384 <HAL_UART_RxCpltCallback+0x10c>)
 8004354:	f003 fcea 	bl	8007d2c <HAL_UART_Receive_IT>
	 HAL_UART_Receive_IT(&huart3, (uint8_t *) Rx_data, 1);
 8004358:	2201      	movs	r2, #1
 800435a:	4906      	ldr	r1, [pc, #24]	; (8004374 <HAL_UART_RxCpltCallback+0xfc>)
 800435c:	480a      	ldr	r0, [pc, #40]	; (8004388 <HAL_UART_RxCpltCallback+0x110>)
 800435e:	f003 fce5 	bl	8007d2c <HAL_UART_Receive_IT>
}
 8004362:	bf00      	nop
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	40020400 	.word	0x40020400
 8004370:	40004800 	.word	0x40004800
 8004374:	200008b8 	.word	0x200008b8
 8004378:	200008c4 	.word	0x200008c4
 800437c:	200008bc 	.word	0x200008bc
 8004380:	40011000 	.word	0x40011000
 8004384:	20000864 	.word	0x20000864
 8004388:	2000071c 	.word	0x2000071c

0800438c <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800438c:	b5b0      	push	{r4, r5, r7, lr}
 800438e:	b088      	sub	sp, #32
 8004390:	af00      	add	r7, sp, #0
 8004392:	61f8      	str	r0, [r7, #28]
  for(;;)
  {

//    data = osMailAlloc(QueueHandle, osWaitForever); /* Allocate memory */

   data_imu_raw = process_MPU();
 8004394:	4c0b      	ldr	r4, [pc, #44]	; (80043c4 <_Z16StartDefaultTaskPKv+0x38>)
 8004396:	463b      	mov	r3, r7
 8004398:	4618      	mov	r0, r3
 800439a:	f7fd fa15 	bl	80017c8 <_Z11process_MPUv>
 800439e:	4625      	mov	r5, r4
 80043a0:	463c      	mov	r4, r7
 80043a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043aa:	e885 0003 	stmia.w	r5, {r0, r1}
   adding_raw();
 80043ae:	f7fd f9a9 	bl	8001704 <_Z10adding_rawv>
   i++;
 80043b2:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <_Z16StartDefaultTaskPKv+0x3c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	3301      	adds	r3, #1
 80043b8:	4a03      	ldr	r2, [pc, #12]	; (80043c8 <_Z16StartDefaultTaskPKv+0x3c>)
 80043ba:	6013      	str	r3, [r2, #0]

//    if (osMailPut(QueueHandle, data) != osOK) /* Send Mail */
//        {
//          osDelay(50);
//        }
    osDelay(2);
 80043bc:	2002      	movs	r0, #2
 80043be:	f004 fb72 	bl	8008aa6 <osDelay>
   data_imu_raw = process_MPU();
 80043c2:	e7e7      	b.n	8004394 <_Z16StartDefaultTaskPKv+0x8>
 80043c4:	200008c8 	.word	0x200008c8
 80043c8:	200008c4 	.word	0x200008c4

080043cc <_Z11StartTask02PKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
//	  print_every_thing(data_imu_buffer,drone_state);
////	  print_raw(data_imu_buffer);
	  osDelay(33);
 80043d4:	2021      	movs	r0, #33	; 0x21
 80043d6:	f004 fb66 	bl	8008aa6 <osDelay>
 80043da:	e7fb      	b.n	80043d4 <_Z11StartTask02PKv+0x8>

080043dc <_Z11StartTask03PKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
//	i = 0;
//	process_magnet();
    osDelay(1000);
 80043e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80043e8:	f004 fb5d 	bl	8008aa6 <osDelay>
 80043ec:	e7fa      	b.n	80043e4 <_Z11StartTask03PKv+0x8>
	...

080043f0 <_Z14filterFunctionPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_filterFunction */
void filterFunction(void const * argument)
{
 80043f0:	b5b0      	push	{r4, r5, r7, lr}
 80043f2:	b08a      	sub	sp, #40	; 0x28
 80043f4:	af04      	add	r7, sp, #16
 80043f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN filterFunction */
  /* Infinite loop */
  for(;;)
  {
	  data_imu_buffer.Gyro_x = (float) Gyro_x_/i;
 80043f8:	4b6d      	ldr	r3, [pc, #436]	; (80045b0 <_Z14filterFunctionPKv+0x1c0>)
 80043fa:	edd3 6a00 	vldr	s13, [r3]
 80043fe:	4b6d      	ldr	r3, [pc, #436]	; (80045b4 <_Z14filterFunctionPKv+0x1c4>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	ee07 3a90 	vmov	s15, r3
 8004406:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800440a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800440e:	4b6a      	ldr	r3, [pc, #424]	; (80045b8 <_Z14filterFunctionPKv+0x1c8>)
 8004410:	edc3 7a00 	vstr	s15, [r3]
	  data_imu_buffer.Gyro_y = (float) Gyro_y_/i;
 8004414:	4b69      	ldr	r3, [pc, #420]	; (80045bc <_Z14filterFunctionPKv+0x1cc>)
 8004416:	edd3 6a00 	vldr	s13, [r3]
 800441a:	4b66      	ldr	r3, [pc, #408]	; (80045b4 <_Z14filterFunctionPKv+0x1c4>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	ee07 3a90 	vmov	s15, r3
 8004422:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800442a:	4b63      	ldr	r3, [pc, #396]	; (80045b8 <_Z14filterFunctionPKv+0x1c8>)
 800442c:	edc3 7a01 	vstr	s15, [r3, #4]
	  data_imu_buffer.Gyro_z = (float) Gyro_z_/i;
 8004430:	4b63      	ldr	r3, [pc, #396]	; (80045c0 <_Z14filterFunctionPKv+0x1d0>)
 8004432:	edd3 6a00 	vldr	s13, [r3]
 8004436:	4b5f      	ldr	r3, [pc, #380]	; (80045b4 <_Z14filterFunctionPKv+0x1c4>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	ee07 3a90 	vmov	s15, r3
 800443e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004446:	4b5c      	ldr	r3, [pc, #368]	; (80045b8 <_Z14filterFunctionPKv+0x1c8>)
 8004448:	edc3 7a02 	vstr	s15, [r3, #8]

	  gyro_angle_r += data_imu_buffer.Gyro_x*0.01;
 800444c:	4b5d      	ldr	r3, [pc, #372]	; (80045c4 <_Z14filterFunctionPKv+0x1d4>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4618      	mov	r0, r3
 8004452:	f7fc f829 	bl	80004a8 <__aeabi_f2d>
 8004456:	4604      	mov	r4, r0
 8004458:	460d      	mov	r5, r1
 800445a:	4b57      	ldr	r3, [pc, #348]	; (80045b8 <_Z14filterFunctionPKv+0x1c8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f7fc f822 	bl	80004a8 <__aeabi_f2d>
 8004464:	a350      	add	r3, pc, #320	; (adr r3, 80045a8 <_Z14filterFunctionPKv+0x1b8>)
 8004466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446a:	f7fc f875 	bl	8000558 <__aeabi_dmul>
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	4620      	mov	r0, r4
 8004474:	4629      	mov	r1, r5
 8004476:	f7fb feb9 	bl	80001ec <__adddf3>
 800447a:	4603      	mov	r3, r0
 800447c:	460c      	mov	r4, r1
 800447e:	4618      	mov	r0, r3
 8004480:	4621      	mov	r1, r4
 8004482:	f7fc fb4b 	bl	8000b1c <__aeabi_d2f>
 8004486:	4602      	mov	r2, r0
 8004488:	4b4e      	ldr	r3, [pc, #312]	; (80045c4 <_Z14filterFunctionPKv+0x1d4>)
 800448a:	601a      	str	r2, [r3, #0]
	  gyro_angle_p += data_imu_buffer.Gyro_y*0.01;
 800448c:	4b4e      	ldr	r3, [pc, #312]	; (80045c8 <_Z14filterFunctionPKv+0x1d8>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4618      	mov	r0, r3
 8004492:	f7fc f809 	bl	80004a8 <__aeabi_f2d>
 8004496:	4604      	mov	r4, r0
 8004498:	460d      	mov	r5, r1
 800449a:	4b47      	ldr	r3, [pc, #284]	; (80045b8 <_Z14filterFunctionPKv+0x1c8>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fc f802 	bl	80004a8 <__aeabi_f2d>
 80044a4:	a340      	add	r3, pc, #256	; (adr r3, 80045a8 <_Z14filterFunctionPKv+0x1b8>)
 80044a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044aa:	f7fc f855 	bl	8000558 <__aeabi_dmul>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	4620      	mov	r0, r4
 80044b4:	4629      	mov	r1, r5
 80044b6:	f7fb fe99 	bl	80001ec <__adddf3>
 80044ba:	4603      	mov	r3, r0
 80044bc:	460c      	mov	r4, r1
 80044be:	4618      	mov	r0, r3
 80044c0:	4621      	mov	r1, r4
 80044c2:	f7fc fb2b 	bl	8000b1c <__aeabi_d2f>
 80044c6:	4602      	mov	r2, r0
 80044c8:	4b3f      	ldr	r3, [pc, #252]	; (80045c8 <_Z14filterFunctionPKv+0x1d8>)
 80044ca:	601a      	str	r2, [r3, #0]
	  gyro_angle_y += data_imu_buffer.Gyro_z*0.01;
 80044cc:	4b3f      	ldr	r3, [pc, #252]	; (80045cc <_Z14filterFunctionPKv+0x1dc>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7fb ffe9 	bl	80004a8 <__aeabi_f2d>
 80044d6:	4604      	mov	r4, r0
 80044d8:	460d      	mov	r5, r1
 80044da:	4b37      	ldr	r3, [pc, #220]	; (80045b8 <_Z14filterFunctionPKv+0x1c8>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fb ffe2 	bl	80004a8 <__aeabi_f2d>
 80044e4:	a330      	add	r3, pc, #192	; (adr r3, 80045a8 <_Z14filterFunctionPKv+0x1b8>)
 80044e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ea:	f7fc f835 	bl	8000558 <__aeabi_dmul>
 80044ee:	4602      	mov	r2, r0
 80044f0:	460b      	mov	r3, r1
 80044f2:	4620      	mov	r0, r4
 80044f4:	4629      	mov	r1, r5
 80044f6:	f7fb fe79 	bl	80001ec <__adddf3>
 80044fa:	4603      	mov	r3, r0
 80044fc:	460c      	mov	r4, r1
 80044fe:	4618      	mov	r0, r3
 8004500:	4621      	mov	r1, r4
 8004502:	f7fc fb0b 	bl	8000b1c <__aeabi_d2f>
 8004506:	4602      	mov	r2, r0
 8004508:	4b30      	ldr	r3, [pc, #192]	; (80045cc <_Z14filterFunctionPKv+0x1dc>)
 800450a:	601a      	str	r2, [r3, #0]

	  data_imu_buffer.Acc_x =  (float) Acc_x_/i;
 800450c:	4b30      	ldr	r3, [pc, #192]	; (80045d0 <_Z14filterFunctionPKv+0x1e0>)
 800450e:	edd3 6a00 	vldr	s13, [r3]
 8004512:	4b28      	ldr	r3, [pc, #160]	; (80045b4 <_Z14filterFunctionPKv+0x1c4>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	ee07 3a90 	vmov	s15, r3
 800451a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800451e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004522:	4b25      	ldr	r3, [pc, #148]	; (80045b8 <_Z14filterFunctionPKv+0x1c8>)
 8004524:	edc3 7a03 	vstr	s15, [r3, #12]
	  data_imu_buffer.Acc_y =  (float) Acc_y_/i;
 8004528:	4b2a      	ldr	r3, [pc, #168]	; (80045d4 <_Z14filterFunctionPKv+0x1e4>)
 800452a:	edd3 6a00 	vldr	s13, [r3]
 800452e:	4b21      	ldr	r3, [pc, #132]	; (80045b4 <_Z14filterFunctionPKv+0x1c4>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	ee07 3a90 	vmov	s15, r3
 8004536:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800453a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800453e:	4b1e      	ldr	r3, [pc, #120]	; (80045b8 <_Z14filterFunctionPKv+0x1c8>)
 8004540:	edc3 7a04 	vstr	s15, [r3, #16]
	  data_imu_buffer.Acc_z =  (float) Acc_z_/i;
 8004544:	4b24      	ldr	r3, [pc, #144]	; (80045d8 <_Z14filterFunctionPKv+0x1e8>)
 8004546:	edd3 6a00 	vldr	s13, [r3]
 800454a:	4b1a      	ldr	r3, [pc, #104]	; (80045b4 <_Z14filterFunctionPKv+0x1c4>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	ee07 3a90 	vmov	s15, r3
 8004552:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004556:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800455a:	4b17      	ldr	r3, [pc, #92]	; (80045b8 <_Z14filterFunctionPKv+0x1c8>)
 800455c:	edc3 7a05 	vstr	s15, [r3, #20]
//
	  ekf.updateEKF(data_imu_buffer, 0.01);
 8004560:	4b15      	ldr	r3, [pc, #84]	; (80045b8 <_Z14filterFunctionPKv+0x1c8>)
 8004562:	466c      	mov	r4, sp
 8004564:	f103 020c 	add.w	r2, r3, #12
 8004568:	ca07      	ldmia	r2, {r0, r1, r2}
 800456a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800456e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004570:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 80045dc <_Z14filterFunctionPKv+0x1ec>
 8004574:	481a      	ldr	r0, [pc, #104]	; (80045e0 <_Z14filterFunctionPKv+0x1f0>)
 8004576:	f7fe f88f 	bl	8002698 <_ZN3EKF9updateEKFE8IMU_dataf>
 800457a:	eeb0 6a40 	vmov.f32	s12, s0
 800457e:	eef0 6a60 	vmov.f32	s13, s1
 8004582:	eeb0 7a41 	vmov.f32	s14, s2
 8004586:	eef0 7a61 	vmov.f32	s15, s3
 800458a:	ed87 6a02 	vstr	s12, [r7, #8]
 800458e:	edc7 6a03 	vstr	s13, [r7, #12]
 8004592:	ed87 7a04 	vstr	s14, [r7, #16]
 8004596:	edc7 7a05 	vstr	s15, [r7, #20]
//	  i = 0;
////	  drone_state.pitch = gyro_angle_p;
////	  drone_state.roll = gyro_angle_r;
////	  drone_state.yaw = gyro_angle_y;
//	  delete_raw();
      osDelay(10);
 800459a:	200a      	movs	r0, #10
 800459c:	f004 fa83 	bl	8008aa6 <osDelay>
	  data_imu_buffer.Gyro_x = (float) Gyro_x_/i;
 80045a0:	e72a      	b.n	80043f8 <_Z14filterFunctionPKv+0x8>
 80045a2:	bf00      	nop
 80045a4:	f3af 8000 	nop.w
 80045a8:	47ae147b 	.word	0x47ae147b
 80045ac:	3f847ae1 	.word	0x3f847ae1
 80045b0:	200007c4 	.word	0x200007c4
 80045b4:	200008c4 	.word	0x200008c4
 80045b8:	200008e0 	.word	0x200008e0
 80045bc:	200007c8 	.word	0x200007c8
 80045c0:	200007cc 	.word	0x200007cc
 80045c4:	200007d0 	.word	0x200007d0
 80045c8:	200007d4 	.word	0x200007d4
 80045cc:	200007d8 	.word	0x200007d8
 80045d0:	200007b8 	.word	0x200007b8
 80045d4:	200007bc 	.word	0x200007bc
 80045d8:	200007c0 	.word	0x200007c0
 80045dc:	3c23d70a 	.word	0x3c23d70a
 80045e0:	200008f8 	.word	0x200008f8

080045e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a09      	ldr	r2, [pc, #36]	; (8004618 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d101      	bne.n	80045fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80045f6:	f000 faf5 	bl	8004be4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM7) {
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a07      	ldr	r2, [pc, #28]	; (800461c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d104      	bne.n	800460e <HAL_TIM_PeriodElapsedCallback+0x2a>
	  ulHighFrequencyTimerTicks ++;
 8004604:	4b06      	ldr	r3, [pc, #24]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	3301      	adds	r3, #1
 800460a:	4a05      	ldr	r2, [pc, #20]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800460c:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END Callback 1 */
}
 800460e:	bf00      	nop
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40002000 	.word	0x40002000
 800461c:	40001400 	.word	0x40001400
 8004620:	200006c4 	.word	0x200006c4

08004624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004628:	bf00      	nop
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
	...

08004634 <_Z41__static_initialization_and_destruction_0ii>:
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af02      	add	r7, sp, #8
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d10c      	bne.n	800465e <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800464a:	4293      	cmp	r3, r2
 800464c:	d107      	bne.n	800465e <_Z41__static_initialization_and_destruction_0ii+0x2a>
EKF ekf = EKF(x,P,Q,R);
 800464e:	4b0b      	ldr	r3, [pc, #44]	; (800467c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	4b0b      	ldr	r3, [pc, #44]	; (8004680 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004654:	4a0b      	ldr	r2, [pc, #44]	; (8004684 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004656:	490c      	ldr	r1, [pc, #48]	; (8004688 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004658:	480c      	ldr	r0, [pc, #48]	; (800468c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800465a:	f7ff f937 	bl	80038cc <_ZN3EKFC1EPdS0_S0_S0_>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d107      	bne.n	8004674 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800466a:	4293      	cmp	r3, r2
 800466c:	d102      	bne.n	8004674 <_Z41__static_initialization_and_destruction_0ii+0x40>
 800466e:	4807      	ldr	r0, [pc, #28]	; (800468c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004670:	f7ff f99e 	bl	80039b0 <_ZN3EKFD1Ev>
}
 8004674:	bf00      	nop
 8004676:	3708      	adds	r7, #8
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	20000348 	.word	0x20000348
 8004680:	20000038 	.word	0x20000038
 8004684:	200001c0 	.word	0x200001c0
 8004688:	20000000 	.word	0x20000000
 800468c:	200008f8 	.word	0x200008f8

08004690 <_GLOBAL__sub_I_htim7>:
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
 8004694:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004698:	2001      	movs	r0, #1
 800469a:	f7ff ffcb 	bl	8004634 <_Z41__static_initialization_and_destruction_0ii>
 800469e:	bd80      	pop	{r7, pc}

080046a0 <_GLOBAL__sub_D_htim7>:
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80046a8:	2000      	movs	r0, #0
 80046aa:	f7ff ffc3 	bl	8004634 <_Z41__static_initialization_and_destruction_0ii>
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046b6:	2300      	movs	r3, #0
 80046b8:	607b      	str	r3, [r7, #4]
 80046ba:	4b12      	ldr	r3, [pc, #72]	; (8004704 <HAL_MspInit+0x54>)
 80046bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046be:	4a11      	ldr	r2, [pc, #68]	; (8004704 <HAL_MspInit+0x54>)
 80046c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046c4:	6453      	str	r3, [r2, #68]	; 0x44
 80046c6:	4b0f      	ldr	r3, [pc, #60]	; (8004704 <HAL_MspInit+0x54>)
 80046c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ce:	607b      	str	r3, [r7, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046d2:	2300      	movs	r3, #0
 80046d4:	603b      	str	r3, [r7, #0]
 80046d6:	4b0b      	ldr	r3, [pc, #44]	; (8004704 <HAL_MspInit+0x54>)
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	4a0a      	ldr	r2, [pc, #40]	; (8004704 <HAL_MspInit+0x54>)
 80046dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e0:	6413      	str	r3, [r2, #64]	; 0x40
 80046e2:	4b08      	ldr	r3, [pc, #32]	; (8004704 <HAL_MspInit+0x54>)
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ea:	603b      	str	r3, [r7, #0]
 80046ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80046ee:	2200      	movs	r2, #0
 80046f0:	210f      	movs	r1, #15
 80046f2:	f06f 0001 	mvn.w	r0, #1
 80046f6:	f000 fb6f 	bl	8004dd8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046fa:	bf00      	nop
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	40023800 	.word	0x40023800

08004708 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b08a      	sub	sp, #40	; 0x28
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004710:	f107 0314 	add.w	r3, r7, #20
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	605a      	str	r2, [r3, #4]
 800471a:	609a      	str	r2, [r3, #8]
 800471c:	60da      	str	r2, [r3, #12]
 800471e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a19      	ldr	r2, [pc, #100]	; (800478c <HAL_I2C_MspInit+0x84>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d12c      	bne.n	8004784 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800472a:	2300      	movs	r3, #0
 800472c:	613b      	str	r3, [r7, #16]
 800472e:	4b18      	ldr	r3, [pc, #96]	; (8004790 <HAL_I2C_MspInit+0x88>)
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	4a17      	ldr	r2, [pc, #92]	; (8004790 <HAL_I2C_MspInit+0x88>)
 8004734:	f043 0302 	orr.w	r3, r3, #2
 8004738:	6313      	str	r3, [r2, #48]	; 0x30
 800473a:	4b15      	ldr	r3, [pc, #84]	; (8004790 <HAL_I2C_MspInit+0x88>)
 800473c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	613b      	str	r3, [r7, #16]
 8004744:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004746:	f44f 7340 	mov.w	r3, #768	; 0x300
 800474a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800474c:	2312      	movs	r3, #18
 800474e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004750:	2301      	movs	r3, #1
 8004752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004754:	2303      	movs	r3, #3
 8004756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004758:	2304      	movs	r3, #4
 800475a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800475c:	f107 0314 	add.w	r3, r7, #20
 8004760:	4619      	mov	r1, r3
 8004762:	480c      	ldr	r0, [pc, #48]	; (8004794 <HAL_I2C_MspInit+0x8c>)
 8004764:	f000 fb84 	bl	8004e70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004768:	2300      	movs	r3, #0
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	4b08      	ldr	r3, [pc, #32]	; (8004790 <HAL_I2C_MspInit+0x88>)
 800476e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004770:	4a07      	ldr	r2, [pc, #28]	; (8004790 <HAL_I2C_MspInit+0x88>)
 8004772:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004776:	6413      	str	r3, [r2, #64]	; 0x40
 8004778:	4b05      	ldr	r3, [pc, #20]	; (8004790 <HAL_I2C_MspInit+0x88>)
 800477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004784:	bf00      	nop
 8004786:	3728      	adds	r7, #40	; 0x28
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	40005400 	.word	0x40005400
 8004790:	40023800 	.word	0x40023800
 8004794:	40020400 	.word	0x40020400

08004798 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a22      	ldr	r2, [pc, #136]	; (8004830 <HAL_TIM_Base_MspInit+0x98>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d10e      	bne.n	80047c8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80047aa:	2300      	movs	r3, #0
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	4b21      	ldr	r3, [pc, #132]	; (8004834 <HAL_TIM_Base_MspInit+0x9c>)
 80047b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b2:	4a20      	ldr	r2, [pc, #128]	; (8004834 <HAL_TIM_Base_MspInit+0x9c>)
 80047b4:	f043 0301 	orr.w	r3, r3, #1
 80047b8:	6453      	str	r3, [r2, #68]	; 0x44
 80047ba:	4b1e      	ldr	r3, [pc, #120]	; (8004834 <HAL_TIM_Base_MspInit+0x9c>)
 80047bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	617b      	str	r3, [r7, #20]
 80047c4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80047c6:	e02e      	b.n	8004826 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a1a      	ldr	r2, [pc, #104]	; (8004838 <HAL_TIM_Base_MspInit+0xa0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d10e      	bne.n	80047f0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80047d2:	2300      	movs	r3, #0
 80047d4:	613b      	str	r3, [r7, #16]
 80047d6:	4b17      	ldr	r3, [pc, #92]	; (8004834 <HAL_TIM_Base_MspInit+0x9c>)
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	4a16      	ldr	r2, [pc, #88]	; (8004834 <HAL_TIM_Base_MspInit+0x9c>)
 80047dc:	f043 0304 	orr.w	r3, r3, #4
 80047e0:	6413      	str	r3, [r2, #64]	; 0x40
 80047e2:	4b14      	ldr	r3, [pc, #80]	; (8004834 <HAL_TIM_Base_MspInit+0x9c>)
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	f003 0304 	and.w	r3, r3, #4
 80047ea:	613b      	str	r3, [r7, #16]
 80047ec:	693b      	ldr	r3, [r7, #16]
}
 80047ee:	e01a      	b.n	8004826 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM7)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a11      	ldr	r2, [pc, #68]	; (800483c <HAL_TIM_Base_MspInit+0xa4>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d115      	bne.n	8004826 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80047fa:	2300      	movs	r3, #0
 80047fc:	60fb      	str	r3, [r7, #12]
 80047fe:	4b0d      	ldr	r3, [pc, #52]	; (8004834 <HAL_TIM_Base_MspInit+0x9c>)
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	4a0c      	ldr	r2, [pc, #48]	; (8004834 <HAL_TIM_Base_MspInit+0x9c>)
 8004804:	f043 0320 	orr.w	r3, r3, #32
 8004808:	6413      	str	r3, [r2, #64]	; 0x40
 800480a:	4b0a      	ldr	r3, [pc, #40]	; (8004834 <HAL_TIM_Base_MspInit+0x9c>)
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	f003 0320 	and.w	r3, r3, #32
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8004816:	2200      	movs	r2, #0
 8004818:	2105      	movs	r1, #5
 800481a:	2037      	movs	r0, #55	; 0x37
 800481c:	f000 fadc 	bl	8004dd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004820:	2037      	movs	r0, #55	; 0x37
 8004822:	f000 faf5 	bl	8004e10 <HAL_NVIC_EnableIRQ>
}
 8004826:	bf00      	nop
 8004828:	3718      	adds	r7, #24
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	40010000 	.word	0x40010000
 8004834:	40023800 	.word	0x40023800
 8004838:	40000800 	.word	0x40000800
 800483c:	40001400 	.word	0x40001400

08004840 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b088      	sub	sp, #32
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004848:	f107 030c 	add.w	r3, r7, #12
 800484c:	2200      	movs	r2, #0
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	605a      	str	r2, [r3, #4]
 8004852:	609a      	str	r2, [r3, #8]
 8004854:	60da      	str	r2, [r3, #12]
 8004856:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a12      	ldr	r2, [pc, #72]	; (80048a8 <HAL_TIM_MspPostInit+0x68>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d11e      	bne.n	80048a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004862:	2300      	movs	r3, #0
 8004864:	60bb      	str	r3, [r7, #8]
 8004866:	4b11      	ldr	r3, [pc, #68]	; (80048ac <HAL_TIM_MspPostInit+0x6c>)
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	4a10      	ldr	r2, [pc, #64]	; (80048ac <HAL_TIM_MspPostInit+0x6c>)
 800486c:	f043 0301 	orr.w	r3, r3, #1
 8004870:	6313      	str	r3, [r2, #48]	; 0x30
 8004872:	4b0e      	ldr	r3, [pc, #56]	; (80048ac <HAL_TIM_MspPostInit+0x6c>)
 8004874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	60bb      	str	r3, [r7, #8]
 800487c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800487e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8004882:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004884:	2302      	movs	r3, #2
 8004886:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004888:	2300      	movs	r3, #0
 800488a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800488c:	2300      	movs	r3, #0
 800488e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004890:	2301      	movs	r3, #1
 8004892:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004894:	f107 030c 	add.w	r3, r7, #12
 8004898:	4619      	mov	r1, r3
 800489a:	4805      	ldr	r0, [pc, #20]	; (80048b0 <HAL_TIM_MspPostInit+0x70>)
 800489c:	f000 fae8 	bl	8004e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80048a0:	bf00      	nop
 80048a2:	3720      	adds	r7, #32
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	40010000 	.word	0x40010000
 80048ac:	40023800 	.word	0x40023800
 80048b0:	40020000 	.word	0x40020000

080048b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08c      	sub	sp, #48	; 0x30
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048bc:	f107 031c 	add.w	r3, r7, #28
 80048c0:	2200      	movs	r2, #0
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	605a      	str	r2, [r3, #4]
 80048c6:	609a      	str	r2, [r3, #8]
 80048c8:	60da      	str	r2, [r3, #12]
 80048ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a36      	ldr	r2, [pc, #216]	; (80049ac <HAL_UART_MspInit+0xf8>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d134      	bne.n	8004940 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80048d6:	2300      	movs	r3, #0
 80048d8:	61bb      	str	r3, [r7, #24]
 80048da:	4b35      	ldr	r3, [pc, #212]	; (80049b0 <HAL_UART_MspInit+0xfc>)
 80048dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048de:	4a34      	ldr	r2, [pc, #208]	; (80049b0 <HAL_UART_MspInit+0xfc>)
 80048e0:	f043 0310 	orr.w	r3, r3, #16
 80048e4:	6453      	str	r3, [r2, #68]	; 0x44
 80048e6:	4b32      	ldr	r3, [pc, #200]	; (80049b0 <HAL_UART_MspInit+0xfc>)
 80048e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ea:	f003 0310 	and.w	r3, r3, #16
 80048ee:	61bb      	str	r3, [r7, #24]
 80048f0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048f2:	2300      	movs	r3, #0
 80048f4:	617b      	str	r3, [r7, #20]
 80048f6:	4b2e      	ldr	r3, [pc, #184]	; (80049b0 <HAL_UART_MspInit+0xfc>)
 80048f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fa:	4a2d      	ldr	r2, [pc, #180]	; (80049b0 <HAL_UART_MspInit+0xfc>)
 80048fc:	f043 0302 	orr.w	r3, r3, #2
 8004900:	6313      	str	r3, [r2, #48]	; 0x30
 8004902:	4b2b      	ldr	r3, [pc, #172]	; (80049b0 <HAL_UART_MspInit+0xfc>)
 8004904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	617b      	str	r3, [r7, #20]
 800490c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800490e:	23c0      	movs	r3, #192	; 0xc0
 8004910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004912:	2302      	movs	r3, #2
 8004914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004916:	2300      	movs	r3, #0
 8004918:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800491a:	2303      	movs	r3, #3
 800491c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800491e:	2307      	movs	r3, #7
 8004920:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004922:	f107 031c 	add.w	r3, r7, #28
 8004926:	4619      	mov	r1, r3
 8004928:	4822      	ldr	r0, [pc, #136]	; (80049b4 <HAL_UART_MspInit+0x100>)
 800492a:	f000 faa1 	bl	8004e70 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 8, 0);
 800492e:	2200      	movs	r2, #0
 8004930:	2108      	movs	r1, #8
 8004932:	2025      	movs	r0, #37	; 0x25
 8004934:	f000 fa50 	bl	8004dd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004938:	2025      	movs	r0, #37	; 0x25
 800493a:	f000 fa69 	bl	8004e10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800493e:	e031      	b.n	80049a4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a1c      	ldr	r2, [pc, #112]	; (80049b8 <HAL_UART_MspInit+0x104>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d12c      	bne.n	80049a4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800494a:	2300      	movs	r3, #0
 800494c:	613b      	str	r3, [r7, #16]
 800494e:	4b18      	ldr	r3, [pc, #96]	; (80049b0 <HAL_UART_MspInit+0xfc>)
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	4a17      	ldr	r2, [pc, #92]	; (80049b0 <HAL_UART_MspInit+0xfc>)
 8004954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004958:	6413      	str	r3, [r2, #64]	; 0x40
 800495a:	4b15      	ldr	r3, [pc, #84]	; (80049b0 <HAL_UART_MspInit+0xfc>)
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004962:	613b      	str	r3, [r7, #16]
 8004964:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004966:	2300      	movs	r3, #0
 8004968:	60fb      	str	r3, [r7, #12]
 800496a:	4b11      	ldr	r3, [pc, #68]	; (80049b0 <HAL_UART_MspInit+0xfc>)
 800496c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496e:	4a10      	ldr	r2, [pc, #64]	; (80049b0 <HAL_UART_MspInit+0xfc>)
 8004970:	f043 0302 	orr.w	r3, r3, #2
 8004974:	6313      	str	r3, [r2, #48]	; 0x30
 8004976:	4b0e      	ldr	r3, [pc, #56]	; (80049b0 <HAL_UART_MspInit+0xfc>)
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004982:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004988:	2302      	movs	r3, #2
 800498a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800498c:	2300      	movs	r3, #0
 800498e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004990:	2303      	movs	r3, #3
 8004992:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004994:	2307      	movs	r3, #7
 8004996:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004998:	f107 031c 	add.w	r3, r7, #28
 800499c:	4619      	mov	r1, r3
 800499e:	4805      	ldr	r0, [pc, #20]	; (80049b4 <HAL_UART_MspInit+0x100>)
 80049a0:	f000 fa66 	bl	8004e70 <HAL_GPIO_Init>
}
 80049a4:	bf00      	nop
 80049a6:	3730      	adds	r7, #48	; 0x30
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	40011000 	.word	0x40011000
 80049b0:	40023800 	.word	0x40023800
 80049b4:	40020400 	.word	0x40020400
 80049b8:	40004800 	.word	0x40004800

080049bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b08c      	sub	sp, #48	; 0x30
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80049c8:	2300      	movs	r3, #0
 80049ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 80049cc:	2200      	movs	r2, #0
 80049ce:	6879      	ldr	r1, [r7, #4]
 80049d0:	202d      	movs	r0, #45	; 0x2d
 80049d2:	f000 fa01 	bl	8004dd8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 80049d6:	202d      	movs	r0, #45	; 0x2d
 80049d8:	f000 fa1a 	bl	8004e10 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80049dc:	2300      	movs	r3, #0
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	4b1f      	ldr	r3, [pc, #124]	; (8004a60 <HAL_InitTick+0xa4>)
 80049e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e4:	4a1e      	ldr	r2, [pc, #120]	; (8004a60 <HAL_InitTick+0xa4>)
 80049e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ea:	6413      	str	r3, [r2, #64]	; 0x40
 80049ec:	4b1c      	ldr	r3, [pc, #112]	; (8004a60 <HAL_InitTick+0xa4>)
 80049ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80049f8:	f107 0210 	add.w	r2, r7, #16
 80049fc:	f107 0314 	add.w	r3, r7, #20
 8004a00:	4611      	mov	r1, r2
 8004a02:	4618      	mov	r0, r3
 8004a04:	f002 f8f4 	bl	8006bf0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004a08:	f002 f8ca 	bl	8006ba0 <HAL_RCC_GetPCLK1Freq>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a14:	4a13      	ldr	r2, [pc, #76]	; (8004a64 <HAL_InitTick+0xa8>)
 8004a16:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1a:	0c9b      	lsrs	r3, r3, #18
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8004a20:	4b11      	ldr	r3, [pc, #68]	; (8004a68 <HAL_InitTick+0xac>)
 8004a22:	4a12      	ldr	r2, [pc, #72]	; (8004a6c <HAL_InitTick+0xb0>)
 8004a24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 8004a26:	4b10      	ldr	r3, [pc, #64]	; (8004a68 <HAL_InitTick+0xac>)
 8004a28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004a2c:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8004a2e:	4a0e      	ldr	r2, [pc, #56]	; (8004a68 <HAL_InitTick+0xac>)
 8004a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a32:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8004a34:	4b0c      	ldr	r3, [pc, #48]	; (8004a68 <HAL_InitTick+0xac>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a3a:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <HAL_InitTick+0xac>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8004a40:	4809      	ldr	r0, [pc, #36]	; (8004a68 <HAL_InitTick+0xac>)
 8004a42:	f002 f907 	bl	8006c54 <HAL_TIM_Base_Init>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d104      	bne.n	8004a56 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8004a4c:	4806      	ldr	r0, [pc, #24]	; (8004a68 <HAL_InitTick+0xac>)
 8004a4e:	f002 f950 	bl	8006cf2 <HAL_TIM_Base_Start_IT>
 8004a52:	4603      	mov	r3, r0
 8004a54:	e000      	b.n	8004a58 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3730      	adds	r7, #48	; 0x30
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	40023800 	.word	0x40023800
 8004a64:	431bde83 	.word	0x431bde83
 8004a68:	2001a418 	.word	0x2001a418
 8004a6c:	40002000 	.word	0x40002000

08004a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004a74:	bf00      	nop
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a82:	e7fe      	b.n	8004a82 <HardFault_Handler+0x4>

08004a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a84:	b480      	push	{r7}
 8004a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a88:	e7fe      	b.n	8004a88 <MemManage_Handler+0x4>

08004a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a8e:	e7fe      	b.n	8004a8e <BusFault_Handler+0x4>

08004a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a94:	e7fe      	b.n	8004a94 <UsageFault_Handler+0x4>

08004a96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a96:	b480      	push	{r7}
 8004a98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a9a:	bf00      	nop
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004aa8:	4802      	ldr	r0, [pc, #8]	; (8004ab4 <USART1_IRQHandler+0x10>)
 8004aaa:	f003 f995 	bl	8007dd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004aae:	bf00      	nop
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	20000864 	.word	0x20000864

08004ab8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004abc:	4802      	ldr	r0, [pc, #8]	; (8004ac8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004abe:	f002 f9af 	bl	8006e20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004ac2:	bf00      	nop
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	2001a418 	.word	0x2001a418

08004acc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004ad0:	4802      	ldr	r0, [pc, #8]	; (8004adc <TIM7_IRQHandler+0x10>)
 8004ad2:	f002 f9a5 	bl	8006e20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004ad6:	bf00      	nop
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	20000684 	.word	0x20000684

08004ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ae4:	4b16      	ldr	r3, [pc, #88]	; (8004b40 <SystemInit+0x60>)
 8004ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aea:	4a15      	ldr	r2, [pc, #84]	; (8004b40 <SystemInit+0x60>)
 8004aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004af4:	4b13      	ldr	r3, [pc, #76]	; (8004b44 <SystemInit+0x64>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a12      	ldr	r2, [pc, #72]	; (8004b44 <SystemInit+0x64>)
 8004afa:	f043 0301 	orr.w	r3, r3, #1
 8004afe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004b00:	4b10      	ldr	r3, [pc, #64]	; (8004b44 <SystemInit+0x64>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004b06:	4b0f      	ldr	r3, [pc, #60]	; (8004b44 <SystemInit+0x64>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a0e      	ldr	r2, [pc, #56]	; (8004b44 <SystemInit+0x64>)
 8004b0c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b14:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004b16:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <SystemInit+0x64>)
 8004b18:	4a0b      	ldr	r2, [pc, #44]	; (8004b48 <SystemInit+0x68>)
 8004b1a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004b1c:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <SystemInit+0x64>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a08      	ldr	r2, [pc, #32]	; (8004b44 <SystemInit+0x64>)
 8004b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b26:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004b28:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <SystemInit+0x64>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004b2e:	4b04      	ldr	r3, [pc, #16]	; (8004b40 <SystemInit+0x60>)
 8004b30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b34:	609a      	str	r2, [r3, #8]
#endif
}
 8004b36:	bf00      	nop
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	e000ed00 	.word	0xe000ed00
 8004b44:	40023800 	.word	0x40023800
 8004b48:	24003010 	.word	0x24003010

08004b4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004b4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b84 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004b50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004b52:	e003      	b.n	8004b5c <LoopCopyDataInit>

08004b54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004b54:	4b0c      	ldr	r3, [pc, #48]	; (8004b88 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004b56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004b58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004b5a:	3104      	adds	r1, #4

08004b5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004b5c:	480b      	ldr	r0, [pc, #44]	; (8004b8c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004b5e:	4b0c      	ldr	r3, [pc, #48]	; (8004b90 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004b60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004b62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004b64:	d3f6      	bcc.n	8004b54 <CopyDataInit>
  ldr  r2, =_sbss
 8004b66:	4a0b      	ldr	r2, [pc, #44]	; (8004b94 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004b68:	e002      	b.n	8004b70 <LoopFillZerobss>

08004b6a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004b6a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004b6c:	f842 3b04 	str.w	r3, [r2], #4

08004b70 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004b70:	4b09      	ldr	r3, [pc, #36]	; (8004b98 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004b72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004b74:	d3f9      	bcc.n	8004b6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004b76:	f7ff ffb3 	bl	8004ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b7a:	f005 fb8f 	bl	800a29c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b7e:	f7fe fff1 	bl	8003b64 <main>
  bx  lr    
 8004b82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004b84:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004b88:	0800a550 	.word	0x0800a550
  ldr  r0, =_sdata
 8004b8c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004b90:	20000404 	.word	0x20000404
  ldr  r2, =_sbss
 8004b94:	20000408 	.word	0x20000408
  ldr  r3, = _ebss
 8004b98:	2001a45c 	.word	0x2001a45c

08004b9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b9c:	e7fe      	b.n	8004b9c <ADC_IRQHandler>
	...

08004ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ba4:	4b0e      	ldr	r3, [pc, #56]	; (8004be0 <HAL_Init+0x40>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a0d      	ldr	r2, [pc, #52]	; (8004be0 <HAL_Init+0x40>)
 8004baa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004bb0:	4b0b      	ldr	r3, [pc, #44]	; (8004be0 <HAL_Init+0x40>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a0a      	ldr	r2, [pc, #40]	; (8004be0 <HAL_Init+0x40>)
 8004bb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004bbc:	4b08      	ldr	r3, [pc, #32]	; (8004be0 <HAL_Init+0x40>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a07      	ldr	r2, [pc, #28]	; (8004be0 <HAL_Init+0x40>)
 8004bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bc8:	2003      	movs	r0, #3
 8004bca:	f000 f8fa 	bl	8004dc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004bce:	2000      	movs	r0, #0
 8004bd0:	f7ff fef4 	bl	80049bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004bd4:	f7ff fd6c 	bl	80046b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	40023c00 	.word	0x40023c00

08004be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004be8:	4b06      	ldr	r3, [pc, #24]	; (8004c04 <HAL_IncTick+0x20>)
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	461a      	mov	r2, r3
 8004bee:	4b06      	ldr	r3, [pc, #24]	; (8004c08 <HAL_IncTick+0x24>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	4a04      	ldr	r2, [pc, #16]	; (8004c08 <HAL_IncTick+0x24>)
 8004bf6:	6013      	str	r3, [r2, #0]
}
 8004bf8:	bf00      	nop
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	20000398 	.word	0x20000398
 8004c08:	2001a458 	.word	0x2001a458

08004c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8004c10:	4b03      	ldr	r3, [pc, #12]	; (8004c20 <HAL_GetTick+0x14>)
 8004c12:	681b      	ldr	r3, [r3, #0]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	2001a458 	.word	0x2001a458

08004c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c2c:	f7ff ffee 	bl	8004c0c <HAL_GetTick>
 8004c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c3c:	d005      	beq.n	8004c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c3e:	4b09      	ldr	r3, [pc, #36]	; (8004c64 <HAL_Delay+0x40>)
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	461a      	mov	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4413      	add	r3, r2
 8004c48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c4a:	bf00      	nop
 8004c4c:	f7ff ffde 	bl	8004c0c <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d8f7      	bhi.n	8004c4c <HAL_Delay+0x28>
  {
  }
}
 8004c5c:	bf00      	nop
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	20000398 	.word	0x20000398

08004c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c78:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <__NVIC_SetPriorityGrouping+0x44>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c84:	4013      	ands	r3, r2
 8004c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c9a:	4a04      	ldr	r2, [pc, #16]	; (8004cac <__NVIC_SetPriorityGrouping+0x44>)
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	60d3      	str	r3, [r2, #12]
}
 8004ca0:	bf00      	nop
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	e000ed00 	.word	0xe000ed00

08004cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cb4:	4b04      	ldr	r3, [pc, #16]	; (8004cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	0a1b      	lsrs	r3, r3, #8
 8004cba:	f003 0307 	and.w	r3, r3, #7
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr
 8004cc8:	e000ed00 	.word	0xe000ed00

08004ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	db0b      	blt.n	8004cf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cde:	79fb      	ldrb	r3, [r7, #7]
 8004ce0:	f003 021f 	and.w	r2, r3, #31
 8004ce4:	4907      	ldr	r1, [pc, #28]	; (8004d04 <__NVIC_EnableIRQ+0x38>)
 8004ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cea:	095b      	lsrs	r3, r3, #5
 8004cec:	2001      	movs	r0, #1
 8004cee:	fa00 f202 	lsl.w	r2, r0, r2
 8004cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	e000e100 	.word	0xe000e100

08004d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	4603      	mov	r3, r0
 8004d10:	6039      	str	r1, [r7, #0]
 8004d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	db0a      	blt.n	8004d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	490c      	ldr	r1, [pc, #48]	; (8004d54 <__NVIC_SetPriority+0x4c>)
 8004d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d26:	0112      	lsls	r2, r2, #4
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d30:	e00a      	b.n	8004d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	4908      	ldr	r1, [pc, #32]	; (8004d58 <__NVIC_SetPriority+0x50>)
 8004d38:	79fb      	ldrb	r3, [r7, #7]
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	3b04      	subs	r3, #4
 8004d40:	0112      	lsls	r2, r2, #4
 8004d42:	b2d2      	uxtb	r2, r2
 8004d44:	440b      	add	r3, r1
 8004d46:	761a      	strb	r2, [r3, #24]
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr
 8004d54:	e000e100 	.word	0xe000e100
 8004d58:	e000ed00 	.word	0xe000ed00

08004d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b089      	sub	sp, #36	; 0x24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f003 0307 	and.w	r3, r3, #7
 8004d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	f1c3 0307 	rsb	r3, r3, #7
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	bf28      	it	cs
 8004d7a:	2304      	movcs	r3, #4
 8004d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	3304      	adds	r3, #4
 8004d82:	2b06      	cmp	r3, #6
 8004d84:	d902      	bls.n	8004d8c <NVIC_EncodePriority+0x30>
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	3b03      	subs	r3, #3
 8004d8a:	e000      	b.n	8004d8e <NVIC_EncodePriority+0x32>
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9a:	43da      	mvns	r2, r3
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	401a      	ands	r2, r3
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004da4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	fa01 f303 	lsl.w	r3, r1, r3
 8004dae:	43d9      	mvns	r1, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004db4:	4313      	orrs	r3, r2
         );
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3724      	adds	r7, #36	; 0x24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b082      	sub	sp, #8
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7ff ff4c 	bl	8004c68 <__NVIC_SetPriorityGrouping>
}
 8004dd0:	bf00      	nop
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	4603      	mov	r3, r0
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004dea:	f7ff ff61 	bl	8004cb0 <__NVIC_GetPriorityGrouping>
 8004dee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	68b9      	ldr	r1, [r7, #8]
 8004df4:	6978      	ldr	r0, [r7, #20]
 8004df6:	f7ff ffb1 	bl	8004d5c <NVIC_EncodePriority>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e00:	4611      	mov	r1, r2
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff ff80 	bl	8004d08 <__NVIC_SetPriority>
}
 8004e08:	bf00      	nop
 8004e0a:	3718      	adds	r7, #24
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	4603      	mov	r3, r0
 8004e18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7ff ff54 	bl	8004ccc <__NVIC_EnableIRQ>
}
 8004e24:	bf00      	nop
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d004      	beq.n	8004e4a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2280      	movs	r2, #128	; 0x80
 8004e44:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e00c      	b.n	8004e64 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2205      	movs	r2, #5
 8004e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 0201 	bic.w	r2, r2, #1
 8004e60:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b089      	sub	sp, #36	; 0x24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e86:	2300      	movs	r3, #0
 8004e88:	61fb      	str	r3, [r7, #28]
 8004e8a:	e16b      	b.n	8005164 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	fa02 f303 	lsl.w	r3, r2, r3
 8004e94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	f040 815a 	bne.w	800515e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d00b      	beq.n	8004eca <HAL_GPIO_Init+0x5a>
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d007      	beq.n	8004eca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ebe:	2b11      	cmp	r3, #17
 8004ec0:	d003      	beq.n	8004eca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	2b12      	cmp	r3, #18
 8004ec8:	d130      	bne.n	8004f2c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	2203      	movs	r2, #3
 8004ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eda:	43db      	mvns	r3, r3
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	4013      	ands	r3, r2
 8004ee0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	68da      	ldr	r2, [r3, #12]
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	fa02 f303 	lsl.w	r3, r2, r3
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f00:	2201      	movs	r2, #1
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	fa02 f303 	lsl.w	r3, r2, r3
 8004f08:	43db      	mvns	r3, r3
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	091b      	lsrs	r3, r3, #4
 8004f16:	f003 0201 	and.w	r2, r3, #1
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	2203      	movs	r2, #3
 8004f38:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	4013      	ands	r3, r2
 8004f42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d003      	beq.n	8004f6c <HAL_GPIO_Init+0xfc>
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	2b12      	cmp	r3, #18
 8004f6a:	d123      	bne.n	8004fb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	08da      	lsrs	r2, r3, #3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3208      	adds	r2, #8
 8004f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	220f      	movs	r2, #15
 8004f84:	fa02 f303 	lsl.w	r3, r2, r3
 8004f88:	43db      	mvns	r3, r3
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	f003 0307 	and.w	r3, r3, #7
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	08da      	lsrs	r2, r3, #3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	3208      	adds	r2, #8
 8004fae:	69b9      	ldr	r1, [r7, #24]
 8004fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	2203      	movs	r2, #3
 8004fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f003 0203 	and.w	r2, r3, #3
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 80b4 	beq.w	800515e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60fb      	str	r3, [r7, #12]
 8004ffa:	4b5f      	ldr	r3, [pc, #380]	; (8005178 <HAL_GPIO_Init+0x308>)
 8004ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffe:	4a5e      	ldr	r2, [pc, #376]	; (8005178 <HAL_GPIO_Init+0x308>)
 8005000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005004:	6453      	str	r3, [r2, #68]	; 0x44
 8005006:	4b5c      	ldr	r3, [pc, #368]	; (8005178 <HAL_GPIO_Init+0x308>)
 8005008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800500a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005012:	4a5a      	ldr	r2, [pc, #360]	; (800517c <HAL_GPIO_Init+0x30c>)
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	089b      	lsrs	r3, r3, #2
 8005018:	3302      	adds	r3, #2
 800501a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800501e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	f003 0303 	and.w	r3, r3, #3
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	220f      	movs	r2, #15
 800502a:	fa02 f303 	lsl.w	r3, r2, r3
 800502e:	43db      	mvns	r3, r3
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	4013      	ands	r3, r2
 8005034:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a51      	ldr	r2, [pc, #324]	; (8005180 <HAL_GPIO_Init+0x310>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d02b      	beq.n	8005096 <HAL_GPIO_Init+0x226>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a50      	ldr	r2, [pc, #320]	; (8005184 <HAL_GPIO_Init+0x314>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d025      	beq.n	8005092 <HAL_GPIO_Init+0x222>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a4f      	ldr	r2, [pc, #316]	; (8005188 <HAL_GPIO_Init+0x318>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d01f      	beq.n	800508e <HAL_GPIO_Init+0x21e>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a4e      	ldr	r2, [pc, #312]	; (800518c <HAL_GPIO_Init+0x31c>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d019      	beq.n	800508a <HAL_GPIO_Init+0x21a>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a4d      	ldr	r2, [pc, #308]	; (8005190 <HAL_GPIO_Init+0x320>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d013      	beq.n	8005086 <HAL_GPIO_Init+0x216>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a4c      	ldr	r2, [pc, #304]	; (8005194 <HAL_GPIO_Init+0x324>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d00d      	beq.n	8005082 <HAL_GPIO_Init+0x212>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a4b      	ldr	r2, [pc, #300]	; (8005198 <HAL_GPIO_Init+0x328>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d007      	beq.n	800507e <HAL_GPIO_Init+0x20e>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a4a      	ldr	r2, [pc, #296]	; (800519c <HAL_GPIO_Init+0x32c>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d101      	bne.n	800507a <HAL_GPIO_Init+0x20a>
 8005076:	2307      	movs	r3, #7
 8005078:	e00e      	b.n	8005098 <HAL_GPIO_Init+0x228>
 800507a:	2308      	movs	r3, #8
 800507c:	e00c      	b.n	8005098 <HAL_GPIO_Init+0x228>
 800507e:	2306      	movs	r3, #6
 8005080:	e00a      	b.n	8005098 <HAL_GPIO_Init+0x228>
 8005082:	2305      	movs	r3, #5
 8005084:	e008      	b.n	8005098 <HAL_GPIO_Init+0x228>
 8005086:	2304      	movs	r3, #4
 8005088:	e006      	b.n	8005098 <HAL_GPIO_Init+0x228>
 800508a:	2303      	movs	r3, #3
 800508c:	e004      	b.n	8005098 <HAL_GPIO_Init+0x228>
 800508e:	2302      	movs	r3, #2
 8005090:	e002      	b.n	8005098 <HAL_GPIO_Init+0x228>
 8005092:	2301      	movs	r3, #1
 8005094:	e000      	b.n	8005098 <HAL_GPIO_Init+0x228>
 8005096:	2300      	movs	r3, #0
 8005098:	69fa      	ldr	r2, [r7, #28]
 800509a:	f002 0203 	and.w	r2, r2, #3
 800509e:	0092      	lsls	r2, r2, #2
 80050a0:	4093      	lsls	r3, r2
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050a8:	4934      	ldr	r1, [pc, #208]	; (800517c <HAL_GPIO_Init+0x30c>)
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	089b      	lsrs	r3, r3, #2
 80050ae:	3302      	adds	r3, #2
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050b6:	4b3a      	ldr	r3, [pc, #232]	; (80051a0 <HAL_GPIO_Init+0x330>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	43db      	mvns	r3, r3
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	4013      	ands	r3, r2
 80050c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80050da:	4a31      	ldr	r2, [pc, #196]	; (80051a0 <HAL_GPIO_Init+0x330>)
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80050e0:	4b2f      	ldr	r3, [pc, #188]	; (80051a0 <HAL_GPIO_Init+0x330>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	43db      	mvns	r3, r3
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	4013      	ands	r3, r2
 80050ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d003      	beq.n	8005104 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	4313      	orrs	r3, r2
 8005102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005104:	4a26      	ldr	r2, [pc, #152]	; (80051a0 <HAL_GPIO_Init+0x330>)
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800510a:	4b25      	ldr	r3, [pc, #148]	; (80051a0 <HAL_GPIO_Init+0x330>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	43db      	mvns	r3, r3
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	4013      	ands	r3, r2
 8005118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d003      	beq.n	800512e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	4313      	orrs	r3, r2
 800512c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800512e:	4a1c      	ldr	r2, [pc, #112]	; (80051a0 <HAL_GPIO_Init+0x330>)
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005134:	4b1a      	ldr	r3, [pc, #104]	; (80051a0 <HAL_GPIO_Init+0x330>)
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	43db      	mvns	r3, r3
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	4013      	ands	r3, r2
 8005142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	4313      	orrs	r3, r2
 8005156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005158:	4a11      	ldr	r2, [pc, #68]	; (80051a0 <HAL_GPIO_Init+0x330>)
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	3301      	adds	r3, #1
 8005162:	61fb      	str	r3, [r7, #28]
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	2b0f      	cmp	r3, #15
 8005168:	f67f ae90 	bls.w	8004e8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800516c:	bf00      	nop
 800516e:	3724      	adds	r7, #36	; 0x24
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr
 8005178:	40023800 	.word	0x40023800
 800517c:	40013800 	.word	0x40013800
 8005180:	40020000 	.word	0x40020000
 8005184:	40020400 	.word	0x40020400
 8005188:	40020800 	.word	0x40020800
 800518c:	40020c00 	.word	0x40020c00
 8005190:	40021000 	.word	0x40021000
 8005194:	40021400 	.word	0x40021400
 8005198:	40021800 	.word	0x40021800
 800519c:	40021c00 	.word	0x40021c00
 80051a0:	40013c00 	.word	0x40013c00

080051a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	460b      	mov	r3, r1
 80051ae:	807b      	strh	r3, [r7, #2]
 80051b0:	4613      	mov	r3, r2
 80051b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051b4:	787b      	ldrb	r3, [r7, #1]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051ba:	887a      	ldrh	r2, [r7, #2]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80051c0:	e003      	b.n	80051ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80051c2:	887b      	ldrh	r3, [r7, #2]
 80051c4:	041a      	lsls	r2, r3, #16
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	619a      	str	r2, [r3, #24]
}
 80051ca:	bf00      	nop
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b083      	sub	sp, #12
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	460b      	mov	r3, r1
 80051e0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	695a      	ldr	r2, [r3, #20]
 80051e6:	887b      	ldrh	r3, [r7, #2]
 80051e8:	401a      	ands	r2, r3
 80051ea:	887b      	ldrh	r3, [r7, #2]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d104      	bne.n	80051fa <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80051f0:	887b      	ldrh	r3, [r7, #2]
 80051f2:	041a      	lsls	r2, r3, #16
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80051f8:	e002      	b.n	8005200 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80051fa:	887a      	ldrh	r2, [r7, #2]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	619a      	str	r2, [r3, #24]
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e11f      	b.n	800545e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d106      	bne.n	8005238 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7ff fa68 	bl	8004708 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2224      	movs	r2, #36	; 0x24
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f022 0201 	bic.w	r2, r2, #1
 800524e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800525e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800526e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005270:	f001 fc96 	bl	8006ba0 <HAL_RCC_GetPCLK1Freq>
 8005274:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	4a7b      	ldr	r2, [pc, #492]	; (8005468 <HAL_I2C_Init+0x25c>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d807      	bhi.n	8005290 <HAL_I2C_Init+0x84>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4a7a      	ldr	r2, [pc, #488]	; (800546c <HAL_I2C_Init+0x260>)
 8005284:	4293      	cmp	r3, r2
 8005286:	bf94      	ite	ls
 8005288:	2301      	movls	r3, #1
 800528a:	2300      	movhi	r3, #0
 800528c:	b2db      	uxtb	r3, r3
 800528e:	e006      	b.n	800529e <HAL_I2C_Init+0x92>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4a77      	ldr	r2, [pc, #476]	; (8005470 <HAL_I2C_Init+0x264>)
 8005294:	4293      	cmp	r3, r2
 8005296:	bf94      	ite	ls
 8005298:	2301      	movls	r3, #1
 800529a:	2300      	movhi	r3, #0
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e0db      	b.n	800545e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	4a72      	ldr	r2, [pc, #456]	; (8005474 <HAL_I2C_Init+0x268>)
 80052aa:	fba2 2303 	umull	r2, r3, r2, r3
 80052ae:	0c9b      	lsrs	r3, r3, #18
 80052b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	4a64      	ldr	r2, [pc, #400]	; (8005468 <HAL_I2C_Init+0x25c>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d802      	bhi.n	80052e0 <HAL_I2C_Init+0xd4>
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	3301      	adds	r3, #1
 80052de:	e009      	b.n	80052f4 <HAL_I2C_Init+0xe8>
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80052e6:	fb02 f303 	mul.w	r3, r2, r3
 80052ea:	4a63      	ldr	r2, [pc, #396]	; (8005478 <HAL_I2C_Init+0x26c>)
 80052ec:	fba2 2303 	umull	r2, r3, r2, r3
 80052f0:	099b      	lsrs	r3, r3, #6
 80052f2:	3301      	adds	r3, #1
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6812      	ldr	r2, [r2, #0]
 80052f8:	430b      	orrs	r3, r1
 80052fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005306:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	4956      	ldr	r1, [pc, #344]	; (8005468 <HAL_I2C_Init+0x25c>)
 8005310:	428b      	cmp	r3, r1
 8005312:	d80d      	bhi.n	8005330 <HAL_I2C_Init+0x124>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	1e59      	subs	r1, r3, #1
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	005b      	lsls	r3, r3, #1
 800531e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005322:	3301      	adds	r3, #1
 8005324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005328:	2b04      	cmp	r3, #4
 800532a:	bf38      	it	cc
 800532c:	2304      	movcc	r3, #4
 800532e:	e04f      	b.n	80053d0 <HAL_I2C_Init+0x1c4>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d111      	bne.n	800535c <HAL_I2C_Init+0x150>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	1e58      	subs	r0, r3, #1
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6859      	ldr	r1, [r3, #4]
 8005340:	460b      	mov	r3, r1
 8005342:	005b      	lsls	r3, r3, #1
 8005344:	440b      	add	r3, r1
 8005346:	fbb0 f3f3 	udiv	r3, r0, r3
 800534a:	3301      	adds	r3, #1
 800534c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005350:	2b00      	cmp	r3, #0
 8005352:	bf0c      	ite	eq
 8005354:	2301      	moveq	r3, #1
 8005356:	2300      	movne	r3, #0
 8005358:	b2db      	uxtb	r3, r3
 800535a:	e012      	b.n	8005382 <HAL_I2C_Init+0x176>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	1e58      	subs	r0, r3, #1
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6859      	ldr	r1, [r3, #4]
 8005364:	460b      	mov	r3, r1
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	440b      	add	r3, r1
 800536a:	0099      	lsls	r1, r3, #2
 800536c:	440b      	add	r3, r1
 800536e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005372:	3301      	adds	r3, #1
 8005374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005378:	2b00      	cmp	r3, #0
 800537a:	bf0c      	ite	eq
 800537c:	2301      	moveq	r3, #1
 800537e:	2300      	movne	r3, #0
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <HAL_I2C_Init+0x17e>
 8005386:	2301      	movs	r3, #1
 8005388:	e022      	b.n	80053d0 <HAL_I2C_Init+0x1c4>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10e      	bne.n	80053b0 <HAL_I2C_Init+0x1a4>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	1e58      	subs	r0, r3, #1
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6859      	ldr	r1, [r3, #4]
 800539a:	460b      	mov	r3, r1
 800539c:	005b      	lsls	r3, r3, #1
 800539e:	440b      	add	r3, r1
 80053a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80053a4:	3301      	adds	r3, #1
 80053a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ae:	e00f      	b.n	80053d0 <HAL_I2C_Init+0x1c4>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	1e58      	subs	r0, r3, #1
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6859      	ldr	r1, [r3, #4]
 80053b8:	460b      	mov	r3, r1
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	440b      	add	r3, r1
 80053be:	0099      	lsls	r1, r3, #2
 80053c0:	440b      	add	r3, r1
 80053c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80053c6:	3301      	adds	r3, #1
 80053c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053d0:	6879      	ldr	r1, [r7, #4]
 80053d2:	6809      	ldr	r1, [r1, #0]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	69da      	ldr	r2, [r3, #28]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	431a      	orrs	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	430a      	orrs	r2, r1
 80053f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80053fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	6911      	ldr	r1, [r2, #16]
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	68d2      	ldr	r2, [r2, #12]
 800540a:	4311      	orrs	r1, r2
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6812      	ldr	r2, [r2, #0]
 8005410:	430b      	orrs	r3, r1
 8005412:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	695a      	ldr	r2, [r3, #20]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	431a      	orrs	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	430a      	orrs	r2, r1
 800542e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f042 0201 	orr.w	r2, r2, #1
 800543e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2220      	movs	r2, #32
 800544a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	000186a0 	.word	0x000186a0
 800546c:	001e847f 	.word	0x001e847f
 8005470:	003d08ff 	.word	0x003d08ff
 8005474:	431bde83 	.word	0x431bde83
 8005478:	10624dd3 	.word	0x10624dd3

0800547c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b088      	sub	sp, #32
 8005480:	af02      	add	r7, sp, #8
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	607a      	str	r2, [r7, #4]
 8005486:	461a      	mov	r2, r3
 8005488:	460b      	mov	r3, r1
 800548a:	817b      	strh	r3, [r7, #10]
 800548c:	4613      	mov	r3, r2
 800548e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005490:	f7ff fbbc 	bl	8004c0c <HAL_GetTick>
 8005494:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b20      	cmp	r3, #32
 80054a0:	f040 80e0 	bne.w	8005664 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	2319      	movs	r3, #25
 80054aa:	2201      	movs	r2, #1
 80054ac:	4970      	ldr	r1, [pc, #448]	; (8005670 <HAL_I2C_Master_Transmit+0x1f4>)
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 fd84 	bl	8005fbc <I2C_WaitOnFlagUntilTimeout>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80054ba:	2302      	movs	r3, #2
 80054bc:	e0d3      	b.n	8005666 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d101      	bne.n	80054cc <HAL_I2C_Master_Transmit+0x50>
 80054c8:	2302      	movs	r3, #2
 80054ca:	e0cc      	b.n	8005666 <HAL_I2C_Master_Transmit+0x1ea>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d007      	beq.n	80054f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f042 0201 	orr.w	r2, r2, #1
 80054f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005500:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2221      	movs	r2, #33	; 0x21
 8005506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2210      	movs	r2, #16
 800550e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	893a      	ldrh	r2, [r7, #8]
 8005522:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005528:	b29a      	uxth	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	4a50      	ldr	r2, [pc, #320]	; (8005674 <HAL_I2C_Master_Transmit+0x1f8>)
 8005532:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005534:	8979      	ldrh	r1, [r7, #10]
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	6a3a      	ldr	r2, [r7, #32]
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 fbf0 	bl	8005d20 <I2C_MasterRequestWrite>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e08d      	b.n	8005666 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800554a:	2300      	movs	r3, #0
 800554c:	613b      	str	r3, [r7, #16]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	613b      	str	r3, [r7, #16]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	613b      	str	r3, [r7, #16]
 800555e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005560:	e066      	b.n	8005630 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	6a39      	ldr	r1, [r7, #32]
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f000 fdfe 	bl	8006168 <I2C_WaitOnTXEFlagUntilTimeout>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00d      	beq.n	800558e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005576:	2b04      	cmp	r3, #4
 8005578:	d107      	bne.n	800558a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005588:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e06b      	b.n	8005666 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005592:	781a      	ldrb	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	1c5a      	adds	r2, r3, #1
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	3b01      	subs	r3, #1
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055b6:	3b01      	subs	r3, #1
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	f003 0304 	and.w	r3, r3, #4
 80055c8:	2b04      	cmp	r3, #4
 80055ca:	d11b      	bne.n	8005604 <HAL_I2C_Master_Transmit+0x188>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d017      	beq.n	8005604 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d8:	781a      	ldrb	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	1c5a      	adds	r2, r3, #1
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	3b01      	subs	r3, #1
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055fc:	3b01      	subs	r3, #1
 80055fe:	b29a      	uxth	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	6a39      	ldr	r1, [r7, #32]
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f000 fdee 	bl	80061ea <I2C_WaitOnBTFFlagUntilTimeout>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00d      	beq.n	8005630 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005618:	2b04      	cmp	r3, #4
 800561a:	d107      	bne.n	800562c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800562a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e01a      	b.n	8005666 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005634:	2b00      	cmp	r3, #0
 8005636:	d194      	bne.n	8005562 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005646:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2220      	movs	r2, #32
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	e000      	b.n	8005666 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005664:	2302      	movs	r3, #2
  }
}
 8005666:	4618      	mov	r0, r3
 8005668:	3718      	adds	r7, #24
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	00100002 	.word	0x00100002
 8005674:	ffff0000 	.word	0xffff0000

08005678 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b08c      	sub	sp, #48	; 0x30
 800567c:	af02      	add	r7, sp, #8
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	607a      	str	r2, [r7, #4]
 8005682:	461a      	mov	r2, r3
 8005684:	460b      	mov	r3, r1
 8005686:	817b      	strh	r3, [r7, #10]
 8005688:	4613      	mov	r3, r2
 800568a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800568c:	f7ff fabe 	bl	8004c0c <HAL_GetTick>
 8005690:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b20      	cmp	r3, #32
 800569c:	f040 820b 	bne.w	8005ab6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	9300      	str	r3, [sp, #0]
 80056a4:	2319      	movs	r3, #25
 80056a6:	2201      	movs	r2, #1
 80056a8:	497c      	ldr	r1, [pc, #496]	; (800589c <HAL_I2C_Master_Receive+0x224>)
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f000 fc86 	bl	8005fbc <I2C_WaitOnFlagUntilTimeout>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80056b6:	2302      	movs	r3, #2
 80056b8:	e1fe      	b.n	8005ab8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d101      	bne.n	80056c8 <HAL_I2C_Master_Receive+0x50>
 80056c4:	2302      	movs	r3, #2
 80056c6:	e1f7      	b.n	8005ab8 <HAL_I2C_Master_Receive+0x440>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d007      	beq.n	80056ee <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f042 0201 	orr.w	r2, r2, #1
 80056ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2222      	movs	r2, #34	; 0x22
 8005702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2210      	movs	r2, #16
 800570a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	893a      	ldrh	r2, [r7, #8]
 800571e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005724:	b29a      	uxth	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4a5c      	ldr	r2, [pc, #368]	; (80058a0 <HAL_I2C_Master_Receive+0x228>)
 800572e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005730:	8979      	ldrh	r1, [r7, #10]
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 fb74 	bl	8005e24 <I2C_MasterRequestRead>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e1b8      	b.n	8005ab8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800574a:	2b00      	cmp	r3, #0
 800574c:	d113      	bne.n	8005776 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800574e:	2300      	movs	r3, #0
 8005750:	623b      	str	r3, [r7, #32]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	623b      	str	r3, [r7, #32]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	623b      	str	r3, [r7, #32]
 8005762:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	e18c      	b.n	8005a90 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800577a:	2b01      	cmp	r3, #1
 800577c:	d11b      	bne.n	80057b6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800578c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800578e:	2300      	movs	r3, #0
 8005790:	61fb      	str	r3, [r7, #28]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	61fb      	str	r3, [r7, #28]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	61fb      	str	r3, [r7, #28]
 80057a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	e16c      	b.n	8005a90 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d11b      	bne.n	80057f6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057de:	2300      	movs	r3, #0
 80057e0:	61bb      	str	r3, [r7, #24]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	61bb      	str	r3, [r7, #24]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	61bb      	str	r3, [r7, #24]
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	e14c      	b.n	8005a90 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005804:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005806:	2300      	movs	r3, #0
 8005808:	617b      	str	r3, [r7, #20]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	617b      	str	r3, [r7, #20]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	617b      	str	r3, [r7, #20]
 800581a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800581c:	e138      	b.n	8005a90 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005822:	2b03      	cmp	r3, #3
 8005824:	f200 80f1 	bhi.w	8005a0a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800582c:	2b01      	cmp	r3, #1
 800582e:	d123      	bne.n	8005878 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005832:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 fd19 	bl	800626c <I2C_WaitOnRXNEFlagUntilTimeout>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e139      	b.n	8005ab8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	691a      	ldr	r2, [r3, #16]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584e:	b2d2      	uxtb	r2, r2
 8005850:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	1c5a      	adds	r2, r3, #1
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005860:	3b01      	subs	r3, #1
 8005862:	b29a      	uxth	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800586c:	b29b      	uxth	r3, r3
 800586e:	3b01      	subs	r3, #1
 8005870:	b29a      	uxth	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005876:	e10b      	b.n	8005a90 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800587c:	2b02      	cmp	r3, #2
 800587e:	d14e      	bne.n	800591e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005886:	2200      	movs	r2, #0
 8005888:	4906      	ldr	r1, [pc, #24]	; (80058a4 <HAL_I2C_Master_Receive+0x22c>)
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f000 fb96 	bl	8005fbc <I2C_WaitOnFlagUntilTimeout>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d008      	beq.n	80058a8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e10e      	b.n	8005ab8 <HAL_I2C_Master_Receive+0x440>
 800589a:	bf00      	nop
 800589c:	00100002 	.word	0x00100002
 80058a0:	ffff0000 	.word	0xffff0000
 80058a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	691a      	ldr	r2, [r3, #16]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d4:	3b01      	subs	r3, #1
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	3b01      	subs	r3, #1
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	691a      	ldr	r2, [r3, #16]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	1c5a      	adds	r2, r3, #1
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005906:	3b01      	subs	r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005912:	b29b      	uxth	r3, r3
 8005914:	3b01      	subs	r3, #1
 8005916:	b29a      	uxth	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800591c:	e0b8      	b.n	8005a90 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005924:	2200      	movs	r2, #0
 8005926:	4966      	ldr	r1, [pc, #408]	; (8005ac0 <HAL_I2C_Master_Receive+0x448>)
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 fb47 	bl	8005fbc <I2C_WaitOnFlagUntilTimeout>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e0bf      	b.n	8005ab8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005946:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	691a      	ldr	r2, [r3, #16]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	b2d2      	uxtb	r2, r2
 8005954:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	1c5a      	adds	r2, r3, #1
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005964:	3b01      	subs	r3, #1
 8005966:	b29a      	uxth	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005970:	b29b      	uxth	r3, r3
 8005972:	3b01      	subs	r3, #1
 8005974:	b29a      	uxth	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005980:	2200      	movs	r2, #0
 8005982:	494f      	ldr	r1, [pc, #316]	; (8005ac0 <HAL_I2C_Master_Receive+0x448>)
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f000 fb19 	bl	8005fbc <I2C_WaitOnFlagUntilTimeout>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e091      	b.n	8005ab8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	691a      	ldr	r2, [r3, #16]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	b2d2      	uxtb	r2, r2
 80059b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b6:	1c5a      	adds	r2, r3, #1
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c0:	3b01      	subs	r3, #1
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	3b01      	subs	r3, #1
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	691a      	ldr	r2, [r3, #16]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e0:	b2d2      	uxtb	r2, r2
 80059e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059f2:	3b01      	subs	r3, #1
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	3b01      	subs	r3, #1
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a08:	e042      	b.n	8005a90 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f000 fc2c 	bl	800626c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e04c      	b.n	8005ab8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	691a      	ldr	r2, [r3, #16]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a28:	b2d2      	uxtb	r2, r2
 8005a2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	1c5a      	adds	r2, r3, #1
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	f003 0304 	and.w	r3, r3, #4
 8005a5a:	2b04      	cmp	r3, #4
 8005a5c:	d118      	bne.n	8005a90 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	691a      	ldr	r2, [r3, #16]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	b2d2      	uxtb	r2, r2
 8005a6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	1c5a      	adds	r2, r3, #1
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f47f aec2 	bne.w	800581e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	e000      	b.n	8005ab8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005ab6:	2302      	movs	r3, #2
  }
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3728      	adds	r7, #40	; 0x28
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	00010004 	.word	0x00010004

08005ac4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b08a      	sub	sp, #40	; 0x28
 8005ac8:	af02      	add	r7, sp, #8
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	607a      	str	r2, [r7, #4]
 8005ace:	603b      	str	r3, [r7, #0]
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005ad4:	f7ff f89a 	bl	8004c0c <HAL_GetTick>
 8005ad8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005ada:	2301      	movs	r3, #1
 8005adc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b20      	cmp	r3, #32
 8005ae8:	f040 8110 	bne.w	8005d0c <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	2319      	movs	r3, #25
 8005af2:	2201      	movs	r2, #1
 8005af4:	4988      	ldr	r1, [pc, #544]	; (8005d18 <HAL_I2C_IsDeviceReady+0x254>)
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f000 fa60 	bl	8005fbc <I2C_WaitOnFlagUntilTimeout>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005b02:	2302      	movs	r3, #2
 8005b04:	e103      	b.n	8005d0e <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d101      	bne.n	8005b14 <HAL_I2C_IsDeviceReady+0x50>
 8005b10:	2302      	movs	r3, #2
 8005b12:	e0fc      	b.n	8005d0e <HAL_I2C_IsDeviceReady+0x24a>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d007      	beq.n	8005b3a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f042 0201 	orr.w	r2, r2, #1
 8005b38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2224      	movs	r2, #36	; 0x24
 8005b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4a70      	ldr	r2, [pc, #448]	; (8005d1c <HAL_I2C_IsDeviceReady+0x258>)
 8005b5c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b6c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f000 fa1e 	bl	8005fbc <I2C_WaitOnFlagUntilTimeout>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00c      	beq.n	8005ba0 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d003      	beq.n	8005b9c <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b9a:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e0b6      	b.n	8005d0e <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ba0:	897b      	ldrh	r3, [r7, #10]
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005bae:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005bb0:	f7ff f82c 	bl	8004c0c <HAL_GetTick>
 8005bb4:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	695b      	ldr	r3, [r3, #20]
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	bf0c      	ite	eq
 8005bc4:	2301      	moveq	r3, #1
 8005bc6:	2300      	movne	r3, #0
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bda:	bf0c      	ite	eq
 8005bdc:	2301      	moveq	r3, #1
 8005bde:	2300      	movne	r3, #0
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005be4:	e025      	b.n	8005c32 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005be6:	f7ff f811 	bl	8004c0c <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d302      	bcc.n	8005bfc <HAL_I2C_IsDeviceReady+0x138>
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d103      	bne.n	8005c04 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	22a0      	movs	r2, #160	; 0xa0
 8005c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	bf0c      	ite	eq
 8005c12:	2301      	moveq	r3, #1
 8005c14:	2300      	movne	r3, #0
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	695b      	ldr	r3, [r3, #20]
 8005c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c28:	bf0c      	ite	eq
 8005c2a:	2301      	moveq	r3, #1
 8005c2c:	2300      	movne	r3, #0
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2ba0      	cmp	r3, #160	; 0xa0
 8005c3c:	d005      	beq.n	8005c4a <HAL_I2C_IsDeviceReady+0x186>
 8005c3e:	7dfb      	ldrb	r3, [r7, #23]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d102      	bne.n	8005c4a <HAL_I2C_IsDeviceReady+0x186>
 8005c44:	7dbb      	ldrb	r3, [r7, #22]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d0cd      	beq.n	8005be6 <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	695b      	ldr	r3, [r3, #20]
 8005c58:	f003 0302 	and.w	r3, r3, #2
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d129      	bne.n	8005cb4 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c6e:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c70:	2300      	movs	r3, #0
 8005c72:	613b      	str	r3, [r7, #16]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	613b      	str	r3, [r7, #16]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	613b      	str	r3, [r7, #16]
 8005c84:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	2319      	movs	r3, #25
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	4922      	ldr	r1, [pc, #136]	; (8005d18 <HAL_I2C_IsDeviceReady+0x254>)
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f000 f993 	bl	8005fbc <I2C_WaitOnFlagUntilTimeout>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d001      	beq.n	8005ca0 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e036      	b.n	8005d0e <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	e02c      	b.n	8005d0e <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cc2:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ccc:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	2319      	movs	r3, #25
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	4910      	ldr	r1, [pc, #64]	; (8005d18 <HAL_I2C_IsDeviceReady+0x254>)
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f000 f96f 	bl	8005fbc <I2C_WaitOnFlagUntilTimeout>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d001      	beq.n	8005ce8 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e012      	b.n	8005d0e <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	3301      	adds	r3, #1
 8005cec:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005cee:	69ba      	ldr	r2, [r7, #24]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	f4ff af33 	bcc.w	8005b5e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e000      	b.n	8005d0e <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8005d0c:	2302      	movs	r3, #2
  }
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3720      	adds	r7, #32
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	00100002 	.word	0x00100002
 8005d1c:	ffff0000 	.word	0xffff0000

08005d20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b088      	sub	sp, #32
 8005d24:	af02      	add	r7, sp, #8
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	607a      	str	r2, [r7, #4]
 8005d2a:	603b      	str	r3, [r7, #0]
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	2b08      	cmp	r3, #8
 8005d3a:	d006      	beq.n	8005d4a <I2C_MasterRequestWrite+0x2a>
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d003      	beq.n	8005d4a <I2C_MasterRequestWrite+0x2a>
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d48:	d108      	bne.n	8005d5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d58:	601a      	str	r2, [r3, #0]
 8005d5a:	e00b      	b.n	8005d74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d60:	2b12      	cmp	r3, #18
 8005d62:	d107      	bne.n	8005d74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f000 f91b 	bl	8005fbc <I2C_WaitOnFlagUntilTimeout>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00c      	beq.n	8005da6 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005da0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e035      	b.n	8005e12 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dae:	d108      	bne.n	8005dc2 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005db0:	897b      	ldrh	r3, [r7, #10]
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	461a      	mov	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005dbe:	611a      	str	r2, [r3, #16]
 8005dc0:	e01b      	b.n	8005dfa <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005dc2:	897b      	ldrh	r3, [r7, #10]
 8005dc4:	11db      	asrs	r3, r3, #7
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	f003 0306 	and.w	r3, r3, #6
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	f063 030f 	orn	r3, r3, #15
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	490f      	ldr	r1, [pc, #60]	; (8005e1c <I2C_MasterRequestWrite+0xfc>)
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f000 f942 	bl	800606a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e010      	b.n	8005e12 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005df0:	897b      	ldrh	r3, [r7, #10]
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	4908      	ldr	r1, [pc, #32]	; (8005e20 <I2C_MasterRequestWrite+0x100>)
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 f932 	bl	800606a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e000      	b.n	8005e12 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3718      	adds	r7, #24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	00010008 	.word	0x00010008
 8005e20:	00010002 	.word	0x00010002

08005e24 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b088      	sub	sp, #32
 8005e28:	af02      	add	r7, sp, #8
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	607a      	str	r2, [r7, #4]
 8005e2e:	603b      	str	r3, [r7, #0]
 8005e30:	460b      	mov	r3, r1
 8005e32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e38:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e48:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	2b08      	cmp	r3, #8
 8005e4e:	d006      	beq.n	8005e5e <I2C_MasterRequestRead+0x3a>
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d003      	beq.n	8005e5e <I2C_MasterRequestRead+0x3a>
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e5c:	d108      	bne.n	8005e70 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	e00b      	b.n	8005e88 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e74:	2b11      	cmp	r3, #17
 8005e76:	d107      	bne.n	8005e88 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f000 f891 	bl	8005fbc <I2C_WaitOnFlagUntilTimeout>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00c      	beq.n	8005eba <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eb4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e078      	b.n	8005fac <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ec2:	d108      	bne.n	8005ed6 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005ec4:	897b      	ldrh	r3, [r7, #10]
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	f043 0301 	orr.w	r3, r3, #1
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	611a      	str	r2, [r3, #16]
 8005ed4:	e05e      	b.n	8005f94 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ed6:	897b      	ldrh	r3, [r7, #10]
 8005ed8:	11db      	asrs	r3, r3, #7
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	f003 0306 	and.w	r3, r3, #6
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	f063 030f 	orn	r3, r3, #15
 8005ee6:	b2da      	uxtb	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	4930      	ldr	r1, [pc, #192]	; (8005fb4 <I2C_MasterRequestRead+0x190>)
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 f8b8 	bl	800606a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d001      	beq.n	8005f04 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e053      	b.n	8005fac <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005f04:	897b      	ldrh	r3, [r7, #10]
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	4929      	ldr	r1, [pc, #164]	; (8005fb8 <I2C_MasterRequestRead+0x194>)
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f000 f8a8 	bl	800606a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d001      	beq.n	8005f24 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e043      	b.n	8005fac <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f24:	2300      	movs	r3, #0
 8005f26:	613b      	str	r3, [r7, #16]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	613b      	str	r3, [r7, #16]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	613b      	str	r3, [r7, #16]
 8005f38:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f48:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f000 f830 	bl	8005fbc <I2C_WaitOnFlagUntilTimeout>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00c      	beq.n	8005f7c <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d003      	beq.n	8005f78 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f76:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e017      	b.n	8005fac <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005f7c:	897b      	ldrh	r3, [r7, #10]
 8005f7e:	11db      	asrs	r3, r3, #7
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	f003 0306 	and.w	r3, r3, #6
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	f063 030e 	orn	r3, r3, #14
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	4907      	ldr	r1, [pc, #28]	; (8005fb8 <I2C_MasterRequestRead+0x194>)
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 f865 	bl	800606a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e000      	b.n	8005fac <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3718      	adds	r7, #24
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	00010008 	.word	0x00010008
 8005fb8:	00010002 	.word	0x00010002

08005fbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	603b      	str	r3, [r7, #0]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fcc:	e025      	b.n	800601a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fd4:	d021      	beq.n	800601a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fd6:	f7fe fe19 	bl	8004c0c <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d302      	bcc.n	8005fec <I2C_WaitOnFlagUntilTimeout+0x30>
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d116      	bne.n	800601a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2220      	movs	r2, #32
 8005ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006006:	f043 0220 	orr.w	r2, r3, #32
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e023      	b.n	8006062 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	0c1b      	lsrs	r3, r3, #16
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b01      	cmp	r3, #1
 8006022:	d10d      	bne.n	8006040 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	43da      	mvns	r2, r3
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	4013      	ands	r3, r2
 8006030:	b29b      	uxth	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	bf0c      	ite	eq
 8006036:	2301      	moveq	r3, #1
 8006038:	2300      	movne	r3, #0
 800603a:	b2db      	uxtb	r3, r3
 800603c:	461a      	mov	r2, r3
 800603e:	e00c      	b.n	800605a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	43da      	mvns	r2, r3
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	4013      	ands	r3, r2
 800604c:	b29b      	uxth	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	bf0c      	ite	eq
 8006052:	2301      	moveq	r3, #1
 8006054:	2300      	movne	r3, #0
 8006056:	b2db      	uxtb	r3, r3
 8006058:	461a      	mov	r2, r3
 800605a:	79fb      	ldrb	r3, [r7, #7]
 800605c:	429a      	cmp	r2, r3
 800605e:	d0b6      	beq.n	8005fce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b084      	sub	sp, #16
 800606e:	af00      	add	r7, sp, #0
 8006070:	60f8      	str	r0, [r7, #12]
 8006072:	60b9      	str	r1, [r7, #8]
 8006074:	607a      	str	r2, [r7, #4]
 8006076:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006078:	e051      	b.n	800611e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006088:	d123      	bne.n	80060d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006098:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2220      	movs	r2, #32
 80060ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060be:	f043 0204 	orr.w	r2, r3, #4
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e046      	b.n	8006160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060d8:	d021      	beq.n	800611e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060da:	f7fe fd97 	bl	8004c0c <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d302      	bcc.n	80060f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d116      	bne.n	800611e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2220      	movs	r2, #32
 80060fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610a:	f043 0220 	orr.w	r2, r3, #32
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e020      	b.n	8006160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	0c1b      	lsrs	r3, r3, #16
 8006122:	b2db      	uxtb	r3, r3
 8006124:	2b01      	cmp	r3, #1
 8006126:	d10c      	bne.n	8006142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	43da      	mvns	r2, r3
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	4013      	ands	r3, r2
 8006134:	b29b      	uxth	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	bf14      	ite	ne
 800613a:	2301      	movne	r3, #1
 800613c:	2300      	moveq	r3, #0
 800613e:	b2db      	uxtb	r3, r3
 8006140:	e00b      	b.n	800615a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	43da      	mvns	r2, r3
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	4013      	ands	r3, r2
 800614e:	b29b      	uxth	r3, r3
 8006150:	2b00      	cmp	r3, #0
 8006152:	bf14      	ite	ne
 8006154:	2301      	movne	r3, #1
 8006156:	2300      	moveq	r3, #0
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d18d      	bne.n	800607a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006174:	e02d      	b.n	80061d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f000 f8ce 	bl	8006318 <I2C_IsAcknowledgeFailed>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e02d      	b.n	80061e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800618c:	d021      	beq.n	80061d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800618e:	f7fe fd3d 	bl	8004c0c <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	429a      	cmp	r2, r3
 800619c:	d302      	bcc.n	80061a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d116      	bne.n	80061d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2220      	movs	r2, #32
 80061ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	f043 0220 	orr.w	r2, r3, #32
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e007      	b.n	80061e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061dc:	2b80      	cmp	r3, #128	; 0x80
 80061de:	d1ca      	bne.n	8006176 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b084      	sub	sp, #16
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	60f8      	str	r0, [r7, #12]
 80061f2:	60b9      	str	r1, [r7, #8]
 80061f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061f6:	e02d      	b.n	8006254 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 f88d 	bl	8006318 <I2C_IsAcknowledgeFailed>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e02d      	b.n	8006264 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800620e:	d021      	beq.n	8006254 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006210:	f7fe fcfc 	bl	8004c0c <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	429a      	cmp	r2, r3
 800621e:	d302      	bcc.n	8006226 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d116      	bne.n	8006254 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2220      	movs	r2, #32
 8006230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006240:	f043 0220 	orr.w	r2, r3, #32
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e007      	b.n	8006264 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	f003 0304 	and.w	r3, r3, #4
 800625e:	2b04      	cmp	r3, #4
 8006260:	d1ca      	bne.n	80061f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3710      	adds	r7, #16
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006278:	e042      	b.n	8006300 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	695b      	ldr	r3, [r3, #20]
 8006280:	f003 0310 	and.w	r3, r3, #16
 8006284:	2b10      	cmp	r3, #16
 8006286:	d119      	bne.n	80062bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f06f 0210 	mvn.w	r2, #16
 8006290:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2220      	movs	r2, #32
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e029      	b.n	8006310 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062bc:	f7fe fca6 	bl	8004c0c <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d302      	bcc.n	80062d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d116      	bne.n	8006300 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2220      	movs	r2, #32
 80062dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ec:	f043 0220 	orr.w	r2, r3, #32
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e007      	b.n	8006310 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800630a:	2b40      	cmp	r3, #64	; 0x40
 800630c:	d1b5      	bne.n	800627a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800632a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800632e:	d11b      	bne.n	8006368 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006338:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2220      	movs	r2, #32
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006354:	f043 0204 	orr.w	r2, r3, #4
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e000      	b.n	800636a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
	...

08006378 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d101      	bne.n	800638a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e25b      	b.n	8006842 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	d075      	beq.n	8006482 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006396:	4ba3      	ldr	r3, [pc, #652]	; (8006624 <HAL_RCC_OscConfig+0x2ac>)
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f003 030c 	and.w	r3, r3, #12
 800639e:	2b04      	cmp	r3, #4
 80063a0:	d00c      	beq.n	80063bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063a2:	4ba0      	ldr	r3, [pc, #640]	; (8006624 <HAL_RCC_OscConfig+0x2ac>)
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063aa:	2b08      	cmp	r3, #8
 80063ac:	d112      	bne.n	80063d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063ae:	4b9d      	ldr	r3, [pc, #628]	; (8006624 <HAL_RCC_OscConfig+0x2ac>)
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063ba:	d10b      	bne.n	80063d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063bc:	4b99      	ldr	r3, [pc, #612]	; (8006624 <HAL_RCC_OscConfig+0x2ac>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d05b      	beq.n	8006480 <HAL_RCC_OscConfig+0x108>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d157      	bne.n	8006480 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e236      	b.n	8006842 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063dc:	d106      	bne.n	80063ec <HAL_RCC_OscConfig+0x74>
 80063de:	4b91      	ldr	r3, [pc, #580]	; (8006624 <HAL_RCC_OscConfig+0x2ac>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a90      	ldr	r2, [pc, #576]	; (8006624 <HAL_RCC_OscConfig+0x2ac>)
 80063e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063e8:	6013      	str	r3, [r2, #0]
 80063ea:	e01d      	b.n	8006428 <HAL_RCC_OscConfig+0xb0>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063f4:	d10c      	bne.n	8006410 <HAL_RCC_OscConfig+0x98>
 80063f6:	4b8b      	ldr	r3, [pc, #556]	; (8006624 <HAL_RCC_OscConfig+0x2ac>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a8a      	ldr	r2, [pc, #552]	; (8006624 <HAL_RCC_OscConfig+0x2ac>)
 80063fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006400:	6013      	str	r3, [r2, #0]
 8006402:	4b88      	ldr	r3, [pc, #544]	; (8006624 <HAL_RCC_OscConfig+0x2ac>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a87      	ldr	r2, [pc, #540]	; (8006624 <HAL_RCC_OscConfig+0x2ac>)
 8006408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800640c:	6013      	str	r3, [r2, #0]
 800640e:	e00b      	b.n	8006428 <HAL_RCC_OscConfig+0xb0>
 8006410:	4b84      	ldr	r3, [pc, #528]	; (8006624 <HAL_RCC_OscConfig+0x2ac>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a83      	ldr	r2, [pc, #524]	; (8006624 <HAL_RCC_OscConfig+0x2ac>)
 8006416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800641a:	6013      	str	r3, [r2, #0]
 800641c:	4b81      	ldr	r3, [pc, #516]	; (8006624 <HAL_RCC_OscConfig+0x2ac>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a80      	ldr	r2, [pc, #512]	; (8006624 <HAL_RCC_OscConfig+0x2ac>)
 8006422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d013      	beq.n	8006458 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006430:	f7fe fbec 	bl	8004c0c <HAL_GetTick>
 8006434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006436:	e008      	b.n	800644a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006438:	f7fe fbe8 	bl	8004c0c <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	2b64      	cmp	r3, #100	; 0x64
 8006444:	d901      	bls.n	800644a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e1fb      	b.n	8006842 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800644a:	4b76      	ldr	r3, [pc, #472]	; (8006624 <HAL_RCC_OscConfig+0x2ac>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d0f0      	beq.n	8006438 <HAL_RCC_OscConfig+0xc0>
 8006456:	e014      	b.n	8006482 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006458:	f7fe fbd8 	bl	8004c0c <HAL_GetTick>
 800645c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800645e:	e008      	b.n	8006472 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006460:	f7fe fbd4 	bl	8004c0c <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	2b64      	cmp	r3, #100	; 0x64
 800646c:	d901      	bls.n	8006472 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e1e7      	b.n	8006842 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006472:	4b6c      	ldr	r3, [pc, #432]	; (8006624 <HAL_RCC_OscConfig+0x2ac>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1f0      	bne.n	8006460 <HAL_RCC_OscConfig+0xe8>
 800647e:	e000      	b.n	8006482 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0302 	and.w	r3, r3, #2
 800648a:	2b00      	cmp	r3, #0
 800648c:	d063      	beq.n	8006556 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800648e:	4b65      	ldr	r3, [pc, #404]	; (8006624 <HAL_RCC_OscConfig+0x2ac>)
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f003 030c 	and.w	r3, r3, #12
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00b      	beq.n	80064b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800649a:	4b62      	ldr	r3, [pc, #392]	; (8006624 <HAL_RCC_OscConfig+0x2ac>)
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064a2:	2b08      	cmp	r3, #8
 80064a4:	d11c      	bne.n	80064e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064a6:	4b5f      	ldr	r3, [pc, #380]	; (8006624 <HAL_RCC_OscConfig+0x2ac>)
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d116      	bne.n	80064e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064b2:	4b5c      	ldr	r3, [pc, #368]	; (8006624 <HAL_RCC_OscConfig+0x2ac>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d005      	beq.n	80064ca <HAL_RCC_OscConfig+0x152>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d001      	beq.n	80064ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e1bb      	b.n	8006842 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064ca:	4b56      	ldr	r3, [pc, #344]	; (8006624 <HAL_RCC_OscConfig+0x2ac>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	00db      	lsls	r3, r3, #3
 80064d8:	4952      	ldr	r1, [pc, #328]	; (8006624 <HAL_RCC_OscConfig+0x2ac>)
 80064da:	4313      	orrs	r3, r2
 80064dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064de:	e03a      	b.n	8006556 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d020      	beq.n	800652a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064e8:	4b4f      	ldr	r3, [pc, #316]	; (8006628 <HAL_RCC_OscConfig+0x2b0>)
 80064ea:	2201      	movs	r2, #1
 80064ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ee:	f7fe fb8d 	bl	8004c0c <HAL_GetTick>
 80064f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064f4:	e008      	b.n	8006508 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064f6:	f7fe fb89 	bl	8004c0c <HAL_GetTick>
 80064fa:	4602      	mov	r2, r0
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	2b02      	cmp	r3, #2
 8006502:	d901      	bls.n	8006508 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	e19c      	b.n	8006842 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006508:	4b46      	ldr	r3, [pc, #280]	; (8006624 <HAL_RCC_OscConfig+0x2ac>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0302 	and.w	r3, r3, #2
 8006510:	2b00      	cmp	r3, #0
 8006512:	d0f0      	beq.n	80064f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006514:	4b43      	ldr	r3, [pc, #268]	; (8006624 <HAL_RCC_OscConfig+0x2ac>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	00db      	lsls	r3, r3, #3
 8006522:	4940      	ldr	r1, [pc, #256]	; (8006624 <HAL_RCC_OscConfig+0x2ac>)
 8006524:	4313      	orrs	r3, r2
 8006526:	600b      	str	r3, [r1, #0]
 8006528:	e015      	b.n	8006556 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800652a:	4b3f      	ldr	r3, [pc, #252]	; (8006628 <HAL_RCC_OscConfig+0x2b0>)
 800652c:	2200      	movs	r2, #0
 800652e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006530:	f7fe fb6c 	bl	8004c0c <HAL_GetTick>
 8006534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006536:	e008      	b.n	800654a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006538:	f7fe fb68 	bl	8004c0c <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	2b02      	cmp	r3, #2
 8006544:	d901      	bls.n	800654a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e17b      	b.n	8006842 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800654a:	4b36      	ldr	r3, [pc, #216]	; (8006624 <HAL_RCC_OscConfig+0x2ac>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1f0      	bne.n	8006538 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0308 	and.w	r3, r3, #8
 800655e:	2b00      	cmp	r3, #0
 8006560:	d030      	beq.n	80065c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d016      	beq.n	8006598 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800656a:	4b30      	ldr	r3, [pc, #192]	; (800662c <HAL_RCC_OscConfig+0x2b4>)
 800656c:	2201      	movs	r2, #1
 800656e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006570:	f7fe fb4c 	bl	8004c0c <HAL_GetTick>
 8006574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006576:	e008      	b.n	800658a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006578:	f7fe fb48 	bl	8004c0c <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	2b02      	cmp	r3, #2
 8006584:	d901      	bls.n	800658a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e15b      	b.n	8006842 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800658a:	4b26      	ldr	r3, [pc, #152]	; (8006624 <HAL_RCC_OscConfig+0x2ac>)
 800658c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800658e:	f003 0302 	and.w	r3, r3, #2
 8006592:	2b00      	cmp	r3, #0
 8006594:	d0f0      	beq.n	8006578 <HAL_RCC_OscConfig+0x200>
 8006596:	e015      	b.n	80065c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006598:	4b24      	ldr	r3, [pc, #144]	; (800662c <HAL_RCC_OscConfig+0x2b4>)
 800659a:	2200      	movs	r2, #0
 800659c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800659e:	f7fe fb35 	bl	8004c0c <HAL_GetTick>
 80065a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065a4:	e008      	b.n	80065b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065a6:	f7fe fb31 	bl	8004c0c <HAL_GetTick>
 80065aa:	4602      	mov	r2, r0
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d901      	bls.n	80065b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	e144      	b.n	8006842 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065b8:	4b1a      	ldr	r3, [pc, #104]	; (8006624 <HAL_RCC_OscConfig+0x2ac>)
 80065ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065bc:	f003 0302 	and.w	r3, r3, #2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1f0      	bne.n	80065a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0304 	and.w	r3, r3, #4
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f000 80a0 	beq.w	8006712 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065d2:	2300      	movs	r3, #0
 80065d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065d6:	4b13      	ldr	r3, [pc, #76]	; (8006624 <HAL_RCC_OscConfig+0x2ac>)
 80065d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10f      	bne.n	8006602 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065e2:	2300      	movs	r3, #0
 80065e4:	60bb      	str	r3, [r7, #8]
 80065e6:	4b0f      	ldr	r3, [pc, #60]	; (8006624 <HAL_RCC_OscConfig+0x2ac>)
 80065e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ea:	4a0e      	ldr	r2, [pc, #56]	; (8006624 <HAL_RCC_OscConfig+0x2ac>)
 80065ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065f0:	6413      	str	r3, [r2, #64]	; 0x40
 80065f2:	4b0c      	ldr	r3, [pc, #48]	; (8006624 <HAL_RCC_OscConfig+0x2ac>)
 80065f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065fa:	60bb      	str	r3, [r7, #8]
 80065fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065fe:	2301      	movs	r3, #1
 8006600:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006602:	4b0b      	ldr	r3, [pc, #44]	; (8006630 <HAL_RCC_OscConfig+0x2b8>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800660a:	2b00      	cmp	r3, #0
 800660c:	d121      	bne.n	8006652 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800660e:	4b08      	ldr	r3, [pc, #32]	; (8006630 <HAL_RCC_OscConfig+0x2b8>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a07      	ldr	r2, [pc, #28]	; (8006630 <HAL_RCC_OscConfig+0x2b8>)
 8006614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006618:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800661a:	f7fe faf7 	bl	8004c0c <HAL_GetTick>
 800661e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006620:	e011      	b.n	8006646 <HAL_RCC_OscConfig+0x2ce>
 8006622:	bf00      	nop
 8006624:	40023800 	.word	0x40023800
 8006628:	42470000 	.word	0x42470000
 800662c:	42470e80 	.word	0x42470e80
 8006630:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006634:	f7fe faea 	bl	8004c0c <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	2b02      	cmp	r3, #2
 8006640:	d901      	bls.n	8006646 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	e0fd      	b.n	8006842 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006646:	4b81      	ldr	r3, [pc, #516]	; (800684c <HAL_RCC_OscConfig+0x4d4>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800664e:	2b00      	cmp	r3, #0
 8006650:	d0f0      	beq.n	8006634 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d106      	bne.n	8006668 <HAL_RCC_OscConfig+0x2f0>
 800665a:	4b7d      	ldr	r3, [pc, #500]	; (8006850 <HAL_RCC_OscConfig+0x4d8>)
 800665c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800665e:	4a7c      	ldr	r2, [pc, #496]	; (8006850 <HAL_RCC_OscConfig+0x4d8>)
 8006660:	f043 0301 	orr.w	r3, r3, #1
 8006664:	6713      	str	r3, [r2, #112]	; 0x70
 8006666:	e01c      	b.n	80066a2 <HAL_RCC_OscConfig+0x32a>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	2b05      	cmp	r3, #5
 800666e:	d10c      	bne.n	800668a <HAL_RCC_OscConfig+0x312>
 8006670:	4b77      	ldr	r3, [pc, #476]	; (8006850 <HAL_RCC_OscConfig+0x4d8>)
 8006672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006674:	4a76      	ldr	r2, [pc, #472]	; (8006850 <HAL_RCC_OscConfig+0x4d8>)
 8006676:	f043 0304 	orr.w	r3, r3, #4
 800667a:	6713      	str	r3, [r2, #112]	; 0x70
 800667c:	4b74      	ldr	r3, [pc, #464]	; (8006850 <HAL_RCC_OscConfig+0x4d8>)
 800667e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006680:	4a73      	ldr	r2, [pc, #460]	; (8006850 <HAL_RCC_OscConfig+0x4d8>)
 8006682:	f043 0301 	orr.w	r3, r3, #1
 8006686:	6713      	str	r3, [r2, #112]	; 0x70
 8006688:	e00b      	b.n	80066a2 <HAL_RCC_OscConfig+0x32a>
 800668a:	4b71      	ldr	r3, [pc, #452]	; (8006850 <HAL_RCC_OscConfig+0x4d8>)
 800668c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800668e:	4a70      	ldr	r2, [pc, #448]	; (8006850 <HAL_RCC_OscConfig+0x4d8>)
 8006690:	f023 0301 	bic.w	r3, r3, #1
 8006694:	6713      	str	r3, [r2, #112]	; 0x70
 8006696:	4b6e      	ldr	r3, [pc, #440]	; (8006850 <HAL_RCC_OscConfig+0x4d8>)
 8006698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800669a:	4a6d      	ldr	r2, [pc, #436]	; (8006850 <HAL_RCC_OscConfig+0x4d8>)
 800669c:	f023 0304 	bic.w	r3, r3, #4
 80066a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d015      	beq.n	80066d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066aa:	f7fe faaf 	bl	8004c0c <HAL_GetTick>
 80066ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066b0:	e00a      	b.n	80066c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066b2:	f7fe faab 	bl	8004c0c <HAL_GetTick>
 80066b6:	4602      	mov	r2, r0
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d901      	bls.n	80066c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80066c4:	2303      	movs	r3, #3
 80066c6:	e0bc      	b.n	8006842 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066c8:	4b61      	ldr	r3, [pc, #388]	; (8006850 <HAL_RCC_OscConfig+0x4d8>)
 80066ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d0ee      	beq.n	80066b2 <HAL_RCC_OscConfig+0x33a>
 80066d4:	e014      	b.n	8006700 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066d6:	f7fe fa99 	bl	8004c0c <HAL_GetTick>
 80066da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066dc:	e00a      	b.n	80066f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066de:	f7fe fa95 	bl	8004c0c <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d901      	bls.n	80066f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e0a6      	b.n	8006842 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066f4:	4b56      	ldr	r3, [pc, #344]	; (8006850 <HAL_RCC_OscConfig+0x4d8>)
 80066f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f8:	f003 0302 	and.w	r3, r3, #2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1ee      	bne.n	80066de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006700:	7dfb      	ldrb	r3, [r7, #23]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d105      	bne.n	8006712 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006706:	4b52      	ldr	r3, [pc, #328]	; (8006850 <HAL_RCC_OscConfig+0x4d8>)
 8006708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670a:	4a51      	ldr	r2, [pc, #324]	; (8006850 <HAL_RCC_OscConfig+0x4d8>)
 800670c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006710:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	2b00      	cmp	r3, #0
 8006718:	f000 8092 	beq.w	8006840 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800671c:	4b4c      	ldr	r3, [pc, #304]	; (8006850 <HAL_RCC_OscConfig+0x4d8>)
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f003 030c 	and.w	r3, r3, #12
 8006724:	2b08      	cmp	r3, #8
 8006726:	d05c      	beq.n	80067e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	2b02      	cmp	r3, #2
 800672e:	d141      	bne.n	80067b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006730:	4b48      	ldr	r3, [pc, #288]	; (8006854 <HAL_RCC_OscConfig+0x4dc>)
 8006732:	2200      	movs	r2, #0
 8006734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006736:	f7fe fa69 	bl	8004c0c <HAL_GetTick>
 800673a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800673c:	e008      	b.n	8006750 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800673e:	f7fe fa65 	bl	8004c0c <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	2b02      	cmp	r3, #2
 800674a:	d901      	bls.n	8006750 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e078      	b.n	8006842 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006750:	4b3f      	ldr	r3, [pc, #252]	; (8006850 <HAL_RCC_OscConfig+0x4d8>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1f0      	bne.n	800673e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	69da      	ldr	r2, [r3, #28]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a1b      	ldr	r3, [r3, #32]
 8006764:	431a      	orrs	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676a:	019b      	lsls	r3, r3, #6
 800676c:	431a      	orrs	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006772:	085b      	lsrs	r3, r3, #1
 8006774:	3b01      	subs	r3, #1
 8006776:	041b      	lsls	r3, r3, #16
 8006778:	431a      	orrs	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677e:	061b      	lsls	r3, r3, #24
 8006780:	4933      	ldr	r1, [pc, #204]	; (8006850 <HAL_RCC_OscConfig+0x4d8>)
 8006782:	4313      	orrs	r3, r2
 8006784:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006786:	4b33      	ldr	r3, [pc, #204]	; (8006854 <HAL_RCC_OscConfig+0x4dc>)
 8006788:	2201      	movs	r2, #1
 800678a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800678c:	f7fe fa3e 	bl	8004c0c <HAL_GetTick>
 8006790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006792:	e008      	b.n	80067a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006794:	f7fe fa3a 	bl	8004c0c <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d901      	bls.n	80067a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e04d      	b.n	8006842 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067a6:	4b2a      	ldr	r3, [pc, #168]	; (8006850 <HAL_RCC_OscConfig+0x4d8>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d0f0      	beq.n	8006794 <HAL_RCC_OscConfig+0x41c>
 80067b2:	e045      	b.n	8006840 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067b4:	4b27      	ldr	r3, [pc, #156]	; (8006854 <HAL_RCC_OscConfig+0x4dc>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ba:	f7fe fa27 	bl	8004c0c <HAL_GetTick>
 80067be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067c0:	e008      	b.n	80067d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067c2:	f7fe fa23 	bl	8004c0c <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d901      	bls.n	80067d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e036      	b.n	8006842 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067d4:	4b1e      	ldr	r3, [pc, #120]	; (8006850 <HAL_RCC_OscConfig+0x4d8>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1f0      	bne.n	80067c2 <HAL_RCC_OscConfig+0x44a>
 80067e0:	e02e      	b.n	8006840 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d101      	bne.n	80067ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e029      	b.n	8006842 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80067ee:	4b18      	ldr	r3, [pc, #96]	; (8006850 <HAL_RCC_OscConfig+0x4d8>)
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	69db      	ldr	r3, [r3, #28]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d11c      	bne.n	800683c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800680c:	429a      	cmp	r2, r3
 800680e:	d115      	bne.n	800683c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006816:	4013      	ands	r3, r2
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800681c:	4293      	cmp	r3, r2
 800681e:	d10d      	bne.n	800683c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800682a:	429a      	cmp	r2, r3
 800682c:	d106      	bne.n	800683c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006838:	429a      	cmp	r2, r3
 800683a:	d001      	beq.n	8006840 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e000      	b.n	8006842 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3718      	adds	r7, #24
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	40007000 	.word	0x40007000
 8006850:	40023800 	.word	0x40023800
 8006854:	42470060 	.word	0x42470060

08006858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d101      	bne.n	800686c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e0cc      	b.n	8006a06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800686c:	4b68      	ldr	r3, [pc, #416]	; (8006a10 <HAL_RCC_ClockConfig+0x1b8>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 030f 	and.w	r3, r3, #15
 8006874:	683a      	ldr	r2, [r7, #0]
 8006876:	429a      	cmp	r2, r3
 8006878:	d90c      	bls.n	8006894 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800687a:	4b65      	ldr	r3, [pc, #404]	; (8006a10 <HAL_RCC_ClockConfig+0x1b8>)
 800687c:	683a      	ldr	r2, [r7, #0]
 800687e:	b2d2      	uxtb	r2, r2
 8006880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006882:	4b63      	ldr	r3, [pc, #396]	; (8006a10 <HAL_RCC_ClockConfig+0x1b8>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 030f 	and.w	r3, r3, #15
 800688a:	683a      	ldr	r2, [r7, #0]
 800688c:	429a      	cmp	r2, r3
 800688e:	d001      	beq.n	8006894 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e0b8      	b.n	8006a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0302 	and.w	r3, r3, #2
 800689c:	2b00      	cmp	r3, #0
 800689e:	d020      	beq.n	80068e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0304 	and.w	r3, r3, #4
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d005      	beq.n	80068b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068ac:	4b59      	ldr	r3, [pc, #356]	; (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	4a58      	ldr	r2, [pc, #352]	; (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 80068b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80068b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0308 	and.w	r3, r3, #8
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d005      	beq.n	80068d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068c4:	4b53      	ldr	r3, [pc, #332]	; (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	4a52      	ldr	r2, [pc, #328]	; (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 80068ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80068ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068d0:	4b50      	ldr	r3, [pc, #320]	; (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	494d      	ldr	r1, [pc, #308]	; (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 80068de:	4313      	orrs	r3, r2
 80068e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d044      	beq.n	8006978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d107      	bne.n	8006906 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068f6:	4b47      	ldr	r3, [pc, #284]	; (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d119      	bne.n	8006936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e07f      	b.n	8006a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	2b02      	cmp	r3, #2
 800690c:	d003      	beq.n	8006916 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006912:	2b03      	cmp	r3, #3
 8006914:	d107      	bne.n	8006926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006916:	4b3f      	ldr	r3, [pc, #252]	; (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d109      	bne.n	8006936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e06f      	b.n	8006a06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006926:	4b3b      	ldr	r3, [pc, #236]	; (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0302 	and.w	r3, r3, #2
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e067      	b.n	8006a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006936:	4b37      	ldr	r3, [pc, #220]	; (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f023 0203 	bic.w	r2, r3, #3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	4934      	ldr	r1, [pc, #208]	; (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 8006944:	4313      	orrs	r3, r2
 8006946:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006948:	f7fe f960 	bl	8004c0c <HAL_GetTick>
 800694c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800694e:	e00a      	b.n	8006966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006950:	f7fe f95c 	bl	8004c0c <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	f241 3288 	movw	r2, #5000	; 0x1388
 800695e:	4293      	cmp	r3, r2
 8006960:	d901      	bls.n	8006966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e04f      	b.n	8006a06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006966:	4b2b      	ldr	r3, [pc, #172]	; (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f003 020c 	and.w	r2, r3, #12
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	429a      	cmp	r2, r3
 8006976:	d1eb      	bne.n	8006950 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006978:	4b25      	ldr	r3, [pc, #148]	; (8006a10 <HAL_RCC_ClockConfig+0x1b8>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 030f 	and.w	r3, r3, #15
 8006980:	683a      	ldr	r2, [r7, #0]
 8006982:	429a      	cmp	r2, r3
 8006984:	d20c      	bcs.n	80069a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006986:	4b22      	ldr	r3, [pc, #136]	; (8006a10 <HAL_RCC_ClockConfig+0x1b8>)
 8006988:	683a      	ldr	r2, [r7, #0]
 800698a:	b2d2      	uxtb	r2, r2
 800698c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800698e:	4b20      	ldr	r3, [pc, #128]	; (8006a10 <HAL_RCC_ClockConfig+0x1b8>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 030f 	and.w	r3, r3, #15
 8006996:	683a      	ldr	r2, [r7, #0]
 8006998:	429a      	cmp	r2, r3
 800699a:	d001      	beq.n	80069a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e032      	b.n	8006a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0304 	and.w	r3, r3, #4
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d008      	beq.n	80069be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069ac:	4b19      	ldr	r3, [pc, #100]	; (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	4916      	ldr	r1, [pc, #88]	; (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0308 	and.w	r3, r3, #8
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d009      	beq.n	80069de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069ca:	4b12      	ldr	r3, [pc, #72]	; (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	00db      	lsls	r3, r3, #3
 80069d8:	490e      	ldr	r1, [pc, #56]	; (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80069de:	f000 f821 	bl	8006a24 <HAL_RCC_GetSysClockFreq>
 80069e2:	4601      	mov	r1, r0
 80069e4:	4b0b      	ldr	r3, [pc, #44]	; (8006a14 <HAL_RCC_ClockConfig+0x1bc>)
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	091b      	lsrs	r3, r3, #4
 80069ea:	f003 030f 	and.w	r3, r3, #15
 80069ee:	4a0a      	ldr	r2, [pc, #40]	; (8006a18 <HAL_RCC_ClockConfig+0x1c0>)
 80069f0:	5cd3      	ldrb	r3, [r2, r3]
 80069f2:	fa21 f303 	lsr.w	r3, r1, r3
 80069f6:	4a09      	ldr	r2, [pc, #36]	; (8006a1c <HAL_RCC_ClockConfig+0x1c4>)
 80069f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80069fa:	4b09      	ldr	r3, [pc, #36]	; (8006a20 <HAL_RCC_ClockConfig+0x1c8>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7fd ffdc 	bl	80049bc <HAL_InitTick>

  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	40023c00 	.word	0x40023c00
 8006a14:	40023800 	.word	0x40023800
 8006a18:	0800a520 	.word	0x0800a520
 8006a1c:	20000390 	.word	0x20000390
 8006a20:	20000394 	.word	0x20000394

08006a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	607b      	str	r3, [r7, #4]
 8006a2e:	2300      	movs	r3, #0
 8006a30:	60fb      	str	r3, [r7, #12]
 8006a32:	2300      	movs	r3, #0
 8006a34:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006a36:	2300      	movs	r3, #0
 8006a38:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a3a:	4b50      	ldr	r3, [pc, #320]	; (8006b7c <HAL_RCC_GetSysClockFreq+0x158>)
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f003 030c 	and.w	r3, r3, #12
 8006a42:	2b04      	cmp	r3, #4
 8006a44:	d007      	beq.n	8006a56 <HAL_RCC_GetSysClockFreq+0x32>
 8006a46:	2b08      	cmp	r3, #8
 8006a48:	d008      	beq.n	8006a5c <HAL_RCC_GetSysClockFreq+0x38>
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f040 808d 	bne.w	8006b6a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a50:	4b4b      	ldr	r3, [pc, #300]	; (8006b80 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006a52:	60bb      	str	r3, [r7, #8]
       break;
 8006a54:	e08c      	b.n	8006b70 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a56:	4b4b      	ldr	r3, [pc, #300]	; (8006b84 <HAL_RCC_GetSysClockFreq+0x160>)
 8006a58:	60bb      	str	r3, [r7, #8]
      break;
 8006a5a:	e089      	b.n	8006b70 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a5c:	4b47      	ldr	r3, [pc, #284]	; (8006b7c <HAL_RCC_GetSysClockFreq+0x158>)
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a64:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a66:	4b45      	ldr	r3, [pc, #276]	; (8006b7c <HAL_RCC_GetSysClockFreq+0x158>)
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d023      	beq.n	8006aba <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a72:	4b42      	ldr	r3, [pc, #264]	; (8006b7c <HAL_RCC_GetSysClockFreq+0x158>)
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	099b      	lsrs	r3, r3, #6
 8006a78:	f04f 0400 	mov.w	r4, #0
 8006a7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006a80:	f04f 0200 	mov.w	r2, #0
 8006a84:	ea03 0501 	and.w	r5, r3, r1
 8006a88:	ea04 0602 	and.w	r6, r4, r2
 8006a8c:	4a3d      	ldr	r2, [pc, #244]	; (8006b84 <HAL_RCC_GetSysClockFreq+0x160>)
 8006a8e:	fb02 f106 	mul.w	r1, r2, r6
 8006a92:	2200      	movs	r2, #0
 8006a94:	fb02 f205 	mul.w	r2, r2, r5
 8006a98:	440a      	add	r2, r1
 8006a9a:	493a      	ldr	r1, [pc, #232]	; (8006b84 <HAL_RCC_GetSysClockFreq+0x160>)
 8006a9c:	fba5 0101 	umull	r0, r1, r5, r1
 8006aa0:	1853      	adds	r3, r2, r1
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f04f 0400 	mov.w	r4, #0
 8006aaa:	461a      	mov	r2, r3
 8006aac:	4623      	mov	r3, r4
 8006aae:	f7fa f885 	bl	8000bbc <__aeabi_uldivmod>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	460c      	mov	r4, r1
 8006ab6:	60fb      	str	r3, [r7, #12]
 8006ab8:	e049      	b.n	8006b4e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006aba:	4b30      	ldr	r3, [pc, #192]	; (8006b7c <HAL_RCC_GetSysClockFreq+0x158>)
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	099b      	lsrs	r3, r3, #6
 8006ac0:	f04f 0400 	mov.w	r4, #0
 8006ac4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006ac8:	f04f 0200 	mov.w	r2, #0
 8006acc:	ea03 0501 	and.w	r5, r3, r1
 8006ad0:	ea04 0602 	and.w	r6, r4, r2
 8006ad4:	4629      	mov	r1, r5
 8006ad6:	4632      	mov	r2, r6
 8006ad8:	f04f 0300 	mov.w	r3, #0
 8006adc:	f04f 0400 	mov.w	r4, #0
 8006ae0:	0154      	lsls	r4, r2, #5
 8006ae2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006ae6:	014b      	lsls	r3, r1, #5
 8006ae8:	4619      	mov	r1, r3
 8006aea:	4622      	mov	r2, r4
 8006aec:	1b49      	subs	r1, r1, r5
 8006aee:	eb62 0206 	sbc.w	r2, r2, r6
 8006af2:	f04f 0300 	mov.w	r3, #0
 8006af6:	f04f 0400 	mov.w	r4, #0
 8006afa:	0194      	lsls	r4, r2, #6
 8006afc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006b00:	018b      	lsls	r3, r1, #6
 8006b02:	1a5b      	subs	r3, r3, r1
 8006b04:	eb64 0402 	sbc.w	r4, r4, r2
 8006b08:	f04f 0100 	mov.w	r1, #0
 8006b0c:	f04f 0200 	mov.w	r2, #0
 8006b10:	00e2      	lsls	r2, r4, #3
 8006b12:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006b16:	00d9      	lsls	r1, r3, #3
 8006b18:	460b      	mov	r3, r1
 8006b1a:	4614      	mov	r4, r2
 8006b1c:	195b      	adds	r3, r3, r5
 8006b1e:	eb44 0406 	adc.w	r4, r4, r6
 8006b22:	f04f 0100 	mov.w	r1, #0
 8006b26:	f04f 0200 	mov.w	r2, #0
 8006b2a:	02a2      	lsls	r2, r4, #10
 8006b2c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006b30:	0299      	lsls	r1, r3, #10
 8006b32:	460b      	mov	r3, r1
 8006b34:	4614      	mov	r4, r2
 8006b36:	4618      	mov	r0, r3
 8006b38:	4621      	mov	r1, r4
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f04f 0400 	mov.w	r4, #0
 8006b40:	461a      	mov	r2, r3
 8006b42:	4623      	mov	r3, r4
 8006b44:	f7fa f83a 	bl	8000bbc <__aeabi_uldivmod>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	460c      	mov	r4, r1
 8006b4c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b4e:	4b0b      	ldr	r3, [pc, #44]	; (8006b7c <HAL_RCC_GetSysClockFreq+0x158>)
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	0c1b      	lsrs	r3, r3, #16
 8006b54:	f003 0303 	and.w	r3, r3, #3
 8006b58:	3301      	adds	r3, #1
 8006b5a:	005b      	lsls	r3, r3, #1
 8006b5c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b66:	60bb      	str	r3, [r7, #8]
      break;
 8006b68:	e002      	b.n	8006b70 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b6a:	4b05      	ldr	r3, [pc, #20]	; (8006b80 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006b6c:	60bb      	str	r3, [r7, #8]
      break;
 8006b6e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b70:	68bb      	ldr	r3, [r7, #8]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3714      	adds	r7, #20
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	40023800 	.word	0x40023800
 8006b80:	00f42400 	.word	0x00f42400
 8006b84:	00b71b00 	.word	0x00b71b00

08006b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b8c:	4b03      	ldr	r3, [pc, #12]	; (8006b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	20000390 	.word	0x20000390

08006ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ba4:	f7ff fff0 	bl	8006b88 <HAL_RCC_GetHCLKFreq>
 8006ba8:	4601      	mov	r1, r0
 8006baa:	4b05      	ldr	r3, [pc, #20]	; (8006bc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	0a9b      	lsrs	r3, r3, #10
 8006bb0:	f003 0307 	and.w	r3, r3, #7
 8006bb4:	4a03      	ldr	r2, [pc, #12]	; (8006bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bb6:	5cd3      	ldrb	r3, [r2, r3]
 8006bb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	40023800 	.word	0x40023800
 8006bc4:	0800a530 	.word	0x0800a530

08006bc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006bcc:	f7ff ffdc 	bl	8006b88 <HAL_RCC_GetHCLKFreq>
 8006bd0:	4601      	mov	r1, r0
 8006bd2:	4b05      	ldr	r3, [pc, #20]	; (8006be8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	0b5b      	lsrs	r3, r3, #13
 8006bd8:	f003 0307 	and.w	r3, r3, #7
 8006bdc:	4a03      	ldr	r2, [pc, #12]	; (8006bec <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bde:	5cd3      	ldrb	r3, [r2, r3]
 8006be0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	40023800 	.word	0x40023800
 8006bec:	0800a530 	.word	0x0800a530

08006bf0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	220f      	movs	r2, #15
 8006bfe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006c00:	4b12      	ldr	r3, [pc, #72]	; (8006c4c <HAL_RCC_GetClockConfig+0x5c>)
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f003 0203 	and.w	r2, r3, #3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006c0c:	4b0f      	ldr	r3, [pc, #60]	; (8006c4c <HAL_RCC_GetClockConfig+0x5c>)
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006c18:	4b0c      	ldr	r3, [pc, #48]	; (8006c4c <HAL_RCC_GetClockConfig+0x5c>)
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006c24:	4b09      	ldr	r3, [pc, #36]	; (8006c4c <HAL_RCC_GetClockConfig+0x5c>)
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	08db      	lsrs	r3, r3, #3
 8006c2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006c32:	4b07      	ldr	r3, [pc, #28]	; (8006c50 <HAL_RCC_GetClockConfig+0x60>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 020f 	and.w	r2, r3, #15
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	601a      	str	r2, [r3, #0]
}
 8006c3e:	bf00      	nop
 8006c40:	370c      	adds	r7, #12
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	40023800 	.word	0x40023800
 8006c50:	40023c00 	.word	0x40023c00

08006c54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d101      	bne.n	8006c66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e01d      	b.n	8006ca2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d106      	bne.n	8006c80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7fd fd8c 	bl	8004798 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2202      	movs	r2, #2
 8006c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	3304      	adds	r3, #4
 8006c90:	4619      	mov	r1, r3
 8006c92:	4610      	mov	r0, r2
 8006c94:	f000 fb72 	bl	800737c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3708      	adds	r7, #8
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b085      	sub	sp, #20
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2202      	movs	r2, #2
 8006cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f003 0307 	and.w	r3, r3, #7
 8006cc4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2b06      	cmp	r3, #6
 8006cca:	d007      	beq.n	8006cdc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f042 0201 	orr.w	r2, r2, #1
 8006cda:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3714      	adds	r7, #20
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b085      	sub	sp, #20
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68da      	ldr	r2, [r3, #12]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f042 0201 	orr.w	r2, r2, #1
 8006d08:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f003 0307 	and.w	r3, r3, #7
 8006d14:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2b06      	cmp	r3, #6
 8006d1a:	d007      	beq.n	8006d2c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f042 0201 	orr.w	r2, r2, #1
 8006d2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3714      	adds	r7, #20
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b082      	sub	sp, #8
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d101      	bne.n	8006d4c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e01d      	b.n	8006d88 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d106      	bne.n	8006d66 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f815 	bl	8006d90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2202      	movs	r2, #2
 8006d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	3304      	adds	r3, #4
 8006d76:	4619      	mov	r1, r3
 8006d78:	4610      	mov	r0, r2
 8006d7a:	f000 faff 	bl	800737c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3708      	adds	r7, #8
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2201      	movs	r2, #1
 8006db4:	6839      	ldr	r1, [r7, #0]
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 fdca 	bl	8007950 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a15      	ldr	r2, [pc, #84]	; (8006e18 <HAL_TIM_PWM_Start+0x74>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d004      	beq.n	8006dd0 <HAL_TIM_PWM_Start+0x2c>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a14      	ldr	r2, [pc, #80]	; (8006e1c <HAL_TIM_PWM_Start+0x78>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d101      	bne.n	8006dd4 <HAL_TIM_PWM_Start+0x30>
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e000      	b.n	8006dd6 <HAL_TIM_PWM_Start+0x32>
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d007      	beq.n	8006dea <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006de8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f003 0307 	and.w	r3, r3, #7
 8006df4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2b06      	cmp	r3, #6
 8006dfa:	d007      	beq.n	8006e0c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f042 0201 	orr.w	r2, r2, #1
 8006e0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	40010000 	.word	0x40010000
 8006e1c:	40010400 	.word	0x40010400

08006e20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	f003 0302 	and.w	r3, r3, #2
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d122      	bne.n	8006e7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	f003 0302 	and.w	r3, r3, #2
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d11b      	bne.n	8006e7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f06f 0202 	mvn.w	r2, #2
 8006e4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	f003 0303 	and.w	r3, r3, #3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d003      	beq.n	8006e6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 fa6b 	bl	800733e <HAL_TIM_IC_CaptureCallback>
 8006e68:	e005      	b.n	8006e76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fa5d 	bl	800732a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 fa6e 	bl	8007352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	f003 0304 	and.w	r3, r3, #4
 8006e86:	2b04      	cmp	r3, #4
 8006e88:	d122      	bne.n	8006ed0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	f003 0304 	and.w	r3, r3, #4
 8006e94:	2b04      	cmp	r3, #4
 8006e96:	d11b      	bne.n	8006ed0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f06f 0204 	mvn.w	r2, #4
 8006ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d003      	beq.n	8006ebe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fa41 	bl	800733e <HAL_TIM_IC_CaptureCallback>
 8006ebc:	e005      	b.n	8006eca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 fa33 	bl	800732a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fa44 	bl	8007352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	f003 0308 	and.w	r3, r3, #8
 8006eda:	2b08      	cmp	r3, #8
 8006edc:	d122      	bne.n	8006f24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	f003 0308 	and.w	r3, r3, #8
 8006ee8:	2b08      	cmp	r3, #8
 8006eea:	d11b      	bne.n	8006f24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f06f 0208 	mvn.w	r2, #8
 8006ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2204      	movs	r2, #4
 8006efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	69db      	ldr	r3, [r3, #28]
 8006f02:	f003 0303 	and.w	r3, r3, #3
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d003      	beq.n	8006f12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fa17 	bl	800733e <HAL_TIM_IC_CaptureCallback>
 8006f10:	e005      	b.n	8006f1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fa09 	bl	800732a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fa1a 	bl	8007352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	f003 0310 	and.w	r3, r3, #16
 8006f2e:	2b10      	cmp	r3, #16
 8006f30:	d122      	bne.n	8006f78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	f003 0310 	and.w	r3, r3, #16
 8006f3c:	2b10      	cmp	r3, #16
 8006f3e:	d11b      	bne.n	8006f78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f06f 0210 	mvn.w	r2, #16
 8006f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2208      	movs	r2, #8
 8006f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d003      	beq.n	8006f66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f9ed 	bl	800733e <HAL_TIM_IC_CaptureCallback>
 8006f64:	e005      	b.n	8006f72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f9df 	bl	800732a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f9f0 	bl	8007352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	f003 0301 	and.w	r3, r3, #1
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d10e      	bne.n	8006fa4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	f003 0301 	and.w	r3, r3, #1
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d107      	bne.n	8006fa4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f06f 0201 	mvn.w	r2, #1
 8006f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7fd fb20 	bl	80045e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fae:	2b80      	cmp	r3, #128	; 0x80
 8006fb0:	d10e      	bne.n	8006fd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fbc:	2b80      	cmp	r3, #128	; 0x80
 8006fbe:	d107      	bne.n	8006fd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 fdbe 	bl	8007b4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fda:	2b40      	cmp	r3, #64	; 0x40
 8006fdc:	d10e      	bne.n	8006ffc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe8:	2b40      	cmp	r3, #64	; 0x40
 8006fea:	d107      	bne.n	8006ffc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f9b5 	bl	8007366 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	f003 0320 	and.w	r3, r3, #32
 8007006:	2b20      	cmp	r3, #32
 8007008:	d10e      	bne.n	8007028 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	f003 0320 	and.w	r3, r3, #32
 8007014:	2b20      	cmp	r3, #32
 8007016:	d107      	bne.n	8007028 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f06f 0220 	mvn.w	r2, #32
 8007020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fd88 	bl	8007b38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007028:	bf00      	nop
 800702a:	3708      	adds	r7, #8
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007042:	2b01      	cmp	r3, #1
 8007044:	d101      	bne.n	800704a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007046:	2302      	movs	r3, #2
 8007048:	e0b4      	b.n	80071b4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2202      	movs	r2, #2
 8007056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2b0c      	cmp	r3, #12
 800705e:	f200 809f 	bhi.w	80071a0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007062:	a201      	add	r2, pc, #4	; (adr r2, 8007068 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007068:	0800709d 	.word	0x0800709d
 800706c:	080071a1 	.word	0x080071a1
 8007070:	080071a1 	.word	0x080071a1
 8007074:	080071a1 	.word	0x080071a1
 8007078:	080070dd 	.word	0x080070dd
 800707c:	080071a1 	.word	0x080071a1
 8007080:	080071a1 	.word	0x080071a1
 8007084:	080071a1 	.word	0x080071a1
 8007088:	0800711f 	.word	0x0800711f
 800708c:	080071a1 	.word	0x080071a1
 8007090:	080071a1 	.word	0x080071a1
 8007094:	080071a1 	.word	0x080071a1
 8007098:	0800715f 	.word	0x0800715f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68b9      	ldr	r1, [r7, #8]
 80070a2:	4618      	mov	r0, r3
 80070a4:	f000 fa0a 	bl	80074bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	699a      	ldr	r2, [r3, #24]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f042 0208 	orr.w	r2, r2, #8
 80070b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	699a      	ldr	r2, [r3, #24]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f022 0204 	bic.w	r2, r2, #4
 80070c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	6999      	ldr	r1, [r3, #24]
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	691a      	ldr	r2, [r3, #16]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	430a      	orrs	r2, r1
 80070d8:	619a      	str	r2, [r3, #24]
      break;
 80070da:	e062      	b.n	80071a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68b9      	ldr	r1, [r7, #8]
 80070e2:	4618      	mov	r0, r3
 80070e4:	f000 fa5a 	bl	800759c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	699a      	ldr	r2, [r3, #24]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	699a      	ldr	r2, [r3, #24]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	6999      	ldr	r1, [r3, #24]
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	021a      	lsls	r2, r3, #8
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	430a      	orrs	r2, r1
 800711a:	619a      	str	r2, [r3, #24]
      break;
 800711c:	e041      	b.n	80071a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68b9      	ldr	r1, [r7, #8]
 8007124:	4618      	mov	r0, r3
 8007126:	f000 faaf 	bl	8007688 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	69da      	ldr	r2, [r3, #28]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f042 0208 	orr.w	r2, r2, #8
 8007138:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	69da      	ldr	r2, [r3, #28]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f022 0204 	bic.w	r2, r2, #4
 8007148:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	69d9      	ldr	r1, [r3, #28]
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	691a      	ldr	r2, [r3, #16]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	430a      	orrs	r2, r1
 800715a:	61da      	str	r2, [r3, #28]
      break;
 800715c:	e021      	b.n	80071a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68b9      	ldr	r1, [r7, #8]
 8007164:	4618      	mov	r0, r3
 8007166:	f000 fb03 	bl	8007770 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	69da      	ldr	r2, [r3, #28]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007178:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	69da      	ldr	r2, [r3, #28]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	69d9      	ldr	r1, [r3, #28]
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	021a      	lsls	r2, r3, #8
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	430a      	orrs	r2, r1
 800719c:	61da      	str	r2, [r3, #28]
      break;
 800719e:	e000      	b.n	80071a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80071a0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d101      	bne.n	80071d4 <HAL_TIM_ConfigClockSource+0x18>
 80071d0:	2302      	movs	r3, #2
 80071d2:	e0a6      	b.n	8007322 <HAL_TIM_ConfigClockSource+0x166>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2202      	movs	r2, #2
 80071e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80071f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2b40      	cmp	r3, #64	; 0x40
 800720a:	d067      	beq.n	80072dc <HAL_TIM_ConfigClockSource+0x120>
 800720c:	2b40      	cmp	r3, #64	; 0x40
 800720e:	d80b      	bhi.n	8007228 <HAL_TIM_ConfigClockSource+0x6c>
 8007210:	2b10      	cmp	r3, #16
 8007212:	d073      	beq.n	80072fc <HAL_TIM_ConfigClockSource+0x140>
 8007214:	2b10      	cmp	r3, #16
 8007216:	d802      	bhi.n	800721e <HAL_TIM_ConfigClockSource+0x62>
 8007218:	2b00      	cmp	r3, #0
 800721a:	d06f      	beq.n	80072fc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800721c:	e078      	b.n	8007310 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800721e:	2b20      	cmp	r3, #32
 8007220:	d06c      	beq.n	80072fc <HAL_TIM_ConfigClockSource+0x140>
 8007222:	2b30      	cmp	r3, #48	; 0x30
 8007224:	d06a      	beq.n	80072fc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007226:	e073      	b.n	8007310 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007228:	2b70      	cmp	r3, #112	; 0x70
 800722a:	d00d      	beq.n	8007248 <HAL_TIM_ConfigClockSource+0x8c>
 800722c:	2b70      	cmp	r3, #112	; 0x70
 800722e:	d804      	bhi.n	800723a <HAL_TIM_ConfigClockSource+0x7e>
 8007230:	2b50      	cmp	r3, #80	; 0x50
 8007232:	d033      	beq.n	800729c <HAL_TIM_ConfigClockSource+0xe0>
 8007234:	2b60      	cmp	r3, #96	; 0x60
 8007236:	d041      	beq.n	80072bc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007238:	e06a      	b.n	8007310 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800723a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800723e:	d066      	beq.n	800730e <HAL_TIM_ConfigClockSource+0x152>
 8007240:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007244:	d017      	beq.n	8007276 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007246:	e063      	b.n	8007310 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6818      	ldr	r0, [r3, #0]
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	6899      	ldr	r1, [r3, #8]
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	685a      	ldr	r2, [r3, #4]
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	f000 fb5a 	bl	8007910 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800726a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	609a      	str	r2, [r3, #8]
      break;
 8007274:	e04c      	b.n	8007310 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6818      	ldr	r0, [r3, #0]
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	6899      	ldr	r1, [r3, #8]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	685a      	ldr	r2, [r3, #4]
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	f000 fb43 	bl	8007910 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	689a      	ldr	r2, [r3, #8]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007298:	609a      	str	r2, [r3, #8]
      break;
 800729a:	e039      	b.n	8007310 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6818      	ldr	r0, [r3, #0]
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	6859      	ldr	r1, [r3, #4]
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	461a      	mov	r2, r3
 80072aa:	f000 fab7 	bl	800781c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2150      	movs	r1, #80	; 0x50
 80072b4:	4618      	mov	r0, r3
 80072b6:	f000 fb10 	bl	80078da <TIM_ITRx_SetConfig>
      break;
 80072ba:	e029      	b.n	8007310 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6818      	ldr	r0, [r3, #0]
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	6859      	ldr	r1, [r3, #4]
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	461a      	mov	r2, r3
 80072ca:	f000 fad6 	bl	800787a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2160      	movs	r1, #96	; 0x60
 80072d4:	4618      	mov	r0, r3
 80072d6:	f000 fb00 	bl	80078da <TIM_ITRx_SetConfig>
      break;
 80072da:	e019      	b.n	8007310 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6818      	ldr	r0, [r3, #0]
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	6859      	ldr	r1, [r3, #4]
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	461a      	mov	r2, r3
 80072ea:	f000 fa97 	bl	800781c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2140      	movs	r1, #64	; 0x40
 80072f4:	4618      	mov	r0, r3
 80072f6:	f000 faf0 	bl	80078da <TIM_ITRx_SetConfig>
      break;
 80072fa:	e009      	b.n	8007310 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4619      	mov	r1, r3
 8007306:	4610      	mov	r0, r2
 8007308:	f000 fae7 	bl	80078da <TIM_ITRx_SetConfig>
      break;
 800730c:	e000      	b.n	8007310 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800730e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800732a:	b480      	push	{r7}
 800732c:	b083      	sub	sp, #12
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007332:	bf00      	nop
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr

0800733e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800733e:	b480      	push	{r7}
 8007340:	b083      	sub	sp, #12
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007346:	bf00      	nop
 8007348:	370c      	adds	r7, #12
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr

08007352 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007352:	b480      	push	{r7}
 8007354:	b083      	sub	sp, #12
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800735a:	bf00      	nop
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007366:	b480      	push	{r7}
 8007368:	b083      	sub	sp, #12
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800736e:	bf00      	nop
 8007370:	370c      	adds	r7, #12
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
	...

0800737c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a40      	ldr	r2, [pc, #256]	; (8007490 <TIM_Base_SetConfig+0x114>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d013      	beq.n	80073bc <TIM_Base_SetConfig+0x40>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800739a:	d00f      	beq.n	80073bc <TIM_Base_SetConfig+0x40>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a3d      	ldr	r2, [pc, #244]	; (8007494 <TIM_Base_SetConfig+0x118>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d00b      	beq.n	80073bc <TIM_Base_SetConfig+0x40>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a3c      	ldr	r2, [pc, #240]	; (8007498 <TIM_Base_SetConfig+0x11c>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d007      	beq.n	80073bc <TIM_Base_SetConfig+0x40>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a3b      	ldr	r2, [pc, #236]	; (800749c <TIM_Base_SetConfig+0x120>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d003      	beq.n	80073bc <TIM_Base_SetConfig+0x40>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a3a      	ldr	r2, [pc, #232]	; (80074a0 <TIM_Base_SetConfig+0x124>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d108      	bne.n	80073ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a2f      	ldr	r2, [pc, #188]	; (8007490 <TIM_Base_SetConfig+0x114>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d02b      	beq.n	800742e <TIM_Base_SetConfig+0xb2>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073dc:	d027      	beq.n	800742e <TIM_Base_SetConfig+0xb2>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a2c      	ldr	r2, [pc, #176]	; (8007494 <TIM_Base_SetConfig+0x118>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d023      	beq.n	800742e <TIM_Base_SetConfig+0xb2>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a2b      	ldr	r2, [pc, #172]	; (8007498 <TIM_Base_SetConfig+0x11c>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d01f      	beq.n	800742e <TIM_Base_SetConfig+0xb2>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a2a      	ldr	r2, [pc, #168]	; (800749c <TIM_Base_SetConfig+0x120>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d01b      	beq.n	800742e <TIM_Base_SetConfig+0xb2>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a29      	ldr	r2, [pc, #164]	; (80074a0 <TIM_Base_SetConfig+0x124>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d017      	beq.n	800742e <TIM_Base_SetConfig+0xb2>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a28      	ldr	r2, [pc, #160]	; (80074a4 <TIM_Base_SetConfig+0x128>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d013      	beq.n	800742e <TIM_Base_SetConfig+0xb2>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a27      	ldr	r2, [pc, #156]	; (80074a8 <TIM_Base_SetConfig+0x12c>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d00f      	beq.n	800742e <TIM_Base_SetConfig+0xb2>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a26      	ldr	r2, [pc, #152]	; (80074ac <TIM_Base_SetConfig+0x130>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d00b      	beq.n	800742e <TIM_Base_SetConfig+0xb2>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a25      	ldr	r2, [pc, #148]	; (80074b0 <TIM_Base_SetConfig+0x134>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d007      	beq.n	800742e <TIM_Base_SetConfig+0xb2>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a24      	ldr	r2, [pc, #144]	; (80074b4 <TIM_Base_SetConfig+0x138>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d003      	beq.n	800742e <TIM_Base_SetConfig+0xb2>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a23      	ldr	r2, [pc, #140]	; (80074b8 <TIM_Base_SetConfig+0x13c>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d108      	bne.n	8007440 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	4313      	orrs	r3, r2
 800743e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	4313      	orrs	r3, r2
 800744c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	689a      	ldr	r2, [r3, #8]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a0a      	ldr	r2, [pc, #40]	; (8007490 <TIM_Base_SetConfig+0x114>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d003      	beq.n	8007474 <TIM_Base_SetConfig+0xf8>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a0c      	ldr	r2, [pc, #48]	; (80074a0 <TIM_Base_SetConfig+0x124>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d103      	bne.n	800747c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	691a      	ldr	r2, [r3, #16]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	615a      	str	r2, [r3, #20]
}
 8007482:	bf00      	nop
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	40010000 	.word	0x40010000
 8007494:	40000400 	.word	0x40000400
 8007498:	40000800 	.word	0x40000800
 800749c:	40000c00 	.word	0x40000c00
 80074a0:	40010400 	.word	0x40010400
 80074a4:	40014000 	.word	0x40014000
 80074a8:	40014400 	.word	0x40014400
 80074ac:	40014800 	.word	0x40014800
 80074b0:	40001800 	.word	0x40001800
 80074b4:	40001c00 	.word	0x40001c00
 80074b8:	40002000 	.word	0x40002000

080074bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074bc:	b480      	push	{r7}
 80074be:	b087      	sub	sp, #28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	f023 0201 	bic.w	r2, r3, #1
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a1b      	ldr	r3, [r3, #32]
 80074d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	699b      	ldr	r3, [r3, #24]
 80074e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f023 0303 	bic.w	r3, r3, #3
 80074f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	f023 0302 	bic.w	r3, r3, #2
 8007504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	4313      	orrs	r3, r2
 800750e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a20      	ldr	r2, [pc, #128]	; (8007594 <TIM_OC1_SetConfig+0xd8>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d003      	beq.n	8007520 <TIM_OC1_SetConfig+0x64>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a1f      	ldr	r2, [pc, #124]	; (8007598 <TIM_OC1_SetConfig+0xdc>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d10c      	bne.n	800753a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	f023 0308 	bic.w	r3, r3, #8
 8007526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	697a      	ldr	r2, [r7, #20]
 800752e:	4313      	orrs	r3, r2
 8007530:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	f023 0304 	bic.w	r3, r3, #4
 8007538:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a15      	ldr	r2, [pc, #84]	; (8007594 <TIM_OC1_SetConfig+0xd8>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d003      	beq.n	800754a <TIM_OC1_SetConfig+0x8e>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a14      	ldr	r2, [pc, #80]	; (8007598 <TIM_OC1_SetConfig+0xdc>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d111      	bne.n	800756e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007550:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007558:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	4313      	orrs	r3, r2
 8007562:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	699b      	ldr	r3, [r3, #24]
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	4313      	orrs	r3, r2
 800756c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	685a      	ldr	r2, [r3, #4]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	697a      	ldr	r2, [r7, #20]
 8007586:	621a      	str	r2, [r3, #32]
}
 8007588:	bf00      	nop
 800758a:	371c      	adds	r7, #28
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr
 8007594:	40010000 	.word	0x40010000
 8007598:	40010400 	.word	0x40010400

0800759c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800759c:	b480      	push	{r7}
 800759e:	b087      	sub	sp, #28
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a1b      	ldr	r3, [r3, #32]
 80075aa:	f023 0210 	bic.w	r2, r3, #16
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a1b      	ldr	r3, [r3, #32]
 80075b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	699b      	ldr	r3, [r3, #24]
 80075c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	021b      	lsls	r3, r3, #8
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	4313      	orrs	r3, r2
 80075de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	f023 0320 	bic.w	r3, r3, #32
 80075e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	011b      	lsls	r3, r3, #4
 80075ee:	697a      	ldr	r2, [r7, #20]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a22      	ldr	r2, [pc, #136]	; (8007680 <TIM_OC2_SetConfig+0xe4>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d003      	beq.n	8007604 <TIM_OC2_SetConfig+0x68>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a21      	ldr	r2, [pc, #132]	; (8007684 <TIM_OC2_SetConfig+0xe8>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d10d      	bne.n	8007620 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800760a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	011b      	lsls	r3, r3, #4
 8007612:	697a      	ldr	r2, [r7, #20]
 8007614:	4313      	orrs	r3, r2
 8007616:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800761e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a17      	ldr	r2, [pc, #92]	; (8007680 <TIM_OC2_SetConfig+0xe4>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d003      	beq.n	8007630 <TIM_OC2_SetConfig+0x94>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a16      	ldr	r2, [pc, #88]	; (8007684 <TIM_OC2_SetConfig+0xe8>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d113      	bne.n	8007658 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007636:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800763e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	695b      	ldr	r3, [r3, #20]
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	4313      	orrs	r3, r2
 800764a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	699b      	ldr	r3, [r3, #24]
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	693a      	ldr	r2, [r7, #16]
 8007654:	4313      	orrs	r3, r2
 8007656:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	693a      	ldr	r2, [r7, #16]
 800765c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	685a      	ldr	r2, [r3, #4]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	621a      	str	r2, [r3, #32]
}
 8007672:	bf00      	nop
 8007674:	371c      	adds	r7, #28
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop
 8007680:	40010000 	.word	0x40010000
 8007684:	40010400 	.word	0x40010400

08007688 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007688:	b480      	push	{r7}
 800768a:	b087      	sub	sp, #28
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a1b      	ldr	r3, [r3, #32]
 8007696:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	69db      	ldr	r3, [r3, #28]
 80076ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f023 0303 	bic.w	r3, r3, #3
 80076be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	021b      	lsls	r3, r3, #8
 80076d8:	697a      	ldr	r2, [r7, #20]
 80076da:	4313      	orrs	r3, r2
 80076dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a21      	ldr	r2, [pc, #132]	; (8007768 <TIM_OC3_SetConfig+0xe0>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d003      	beq.n	80076ee <TIM_OC3_SetConfig+0x66>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a20      	ldr	r2, [pc, #128]	; (800776c <TIM_OC3_SetConfig+0xe4>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d10d      	bne.n	800770a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	021b      	lsls	r3, r3, #8
 80076fc:	697a      	ldr	r2, [r7, #20]
 80076fe:	4313      	orrs	r3, r2
 8007700:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007708:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a16      	ldr	r2, [pc, #88]	; (8007768 <TIM_OC3_SetConfig+0xe0>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d003      	beq.n	800771a <TIM_OC3_SetConfig+0x92>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a15      	ldr	r2, [pc, #84]	; (800776c <TIM_OC3_SetConfig+0xe4>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d113      	bne.n	8007742 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007720:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007728:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	011b      	lsls	r3, r3, #4
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	4313      	orrs	r3, r2
 8007734:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	699b      	ldr	r3, [r3, #24]
 800773a:	011b      	lsls	r3, r3, #4
 800773c:	693a      	ldr	r2, [r7, #16]
 800773e:	4313      	orrs	r3, r2
 8007740:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	693a      	ldr	r2, [r7, #16]
 8007746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	685a      	ldr	r2, [r3, #4]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	697a      	ldr	r2, [r7, #20]
 800775a:	621a      	str	r2, [r3, #32]
}
 800775c:	bf00      	nop
 800775e:	371c      	adds	r7, #28
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr
 8007768:	40010000 	.word	0x40010000
 800776c:	40010400 	.word	0x40010400

08007770 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007770:	b480      	push	{r7}
 8007772:	b087      	sub	sp, #28
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a1b      	ldr	r3, [r3, #32]
 800777e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a1b      	ldr	r3, [r3, #32]
 800778a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	69db      	ldr	r3, [r3, #28]
 8007796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800779e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	021b      	lsls	r3, r3, #8
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	031b      	lsls	r3, r3, #12
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a12      	ldr	r2, [pc, #72]	; (8007814 <TIM_OC4_SetConfig+0xa4>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d003      	beq.n	80077d8 <TIM_OC4_SetConfig+0x68>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a11      	ldr	r2, [pc, #68]	; (8007818 <TIM_OC4_SetConfig+0xa8>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d109      	bne.n	80077ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	695b      	ldr	r3, [r3, #20]
 80077e4:	019b      	lsls	r3, r3, #6
 80077e6:	697a      	ldr	r2, [r7, #20]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	685a      	ldr	r2, [r3, #4]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	693a      	ldr	r2, [r7, #16]
 8007804:	621a      	str	r2, [r3, #32]
}
 8007806:	bf00      	nop
 8007808:	371c      	adds	r7, #28
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	40010000 	.word	0x40010000
 8007818:	40010400 	.word	0x40010400

0800781c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800781c:	b480      	push	{r7}
 800781e:	b087      	sub	sp, #28
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6a1b      	ldr	r3, [r3, #32]
 800782c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	f023 0201 	bic.w	r2, r3, #1
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	011b      	lsls	r3, r3, #4
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	4313      	orrs	r3, r2
 8007850:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f023 030a 	bic.w	r3, r3, #10
 8007858:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800785a:	697a      	ldr	r2, [r7, #20]
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	4313      	orrs	r3, r2
 8007860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	693a      	ldr	r2, [r7, #16]
 8007866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	697a      	ldr	r2, [r7, #20]
 800786c:	621a      	str	r2, [r3, #32]
}
 800786e:	bf00      	nop
 8007870:	371c      	adds	r7, #28
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr

0800787a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800787a:	b480      	push	{r7}
 800787c:	b087      	sub	sp, #28
 800787e:	af00      	add	r7, sp, #0
 8007880:	60f8      	str	r0, [r7, #12]
 8007882:	60b9      	str	r1, [r7, #8]
 8007884:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6a1b      	ldr	r3, [r3, #32]
 800788a:	f023 0210 	bic.w	r2, r3, #16
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	699b      	ldr	r3, [r3, #24]
 8007896:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6a1b      	ldr	r3, [r3, #32]
 800789c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	031b      	lsls	r3, r3, #12
 80078aa:	697a      	ldr	r2, [r7, #20]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	011b      	lsls	r3, r3, #4
 80078bc:	693a      	ldr	r2, [r7, #16]
 80078be:	4313      	orrs	r3, r2
 80078c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	693a      	ldr	r2, [r7, #16]
 80078cc:	621a      	str	r2, [r3, #32]
}
 80078ce:	bf00      	nop
 80078d0:	371c      	adds	r7, #28
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078da:	b480      	push	{r7}
 80078dc:	b085      	sub	sp, #20
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	f043 0307 	orr.w	r3, r3, #7
 80078fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	609a      	str	r2, [r3, #8]
}
 8007904:	bf00      	nop
 8007906:	3714      	adds	r7, #20
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007910:	b480      	push	{r7}
 8007912:	b087      	sub	sp, #28
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	607a      	str	r2, [r7, #4]
 800791c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800792a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	021a      	lsls	r2, r3, #8
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	431a      	orrs	r2, r3
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	4313      	orrs	r3, r2
 8007938:	697a      	ldr	r2, [r7, #20]
 800793a:	4313      	orrs	r3, r2
 800793c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	697a      	ldr	r2, [r7, #20]
 8007942:	609a      	str	r2, [r3, #8]
}
 8007944:	bf00      	nop
 8007946:	371c      	adds	r7, #28
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007950:	b480      	push	{r7}
 8007952:	b087      	sub	sp, #28
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	f003 031f 	and.w	r3, r3, #31
 8007962:	2201      	movs	r2, #1
 8007964:	fa02 f303 	lsl.w	r3, r2, r3
 8007968:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6a1a      	ldr	r2, [r3, #32]
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	43db      	mvns	r3, r3
 8007972:	401a      	ands	r2, r3
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6a1a      	ldr	r2, [r3, #32]
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	f003 031f 	and.w	r3, r3, #31
 8007982:	6879      	ldr	r1, [r7, #4]
 8007984:	fa01 f303 	lsl.w	r3, r1, r3
 8007988:	431a      	orrs	r2, r3
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	621a      	str	r2, [r3, #32]
}
 800798e:	bf00      	nop
 8007990:	371c      	adds	r7, #28
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
	...

0800799c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d101      	bne.n	80079b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079b0:	2302      	movs	r3, #2
 80079b2:	e05a      	b.n	8007a6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2202      	movs	r2, #2
 80079c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a21      	ldr	r2, [pc, #132]	; (8007a78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d022      	beq.n	8007a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a00:	d01d      	beq.n	8007a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a1d      	ldr	r2, [pc, #116]	; (8007a7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d018      	beq.n	8007a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a1b      	ldr	r2, [pc, #108]	; (8007a80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d013      	beq.n	8007a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a1a      	ldr	r2, [pc, #104]	; (8007a84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d00e      	beq.n	8007a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a18      	ldr	r2, [pc, #96]	; (8007a88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d009      	beq.n	8007a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a17      	ldr	r2, [pc, #92]	; (8007a8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d004      	beq.n	8007a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a15      	ldr	r2, [pc, #84]	; (8007a90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d10c      	bne.n	8007a58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3714      	adds	r7, #20
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	40010000 	.word	0x40010000
 8007a7c:	40000400 	.word	0x40000400
 8007a80:	40000800 	.word	0x40000800
 8007a84:	40000c00 	.word	0x40000c00
 8007a88:	40010400 	.word	0x40010400
 8007a8c:	40014000 	.word	0x40014000
 8007a90:	40001800 	.word	0x40001800

08007a94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d101      	bne.n	8007ab0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007aac:	2302      	movs	r3, #2
 8007aae:	e03d      	b.n	8007b2c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	695b      	ldr	r3, [r3, #20]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	69db      	ldr	r3, [r3, #28]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3714      	adds	r7, #20
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d101      	bne.n	8007b72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e03f      	b.n	8007bf2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d106      	bne.n	8007b8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f7fc fe94 	bl	80048b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2224      	movs	r2, #36	; 0x24
 8007b90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68da      	ldr	r2, [r3, #12]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ba2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 fb97 	bl	80082d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	691a      	ldr	r2, [r3, #16]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007bb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	695a      	ldr	r2, [r3, #20]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007bc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68da      	ldr	r2, [r3, #12]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007bd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2220      	movs	r2, #32
 8007be4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2220      	movs	r2, #32
 8007bec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b088      	sub	sp, #32
 8007bfe:	af02      	add	r7, sp, #8
 8007c00:	60f8      	str	r0, [r7, #12]
 8007c02:	60b9      	str	r1, [r7, #8]
 8007c04:	603b      	str	r3, [r7, #0]
 8007c06:	4613      	mov	r3, r2
 8007c08:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b20      	cmp	r3, #32
 8007c18:	f040 8083 	bne.w	8007d22 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d002      	beq.n	8007c28 <HAL_UART_Transmit+0x2e>
 8007c22:	88fb      	ldrh	r3, [r7, #6]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d101      	bne.n	8007c2c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e07b      	b.n	8007d24 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d101      	bne.n	8007c3a <HAL_UART_Transmit+0x40>
 8007c36:	2302      	movs	r3, #2
 8007c38:	e074      	b.n	8007d24 <HAL_UART_Transmit+0x12a>
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2221      	movs	r2, #33	; 0x21
 8007c4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007c50:	f7fc ffdc 	bl	8004c0c <HAL_GetTick>
 8007c54:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	88fa      	ldrh	r2, [r7, #6]
 8007c5a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	88fa      	ldrh	r2, [r7, #6]
 8007c60:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007c6a:	e042      	b.n	8007cf2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	3b01      	subs	r3, #1
 8007c74:	b29a      	uxth	r2, r3
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c82:	d122      	bne.n	8007cca <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	2180      	movs	r1, #128	; 0x80
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f000 f9b6 	bl	8008000 <UART_WaitOnFlagUntilTimeout>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d001      	beq.n	8007c9e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e042      	b.n	8007d24 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	881b      	ldrh	r3, [r3, #0]
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cb0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d103      	bne.n	8007cc2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	3302      	adds	r3, #2
 8007cbe:	60bb      	str	r3, [r7, #8]
 8007cc0:	e017      	b.n	8007cf2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	60bb      	str	r3, [r7, #8]
 8007cc8:	e013      	b.n	8007cf2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	9300      	str	r3, [sp, #0]
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	2180      	movs	r1, #128	; 0x80
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f000 f993 	bl	8008000 <UART_WaitOnFlagUntilTimeout>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d001      	beq.n	8007ce4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	e01f      	b.n	8007d24 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	1c5a      	adds	r2, r3, #1
 8007ce8:	60ba      	str	r2, [r7, #8]
 8007cea:	781a      	ldrb	r2, [r3, #0]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1b7      	bne.n	8007c6c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	9300      	str	r3, [sp, #0]
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	2200      	movs	r2, #0
 8007d04:	2140      	movs	r1, #64	; 0x40
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f000 f97a 	bl	8008000 <UART_WaitOnFlagUntilTimeout>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d001      	beq.n	8007d16 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e006      	b.n	8007d24 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2220      	movs	r2, #32
 8007d1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	e000      	b.n	8007d24 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007d22:	2302      	movs	r3, #2
  }
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3718      	adds	r7, #24
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	4613      	mov	r3, r2
 8007d38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	2b20      	cmp	r3, #32
 8007d44:	d140      	bne.n	8007dc8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d002      	beq.n	8007d52 <HAL_UART_Receive_IT+0x26>
 8007d4c:	88fb      	ldrh	r3, [r7, #6]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d101      	bne.n	8007d56 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e039      	b.n	8007dca <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d101      	bne.n	8007d64 <HAL_UART_Receive_IT+0x38>
 8007d60:	2302      	movs	r3, #2
 8007d62:	e032      	b.n	8007dca <HAL_UART_Receive_IT+0x9e>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	68ba      	ldr	r2, [r7, #8]
 8007d70:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	88fa      	ldrh	r2, [r7, #6]
 8007d76:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	88fa      	ldrh	r2, [r7, #6]
 8007d7c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2200      	movs	r2, #0
 8007d82:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2222      	movs	r2, #34	; 0x22
 8007d88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68da      	ldr	r2, [r3, #12]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007da2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	695a      	ldr	r2, [r3, #20]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f042 0201 	orr.w	r2, r2, #1
 8007db2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68da      	ldr	r2, [r3, #12]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f042 0220 	orr.w	r2, r2, #32
 8007dc2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	e000      	b.n	8007dca <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007dc8:	2302      	movs	r3, #2
  }
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3714      	adds	r7, #20
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr
	...

08007dd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b088      	sub	sp, #32
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	695b      	ldr	r3, [r3, #20]
 8007df6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	f003 030f 	and.w	r3, r3, #15
 8007e06:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d10d      	bne.n	8007e2a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	f003 0320 	and.w	r3, r3, #32
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d008      	beq.n	8007e2a <HAL_UART_IRQHandler+0x52>
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	f003 0320 	and.w	r3, r3, #32
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d003      	beq.n	8007e2a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 f9d6 	bl	80081d4 <UART_Receive_IT>
      return;
 8007e28:	e0d1      	b.n	8007fce <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f000 80b0 	beq.w	8007f92 <HAL_UART_IRQHandler+0x1ba>
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f003 0301 	and.w	r3, r3, #1
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d105      	bne.n	8007e48 <HAL_UART_IRQHandler+0x70>
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	f000 80a5 	beq.w	8007f92 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	f003 0301 	and.w	r3, r3, #1
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00a      	beq.n	8007e68 <HAL_UART_IRQHandler+0x90>
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d005      	beq.n	8007e68 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e60:	f043 0201 	orr.w	r2, r3, #1
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	f003 0304 	and.w	r3, r3, #4
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00a      	beq.n	8007e88 <HAL_UART_IRQHandler+0xb0>
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f003 0301 	and.w	r3, r3, #1
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d005      	beq.n	8007e88 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e80:	f043 0202 	orr.w	r2, r3, #2
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	f003 0302 	and.w	r3, r3, #2
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00a      	beq.n	8007ea8 <HAL_UART_IRQHandler+0xd0>
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	f003 0301 	and.w	r3, r3, #1
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d005      	beq.n	8007ea8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ea0:	f043 0204 	orr.w	r2, r3, #4
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	f003 0308 	and.w	r3, r3, #8
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00f      	beq.n	8007ed2 <HAL_UART_IRQHandler+0xfa>
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	f003 0320 	and.w	r3, r3, #32
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d104      	bne.n	8007ec6 <HAL_UART_IRQHandler+0xee>
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	f003 0301 	and.w	r3, r3, #1
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d005      	beq.n	8007ed2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eca:	f043 0208 	orr.w	r2, r3, #8
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d078      	beq.n	8007fcc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	f003 0320 	and.w	r3, r3, #32
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d007      	beq.n	8007ef4 <HAL_UART_IRQHandler+0x11c>
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	f003 0320 	and.w	r3, r3, #32
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d002      	beq.n	8007ef4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 f970 	bl	80081d4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	695b      	ldr	r3, [r3, #20]
 8007efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007efe:	2b40      	cmp	r3, #64	; 0x40
 8007f00:	bf0c      	ite	eq
 8007f02:	2301      	moveq	r3, #1
 8007f04:	2300      	movne	r3, #0
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f0e:	f003 0308 	and.w	r3, r3, #8
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d102      	bne.n	8007f1c <HAL_UART_IRQHandler+0x144>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d031      	beq.n	8007f80 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 f8b9 	bl	8008094 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	695b      	ldr	r3, [r3, #20]
 8007f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f2c:	2b40      	cmp	r3, #64	; 0x40
 8007f2e:	d123      	bne.n	8007f78 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	695a      	ldr	r2, [r3, #20]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f3e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d013      	beq.n	8007f70 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f4c:	4a21      	ldr	r2, [pc, #132]	; (8007fd4 <HAL_UART_IRQHandler+0x1fc>)
 8007f4e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7fc ff69 	bl	8004e2c <HAL_DMA_Abort_IT>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d016      	beq.n	8007f8e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007f6a:	4610      	mov	r0, r2
 8007f6c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f6e:	e00e      	b.n	8007f8e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 f83b 	bl	8007fec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f76:	e00a      	b.n	8007f8e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f837 	bl	8007fec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f7e:	e006      	b.n	8007f8e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 f833 	bl	8007fec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007f8c:	e01e      	b.n	8007fcc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f8e:	bf00      	nop
    return;
 8007f90:	e01c      	b.n	8007fcc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d008      	beq.n	8007fae <HAL_UART_IRQHandler+0x1d6>
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d003      	beq.n	8007fae <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f8a6 	bl	80080f8 <UART_Transmit_IT>
    return;
 8007fac:	e00f      	b.n	8007fce <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00a      	beq.n	8007fce <HAL_UART_IRQHandler+0x1f6>
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d005      	beq.n	8007fce <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 f8ee 	bl	80081a4 <UART_EndTransmit_IT>
    return;
 8007fc8:	bf00      	nop
 8007fca:	e000      	b.n	8007fce <HAL_UART_IRQHandler+0x1f6>
    return;
 8007fcc:	bf00      	nop
  }
}
 8007fce:	3720      	adds	r7, #32
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	080080d1 	.word	0x080080d1

08007fd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007fe0:	bf00      	nop
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	603b      	str	r3, [r7, #0]
 800800c:	4613      	mov	r3, r2
 800800e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008010:	e02c      	b.n	800806c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008018:	d028      	beq.n	800806c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d007      	beq.n	8008030 <UART_WaitOnFlagUntilTimeout+0x30>
 8008020:	f7fc fdf4 	bl	8004c0c <HAL_GetTick>
 8008024:	4602      	mov	r2, r0
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	69ba      	ldr	r2, [r7, #24]
 800802c:	429a      	cmp	r2, r3
 800802e:	d21d      	bcs.n	800806c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68da      	ldr	r2, [r3, #12]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800803e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	695a      	ldr	r2, [r3, #20]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f022 0201 	bic.w	r2, r2, #1
 800804e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2220      	movs	r2, #32
 8008054:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2220      	movs	r2, #32
 800805c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2200      	movs	r2, #0
 8008064:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008068:	2303      	movs	r3, #3
 800806a:	e00f      	b.n	800808c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	4013      	ands	r3, r2
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	429a      	cmp	r2, r3
 800807a:	bf0c      	ite	eq
 800807c:	2301      	moveq	r3, #1
 800807e:	2300      	movne	r3, #0
 8008080:	b2db      	uxtb	r3, r3
 8008082:	461a      	mov	r2, r3
 8008084:	79fb      	ldrb	r3, [r7, #7]
 8008086:	429a      	cmp	r2, r3
 8008088:	d0c3      	beq.n	8008012 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	68da      	ldr	r2, [r3, #12]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80080aa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	695a      	ldr	r2, [r3, #20]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f022 0201 	bic.w	r2, r2, #1
 80080ba:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2220      	movs	r2, #32
 80080c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80080c4:	bf00      	nop
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2200      	movs	r2, #0
 80080e2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2200      	movs	r2, #0
 80080e8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f7ff ff7e 	bl	8007fec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080f0:	bf00      	nop
 80080f2:	3710      	adds	r7, #16
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008106:	b2db      	uxtb	r3, r3
 8008108:	2b21      	cmp	r3, #33	; 0x21
 800810a:	d144      	bne.n	8008196 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008114:	d11a      	bne.n	800814c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a1b      	ldr	r3, [r3, #32]
 800811a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	881b      	ldrh	r3, [r3, #0]
 8008120:	461a      	mov	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800812a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d105      	bne.n	8008140 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6a1b      	ldr	r3, [r3, #32]
 8008138:	1c9a      	adds	r2, r3, #2
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	621a      	str	r2, [r3, #32]
 800813e:	e00e      	b.n	800815e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6a1b      	ldr	r3, [r3, #32]
 8008144:	1c5a      	adds	r2, r3, #1
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	621a      	str	r2, [r3, #32]
 800814a:	e008      	b.n	800815e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a1b      	ldr	r3, [r3, #32]
 8008150:	1c59      	adds	r1, r3, #1
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	6211      	str	r1, [r2, #32]
 8008156:	781a      	ldrb	r2, [r3, #0]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008162:	b29b      	uxth	r3, r3
 8008164:	3b01      	subs	r3, #1
 8008166:	b29b      	uxth	r3, r3
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	4619      	mov	r1, r3
 800816c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10f      	bne.n	8008192 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68da      	ldr	r2, [r3, #12]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008180:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68da      	ldr	r2, [r3, #12]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008190:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008192:	2300      	movs	r3, #0
 8008194:	e000      	b.n	8008198 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008196:	2302      	movs	r3, #2
  }
}
 8008198:	4618      	mov	r0, r3
 800819a:	3714      	adds	r7, #20
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68da      	ldr	r2, [r3, #12]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081ba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2220      	movs	r2, #32
 80081c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f7ff ff07 	bl	8007fd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	2b22      	cmp	r3, #34	; 0x22
 80081e6:	d171      	bne.n	80082cc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081f0:	d123      	bne.n	800823a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d10e      	bne.n	800821e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	b29b      	uxth	r3, r3
 8008208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800820c:	b29a      	uxth	r2, r3
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008216:	1c9a      	adds	r2, r3, #2
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	629a      	str	r2, [r3, #40]	; 0x28
 800821c:	e029      	b.n	8008272 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	b29b      	uxth	r3, r3
 8008226:	b2db      	uxtb	r3, r3
 8008228:	b29a      	uxth	r2, r3
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008232:	1c5a      	adds	r2, r3, #1
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	629a      	str	r2, [r3, #40]	; 0x28
 8008238:	e01b      	b.n	8008272 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d10a      	bne.n	8008258 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6858      	ldr	r0, [r3, #4]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800824c:	1c59      	adds	r1, r3, #1
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	6291      	str	r1, [r2, #40]	; 0x28
 8008252:	b2c2      	uxtb	r2, r0
 8008254:	701a      	strb	r2, [r3, #0]
 8008256:	e00c      	b.n	8008272 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	b2da      	uxtb	r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008264:	1c58      	adds	r0, r3, #1
 8008266:	6879      	ldr	r1, [r7, #4]
 8008268:	6288      	str	r0, [r1, #40]	; 0x28
 800826a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800826e:	b2d2      	uxtb	r2, r2
 8008270:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008276:	b29b      	uxth	r3, r3
 8008278:	3b01      	subs	r3, #1
 800827a:	b29b      	uxth	r3, r3
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	4619      	mov	r1, r3
 8008280:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008282:	2b00      	cmp	r3, #0
 8008284:	d120      	bne.n	80082c8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68da      	ldr	r2, [r3, #12]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f022 0220 	bic.w	r2, r2, #32
 8008294:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68da      	ldr	r2, [r3, #12]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	695a      	ldr	r2, [r3, #20]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f022 0201 	bic.w	r2, r2, #1
 80082b4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2220      	movs	r2, #32
 80082ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f7fb ffda 	bl	8004278 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80082c4:	2300      	movs	r3, #0
 80082c6:	e002      	b.n	80082ce <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80082c8:	2300      	movs	r3, #0
 80082ca:	e000      	b.n	80082ce <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80082cc:	2302      	movs	r3, #2
  }
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
	...

080082d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082dc:	b085      	sub	sp, #20
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	68da      	ldr	r2, [r3, #12]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	430a      	orrs	r2, r1
 80082f6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	689a      	ldr	r2, [r3, #8]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	431a      	orrs	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	695b      	ldr	r3, [r3, #20]
 8008306:	431a      	orrs	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	69db      	ldr	r3, [r3, #28]
 800830c:	4313      	orrs	r3, r2
 800830e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800831a:	f023 030c 	bic.w	r3, r3, #12
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	6812      	ldr	r2, [r2, #0]
 8008322:	68f9      	ldr	r1, [r7, #12]
 8008324:	430b      	orrs	r3, r1
 8008326:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	699a      	ldr	r2, [r3, #24]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	430a      	orrs	r2, r1
 800833c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	69db      	ldr	r3, [r3, #28]
 8008342:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008346:	f040 818b 	bne.w	8008660 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4ac1      	ldr	r2, [pc, #772]	; (8008654 <UART_SetConfig+0x37c>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d005      	beq.n	8008360 <UART_SetConfig+0x88>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4abf      	ldr	r2, [pc, #764]	; (8008658 <UART_SetConfig+0x380>)
 800835a:	4293      	cmp	r3, r2
 800835c:	f040 80bd 	bne.w	80084da <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008360:	f7fe fc32 	bl	8006bc8 <HAL_RCC_GetPCLK2Freq>
 8008364:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	461d      	mov	r5, r3
 800836a:	f04f 0600 	mov.w	r6, #0
 800836e:	46a8      	mov	r8, r5
 8008370:	46b1      	mov	r9, r6
 8008372:	eb18 0308 	adds.w	r3, r8, r8
 8008376:	eb49 0409 	adc.w	r4, r9, r9
 800837a:	4698      	mov	r8, r3
 800837c:	46a1      	mov	r9, r4
 800837e:	eb18 0805 	adds.w	r8, r8, r5
 8008382:	eb49 0906 	adc.w	r9, r9, r6
 8008386:	f04f 0100 	mov.w	r1, #0
 800838a:	f04f 0200 	mov.w	r2, #0
 800838e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008392:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008396:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800839a:	4688      	mov	r8, r1
 800839c:	4691      	mov	r9, r2
 800839e:	eb18 0005 	adds.w	r0, r8, r5
 80083a2:	eb49 0106 	adc.w	r1, r9, r6
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	461d      	mov	r5, r3
 80083ac:	f04f 0600 	mov.w	r6, #0
 80083b0:	196b      	adds	r3, r5, r5
 80083b2:	eb46 0406 	adc.w	r4, r6, r6
 80083b6:	461a      	mov	r2, r3
 80083b8:	4623      	mov	r3, r4
 80083ba:	f7f8 fbff 	bl	8000bbc <__aeabi_uldivmod>
 80083be:	4603      	mov	r3, r0
 80083c0:	460c      	mov	r4, r1
 80083c2:	461a      	mov	r2, r3
 80083c4:	4ba5      	ldr	r3, [pc, #660]	; (800865c <UART_SetConfig+0x384>)
 80083c6:	fba3 2302 	umull	r2, r3, r3, r2
 80083ca:	095b      	lsrs	r3, r3, #5
 80083cc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	461d      	mov	r5, r3
 80083d4:	f04f 0600 	mov.w	r6, #0
 80083d8:	46a9      	mov	r9, r5
 80083da:	46b2      	mov	sl, r6
 80083dc:	eb19 0309 	adds.w	r3, r9, r9
 80083e0:	eb4a 040a 	adc.w	r4, sl, sl
 80083e4:	4699      	mov	r9, r3
 80083e6:	46a2      	mov	sl, r4
 80083e8:	eb19 0905 	adds.w	r9, r9, r5
 80083ec:	eb4a 0a06 	adc.w	sl, sl, r6
 80083f0:	f04f 0100 	mov.w	r1, #0
 80083f4:	f04f 0200 	mov.w	r2, #0
 80083f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008400:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008404:	4689      	mov	r9, r1
 8008406:	4692      	mov	sl, r2
 8008408:	eb19 0005 	adds.w	r0, r9, r5
 800840c:	eb4a 0106 	adc.w	r1, sl, r6
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	461d      	mov	r5, r3
 8008416:	f04f 0600 	mov.w	r6, #0
 800841a:	196b      	adds	r3, r5, r5
 800841c:	eb46 0406 	adc.w	r4, r6, r6
 8008420:	461a      	mov	r2, r3
 8008422:	4623      	mov	r3, r4
 8008424:	f7f8 fbca 	bl	8000bbc <__aeabi_uldivmod>
 8008428:	4603      	mov	r3, r0
 800842a:	460c      	mov	r4, r1
 800842c:	461a      	mov	r2, r3
 800842e:	4b8b      	ldr	r3, [pc, #556]	; (800865c <UART_SetConfig+0x384>)
 8008430:	fba3 1302 	umull	r1, r3, r3, r2
 8008434:	095b      	lsrs	r3, r3, #5
 8008436:	2164      	movs	r1, #100	; 0x64
 8008438:	fb01 f303 	mul.w	r3, r1, r3
 800843c:	1ad3      	subs	r3, r2, r3
 800843e:	00db      	lsls	r3, r3, #3
 8008440:	3332      	adds	r3, #50	; 0x32
 8008442:	4a86      	ldr	r2, [pc, #536]	; (800865c <UART_SetConfig+0x384>)
 8008444:	fba2 2303 	umull	r2, r3, r2, r3
 8008448:	095b      	lsrs	r3, r3, #5
 800844a:	005b      	lsls	r3, r3, #1
 800844c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008450:	4498      	add	r8, r3
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	461d      	mov	r5, r3
 8008456:	f04f 0600 	mov.w	r6, #0
 800845a:	46a9      	mov	r9, r5
 800845c:	46b2      	mov	sl, r6
 800845e:	eb19 0309 	adds.w	r3, r9, r9
 8008462:	eb4a 040a 	adc.w	r4, sl, sl
 8008466:	4699      	mov	r9, r3
 8008468:	46a2      	mov	sl, r4
 800846a:	eb19 0905 	adds.w	r9, r9, r5
 800846e:	eb4a 0a06 	adc.w	sl, sl, r6
 8008472:	f04f 0100 	mov.w	r1, #0
 8008476:	f04f 0200 	mov.w	r2, #0
 800847a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800847e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008482:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008486:	4689      	mov	r9, r1
 8008488:	4692      	mov	sl, r2
 800848a:	eb19 0005 	adds.w	r0, r9, r5
 800848e:	eb4a 0106 	adc.w	r1, sl, r6
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	461d      	mov	r5, r3
 8008498:	f04f 0600 	mov.w	r6, #0
 800849c:	196b      	adds	r3, r5, r5
 800849e:	eb46 0406 	adc.w	r4, r6, r6
 80084a2:	461a      	mov	r2, r3
 80084a4:	4623      	mov	r3, r4
 80084a6:	f7f8 fb89 	bl	8000bbc <__aeabi_uldivmod>
 80084aa:	4603      	mov	r3, r0
 80084ac:	460c      	mov	r4, r1
 80084ae:	461a      	mov	r2, r3
 80084b0:	4b6a      	ldr	r3, [pc, #424]	; (800865c <UART_SetConfig+0x384>)
 80084b2:	fba3 1302 	umull	r1, r3, r3, r2
 80084b6:	095b      	lsrs	r3, r3, #5
 80084b8:	2164      	movs	r1, #100	; 0x64
 80084ba:	fb01 f303 	mul.w	r3, r1, r3
 80084be:	1ad3      	subs	r3, r2, r3
 80084c0:	00db      	lsls	r3, r3, #3
 80084c2:	3332      	adds	r3, #50	; 0x32
 80084c4:	4a65      	ldr	r2, [pc, #404]	; (800865c <UART_SetConfig+0x384>)
 80084c6:	fba2 2303 	umull	r2, r3, r2, r3
 80084ca:	095b      	lsrs	r3, r3, #5
 80084cc:	f003 0207 	and.w	r2, r3, #7
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4442      	add	r2, r8
 80084d6:	609a      	str	r2, [r3, #8]
 80084d8:	e26f      	b.n	80089ba <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80084da:	f7fe fb61 	bl	8006ba0 <HAL_RCC_GetPCLK1Freq>
 80084de:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	461d      	mov	r5, r3
 80084e4:	f04f 0600 	mov.w	r6, #0
 80084e8:	46a8      	mov	r8, r5
 80084ea:	46b1      	mov	r9, r6
 80084ec:	eb18 0308 	adds.w	r3, r8, r8
 80084f0:	eb49 0409 	adc.w	r4, r9, r9
 80084f4:	4698      	mov	r8, r3
 80084f6:	46a1      	mov	r9, r4
 80084f8:	eb18 0805 	adds.w	r8, r8, r5
 80084fc:	eb49 0906 	adc.w	r9, r9, r6
 8008500:	f04f 0100 	mov.w	r1, #0
 8008504:	f04f 0200 	mov.w	r2, #0
 8008508:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800850c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008510:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008514:	4688      	mov	r8, r1
 8008516:	4691      	mov	r9, r2
 8008518:	eb18 0005 	adds.w	r0, r8, r5
 800851c:	eb49 0106 	adc.w	r1, r9, r6
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	461d      	mov	r5, r3
 8008526:	f04f 0600 	mov.w	r6, #0
 800852a:	196b      	adds	r3, r5, r5
 800852c:	eb46 0406 	adc.w	r4, r6, r6
 8008530:	461a      	mov	r2, r3
 8008532:	4623      	mov	r3, r4
 8008534:	f7f8 fb42 	bl	8000bbc <__aeabi_uldivmod>
 8008538:	4603      	mov	r3, r0
 800853a:	460c      	mov	r4, r1
 800853c:	461a      	mov	r2, r3
 800853e:	4b47      	ldr	r3, [pc, #284]	; (800865c <UART_SetConfig+0x384>)
 8008540:	fba3 2302 	umull	r2, r3, r3, r2
 8008544:	095b      	lsrs	r3, r3, #5
 8008546:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	461d      	mov	r5, r3
 800854e:	f04f 0600 	mov.w	r6, #0
 8008552:	46a9      	mov	r9, r5
 8008554:	46b2      	mov	sl, r6
 8008556:	eb19 0309 	adds.w	r3, r9, r9
 800855a:	eb4a 040a 	adc.w	r4, sl, sl
 800855e:	4699      	mov	r9, r3
 8008560:	46a2      	mov	sl, r4
 8008562:	eb19 0905 	adds.w	r9, r9, r5
 8008566:	eb4a 0a06 	adc.w	sl, sl, r6
 800856a:	f04f 0100 	mov.w	r1, #0
 800856e:	f04f 0200 	mov.w	r2, #0
 8008572:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008576:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800857a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800857e:	4689      	mov	r9, r1
 8008580:	4692      	mov	sl, r2
 8008582:	eb19 0005 	adds.w	r0, r9, r5
 8008586:	eb4a 0106 	adc.w	r1, sl, r6
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	461d      	mov	r5, r3
 8008590:	f04f 0600 	mov.w	r6, #0
 8008594:	196b      	adds	r3, r5, r5
 8008596:	eb46 0406 	adc.w	r4, r6, r6
 800859a:	461a      	mov	r2, r3
 800859c:	4623      	mov	r3, r4
 800859e:	f7f8 fb0d 	bl	8000bbc <__aeabi_uldivmod>
 80085a2:	4603      	mov	r3, r0
 80085a4:	460c      	mov	r4, r1
 80085a6:	461a      	mov	r2, r3
 80085a8:	4b2c      	ldr	r3, [pc, #176]	; (800865c <UART_SetConfig+0x384>)
 80085aa:	fba3 1302 	umull	r1, r3, r3, r2
 80085ae:	095b      	lsrs	r3, r3, #5
 80085b0:	2164      	movs	r1, #100	; 0x64
 80085b2:	fb01 f303 	mul.w	r3, r1, r3
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	00db      	lsls	r3, r3, #3
 80085ba:	3332      	adds	r3, #50	; 0x32
 80085bc:	4a27      	ldr	r2, [pc, #156]	; (800865c <UART_SetConfig+0x384>)
 80085be:	fba2 2303 	umull	r2, r3, r2, r3
 80085c2:	095b      	lsrs	r3, r3, #5
 80085c4:	005b      	lsls	r3, r3, #1
 80085c6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80085ca:	4498      	add	r8, r3
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	461d      	mov	r5, r3
 80085d0:	f04f 0600 	mov.w	r6, #0
 80085d4:	46a9      	mov	r9, r5
 80085d6:	46b2      	mov	sl, r6
 80085d8:	eb19 0309 	adds.w	r3, r9, r9
 80085dc:	eb4a 040a 	adc.w	r4, sl, sl
 80085e0:	4699      	mov	r9, r3
 80085e2:	46a2      	mov	sl, r4
 80085e4:	eb19 0905 	adds.w	r9, r9, r5
 80085e8:	eb4a 0a06 	adc.w	sl, sl, r6
 80085ec:	f04f 0100 	mov.w	r1, #0
 80085f0:	f04f 0200 	mov.w	r2, #0
 80085f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80085f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80085fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008600:	4689      	mov	r9, r1
 8008602:	4692      	mov	sl, r2
 8008604:	eb19 0005 	adds.w	r0, r9, r5
 8008608:	eb4a 0106 	adc.w	r1, sl, r6
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	461d      	mov	r5, r3
 8008612:	f04f 0600 	mov.w	r6, #0
 8008616:	196b      	adds	r3, r5, r5
 8008618:	eb46 0406 	adc.w	r4, r6, r6
 800861c:	461a      	mov	r2, r3
 800861e:	4623      	mov	r3, r4
 8008620:	f7f8 facc 	bl	8000bbc <__aeabi_uldivmod>
 8008624:	4603      	mov	r3, r0
 8008626:	460c      	mov	r4, r1
 8008628:	461a      	mov	r2, r3
 800862a:	4b0c      	ldr	r3, [pc, #48]	; (800865c <UART_SetConfig+0x384>)
 800862c:	fba3 1302 	umull	r1, r3, r3, r2
 8008630:	095b      	lsrs	r3, r3, #5
 8008632:	2164      	movs	r1, #100	; 0x64
 8008634:	fb01 f303 	mul.w	r3, r1, r3
 8008638:	1ad3      	subs	r3, r2, r3
 800863a:	00db      	lsls	r3, r3, #3
 800863c:	3332      	adds	r3, #50	; 0x32
 800863e:	4a07      	ldr	r2, [pc, #28]	; (800865c <UART_SetConfig+0x384>)
 8008640:	fba2 2303 	umull	r2, r3, r2, r3
 8008644:	095b      	lsrs	r3, r3, #5
 8008646:	f003 0207 	and.w	r2, r3, #7
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4442      	add	r2, r8
 8008650:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008652:	e1b2      	b.n	80089ba <UART_SetConfig+0x6e2>
 8008654:	40011000 	.word	0x40011000
 8008658:	40011400 	.word	0x40011400
 800865c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4ad7      	ldr	r2, [pc, #860]	; (80089c4 <UART_SetConfig+0x6ec>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d005      	beq.n	8008676 <UART_SetConfig+0x39e>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4ad6      	ldr	r2, [pc, #856]	; (80089c8 <UART_SetConfig+0x6f0>)
 8008670:	4293      	cmp	r3, r2
 8008672:	f040 80d1 	bne.w	8008818 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008676:	f7fe faa7 	bl	8006bc8 <HAL_RCC_GetPCLK2Freq>
 800867a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	469a      	mov	sl, r3
 8008680:	f04f 0b00 	mov.w	fp, #0
 8008684:	46d0      	mov	r8, sl
 8008686:	46d9      	mov	r9, fp
 8008688:	eb18 0308 	adds.w	r3, r8, r8
 800868c:	eb49 0409 	adc.w	r4, r9, r9
 8008690:	4698      	mov	r8, r3
 8008692:	46a1      	mov	r9, r4
 8008694:	eb18 080a 	adds.w	r8, r8, sl
 8008698:	eb49 090b 	adc.w	r9, r9, fp
 800869c:	f04f 0100 	mov.w	r1, #0
 80086a0:	f04f 0200 	mov.w	r2, #0
 80086a4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80086a8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80086ac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80086b0:	4688      	mov	r8, r1
 80086b2:	4691      	mov	r9, r2
 80086b4:	eb1a 0508 	adds.w	r5, sl, r8
 80086b8:	eb4b 0609 	adc.w	r6, fp, r9
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	4619      	mov	r1, r3
 80086c2:	f04f 0200 	mov.w	r2, #0
 80086c6:	f04f 0300 	mov.w	r3, #0
 80086ca:	f04f 0400 	mov.w	r4, #0
 80086ce:	0094      	lsls	r4, r2, #2
 80086d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80086d4:	008b      	lsls	r3, r1, #2
 80086d6:	461a      	mov	r2, r3
 80086d8:	4623      	mov	r3, r4
 80086da:	4628      	mov	r0, r5
 80086dc:	4631      	mov	r1, r6
 80086de:	f7f8 fa6d 	bl	8000bbc <__aeabi_uldivmod>
 80086e2:	4603      	mov	r3, r0
 80086e4:	460c      	mov	r4, r1
 80086e6:	461a      	mov	r2, r3
 80086e8:	4bb8      	ldr	r3, [pc, #736]	; (80089cc <UART_SetConfig+0x6f4>)
 80086ea:	fba3 2302 	umull	r2, r3, r3, r2
 80086ee:	095b      	lsrs	r3, r3, #5
 80086f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	469b      	mov	fp, r3
 80086f8:	f04f 0c00 	mov.w	ip, #0
 80086fc:	46d9      	mov	r9, fp
 80086fe:	46e2      	mov	sl, ip
 8008700:	eb19 0309 	adds.w	r3, r9, r9
 8008704:	eb4a 040a 	adc.w	r4, sl, sl
 8008708:	4699      	mov	r9, r3
 800870a:	46a2      	mov	sl, r4
 800870c:	eb19 090b 	adds.w	r9, r9, fp
 8008710:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008714:	f04f 0100 	mov.w	r1, #0
 8008718:	f04f 0200 	mov.w	r2, #0
 800871c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008720:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008724:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008728:	4689      	mov	r9, r1
 800872a:	4692      	mov	sl, r2
 800872c:	eb1b 0509 	adds.w	r5, fp, r9
 8008730:	eb4c 060a 	adc.w	r6, ip, sl
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	4619      	mov	r1, r3
 800873a:	f04f 0200 	mov.w	r2, #0
 800873e:	f04f 0300 	mov.w	r3, #0
 8008742:	f04f 0400 	mov.w	r4, #0
 8008746:	0094      	lsls	r4, r2, #2
 8008748:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800874c:	008b      	lsls	r3, r1, #2
 800874e:	461a      	mov	r2, r3
 8008750:	4623      	mov	r3, r4
 8008752:	4628      	mov	r0, r5
 8008754:	4631      	mov	r1, r6
 8008756:	f7f8 fa31 	bl	8000bbc <__aeabi_uldivmod>
 800875a:	4603      	mov	r3, r0
 800875c:	460c      	mov	r4, r1
 800875e:	461a      	mov	r2, r3
 8008760:	4b9a      	ldr	r3, [pc, #616]	; (80089cc <UART_SetConfig+0x6f4>)
 8008762:	fba3 1302 	umull	r1, r3, r3, r2
 8008766:	095b      	lsrs	r3, r3, #5
 8008768:	2164      	movs	r1, #100	; 0x64
 800876a:	fb01 f303 	mul.w	r3, r1, r3
 800876e:	1ad3      	subs	r3, r2, r3
 8008770:	011b      	lsls	r3, r3, #4
 8008772:	3332      	adds	r3, #50	; 0x32
 8008774:	4a95      	ldr	r2, [pc, #596]	; (80089cc <UART_SetConfig+0x6f4>)
 8008776:	fba2 2303 	umull	r2, r3, r2, r3
 800877a:	095b      	lsrs	r3, r3, #5
 800877c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008780:	4498      	add	r8, r3
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	469b      	mov	fp, r3
 8008786:	f04f 0c00 	mov.w	ip, #0
 800878a:	46d9      	mov	r9, fp
 800878c:	46e2      	mov	sl, ip
 800878e:	eb19 0309 	adds.w	r3, r9, r9
 8008792:	eb4a 040a 	adc.w	r4, sl, sl
 8008796:	4699      	mov	r9, r3
 8008798:	46a2      	mov	sl, r4
 800879a:	eb19 090b 	adds.w	r9, r9, fp
 800879e:	eb4a 0a0c 	adc.w	sl, sl, ip
 80087a2:	f04f 0100 	mov.w	r1, #0
 80087a6:	f04f 0200 	mov.w	r2, #0
 80087aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80087ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80087b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80087b6:	4689      	mov	r9, r1
 80087b8:	4692      	mov	sl, r2
 80087ba:	eb1b 0509 	adds.w	r5, fp, r9
 80087be:	eb4c 060a 	adc.w	r6, ip, sl
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	4619      	mov	r1, r3
 80087c8:	f04f 0200 	mov.w	r2, #0
 80087cc:	f04f 0300 	mov.w	r3, #0
 80087d0:	f04f 0400 	mov.w	r4, #0
 80087d4:	0094      	lsls	r4, r2, #2
 80087d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80087da:	008b      	lsls	r3, r1, #2
 80087dc:	461a      	mov	r2, r3
 80087de:	4623      	mov	r3, r4
 80087e0:	4628      	mov	r0, r5
 80087e2:	4631      	mov	r1, r6
 80087e4:	f7f8 f9ea 	bl	8000bbc <__aeabi_uldivmod>
 80087e8:	4603      	mov	r3, r0
 80087ea:	460c      	mov	r4, r1
 80087ec:	461a      	mov	r2, r3
 80087ee:	4b77      	ldr	r3, [pc, #476]	; (80089cc <UART_SetConfig+0x6f4>)
 80087f0:	fba3 1302 	umull	r1, r3, r3, r2
 80087f4:	095b      	lsrs	r3, r3, #5
 80087f6:	2164      	movs	r1, #100	; 0x64
 80087f8:	fb01 f303 	mul.w	r3, r1, r3
 80087fc:	1ad3      	subs	r3, r2, r3
 80087fe:	011b      	lsls	r3, r3, #4
 8008800:	3332      	adds	r3, #50	; 0x32
 8008802:	4a72      	ldr	r2, [pc, #456]	; (80089cc <UART_SetConfig+0x6f4>)
 8008804:	fba2 2303 	umull	r2, r3, r2, r3
 8008808:	095b      	lsrs	r3, r3, #5
 800880a:	f003 020f 	and.w	r2, r3, #15
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4442      	add	r2, r8
 8008814:	609a      	str	r2, [r3, #8]
 8008816:	e0d0      	b.n	80089ba <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008818:	f7fe f9c2 	bl	8006ba0 <HAL_RCC_GetPCLK1Freq>
 800881c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	469a      	mov	sl, r3
 8008822:	f04f 0b00 	mov.w	fp, #0
 8008826:	46d0      	mov	r8, sl
 8008828:	46d9      	mov	r9, fp
 800882a:	eb18 0308 	adds.w	r3, r8, r8
 800882e:	eb49 0409 	adc.w	r4, r9, r9
 8008832:	4698      	mov	r8, r3
 8008834:	46a1      	mov	r9, r4
 8008836:	eb18 080a 	adds.w	r8, r8, sl
 800883a:	eb49 090b 	adc.w	r9, r9, fp
 800883e:	f04f 0100 	mov.w	r1, #0
 8008842:	f04f 0200 	mov.w	r2, #0
 8008846:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800884a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800884e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008852:	4688      	mov	r8, r1
 8008854:	4691      	mov	r9, r2
 8008856:	eb1a 0508 	adds.w	r5, sl, r8
 800885a:	eb4b 0609 	adc.w	r6, fp, r9
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	4619      	mov	r1, r3
 8008864:	f04f 0200 	mov.w	r2, #0
 8008868:	f04f 0300 	mov.w	r3, #0
 800886c:	f04f 0400 	mov.w	r4, #0
 8008870:	0094      	lsls	r4, r2, #2
 8008872:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008876:	008b      	lsls	r3, r1, #2
 8008878:	461a      	mov	r2, r3
 800887a:	4623      	mov	r3, r4
 800887c:	4628      	mov	r0, r5
 800887e:	4631      	mov	r1, r6
 8008880:	f7f8 f99c 	bl	8000bbc <__aeabi_uldivmod>
 8008884:	4603      	mov	r3, r0
 8008886:	460c      	mov	r4, r1
 8008888:	461a      	mov	r2, r3
 800888a:	4b50      	ldr	r3, [pc, #320]	; (80089cc <UART_SetConfig+0x6f4>)
 800888c:	fba3 2302 	umull	r2, r3, r3, r2
 8008890:	095b      	lsrs	r3, r3, #5
 8008892:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	469b      	mov	fp, r3
 800889a:	f04f 0c00 	mov.w	ip, #0
 800889e:	46d9      	mov	r9, fp
 80088a0:	46e2      	mov	sl, ip
 80088a2:	eb19 0309 	adds.w	r3, r9, r9
 80088a6:	eb4a 040a 	adc.w	r4, sl, sl
 80088aa:	4699      	mov	r9, r3
 80088ac:	46a2      	mov	sl, r4
 80088ae:	eb19 090b 	adds.w	r9, r9, fp
 80088b2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80088b6:	f04f 0100 	mov.w	r1, #0
 80088ba:	f04f 0200 	mov.w	r2, #0
 80088be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80088c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80088c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80088ca:	4689      	mov	r9, r1
 80088cc:	4692      	mov	sl, r2
 80088ce:	eb1b 0509 	adds.w	r5, fp, r9
 80088d2:	eb4c 060a 	adc.w	r6, ip, sl
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	4619      	mov	r1, r3
 80088dc:	f04f 0200 	mov.w	r2, #0
 80088e0:	f04f 0300 	mov.w	r3, #0
 80088e4:	f04f 0400 	mov.w	r4, #0
 80088e8:	0094      	lsls	r4, r2, #2
 80088ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80088ee:	008b      	lsls	r3, r1, #2
 80088f0:	461a      	mov	r2, r3
 80088f2:	4623      	mov	r3, r4
 80088f4:	4628      	mov	r0, r5
 80088f6:	4631      	mov	r1, r6
 80088f8:	f7f8 f960 	bl	8000bbc <__aeabi_uldivmod>
 80088fc:	4603      	mov	r3, r0
 80088fe:	460c      	mov	r4, r1
 8008900:	461a      	mov	r2, r3
 8008902:	4b32      	ldr	r3, [pc, #200]	; (80089cc <UART_SetConfig+0x6f4>)
 8008904:	fba3 1302 	umull	r1, r3, r3, r2
 8008908:	095b      	lsrs	r3, r3, #5
 800890a:	2164      	movs	r1, #100	; 0x64
 800890c:	fb01 f303 	mul.w	r3, r1, r3
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	011b      	lsls	r3, r3, #4
 8008914:	3332      	adds	r3, #50	; 0x32
 8008916:	4a2d      	ldr	r2, [pc, #180]	; (80089cc <UART_SetConfig+0x6f4>)
 8008918:	fba2 2303 	umull	r2, r3, r2, r3
 800891c:	095b      	lsrs	r3, r3, #5
 800891e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008922:	4498      	add	r8, r3
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	469b      	mov	fp, r3
 8008928:	f04f 0c00 	mov.w	ip, #0
 800892c:	46d9      	mov	r9, fp
 800892e:	46e2      	mov	sl, ip
 8008930:	eb19 0309 	adds.w	r3, r9, r9
 8008934:	eb4a 040a 	adc.w	r4, sl, sl
 8008938:	4699      	mov	r9, r3
 800893a:	46a2      	mov	sl, r4
 800893c:	eb19 090b 	adds.w	r9, r9, fp
 8008940:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008944:	f04f 0100 	mov.w	r1, #0
 8008948:	f04f 0200 	mov.w	r2, #0
 800894c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008950:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008954:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008958:	4689      	mov	r9, r1
 800895a:	4692      	mov	sl, r2
 800895c:	eb1b 0509 	adds.w	r5, fp, r9
 8008960:	eb4c 060a 	adc.w	r6, ip, sl
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	4619      	mov	r1, r3
 800896a:	f04f 0200 	mov.w	r2, #0
 800896e:	f04f 0300 	mov.w	r3, #0
 8008972:	f04f 0400 	mov.w	r4, #0
 8008976:	0094      	lsls	r4, r2, #2
 8008978:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800897c:	008b      	lsls	r3, r1, #2
 800897e:	461a      	mov	r2, r3
 8008980:	4623      	mov	r3, r4
 8008982:	4628      	mov	r0, r5
 8008984:	4631      	mov	r1, r6
 8008986:	f7f8 f919 	bl	8000bbc <__aeabi_uldivmod>
 800898a:	4603      	mov	r3, r0
 800898c:	460c      	mov	r4, r1
 800898e:	461a      	mov	r2, r3
 8008990:	4b0e      	ldr	r3, [pc, #56]	; (80089cc <UART_SetConfig+0x6f4>)
 8008992:	fba3 1302 	umull	r1, r3, r3, r2
 8008996:	095b      	lsrs	r3, r3, #5
 8008998:	2164      	movs	r1, #100	; 0x64
 800899a:	fb01 f303 	mul.w	r3, r1, r3
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	011b      	lsls	r3, r3, #4
 80089a2:	3332      	adds	r3, #50	; 0x32
 80089a4:	4a09      	ldr	r2, [pc, #36]	; (80089cc <UART_SetConfig+0x6f4>)
 80089a6:	fba2 2303 	umull	r2, r3, r2, r3
 80089aa:	095b      	lsrs	r3, r3, #5
 80089ac:	f003 020f 	and.w	r2, r3, #15
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4442      	add	r2, r8
 80089b6:	609a      	str	r2, [r3, #8]
}
 80089b8:	e7ff      	b.n	80089ba <UART_SetConfig+0x6e2>
 80089ba:	bf00      	nop
 80089bc:	3714      	adds	r7, #20
 80089be:	46bd      	mov	sp, r7
 80089c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c4:	40011000 	.word	0x40011000
 80089c8:	40011400 	.word	0x40011400
 80089cc:	51eb851f 	.word	0x51eb851f

080089d0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	4603      	mov	r3, r0
 80089d8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80089da:	2300      	movs	r3, #0
 80089dc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80089de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80089e2:	2b84      	cmp	r3, #132	; 0x84
 80089e4:	d005      	beq.n	80089f2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80089e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	4413      	add	r3, r2
 80089ee:	3303      	adds	r3, #3
 80089f0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80089f2:	68fb      	ldr	r3, [r7, #12]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3714      	adds	r7, #20
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008a04:	f000 fc7c 	bl	8009300 <vTaskStartScheduler>
  
  return osOK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008a0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a10:	b089      	sub	sp, #36	; 0x24
 8008a12:	af04      	add	r7, sp, #16
 8008a14:	6078      	str	r0, [r7, #4]
 8008a16:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	695b      	ldr	r3, [r3, #20]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d020      	beq.n	8008a62 <osThreadCreate+0x54>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	699b      	ldr	r3, [r3, #24]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d01c      	beq.n	8008a62 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	685c      	ldr	r4, [r3, #4]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681d      	ldr	r5, [r3, #0]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	691e      	ldr	r6, [r3, #16]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7ff ffc8 	bl	80089d0 <makeFreeRtosPriority>
 8008a40:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	695b      	ldr	r3, [r3, #20]
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a4a:	9202      	str	r2, [sp, #8]
 8008a4c:	9301      	str	r3, [sp, #4]
 8008a4e:	9100      	str	r1, [sp, #0]
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	4632      	mov	r2, r6
 8008a54:	4629      	mov	r1, r5
 8008a56:	4620      	mov	r0, r4
 8008a58:	f000 fa88 	bl	8008f6c <xTaskCreateStatic>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	60fb      	str	r3, [r7, #12]
 8008a60:	e01c      	b.n	8008a9c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	685c      	ldr	r4, [r3, #4]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a6e:	b29e      	uxth	r6, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7ff ffaa 	bl	80089d0 <makeFreeRtosPriority>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	f107 030c 	add.w	r3, r7, #12
 8008a82:	9301      	str	r3, [sp, #4]
 8008a84:	9200      	str	r2, [sp, #0]
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	4632      	mov	r2, r6
 8008a8a:	4629      	mov	r1, r5
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	f000 fac6 	bl	800901e <xTaskCreate>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d001      	beq.n	8008a9c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	e000      	b.n	8008a9e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3714      	adds	r7, #20
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008aa6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b084      	sub	sp, #16
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d001      	beq.n	8008abc <osDelay+0x16>
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	e000      	b.n	8008abe <osDelay+0x18>
 8008abc:	2301      	movs	r3, #1
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f000 fbea 	bl	8009298 <vTaskDelay>
  
  return osOK;
 8008ac4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008ace:	b590      	push	{r4, r7, lr}
 8008ad0:	b085      	sub	sp, #20
 8008ad2:	af02      	add	r7, sp, #8
 8008ad4:	6078      	str	r0, [r7, #4]
 8008ad6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d012      	beq.n	8008b06 <osMessageCreate+0x38>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d00e      	beq.n	8008b06 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6818      	ldr	r0, [r3, #0]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6859      	ldr	r1, [r3, #4]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	689a      	ldr	r2, [r3, #8]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	68dc      	ldr	r4, [r3, #12]
 8008af8:	2300      	movs	r3, #0
 8008afa:	9300      	str	r3, [sp, #0]
 8008afc:	4623      	mov	r3, r4
 8008afe:	f000 f92b 	bl	8008d58 <xQueueGenericCreateStatic>
 8008b02:	4603      	mov	r3, r0
 8008b04:	e008      	b.n	8008b18 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6818      	ldr	r0, [r3, #0]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	4619      	mov	r1, r3
 8008b12:	f000 f993 	bl	8008e3c <xQueueGenericCreate>
 8008b16:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	370c      	adds	r7, #12
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd90      	pop	{r4, r7, pc}

08008b20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f103 0208 	add.w	r2, r3, #8
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f103 0208 	add.w	r2, r3, #8
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f103 0208 	add.w	r2, r3, #8
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b54:	bf00      	nop
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b6e:	bf00      	nop
 8008b70:	370c      	adds	r7, #12
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr

08008b7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b7a:	b480      	push	{r7}
 8008b7c:	b085      	sub	sp, #20
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
 8008b82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	68fa      	ldr	r2, [r7, #12]
 8008b8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	689a      	ldr	r2, [r3, #8]
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	683a      	ldr	r2, [r7, #0]
 8008b9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	683a      	ldr	r2, [r7, #0]
 8008ba4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	1c5a      	adds	r2, r3, #1
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	601a      	str	r2, [r3, #0]
}
 8008bb6:	bf00      	nop
 8008bb8:	3714      	adds	r7, #20
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr

08008bc2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008bc2:	b480      	push	{r7}
 8008bc4:	b085      	sub	sp, #20
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
 8008bca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bd8:	d103      	bne.n	8008be2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	60fb      	str	r3, [r7, #12]
 8008be0:	e00c      	b.n	8008bfc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	3308      	adds	r3, #8
 8008be6:	60fb      	str	r3, [r7, #12]
 8008be8:	e002      	b.n	8008bf0 <vListInsert+0x2e>
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	60fb      	str	r3, [r7, #12]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68ba      	ldr	r2, [r7, #8]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d2f6      	bcs.n	8008bea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	685a      	ldr	r2, [r3, #4]
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	683a      	ldr	r2, [r7, #0]
 8008c0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	683a      	ldr	r2, [r7, #0]
 8008c16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	1c5a      	adds	r2, r3, #1
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	601a      	str	r2, [r3, #0]
}
 8008c28:	bf00      	nop
 8008c2a:	3714      	adds	r7, #20
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c34:	b480      	push	{r7}
 8008c36:	b085      	sub	sp, #20
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	691b      	ldr	r3, [r3, #16]
 8008c40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	6892      	ldr	r2, [r2, #8]
 8008c4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	6852      	ldr	r2, [r2, #4]
 8008c54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d103      	bne.n	8008c68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	689a      	ldr	r2, [r3, #8]
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	1e5a      	subs	r2, r3, #1
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3714      	adds	r7, #20
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d109      	bne.n	8008cb0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca0:	f383 8811 	msr	BASEPRI, r3
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	60bb      	str	r3, [r7, #8]
 8008cae:	e7fe      	b.n	8008cae <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008cb0:	f001 f83c 	bl	8009d2c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cbc:	68f9      	ldr	r1, [r7, #12]
 8008cbe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008cc0:	fb01 f303 	mul.w	r3, r1, r3
 8008cc4:	441a      	add	r2, r3
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	68f9      	ldr	r1, [r7, #12]
 8008ce4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008ce6:	fb01 f303 	mul.w	r3, r1, r3
 8008cea:	441a      	add	r2, r3
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	22ff      	movs	r2, #255	; 0xff
 8008cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	22ff      	movs	r2, #255	; 0xff
 8008cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d114      	bne.n	8008d30 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d01a      	beq.n	8008d44 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	3310      	adds	r3, #16
 8008d12:	4618      	mov	r0, r3
 8008d14:	f000 fd32 	bl	800977c <xTaskRemoveFromEventList>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d012      	beq.n	8008d44 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008d1e:	4b0d      	ldr	r3, [pc, #52]	; (8008d54 <xQueueGenericReset+0xcc>)
 8008d20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d24:	601a      	str	r2, [r3, #0]
 8008d26:	f3bf 8f4f 	dsb	sy
 8008d2a:	f3bf 8f6f 	isb	sy
 8008d2e:	e009      	b.n	8008d44 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	3310      	adds	r3, #16
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7ff fef3 	bl	8008b20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	3324      	adds	r3, #36	; 0x24
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7ff feee 	bl	8008b20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008d44:	f001 f820 	bl	8009d88 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008d48:	2301      	movs	r3, #1
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	e000ed04 	.word	0xe000ed04

08008d58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b08e      	sub	sp, #56	; 0x38
 8008d5c:	af02      	add	r7, sp, #8
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	607a      	str	r2, [r7, #4]
 8008d64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d109      	bne.n	8008d80 <xQueueGenericCreateStatic+0x28>
 8008d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d70:	f383 8811 	msr	BASEPRI, r3
 8008d74:	f3bf 8f6f 	isb	sy
 8008d78:	f3bf 8f4f 	dsb	sy
 8008d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d7e:	e7fe      	b.n	8008d7e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d109      	bne.n	8008d9a <xQueueGenericCreateStatic+0x42>
 8008d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8a:	f383 8811 	msr	BASEPRI, r3
 8008d8e:	f3bf 8f6f 	isb	sy
 8008d92:	f3bf 8f4f 	dsb	sy
 8008d96:	627b      	str	r3, [r7, #36]	; 0x24
 8008d98:	e7fe      	b.n	8008d98 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d002      	beq.n	8008da6 <xQueueGenericCreateStatic+0x4e>
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d001      	beq.n	8008daa <xQueueGenericCreateStatic+0x52>
 8008da6:	2301      	movs	r3, #1
 8008da8:	e000      	b.n	8008dac <xQueueGenericCreateStatic+0x54>
 8008daa:	2300      	movs	r3, #0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d109      	bne.n	8008dc4 <xQueueGenericCreateStatic+0x6c>
 8008db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db4:	f383 8811 	msr	BASEPRI, r3
 8008db8:	f3bf 8f6f 	isb	sy
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	623b      	str	r3, [r7, #32]
 8008dc2:	e7fe      	b.n	8008dc2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d102      	bne.n	8008dd0 <xQueueGenericCreateStatic+0x78>
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d101      	bne.n	8008dd4 <xQueueGenericCreateStatic+0x7c>
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e000      	b.n	8008dd6 <xQueueGenericCreateStatic+0x7e>
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d109      	bne.n	8008dee <xQueueGenericCreateStatic+0x96>
 8008dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dde:	f383 8811 	msr	BASEPRI, r3
 8008de2:	f3bf 8f6f 	isb	sy
 8008de6:	f3bf 8f4f 	dsb	sy
 8008dea:	61fb      	str	r3, [r7, #28]
 8008dec:	e7fe      	b.n	8008dec <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008dee:	2350      	movs	r3, #80	; 0x50
 8008df0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	2b50      	cmp	r3, #80	; 0x50
 8008df6:	d009      	beq.n	8008e0c <xQueueGenericCreateStatic+0xb4>
 8008df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfc:	f383 8811 	msr	BASEPRI, r3
 8008e00:	f3bf 8f6f 	isb	sy
 8008e04:	f3bf 8f4f 	dsb	sy
 8008e08:	61bb      	str	r3, [r7, #24]
 8008e0a:	e7fe      	b.n	8008e0a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d00d      	beq.n	8008e32 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e18:	2201      	movs	r2, #1
 8008e1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e1e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e24:	9300      	str	r3, [sp, #0]
 8008e26:	4613      	mov	r3, r2
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	68b9      	ldr	r1, [r7, #8]
 8008e2c:	68f8      	ldr	r0, [r7, #12]
 8008e2e:	f000 f842 	bl	8008eb6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3730      	adds	r7, #48	; 0x30
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b08a      	sub	sp, #40	; 0x28
 8008e40:	af02      	add	r7, sp, #8
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	4613      	mov	r3, r2
 8008e48:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d109      	bne.n	8008e64 <xQueueGenericCreate+0x28>
 8008e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e54:	f383 8811 	msr	BASEPRI, r3
 8008e58:	f3bf 8f6f 	isb	sy
 8008e5c:	f3bf 8f4f 	dsb	sy
 8008e60:	613b      	str	r3, [r7, #16]
 8008e62:	e7fe      	b.n	8008e62 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d102      	bne.n	8008e70 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	61fb      	str	r3, [r7, #28]
 8008e6e:	e004      	b.n	8008e7a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	68ba      	ldr	r2, [r7, #8]
 8008e74:	fb02 f303 	mul.w	r3, r2, r3
 8008e78:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	3350      	adds	r3, #80	; 0x50
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f001 f830 	bl	8009ee4 <pvPortMalloc>
 8008e84:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d00f      	beq.n	8008eac <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	3350      	adds	r3, #80	; 0x50
 8008e90:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	2200      	movs	r2, #0
 8008e96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e9a:	79fa      	ldrb	r2, [r7, #7]
 8008e9c:	69bb      	ldr	r3, [r7, #24]
 8008e9e:	9300      	str	r3, [sp, #0]
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	697a      	ldr	r2, [r7, #20]
 8008ea4:	68b9      	ldr	r1, [r7, #8]
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f000 f805 	bl	8008eb6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008eac:	69bb      	ldr	r3, [r7, #24]
	}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3720      	adds	r7, #32
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b084      	sub	sp, #16
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	60f8      	str	r0, [r7, #12]
 8008ebe:	60b9      	str	r1, [r7, #8]
 8008ec0:	607a      	str	r2, [r7, #4]
 8008ec2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d103      	bne.n	8008ed2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	69ba      	ldr	r2, [r7, #24]
 8008ece:	601a      	str	r2, [r3, #0]
 8008ed0:	e002      	b.n	8008ed8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	68ba      	ldr	r2, [r7, #8]
 8008ee2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008ee4:	2101      	movs	r1, #1
 8008ee6:	69b8      	ldr	r0, [r7, #24]
 8008ee8:	f7ff fece 	bl	8008c88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008eec:	69bb      	ldr	r3, [r7, #24]
 8008eee:	78fa      	ldrb	r2, [r7, #3]
 8008ef0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008ef4:	bf00      	nop
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <MX_TIM7_Init>:
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008f02:	463b      	mov	r3, r7
 8008f04:	2200      	movs	r2, #0
 8008f06:	601a      	str	r2, [r3, #0]
 8008f08:	605a      	str	r2, [r3, #4]
  htim7.Instance = TIM7;
 8008f0a:	4b16      	ldr	r3, [pc, #88]	; (8008f64 <MX_TIM7_Init+0x68>)
 8008f0c:	4a16      	ldr	r2, [pc, #88]	; (8008f68 <MX_TIM7_Init+0x6c>)
 8008f0e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 167;
 8008f10:	4b14      	ldr	r3, [pc, #80]	; (8008f64 <MX_TIM7_Init+0x68>)
 8008f12:	22a7      	movs	r2, #167	; 0xa7
 8008f14:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008f16:	4b13      	ldr	r3, [pc, #76]	; (8008f64 <MX_TIM7_Init+0x68>)
 8008f18:	2200      	movs	r2, #0
 8008f1a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100;
 8008f1c:	4b11      	ldr	r3, [pc, #68]	; (8008f64 <MX_TIM7_Init+0x68>)
 8008f1e:	2264      	movs	r2, #100	; 0x64
 8008f20:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008f22:	4b10      	ldr	r3, [pc, #64]	; (8008f64 <MX_TIM7_Init+0x68>)
 8008f24:	2200      	movs	r2, #0
 8008f26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8008f28:	480e      	ldr	r0, [pc, #56]	; (8008f64 <MX_TIM7_Init+0x68>)
 8008f2a:	f7fd fe93 	bl	8006c54 <HAL_TIM_Base_Init>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d001      	beq.n	8008f38 <MX_TIM7_Init+0x3c>
    Error_Handler();
 8008f34:	f7fb fb76 	bl	8004624 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8008f40:	463b      	mov	r3, r7
 8008f42:	4619      	mov	r1, r3
 8008f44:	4807      	ldr	r0, [pc, #28]	; (8008f64 <MX_TIM7_Init+0x68>)
 8008f46:	f7fe fd29 	bl	800799c <HAL_TIMEx_MasterConfigSynchronization>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d001      	beq.n	8008f54 <MX_TIM7_Init+0x58>
    Error_Handler();
 8008f50:	f7fb fb68 	bl	8004624 <Error_Handler>
  HAL_TIM_Base_Start_IT(&htim7);
 8008f54:	4803      	ldr	r0, [pc, #12]	; (8008f64 <MX_TIM7_Init+0x68>)
 8008f56:	f7fd fecc 	bl	8006cf2 <HAL_TIM_Base_Start_IT>
}
 8008f5a:	bf00      	nop
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	20000684 	.word	0x20000684
 8008f68:	40001400 	.word	0x40001400

08008f6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b08e      	sub	sp, #56	; 0x38
 8008f70:	af04      	add	r7, sp, #16
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	607a      	str	r2, [r7, #4]
 8008f78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d109      	bne.n	8008f94 <xTaskCreateStatic+0x28>
 8008f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f84:	f383 8811 	msr	BASEPRI, r3
 8008f88:	f3bf 8f6f 	isb	sy
 8008f8c:	f3bf 8f4f 	dsb	sy
 8008f90:	623b      	str	r3, [r7, #32]
 8008f92:	e7fe      	b.n	8008f92 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8008f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d109      	bne.n	8008fae <xTaskCreateStatic+0x42>
 8008f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9e:	f383 8811 	msr	BASEPRI, r3
 8008fa2:	f3bf 8f6f 	isb	sy
 8008fa6:	f3bf 8f4f 	dsb	sy
 8008faa:	61fb      	str	r3, [r7, #28]
 8008fac:	e7fe      	b.n	8008fac <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008fae:	2360      	movs	r3, #96	; 0x60
 8008fb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	2b60      	cmp	r3, #96	; 0x60
 8008fb6:	d009      	beq.n	8008fcc <xTaskCreateStatic+0x60>
 8008fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fbc:	f383 8811 	msr	BASEPRI, r3
 8008fc0:	f3bf 8f6f 	isb	sy
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	61bb      	str	r3, [r7, #24]
 8008fca:	e7fe      	b.n	8008fca <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d01e      	beq.n	8009010 <xTaskCreateStatic+0xa4>
 8008fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d01b      	beq.n	8009010 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fda:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fe0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe4:	2202      	movs	r2, #2
 8008fe6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008fea:	2300      	movs	r3, #0
 8008fec:	9303      	str	r3, [sp, #12]
 8008fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff0:	9302      	str	r3, [sp, #8]
 8008ff2:	f107 0314 	add.w	r3, r7, #20
 8008ff6:	9301      	str	r3, [sp, #4]
 8008ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffa:	9300      	str	r3, [sp, #0]
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	68b9      	ldr	r1, [r7, #8]
 8009002:	68f8      	ldr	r0, [r7, #12]
 8009004:	f000 f850 	bl	80090a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009008:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800900a:	f000 f8d7 	bl	80091bc <prvAddNewTaskToReadyList>
 800900e:	e001      	b.n	8009014 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8009010:	2300      	movs	r3, #0
 8009012:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009014:	697b      	ldr	r3, [r7, #20]
	}
 8009016:	4618      	mov	r0, r3
 8009018:	3728      	adds	r7, #40	; 0x28
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800901e:	b580      	push	{r7, lr}
 8009020:	b08c      	sub	sp, #48	; 0x30
 8009022:	af04      	add	r7, sp, #16
 8009024:	60f8      	str	r0, [r7, #12]
 8009026:	60b9      	str	r1, [r7, #8]
 8009028:	603b      	str	r3, [r7, #0]
 800902a:	4613      	mov	r3, r2
 800902c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800902e:	88fb      	ldrh	r3, [r7, #6]
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	4618      	mov	r0, r3
 8009034:	f000 ff56 	bl	8009ee4 <pvPortMalloc>
 8009038:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d00e      	beq.n	800905e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009040:	2060      	movs	r0, #96	; 0x60
 8009042:	f000 ff4f 	bl	8009ee4 <pvPortMalloc>
 8009046:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d003      	beq.n	8009056 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	697a      	ldr	r2, [r7, #20]
 8009052:	631a      	str	r2, [r3, #48]	; 0x30
 8009054:	e005      	b.n	8009062 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009056:	6978      	ldr	r0, [r7, #20]
 8009058:	f001 f806 	bl	800a068 <vPortFree>
 800905c:	e001      	b.n	8009062 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800905e:	2300      	movs	r3, #0
 8009060:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d017      	beq.n	8009098 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	2200      	movs	r2, #0
 800906c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009070:	88fa      	ldrh	r2, [r7, #6]
 8009072:	2300      	movs	r3, #0
 8009074:	9303      	str	r3, [sp, #12]
 8009076:	69fb      	ldr	r3, [r7, #28]
 8009078:	9302      	str	r3, [sp, #8]
 800907a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800907c:	9301      	str	r3, [sp, #4]
 800907e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009080:	9300      	str	r3, [sp, #0]
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	68b9      	ldr	r1, [r7, #8]
 8009086:	68f8      	ldr	r0, [r7, #12]
 8009088:	f000 f80e 	bl	80090a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800908c:	69f8      	ldr	r0, [r7, #28]
 800908e:	f000 f895 	bl	80091bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009092:	2301      	movs	r3, #1
 8009094:	61bb      	str	r3, [r7, #24]
 8009096:	e002      	b.n	800909e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009098:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800909c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800909e:	69bb      	ldr	r3, [r7, #24]
	}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3720      	adds	r7, #32
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b088      	sub	sp, #32
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	60b9      	str	r1, [r7, #8]
 80090b2:	607a      	str	r2, [r7, #4]
 80090b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80090b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	461a      	mov	r2, r3
 80090c0:	21a5      	movs	r1, #165	; 0xa5
 80090c2:	f001 f922 	bl	800a30a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80090c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80090d0:	3b01      	subs	r3, #1
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	4413      	add	r3, r2
 80090d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80090d8:	69bb      	ldr	r3, [r7, #24]
 80090da:	f023 0307 	bic.w	r3, r3, #7
 80090de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80090e0:	69bb      	ldr	r3, [r7, #24]
 80090e2:	f003 0307 	and.w	r3, r3, #7
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d009      	beq.n	80090fe <prvInitialiseNewTask+0x56>
 80090ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ee:	f383 8811 	msr	BASEPRI, r3
 80090f2:	f3bf 8f6f 	isb	sy
 80090f6:	f3bf 8f4f 	dsb	sy
 80090fa:	617b      	str	r3, [r7, #20]
 80090fc:	e7fe      	b.n	80090fc <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090fe:	2300      	movs	r3, #0
 8009100:	61fb      	str	r3, [r7, #28]
 8009102:	e012      	b.n	800912a <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009104:	68ba      	ldr	r2, [r7, #8]
 8009106:	69fb      	ldr	r3, [r7, #28]
 8009108:	4413      	add	r3, r2
 800910a:	7819      	ldrb	r1, [r3, #0]
 800910c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800910e:	69fb      	ldr	r3, [r7, #28]
 8009110:	4413      	add	r3, r2
 8009112:	3334      	adds	r3, #52	; 0x34
 8009114:	460a      	mov	r2, r1
 8009116:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009118:	68ba      	ldr	r2, [r7, #8]
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	4413      	add	r3, r2
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d006      	beq.n	8009132 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009124:	69fb      	ldr	r3, [r7, #28]
 8009126:	3301      	adds	r3, #1
 8009128:	61fb      	str	r3, [r7, #28]
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	2b0f      	cmp	r3, #15
 800912e:	d9e9      	bls.n	8009104 <prvInitialiseNewTask+0x5c>
 8009130:	e000      	b.n	8009134 <prvInitialiseNewTask+0x8c>
		{
			break;
 8009132:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009136:	2200      	movs	r2, #0
 8009138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800913c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913e:	2b06      	cmp	r3, #6
 8009140:	d901      	bls.n	8009146 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009142:	2306      	movs	r3, #6
 8009144:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800914a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800914c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009150:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009154:	2200      	movs	r2, #0
 8009156:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915a:	3304      	adds	r3, #4
 800915c:	4618      	mov	r0, r3
 800915e:	f7ff fcff 	bl	8008b60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009164:	3318      	adds	r3, #24
 8009166:	4618      	mov	r0, r3
 8009168:	f7ff fcfa 	bl	8008b60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800916c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009170:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009174:	f1c3 0207 	rsb	r2, r3, #7
 8009178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800917c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009180:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8009182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009184:	2200      	movs	r2, #0
 8009186:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918a:	2200      	movs	r2, #0
 800918c:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800918e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009190:	2200      	movs	r2, #0
 8009192:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009196:	683a      	ldr	r2, [r7, #0]
 8009198:	68f9      	ldr	r1, [r7, #12]
 800919a:	69b8      	ldr	r0, [r7, #24]
 800919c:	f000 fc8e 	bl	8009abc <pxPortInitialiseStack>
 80091a0:	4602      	mov	r2, r0
 80091a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80091a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d002      	beq.n	80091b2 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80091ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091b2:	bf00      	nop
 80091b4:	3720      	adds	r7, #32
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
	...

080091bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80091c4:	f000 fdb2 	bl	8009d2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80091c8:	4b2c      	ldr	r3, [pc, #176]	; (800927c <prvAddNewTaskToReadyList+0xc0>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3301      	adds	r3, #1
 80091ce:	4a2b      	ldr	r2, [pc, #172]	; (800927c <prvAddNewTaskToReadyList+0xc0>)
 80091d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80091d2:	4b2b      	ldr	r3, [pc, #172]	; (8009280 <prvAddNewTaskToReadyList+0xc4>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d109      	bne.n	80091ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80091da:	4a29      	ldr	r2, [pc, #164]	; (8009280 <prvAddNewTaskToReadyList+0xc4>)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80091e0:	4b26      	ldr	r3, [pc, #152]	; (800927c <prvAddNewTaskToReadyList+0xc0>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d110      	bne.n	800920a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80091e8:	f000 fb42 	bl	8009870 <prvInitialiseTaskLists>
 80091ec:	e00d      	b.n	800920a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80091ee:	4b25      	ldr	r3, [pc, #148]	; (8009284 <prvAddNewTaskToReadyList+0xc8>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d109      	bne.n	800920a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80091f6:	4b22      	ldr	r3, [pc, #136]	; (8009280 <prvAddNewTaskToReadyList+0xc4>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009200:	429a      	cmp	r2, r3
 8009202:	d802      	bhi.n	800920a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009204:	4a1e      	ldr	r2, [pc, #120]	; (8009280 <prvAddNewTaskToReadyList+0xc4>)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800920a:	4b1f      	ldr	r3, [pc, #124]	; (8009288 <prvAddNewTaskToReadyList+0xcc>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	3301      	adds	r3, #1
 8009210:	4a1d      	ldr	r2, [pc, #116]	; (8009288 <prvAddNewTaskToReadyList+0xcc>)
 8009212:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009214:	4b1c      	ldr	r3, [pc, #112]	; (8009288 <prvAddNewTaskToReadyList+0xcc>)
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009220:	2201      	movs	r2, #1
 8009222:	409a      	lsls	r2, r3
 8009224:	4b19      	ldr	r3, [pc, #100]	; (800928c <prvAddNewTaskToReadyList+0xd0>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4313      	orrs	r3, r2
 800922a:	4a18      	ldr	r2, [pc, #96]	; (800928c <prvAddNewTaskToReadyList+0xd0>)
 800922c:	6013      	str	r3, [r2, #0]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009232:	4613      	mov	r3, r2
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	4413      	add	r3, r2
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	4a15      	ldr	r2, [pc, #84]	; (8009290 <prvAddNewTaskToReadyList+0xd4>)
 800923c:	441a      	add	r2, r3
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	3304      	adds	r3, #4
 8009242:	4619      	mov	r1, r3
 8009244:	4610      	mov	r0, r2
 8009246:	f7ff fc98 	bl	8008b7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800924a:	f000 fd9d 	bl	8009d88 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800924e:	4b0d      	ldr	r3, [pc, #52]	; (8009284 <prvAddNewTaskToReadyList+0xc8>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d00e      	beq.n	8009274 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009256:	4b0a      	ldr	r3, [pc, #40]	; (8009280 <prvAddNewTaskToReadyList+0xc4>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009260:	429a      	cmp	r2, r3
 8009262:	d207      	bcs.n	8009274 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009264:	4b0b      	ldr	r3, [pc, #44]	; (8009294 <prvAddNewTaskToReadyList+0xd8>)
 8009266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800926a:	601a      	str	r2, [r3, #0]
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009274:	bf00      	nop
 8009276:	3708      	adds	r7, #8
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	20001d20 	.word	0x20001d20
 8009280:	20001c20 	.word	0x20001c20
 8009284:	20001d2c 	.word	0x20001d2c
 8009288:	20001d3c 	.word	0x20001d3c
 800928c:	20001d28 	.word	0x20001d28
 8009290:	20001c24 	.word	0x20001c24
 8009294:	e000ed04 	.word	0xe000ed04

08009298 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80092a0:	2300      	movs	r3, #0
 80092a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d016      	beq.n	80092d8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80092aa:	4b13      	ldr	r3, [pc, #76]	; (80092f8 <vTaskDelay+0x60>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d009      	beq.n	80092c6 <vTaskDelay+0x2e>
 80092b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b6:	f383 8811 	msr	BASEPRI, r3
 80092ba:	f3bf 8f6f 	isb	sy
 80092be:	f3bf 8f4f 	dsb	sy
 80092c2:	60bb      	str	r3, [r7, #8]
 80092c4:	e7fe      	b.n	80092c4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80092c6:	f000 f87b 	bl	80093c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80092ca:	2100      	movs	r1, #0
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 fb8f 	bl	80099f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80092d2:	f000 f883 	bl	80093dc <xTaskResumeAll>
 80092d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d107      	bne.n	80092ee <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80092de:	4b07      	ldr	r3, [pc, #28]	; (80092fc <vTaskDelay+0x64>)
 80092e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092e4:	601a      	str	r2, [r3, #0]
 80092e6:	f3bf 8f4f 	dsb	sy
 80092ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80092ee:	bf00      	nop
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	20001d48 	.word	0x20001d48
 80092fc:	e000ed04 	.word	0xe000ed04

08009300 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b08a      	sub	sp, #40	; 0x28
 8009304:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009306:	2300      	movs	r3, #0
 8009308:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800930a:	2300      	movs	r3, #0
 800930c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800930e:	463a      	mov	r2, r7
 8009310:	1d39      	adds	r1, r7, #4
 8009312:	f107 0308 	add.w	r3, r7, #8
 8009316:	4618      	mov	r0, r3
 8009318:	f7f7 fdd0 	bl	8000ebc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800931c:	6839      	ldr	r1, [r7, #0]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	9202      	str	r2, [sp, #8]
 8009324:	9301      	str	r3, [sp, #4]
 8009326:	2300      	movs	r3, #0
 8009328:	9300      	str	r3, [sp, #0]
 800932a:	2300      	movs	r3, #0
 800932c:	460a      	mov	r2, r1
 800932e:	491e      	ldr	r1, [pc, #120]	; (80093a8 <vTaskStartScheduler+0xa8>)
 8009330:	481e      	ldr	r0, [pc, #120]	; (80093ac <vTaskStartScheduler+0xac>)
 8009332:	f7ff fe1b 	bl	8008f6c <xTaskCreateStatic>
 8009336:	4602      	mov	r2, r0
 8009338:	4b1d      	ldr	r3, [pc, #116]	; (80093b0 <vTaskStartScheduler+0xb0>)
 800933a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800933c:	4b1c      	ldr	r3, [pc, #112]	; (80093b0 <vTaskStartScheduler+0xb0>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d002      	beq.n	800934a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009344:	2301      	movs	r3, #1
 8009346:	617b      	str	r3, [r7, #20]
 8009348:	e001      	b.n	800934e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800934a:	2300      	movs	r3, #0
 800934c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	2b01      	cmp	r3, #1
 8009352:	d117      	bne.n	8009384 <vTaskStartScheduler+0x84>
 8009354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009358:	f383 8811 	msr	BASEPRI, r3
 800935c:	f3bf 8f6f 	isb	sy
 8009360:	f3bf 8f4f 	dsb	sy
 8009364:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009366:	4b13      	ldr	r3, [pc, #76]	; (80093b4 <vTaskStartScheduler+0xb4>)
 8009368:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800936c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800936e:	4b12      	ldr	r3, [pc, #72]	; (80093b8 <vTaskStartScheduler+0xb8>)
 8009370:	2201      	movs	r2, #1
 8009372:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009374:	4b11      	ldr	r3, [pc, #68]	; (80093bc <vTaskStartScheduler+0xbc>)
 8009376:	2200      	movs	r2, #0
 8009378:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800937a:	f7ff fdbf 	bl	8008efc <MX_TIM7_Init>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800937e:	f000 fc27 	bl	8009bd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009382:	e00d      	b.n	80093a0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800938a:	d109      	bne.n	80093a0 <vTaskStartScheduler+0xa0>
 800938c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009390:	f383 8811 	msr	BASEPRI, r3
 8009394:	f3bf 8f6f 	isb	sy
 8009398:	f3bf 8f4f 	dsb	sy
 800939c:	60fb      	str	r3, [r7, #12]
 800939e:	e7fe      	b.n	800939e <vTaskStartScheduler+0x9e>
}
 80093a0:	bf00      	nop
 80093a2:	3718      	adds	r7, #24
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	0800a4a0 	.word	0x0800a4a0
 80093ac:	08009841 	.word	0x08009841
 80093b0:	20001d44 	.word	0x20001d44
 80093b4:	20001d40 	.word	0x20001d40
 80093b8:	20001d2c 	.word	0x20001d2c
 80093bc:	20001d24 	.word	0x20001d24

080093c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80093c0:	b480      	push	{r7}
 80093c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80093c4:	4b04      	ldr	r3, [pc, #16]	; (80093d8 <vTaskSuspendAll+0x18>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	3301      	adds	r3, #1
 80093ca:	4a03      	ldr	r2, [pc, #12]	; (80093d8 <vTaskSuspendAll+0x18>)
 80093cc:	6013      	str	r3, [r2, #0]
}
 80093ce:	bf00      	nop
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr
 80093d8:	20001d48 	.word	0x20001d48

080093dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80093e2:	2300      	movs	r3, #0
 80093e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80093e6:	2300      	movs	r3, #0
 80093e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80093ea:	4b41      	ldr	r3, [pc, #260]	; (80094f0 <xTaskResumeAll+0x114>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d109      	bne.n	8009406 <xTaskResumeAll+0x2a>
 80093f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f6:	f383 8811 	msr	BASEPRI, r3
 80093fa:	f3bf 8f6f 	isb	sy
 80093fe:	f3bf 8f4f 	dsb	sy
 8009402:	603b      	str	r3, [r7, #0]
 8009404:	e7fe      	b.n	8009404 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009406:	f000 fc91 	bl	8009d2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800940a:	4b39      	ldr	r3, [pc, #228]	; (80094f0 <xTaskResumeAll+0x114>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	3b01      	subs	r3, #1
 8009410:	4a37      	ldr	r2, [pc, #220]	; (80094f0 <xTaskResumeAll+0x114>)
 8009412:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009414:	4b36      	ldr	r3, [pc, #216]	; (80094f0 <xTaskResumeAll+0x114>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d161      	bne.n	80094e0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800941c:	4b35      	ldr	r3, [pc, #212]	; (80094f4 <xTaskResumeAll+0x118>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d05d      	beq.n	80094e0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009424:	e02e      	b.n	8009484 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009426:	4b34      	ldr	r3, [pc, #208]	; (80094f8 <xTaskResumeAll+0x11c>)
 8009428:	68db      	ldr	r3, [r3, #12]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	3318      	adds	r3, #24
 8009432:	4618      	mov	r0, r3
 8009434:	f7ff fbfe 	bl	8008c34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	3304      	adds	r3, #4
 800943c:	4618      	mov	r0, r3
 800943e:	f7ff fbf9 	bl	8008c34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009446:	2201      	movs	r2, #1
 8009448:	409a      	lsls	r2, r3
 800944a:	4b2c      	ldr	r3, [pc, #176]	; (80094fc <xTaskResumeAll+0x120>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4313      	orrs	r3, r2
 8009450:	4a2a      	ldr	r2, [pc, #168]	; (80094fc <xTaskResumeAll+0x120>)
 8009452:	6013      	str	r3, [r2, #0]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009458:	4613      	mov	r3, r2
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	4413      	add	r3, r2
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	4a27      	ldr	r2, [pc, #156]	; (8009500 <xTaskResumeAll+0x124>)
 8009462:	441a      	add	r2, r3
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	3304      	adds	r3, #4
 8009468:	4619      	mov	r1, r3
 800946a:	4610      	mov	r0, r2
 800946c:	f7ff fb85 	bl	8008b7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009474:	4b23      	ldr	r3, [pc, #140]	; (8009504 <xTaskResumeAll+0x128>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800947a:	429a      	cmp	r2, r3
 800947c:	d302      	bcc.n	8009484 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800947e:	4b22      	ldr	r3, [pc, #136]	; (8009508 <xTaskResumeAll+0x12c>)
 8009480:	2201      	movs	r2, #1
 8009482:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009484:	4b1c      	ldr	r3, [pc, #112]	; (80094f8 <xTaskResumeAll+0x11c>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d1cc      	bne.n	8009426 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d001      	beq.n	8009496 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009492:	f000 fa87 	bl	80099a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009496:	4b1d      	ldr	r3, [pc, #116]	; (800950c <xTaskResumeAll+0x130>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d010      	beq.n	80094c4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80094a2:	f000 f837 	bl	8009514 <xTaskIncrementTick>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d002      	beq.n	80094b2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80094ac:	4b16      	ldr	r3, [pc, #88]	; (8009508 <xTaskResumeAll+0x12c>)
 80094ae:	2201      	movs	r2, #1
 80094b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	3b01      	subs	r3, #1
 80094b6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1f1      	bne.n	80094a2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80094be:	4b13      	ldr	r3, [pc, #76]	; (800950c <xTaskResumeAll+0x130>)
 80094c0:	2200      	movs	r2, #0
 80094c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80094c4:	4b10      	ldr	r3, [pc, #64]	; (8009508 <xTaskResumeAll+0x12c>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d009      	beq.n	80094e0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80094cc:	2301      	movs	r3, #1
 80094ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80094d0:	4b0f      	ldr	r3, [pc, #60]	; (8009510 <xTaskResumeAll+0x134>)
 80094d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094d6:	601a      	str	r2, [r3, #0]
 80094d8:	f3bf 8f4f 	dsb	sy
 80094dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80094e0:	f000 fc52 	bl	8009d88 <vPortExitCritical>

	return xAlreadyYielded;
 80094e4:	68bb      	ldr	r3, [r7, #8]
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3710      	adds	r7, #16
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	20001d48 	.word	0x20001d48
 80094f4:	20001d20 	.word	0x20001d20
 80094f8:	20001ce0 	.word	0x20001ce0
 80094fc:	20001d28 	.word	0x20001d28
 8009500:	20001c24 	.word	0x20001c24
 8009504:	20001c20 	.word	0x20001c20
 8009508:	20001d34 	.word	0x20001d34
 800950c:	20001d30 	.word	0x20001d30
 8009510:	e000ed04 	.word	0xe000ed04

08009514 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b086      	sub	sp, #24
 8009518:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800951a:	2300      	movs	r3, #0
 800951c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800951e:	4b50      	ldr	r3, [pc, #320]	; (8009660 <xTaskIncrementTick+0x14c>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	f040 808c 	bne.w	8009640 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009528:	4b4e      	ldr	r3, [pc, #312]	; (8009664 <xTaskIncrementTick+0x150>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	3301      	adds	r3, #1
 800952e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009530:	4a4c      	ldr	r2, [pc, #304]	; (8009664 <xTaskIncrementTick+0x150>)
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d11f      	bne.n	800957c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800953c:	4b4a      	ldr	r3, [pc, #296]	; (8009668 <xTaskIncrementTick+0x154>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d009      	beq.n	800955a <xTaskIncrementTick+0x46>
 8009546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954a:	f383 8811 	msr	BASEPRI, r3
 800954e:	f3bf 8f6f 	isb	sy
 8009552:	f3bf 8f4f 	dsb	sy
 8009556:	603b      	str	r3, [r7, #0]
 8009558:	e7fe      	b.n	8009558 <xTaskIncrementTick+0x44>
 800955a:	4b43      	ldr	r3, [pc, #268]	; (8009668 <xTaskIncrementTick+0x154>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	60fb      	str	r3, [r7, #12]
 8009560:	4b42      	ldr	r3, [pc, #264]	; (800966c <xTaskIncrementTick+0x158>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a40      	ldr	r2, [pc, #256]	; (8009668 <xTaskIncrementTick+0x154>)
 8009566:	6013      	str	r3, [r2, #0]
 8009568:	4a40      	ldr	r2, [pc, #256]	; (800966c <xTaskIncrementTick+0x158>)
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	6013      	str	r3, [r2, #0]
 800956e:	4b40      	ldr	r3, [pc, #256]	; (8009670 <xTaskIncrementTick+0x15c>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	3301      	adds	r3, #1
 8009574:	4a3e      	ldr	r2, [pc, #248]	; (8009670 <xTaskIncrementTick+0x15c>)
 8009576:	6013      	str	r3, [r2, #0]
 8009578:	f000 fa14 	bl	80099a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800957c:	4b3d      	ldr	r3, [pc, #244]	; (8009674 <xTaskIncrementTick+0x160>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	693a      	ldr	r2, [r7, #16]
 8009582:	429a      	cmp	r2, r3
 8009584:	d34d      	bcc.n	8009622 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009586:	4b38      	ldr	r3, [pc, #224]	; (8009668 <xTaskIncrementTick+0x154>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d101      	bne.n	8009594 <xTaskIncrementTick+0x80>
 8009590:	2301      	movs	r3, #1
 8009592:	e000      	b.n	8009596 <xTaskIncrementTick+0x82>
 8009594:	2300      	movs	r3, #0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d004      	beq.n	80095a4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800959a:	4b36      	ldr	r3, [pc, #216]	; (8009674 <xTaskIncrementTick+0x160>)
 800959c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095a0:	601a      	str	r2, [r3, #0]
					break;
 80095a2:	e03e      	b.n	8009622 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80095a4:	4b30      	ldr	r3, [pc, #192]	; (8009668 <xTaskIncrementTick+0x154>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80095b4:	693a      	ldr	r2, [r7, #16]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d203      	bcs.n	80095c4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80095bc:	4a2d      	ldr	r2, [pc, #180]	; (8009674 <xTaskIncrementTick+0x160>)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6013      	str	r3, [r2, #0]
						break;
 80095c2:	e02e      	b.n	8009622 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	3304      	adds	r3, #4
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7ff fb33 	bl	8008c34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d004      	beq.n	80095e0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	3318      	adds	r3, #24
 80095da:	4618      	mov	r0, r3
 80095dc:	f7ff fb2a 	bl	8008c34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e4:	2201      	movs	r2, #1
 80095e6:	409a      	lsls	r2, r3
 80095e8:	4b23      	ldr	r3, [pc, #140]	; (8009678 <xTaskIncrementTick+0x164>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4313      	orrs	r3, r2
 80095ee:	4a22      	ldr	r2, [pc, #136]	; (8009678 <xTaskIncrementTick+0x164>)
 80095f0:	6013      	str	r3, [r2, #0]
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095f6:	4613      	mov	r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	4413      	add	r3, r2
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	4a1f      	ldr	r2, [pc, #124]	; (800967c <xTaskIncrementTick+0x168>)
 8009600:	441a      	add	r2, r3
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	3304      	adds	r3, #4
 8009606:	4619      	mov	r1, r3
 8009608:	4610      	mov	r0, r2
 800960a:	f7ff fab6 	bl	8008b7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009612:	4b1b      	ldr	r3, [pc, #108]	; (8009680 <xTaskIncrementTick+0x16c>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009618:	429a      	cmp	r2, r3
 800961a:	d3b4      	bcc.n	8009586 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800961c:	2301      	movs	r3, #1
 800961e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009620:	e7b1      	b.n	8009586 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009622:	4b17      	ldr	r3, [pc, #92]	; (8009680 <xTaskIncrementTick+0x16c>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009628:	4914      	ldr	r1, [pc, #80]	; (800967c <xTaskIncrementTick+0x168>)
 800962a:	4613      	mov	r3, r2
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	4413      	add	r3, r2
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	440b      	add	r3, r1
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b01      	cmp	r3, #1
 8009638:	d907      	bls.n	800964a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800963a:	2301      	movs	r3, #1
 800963c:	617b      	str	r3, [r7, #20]
 800963e:	e004      	b.n	800964a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009640:	4b10      	ldr	r3, [pc, #64]	; (8009684 <xTaskIncrementTick+0x170>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	3301      	adds	r3, #1
 8009646:	4a0f      	ldr	r2, [pc, #60]	; (8009684 <xTaskIncrementTick+0x170>)
 8009648:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800964a:	4b0f      	ldr	r3, [pc, #60]	; (8009688 <xTaskIncrementTick+0x174>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d001      	beq.n	8009656 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8009652:	2301      	movs	r3, #1
 8009654:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009656:	697b      	ldr	r3, [r7, #20]
}
 8009658:	4618      	mov	r0, r3
 800965a:	3718      	adds	r7, #24
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	20001d48 	.word	0x20001d48
 8009664:	20001d24 	.word	0x20001d24
 8009668:	20001cd8 	.word	0x20001cd8
 800966c:	20001cdc 	.word	0x20001cdc
 8009670:	20001d38 	.word	0x20001d38
 8009674:	20001d40 	.word	0x20001d40
 8009678:	20001d28 	.word	0x20001d28
 800967c:	20001c24 	.word	0x20001c24
 8009680:	20001c20 	.word	0x20001c20
 8009684:	20001d30 	.word	0x20001d30
 8009688:	20001d34 	.word	0x20001d34

0800968c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800968c:	b480      	push	{r7}
 800968e:	b087      	sub	sp, #28
 8009690:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009692:	4b32      	ldr	r3, [pc, #200]	; (800975c <vTaskSwitchContext+0xd0>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d003      	beq.n	80096a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800969a:	4b31      	ldr	r3, [pc, #196]	; (8009760 <vTaskSwitchContext+0xd4>)
 800969c:	2201      	movs	r2, #1
 800969e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80096a0:	e056      	b.n	8009750 <vTaskSwitchContext+0xc4>
		xYieldPending = pdFALSE;
 80096a2:	4b2f      	ldr	r3, [pc, #188]	; (8009760 <vTaskSwitchContext+0xd4>)
 80096a4:	2200      	movs	r2, #0
 80096a6:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80096a8:	4b2e      	ldr	r3, [pc, #184]	; (8009764 <vTaskSwitchContext+0xd8>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a2e      	ldr	r2, [pc, #184]	; (8009768 <vTaskSwitchContext+0xdc>)
 80096ae:	6013      	str	r3, [r2, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 80096b0:	4b2d      	ldr	r3, [pc, #180]	; (8009768 <vTaskSwitchContext+0xdc>)
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	4b2d      	ldr	r3, [pc, #180]	; (800976c <vTaskSwitchContext+0xe0>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d909      	bls.n	80096d0 <vTaskSwitchContext+0x44>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80096bc:	4b2c      	ldr	r3, [pc, #176]	; (8009770 <vTaskSwitchContext+0xe4>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80096c2:	4a29      	ldr	r2, [pc, #164]	; (8009768 <vTaskSwitchContext+0xdc>)
 80096c4:	6810      	ldr	r0, [r2, #0]
 80096c6:	4a29      	ldr	r2, [pc, #164]	; (800976c <vTaskSwitchContext+0xe0>)
 80096c8:	6812      	ldr	r2, [r2, #0]
 80096ca:	1a82      	subs	r2, r0, r2
 80096cc:	440a      	add	r2, r1
 80096ce:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 80096d0:	4b25      	ldr	r3, [pc, #148]	; (8009768 <vTaskSwitchContext+0xdc>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a25      	ldr	r2, [pc, #148]	; (800976c <vTaskSwitchContext+0xe0>)
 80096d6:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80096d8:	4b26      	ldr	r3, [pc, #152]	; (8009774 <vTaskSwitchContext+0xe8>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	fab3 f383 	clz	r3, r3
 80096e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80096e6:	7afb      	ldrb	r3, [r7, #11]
 80096e8:	f1c3 031f 	rsb	r3, r3, #31
 80096ec:	617b      	str	r3, [r7, #20]
 80096ee:	4922      	ldr	r1, [pc, #136]	; (8009778 <vTaskSwitchContext+0xec>)
 80096f0:	697a      	ldr	r2, [r7, #20]
 80096f2:	4613      	mov	r3, r2
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	4413      	add	r3, r2
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	440b      	add	r3, r1
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d109      	bne.n	8009716 <vTaskSwitchContext+0x8a>
	__asm volatile
 8009702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009706:	f383 8811 	msr	BASEPRI, r3
 800970a:	f3bf 8f6f 	isb	sy
 800970e:	f3bf 8f4f 	dsb	sy
 8009712:	607b      	str	r3, [r7, #4]
 8009714:	e7fe      	b.n	8009714 <vTaskSwitchContext+0x88>
 8009716:	697a      	ldr	r2, [r7, #20]
 8009718:	4613      	mov	r3, r2
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	4413      	add	r3, r2
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	4a15      	ldr	r2, [pc, #84]	; (8009778 <vTaskSwitchContext+0xec>)
 8009722:	4413      	add	r3, r2
 8009724:	613b      	str	r3, [r7, #16]
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	685a      	ldr	r2, [r3, #4]
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	605a      	str	r2, [r3, #4]
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	685a      	ldr	r2, [r3, #4]
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	3308      	adds	r3, #8
 8009738:	429a      	cmp	r2, r3
 800973a:	d104      	bne.n	8009746 <vTaskSwitchContext+0xba>
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	685a      	ldr	r2, [r3, #4]
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	605a      	str	r2, [r3, #4]
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	4a08      	ldr	r2, [pc, #32]	; (8009770 <vTaskSwitchContext+0xe4>)
 800974e:	6013      	str	r3, [r2, #0]
}
 8009750:	bf00      	nop
 8009752:	371c      	adds	r7, #28
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr
 800975c:	20001d48 	.word	0x20001d48
 8009760:	20001d34 	.word	0x20001d34
 8009764:	200006c4 	.word	0x200006c4
 8009768:	20001d50 	.word	0x20001d50
 800976c:	20001d4c 	.word	0x20001d4c
 8009770:	20001c20 	.word	0x20001c20
 8009774:	20001d28 	.word	0x20001d28
 8009778:	20001c24 	.word	0x20001c24

0800977c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d109      	bne.n	80097a6 <xTaskRemoveFromEventList+0x2a>
 8009792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009796:	f383 8811 	msr	BASEPRI, r3
 800979a:	f3bf 8f6f 	isb	sy
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	60fb      	str	r3, [r7, #12]
 80097a4:	e7fe      	b.n	80097a4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	3318      	adds	r3, #24
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7ff fa42 	bl	8008c34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097b0:	4b1d      	ldr	r3, [pc, #116]	; (8009828 <xTaskRemoveFromEventList+0xac>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d11c      	bne.n	80097f2 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	3304      	adds	r3, #4
 80097bc:	4618      	mov	r0, r3
 80097be:	f7ff fa39 	bl	8008c34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c6:	2201      	movs	r2, #1
 80097c8:	409a      	lsls	r2, r3
 80097ca:	4b18      	ldr	r3, [pc, #96]	; (800982c <xTaskRemoveFromEventList+0xb0>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4313      	orrs	r3, r2
 80097d0:	4a16      	ldr	r2, [pc, #88]	; (800982c <xTaskRemoveFromEventList+0xb0>)
 80097d2:	6013      	str	r3, [r2, #0]
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097d8:	4613      	mov	r3, r2
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	4413      	add	r3, r2
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	4a13      	ldr	r2, [pc, #76]	; (8009830 <xTaskRemoveFromEventList+0xb4>)
 80097e2:	441a      	add	r2, r3
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	3304      	adds	r3, #4
 80097e8:	4619      	mov	r1, r3
 80097ea:	4610      	mov	r0, r2
 80097ec:	f7ff f9c5 	bl	8008b7a <vListInsertEnd>
 80097f0:	e005      	b.n	80097fe <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	3318      	adds	r3, #24
 80097f6:	4619      	mov	r1, r3
 80097f8:	480e      	ldr	r0, [pc, #56]	; (8009834 <xTaskRemoveFromEventList+0xb8>)
 80097fa:	f7ff f9be 	bl	8008b7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009802:	4b0d      	ldr	r3, [pc, #52]	; (8009838 <xTaskRemoveFromEventList+0xbc>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009808:	429a      	cmp	r2, r3
 800980a:	d905      	bls.n	8009818 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800980c:	2301      	movs	r3, #1
 800980e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009810:	4b0a      	ldr	r3, [pc, #40]	; (800983c <xTaskRemoveFromEventList+0xc0>)
 8009812:	2201      	movs	r2, #1
 8009814:	601a      	str	r2, [r3, #0]
 8009816:	e001      	b.n	800981c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8009818:	2300      	movs	r3, #0
 800981a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800981c:	697b      	ldr	r3, [r7, #20]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3718      	adds	r7, #24
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	20001d48 	.word	0x20001d48
 800982c:	20001d28 	.word	0x20001d28
 8009830:	20001c24 	.word	0x20001c24
 8009834:	20001ce0 	.word	0x20001ce0
 8009838:	20001c20 	.word	0x20001c20
 800983c:	20001d34 	.word	0x20001d34

08009840 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009848:	f000 f852 	bl	80098f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800984c:	4b06      	ldr	r3, [pc, #24]	; (8009868 <prvIdleTask+0x28>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	2b01      	cmp	r3, #1
 8009852:	d9f9      	bls.n	8009848 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009854:	4b05      	ldr	r3, [pc, #20]	; (800986c <prvIdleTask+0x2c>)
 8009856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800985a:	601a      	str	r2, [r3, #0]
 800985c:	f3bf 8f4f 	dsb	sy
 8009860:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009864:	e7f0      	b.n	8009848 <prvIdleTask+0x8>
 8009866:	bf00      	nop
 8009868:	20001c24 	.word	0x20001c24
 800986c:	e000ed04 	.word	0xe000ed04

08009870 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009876:	2300      	movs	r3, #0
 8009878:	607b      	str	r3, [r7, #4]
 800987a:	e00c      	b.n	8009896 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	4613      	mov	r3, r2
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	4413      	add	r3, r2
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	4a12      	ldr	r2, [pc, #72]	; (80098d0 <prvInitialiseTaskLists+0x60>)
 8009888:	4413      	add	r3, r2
 800988a:	4618      	mov	r0, r3
 800988c:	f7ff f948 	bl	8008b20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	3301      	adds	r3, #1
 8009894:	607b      	str	r3, [r7, #4]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2b06      	cmp	r3, #6
 800989a:	d9ef      	bls.n	800987c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800989c:	480d      	ldr	r0, [pc, #52]	; (80098d4 <prvInitialiseTaskLists+0x64>)
 800989e:	f7ff f93f 	bl	8008b20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80098a2:	480d      	ldr	r0, [pc, #52]	; (80098d8 <prvInitialiseTaskLists+0x68>)
 80098a4:	f7ff f93c 	bl	8008b20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80098a8:	480c      	ldr	r0, [pc, #48]	; (80098dc <prvInitialiseTaskLists+0x6c>)
 80098aa:	f7ff f939 	bl	8008b20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80098ae:	480c      	ldr	r0, [pc, #48]	; (80098e0 <prvInitialiseTaskLists+0x70>)
 80098b0:	f7ff f936 	bl	8008b20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80098b4:	480b      	ldr	r0, [pc, #44]	; (80098e4 <prvInitialiseTaskLists+0x74>)
 80098b6:	f7ff f933 	bl	8008b20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80098ba:	4b0b      	ldr	r3, [pc, #44]	; (80098e8 <prvInitialiseTaskLists+0x78>)
 80098bc:	4a05      	ldr	r2, [pc, #20]	; (80098d4 <prvInitialiseTaskLists+0x64>)
 80098be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80098c0:	4b0a      	ldr	r3, [pc, #40]	; (80098ec <prvInitialiseTaskLists+0x7c>)
 80098c2:	4a05      	ldr	r2, [pc, #20]	; (80098d8 <prvInitialiseTaskLists+0x68>)
 80098c4:	601a      	str	r2, [r3, #0]
}
 80098c6:	bf00      	nop
 80098c8:	3708      	adds	r7, #8
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	20001c24 	.word	0x20001c24
 80098d4:	20001cb0 	.word	0x20001cb0
 80098d8:	20001cc4 	.word	0x20001cc4
 80098dc:	20001ce0 	.word	0x20001ce0
 80098e0:	20001cf4 	.word	0x20001cf4
 80098e4:	20001d0c 	.word	0x20001d0c
 80098e8:	20001cd8 	.word	0x20001cd8
 80098ec:	20001cdc 	.word	0x20001cdc

080098f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098f6:	e019      	b.n	800992c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80098f8:	f000 fa18 	bl	8009d2c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80098fc:	4b0f      	ldr	r3, [pc, #60]	; (800993c <prvCheckTasksWaitingTermination+0x4c>)
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	68db      	ldr	r3, [r3, #12]
 8009902:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	3304      	adds	r3, #4
 8009908:	4618      	mov	r0, r3
 800990a:	f7ff f993 	bl	8008c34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800990e:	4b0c      	ldr	r3, [pc, #48]	; (8009940 <prvCheckTasksWaitingTermination+0x50>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	3b01      	subs	r3, #1
 8009914:	4a0a      	ldr	r2, [pc, #40]	; (8009940 <prvCheckTasksWaitingTermination+0x50>)
 8009916:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009918:	4b0a      	ldr	r3, [pc, #40]	; (8009944 <prvCheckTasksWaitingTermination+0x54>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	3b01      	subs	r3, #1
 800991e:	4a09      	ldr	r2, [pc, #36]	; (8009944 <prvCheckTasksWaitingTermination+0x54>)
 8009920:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009922:	f000 fa31 	bl	8009d88 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 f80e 	bl	8009948 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800992c:	4b05      	ldr	r3, [pc, #20]	; (8009944 <prvCheckTasksWaitingTermination+0x54>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d1e1      	bne.n	80098f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009934:	bf00      	nop
 8009936:	3708      	adds	r7, #8
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	20001cf4 	.word	0x20001cf4
 8009940:	20001d20 	.word	0x20001d20
 8009944:	20001d08 	.word	0x20001d08

08009948 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009956:	2b00      	cmp	r3, #0
 8009958:	d108      	bne.n	800996c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800995e:	4618      	mov	r0, r3
 8009960:	f000 fb82 	bl	800a068 <vPortFree>
				vPortFree( pxTCB );
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 fb7f 	bl	800a068 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800996a:	e017      	b.n	800999c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009972:	2b01      	cmp	r3, #1
 8009974:	d103      	bne.n	800997e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 fb76 	bl	800a068 <vPortFree>
	}
 800997c:	e00e      	b.n	800999c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009984:	2b02      	cmp	r3, #2
 8009986:	d009      	beq.n	800999c <prvDeleteTCB+0x54>
 8009988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998c:	f383 8811 	msr	BASEPRI, r3
 8009990:	f3bf 8f6f 	isb	sy
 8009994:	f3bf 8f4f 	dsb	sy
 8009998:	60fb      	str	r3, [r7, #12]
 800999a:	e7fe      	b.n	800999a <prvDeleteTCB+0x52>
	}
 800999c:	bf00      	nop
 800999e:	3710      	adds	r7, #16
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099aa:	4b0f      	ldr	r3, [pc, #60]	; (80099e8 <prvResetNextTaskUnblockTime+0x44>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d101      	bne.n	80099b8 <prvResetNextTaskUnblockTime+0x14>
 80099b4:	2301      	movs	r3, #1
 80099b6:	e000      	b.n	80099ba <prvResetNextTaskUnblockTime+0x16>
 80099b8:	2300      	movs	r3, #0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d004      	beq.n	80099c8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80099be:	4b0b      	ldr	r3, [pc, #44]	; (80099ec <prvResetNextTaskUnblockTime+0x48>)
 80099c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099c4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80099c6:	e008      	b.n	80099da <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80099c8:	4b07      	ldr	r3, [pc, #28]	; (80099e8 <prvResetNextTaskUnblockTime+0x44>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	4a05      	ldr	r2, [pc, #20]	; (80099ec <prvResetNextTaskUnblockTime+0x48>)
 80099d8:	6013      	str	r3, [r2, #0]
}
 80099da:	bf00      	nop
 80099dc:	370c      	adds	r7, #12
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr
 80099e6:	bf00      	nop
 80099e8:	20001cd8 	.word	0x20001cd8
 80099ec:	20001d40 	.word	0x20001d40

080099f0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80099fa:	4b29      	ldr	r3, [pc, #164]	; (8009aa0 <prvAddCurrentTaskToDelayedList+0xb0>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a00:	4b28      	ldr	r3, [pc, #160]	; (8009aa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	3304      	adds	r3, #4
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7ff f914 	bl	8008c34 <uxListRemove>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d10b      	bne.n	8009a2a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009a12:	4b24      	ldr	r3, [pc, #144]	; (8009aa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a18:	2201      	movs	r2, #1
 8009a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a1e:	43da      	mvns	r2, r3
 8009a20:	4b21      	ldr	r3, [pc, #132]	; (8009aa8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4013      	ands	r3, r2
 8009a26:	4a20      	ldr	r2, [pc, #128]	; (8009aa8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009a28:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a30:	d10a      	bne.n	8009a48 <prvAddCurrentTaskToDelayedList+0x58>
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d007      	beq.n	8009a48 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a38:	4b1a      	ldr	r3, [pc, #104]	; (8009aa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	3304      	adds	r3, #4
 8009a3e:	4619      	mov	r1, r3
 8009a40:	481a      	ldr	r0, [pc, #104]	; (8009aac <prvAddCurrentTaskToDelayedList+0xbc>)
 8009a42:	f7ff f89a 	bl	8008b7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009a46:	e026      	b.n	8009a96 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009a48:	68fa      	ldr	r2, [r7, #12]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009a50:	4b14      	ldr	r3, [pc, #80]	; (8009aa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	68ba      	ldr	r2, [r7, #8]
 8009a56:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009a58:	68ba      	ldr	r2, [r7, #8]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d209      	bcs.n	8009a74 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a60:	4b13      	ldr	r3, [pc, #76]	; (8009ab0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	4b0f      	ldr	r3, [pc, #60]	; (8009aa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	3304      	adds	r3, #4
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	4610      	mov	r0, r2
 8009a6e:	f7ff f8a8 	bl	8008bc2 <vListInsert>
}
 8009a72:	e010      	b.n	8009a96 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a74:	4b0f      	ldr	r3, [pc, #60]	; (8009ab4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	4b0a      	ldr	r3, [pc, #40]	; (8009aa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	3304      	adds	r3, #4
 8009a7e:	4619      	mov	r1, r3
 8009a80:	4610      	mov	r0, r2
 8009a82:	f7ff f89e 	bl	8008bc2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009a86:	4b0c      	ldr	r3, [pc, #48]	; (8009ab8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	68ba      	ldr	r2, [r7, #8]
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d202      	bcs.n	8009a96 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009a90:	4a09      	ldr	r2, [pc, #36]	; (8009ab8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	6013      	str	r3, [r2, #0]
}
 8009a96:	bf00      	nop
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	20001d24 	.word	0x20001d24
 8009aa4:	20001c20 	.word	0x20001c20
 8009aa8:	20001d28 	.word	0x20001d28
 8009aac:	20001d0c 	.word	0x20001d0c
 8009ab0:	20001cdc 	.word	0x20001cdc
 8009ab4:	20001cd8 	.word	0x20001cd8
 8009ab8:	20001d40 	.word	0x20001d40

08009abc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009abc:	b480      	push	{r7}
 8009abe:	b085      	sub	sp, #20
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	3b04      	subs	r3, #4
 8009acc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009ad4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	3b04      	subs	r3, #4
 8009ada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	f023 0201 	bic.w	r2, r3, #1
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	3b04      	subs	r3, #4
 8009aea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009aec:	4a0c      	ldr	r2, [pc, #48]	; (8009b20 <pxPortInitialiseStack+0x64>)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	3b14      	subs	r3, #20
 8009af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	3b04      	subs	r3, #4
 8009b02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f06f 0202 	mvn.w	r2, #2
 8009b0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	3b20      	subs	r3, #32
 8009b10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009b12:	68fb      	ldr	r3, [r7, #12]
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3714      	adds	r7, #20
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr
 8009b20:	08009b25 	.word	0x08009b25

08009b24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009b24:	b480      	push	{r7}
 8009b26:	b085      	sub	sp, #20
 8009b28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009b2e:	4b11      	ldr	r3, [pc, #68]	; (8009b74 <prvTaskExitError+0x50>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b36:	d009      	beq.n	8009b4c <prvTaskExitError+0x28>
 8009b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3c:	f383 8811 	msr	BASEPRI, r3
 8009b40:	f3bf 8f6f 	isb	sy
 8009b44:	f3bf 8f4f 	dsb	sy
 8009b48:	60fb      	str	r3, [r7, #12]
 8009b4a:	e7fe      	b.n	8009b4a <prvTaskExitError+0x26>
 8009b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b50:	f383 8811 	msr	BASEPRI, r3
 8009b54:	f3bf 8f6f 	isb	sy
 8009b58:	f3bf 8f4f 	dsb	sy
 8009b5c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009b5e:	bf00      	nop
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d0fc      	beq.n	8009b60 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009b66:	bf00      	nop
 8009b68:	3714      	adds	r7, #20
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop
 8009b74:	2000039c 	.word	0x2000039c
	...

08009b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009b80:	4b07      	ldr	r3, [pc, #28]	; (8009ba0 <pxCurrentTCBConst2>)
 8009b82:	6819      	ldr	r1, [r3, #0]
 8009b84:	6808      	ldr	r0, [r1, #0]
 8009b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b8a:	f380 8809 	msr	PSP, r0
 8009b8e:	f3bf 8f6f 	isb	sy
 8009b92:	f04f 0000 	mov.w	r0, #0
 8009b96:	f380 8811 	msr	BASEPRI, r0
 8009b9a:	4770      	bx	lr
 8009b9c:	f3af 8000 	nop.w

08009ba0 <pxCurrentTCBConst2>:
 8009ba0:	20001c20 	.word	0x20001c20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009ba4:	bf00      	nop
 8009ba6:	bf00      	nop

08009ba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009ba8:	4808      	ldr	r0, [pc, #32]	; (8009bcc <prvPortStartFirstTask+0x24>)
 8009baa:	6800      	ldr	r0, [r0, #0]
 8009bac:	6800      	ldr	r0, [r0, #0]
 8009bae:	f380 8808 	msr	MSP, r0
 8009bb2:	f04f 0000 	mov.w	r0, #0
 8009bb6:	f380 8814 	msr	CONTROL, r0
 8009bba:	b662      	cpsie	i
 8009bbc:	b661      	cpsie	f
 8009bbe:	f3bf 8f4f 	dsb	sy
 8009bc2:	f3bf 8f6f 	isb	sy
 8009bc6:	df00      	svc	0
 8009bc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009bca:	bf00      	nop
 8009bcc:	e000ed08 	.word	0xe000ed08

08009bd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b088      	sub	sp, #32
 8009bd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009bd6:	4b4c      	ldr	r3, [pc, #304]	; (8009d08 <xPortStartScheduler+0x138>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a4c      	ldr	r2, [pc, #304]	; (8009d0c <xPortStartScheduler+0x13c>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d109      	bne.n	8009bf4 <xPortStartScheduler+0x24>
 8009be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be4:	f383 8811 	msr	BASEPRI, r3
 8009be8:	f3bf 8f6f 	isb	sy
 8009bec:	f3bf 8f4f 	dsb	sy
 8009bf0:	61bb      	str	r3, [r7, #24]
 8009bf2:	e7fe      	b.n	8009bf2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009bf4:	4b44      	ldr	r3, [pc, #272]	; (8009d08 <xPortStartScheduler+0x138>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a45      	ldr	r2, [pc, #276]	; (8009d10 <xPortStartScheduler+0x140>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d109      	bne.n	8009c12 <xPortStartScheduler+0x42>
 8009bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	617b      	str	r3, [r7, #20]
 8009c10:	e7fe      	b.n	8009c10 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009c12:	4b40      	ldr	r3, [pc, #256]	; (8009d14 <xPortStartScheduler+0x144>)
 8009c14:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009c1e:	69fb      	ldr	r3, [r7, #28]
 8009c20:	22ff      	movs	r2, #255	; 0xff
 8009c22:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009c2c:	79fb      	ldrb	r3, [r7, #7]
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009c34:	b2da      	uxtb	r2, r3
 8009c36:	4b38      	ldr	r3, [pc, #224]	; (8009d18 <xPortStartScheduler+0x148>)
 8009c38:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009c3a:	4b38      	ldr	r3, [pc, #224]	; (8009d1c <xPortStartScheduler+0x14c>)
 8009c3c:	2207      	movs	r2, #7
 8009c3e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c40:	e009      	b.n	8009c56 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009c42:	4b36      	ldr	r3, [pc, #216]	; (8009d1c <xPortStartScheduler+0x14c>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	3b01      	subs	r3, #1
 8009c48:	4a34      	ldr	r2, [pc, #208]	; (8009d1c <xPortStartScheduler+0x14c>)
 8009c4a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009c4c:	79fb      	ldrb	r3, [r7, #7]
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	005b      	lsls	r3, r3, #1
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c56:	79fb      	ldrb	r3, [r7, #7]
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c5e:	2b80      	cmp	r3, #128	; 0x80
 8009c60:	d0ef      	beq.n	8009c42 <xPortStartScheduler+0x72>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8009c62:	4b2e      	ldr	r3, [pc, #184]	; (8009d1c <xPortStartScheduler+0x14c>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f1c3 0307 	rsb	r3, r3, #7
 8009c6a:	2b04      	cmp	r3, #4
 8009c6c:	d009      	beq.n	8009c82 <xPortStartScheduler+0xb2>
 8009c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c72:	f383 8811 	msr	BASEPRI, r3
 8009c76:	f3bf 8f6f 	isb	sy
 8009c7a:	f3bf 8f4f 	dsb	sy
 8009c7e:	613b      	str	r3, [r7, #16]
 8009c80:	e7fe      	b.n	8009c80 <xPortStartScheduler+0xb0>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009c82:	4b26      	ldr	r3, [pc, #152]	; (8009d1c <xPortStartScheduler+0x14c>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f1c3 0307 	rsb	r3, r3, #7
 8009c8a:	2b04      	cmp	r3, #4
 8009c8c:	d009      	beq.n	8009ca2 <xPortStartScheduler+0xd2>
 8009c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c92:	f383 8811 	msr	BASEPRI, r3
 8009c96:	f3bf 8f6f 	isb	sy
 8009c9a:	f3bf 8f4f 	dsb	sy
 8009c9e:	60fb      	str	r3, [r7, #12]
 8009ca0:	e7fe      	b.n	8009ca0 <xPortStartScheduler+0xd0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ca2:	4b1e      	ldr	r3, [pc, #120]	; (8009d1c <xPortStartScheduler+0x14c>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	021b      	lsls	r3, r3, #8
 8009ca8:	4a1c      	ldr	r2, [pc, #112]	; (8009d1c <xPortStartScheduler+0x14c>)
 8009caa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009cac:	4b1b      	ldr	r3, [pc, #108]	; (8009d1c <xPortStartScheduler+0x14c>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009cb4:	4a19      	ldr	r2, [pc, #100]	; (8009d1c <xPortStartScheduler+0x14c>)
 8009cb6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	b2da      	uxtb	r2, r3
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009cc0:	4b17      	ldr	r3, [pc, #92]	; (8009d20 <xPortStartScheduler+0x150>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a16      	ldr	r2, [pc, #88]	; (8009d20 <xPortStartScheduler+0x150>)
 8009cc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009cca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009ccc:	4b14      	ldr	r3, [pc, #80]	; (8009d20 <xPortStartScheduler+0x150>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a13      	ldr	r2, [pc, #76]	; (8009d20 <xPortStartScheduler+0x150>)
 8009cd2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009cd6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009cd8:	f000 f8d6 	bl	8009e88 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009cdc:	4b11      	ldr	r3, [pc, #68]	; (8009d24 <xPortStartScheduler+0x154>)
 8009cde:	2200      	movs	r2, #0
 8009ce0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009ce2:	f000 f8f5 	bl	8009ed0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009ce6:	4b10      	ldr	r3, [pc, #64]	; (8009d28 <xPortStartScheduler+0x158>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a0f      	ldr	r2, [pc, #60]	; (8009d28 <xPortStartScheduler+0x158>)
 8009cec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009cf0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009cf2:	f7ff ff59 	bl	8009ba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009cf6:	f7ff fcc9 	bl	800968c <vTaskSwitchContext>
	prvTaskExitError();
 8009cfa:	f7ff ff13 	bl	8009b24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009cfe:	2300      	movs	r3, #0
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3720      	adds	r7, #32
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	e000ed00 	.word	0xe000ed00
 8009d0c:	410fc271 	.word	0x410fc271
 8009d10:	410fc270 	.word	0x410fc270
 8009d14:	e000e400 	.word	0xe000e400
 8009d18:	20001d54 	.word	0x20001d54
 8009d1c:	20001d58 	.word	0x20001d58
 8009d20:	e000ed20 	.word	0xe000ed20
 8009d24:	2000039c 	.word	0x2000039c
 8009d28:	e000ef34 	.word	0xe000ef34

08009d2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d36:	f383 8811 	msr	BASEPRI, r3
 8009d3a:	f3bf 8f6f 	isb	sy
 8009d3e:	f3bf 8f4f 	dsb	sy
 8009d42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009d44:	4b0e      	ldr	r3, [pc, #56]	; (8009d80 <vPortEnterCritical+0x54>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	4a0d      	ldr	r2, [pc, #52]	; (8009d80 <vPortEnterCritical+0x54>)
 8009d4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009d4e:	4b0c      	ldr	r3, [pc, #48]	; (8009d80 <vPortEnterCritical+0x54>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d10e      	bne.n	8009d74 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009d56:	4b0b      	ldr	r3, [pc, #44]	; (8009d84 <vPortEnterCritical+0x58>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d009      	beq.n	8009d74 <vPortEnterCritical+0x48>
 8009d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d64:	f383 8811 	msr	BASEPRI, r3
 8009d68:	f3bf 8f6f 	isb	sy
 8009d6c:	f3bf 8f4f 	dsb	sy
 8009d70:	603b      	str	r3, [r7, #0]
 8009d72:	e7fe      	b.n	8009d72 <vPortEnterCritical+0x46>
	}
}
 8009d74:	bf00      	nop
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr
 8009d80:	2000039c 	.word	0x2000039c
 8009d84:	e000ed04 	.word	0xe000ed04

08009d88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009d8e:	4b11      	ldr	r3, [pc, #68]	; (8009dd4 <vPortExitCritical+0x4c>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d109      	bne.n	8009daa <vPortExitCritical+0x22>
 8009d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d9a:	f383 8811 	msr	BASEPRI, r3
 8009d9e:	f3bf 8f6f 	isb	sy
 8009da2:	f3bf 8f4f 	dsb	sy
 8009da6:	607b      	str	r3, [r7, #4]
 8009da8:	e7fe      	b.n	8009da8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009daa:	4b0a      	ldr	r3, [pc, #40]	; (8009dd4 <vPortExitCritical+0x4c>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	3b01      	subs	r3, #1
 8009db0:	4a08      	ldr	r2, [pc, #32]	; (8009dd4 <vPortExitCritical+0x4c>)
 8009db2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009db4:	4b07      	ldr	r3, [pc, #28]	; (8009dd4 <vPortExitCritical+0x4c>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d104      	bne.n	8009dc6 <vPortExitCritical+0x3e>
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009dc6:	bf00      	nop
 8009dc8:	370c      	adds	r7, #12
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop
 8009dd4:	2000039c 	.word	0x2000039c
	...

08009de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009de0:	f3ef 8009 	mrs	r0, PSP
 8009de4:	f3bf 8f6f 	isb	sy
 8009de8:	4b15      	ldr	r3, [pc, #84]	; (8009e40 <pxCurrentTCBConst>)
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	f01e 0f10 	tst.w	lr, #16
 8009df0:	bf08      	it	eq
 8009df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dfa:	6010      	str	r0, [r2, #0]
 8009dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009e00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009e04:	f380 8811 	msr	BASEPRI, r0
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	f3bf 8f6f 	isb	sy
 8009e10:	f7ff fc3c 	bl	800968c <vTaskSwitchContext>
 8009e14:	f04f 0000 	mov.w	r0, #0
 8009e18:	f380 8811 	msr	BASEPRI, r0
 8009e1c:	bc09      	pop	{r0, r3}
 8009e1e:	6819      	ldr	r1, [r3, #0]
 8009e20:	6808      	ldr	r0, [r1, #0]
 8009e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e26:	f01e 0f10 	tst.w	lr, #16
 8009e2a:	bf08      	it	eq
 8009e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009e30:	f380 8809 	msr	PSP, r0
 8009e34:	f3bf 8f6f 	isb	sy
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	f3af 8000 	nop.w

08009e40 <pxCurrentTCBConst>:
 8009e40:	20001c20 	.word	0x20001c20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009e44:	bf00      	nop
 8009e46:	bf00      	nop

08009e48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e52:	f383 8811 	msr	BASEPRI, r3
 8009e56:	f3bf 8f6f 	isb	sy
 8009e5a:	f3bf 8f4f 	dsb	sy
 8009e5e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009e60:	f7ff fb58 	bl	8009514 <xTaskIncrementTick>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d003      	beq.n	8009e72 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009e6a:	4b06      	ldr	r3, [pc, #24]	; (8009e84 <SysTick_Handler+0x3c>)
 8009e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e70:	601a      	str	r2, [r3, #0]
 8009e72:	2300      	movs	r3, #0
 8009e74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009e7c:	bf00      	nop
 8009e7e:	3708      	adds	r7, #8
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	e000ed04 	.word	0xe000ed04

08009e88 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009e88:	b480      	push	{r7}
 8009e8a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e8c:	4b0b      	ldr	r3, [pc, #44]	; (8009ebc <vPortSetupTimerInterrupt+0x34>)
 8009e8e:	2200      	movs	r2, #0
 8009e90:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009e92:	4b0b      	ldr	r3, [pc, #44]	; (8009ec0 <vPortSetupTimerInterrupt+0x38>)
 8009e94:	2200      	movs	r2, #0
 8009e96:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e98:	4b0a      	ldr	r3, [pc, #40]	; (8009ec4 <vPortSetupTimerInterrupt+0x3c>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a0a      	ldr	r2, [pc, #40]	; (8009ec8 <vPortSetupTimerInterrupt+0x40>)
 8009e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8009ea2:	099b      	lsrs	r3, r3, #6
 8009ea4:	4a09      	ldr	r2, [pc, #36]	; (8009ecc <vPortSetupTimerInterrupt+0x44>)
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009eaa:	4b04      	ldr	r3, [pc, #16]	; (8009ebc <vPortSetupTimerInterrupt+0x34>)
 8009eac:	2207      	movs	r2, #7
 8009eae:	601a      	str	r2, [r3, #0]
}
 8009eb0:	bf00      	nop
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	e000e010 	.word	0xe000e010
 8009ec0:	e000e018 	.word	0xe000e018
 8009ec4:	20000390 	.word	0x20000390
 8009ec8:	10624dd3 	.word	0x10624dd3
 8009ecc:	e000e014 	.word	0xe000e014

08009ed0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ed0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009ee0 <vPortEnableVFP+0x10>
 8009ed4:	6801      	ldr	r1, [r0, #0]
 8009ed6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009eda:	6001      	str	r1, [r0, #0]
 8009edc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009ede:	bf00      	nop
 8009ee0:	e000ed88 	.word	0xe000ed88

08009ee4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b08a      	sub	sp, #40	; 0x28
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009eec:	2300      	movs	r3, #0
 8009eee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009ef0:	f7ff fa66 	bl	80093c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ef4:	4b57      	ldr	r3, [pc, #348]	; (800a054 <pvPortMalloc+0x170>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d101      	bne.n	8009f00 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009efc:	f000 f90c 	bl	800a118 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009f00:	4b55      	ldr	r3, [pc, #340]	; (800a058 <pvPortMalloc+0x174>)
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	4013      	ands	r3, r2
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f040 808c 	bne.w	800a026 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d01c      	beq.n	8009f4e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009f14:	2208      	movs	r2, #8
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	4413      	add	r3, r2
 8009f1a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f003 0307 	and.w	r3, r3, #7
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d013      	beq.n	8009f4e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f023 0307 	bic.w	r3, r3, #7
 8009f2c:	3308      	adds	r3, #8
 8009f2e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f003 0307 	and.w	r3, r3, #7
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d009      	beq.n	8009f4e <pvPortMalloc+0x6a>
	__asm volatile
 8009f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3e:	f383 8811 	msr	BASEPRI, r3
 8009f42:	f3bf 8f6f 	isb	sy
 8009f46:	f3bf 8f4f 	dsb	sy
 8009f4a:	617b      	str	r3, [r7, #20]
 8009f4c:	e7fe      	b.n	8009f4c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d068      	beq.n	800a026 <pvPortMalloc+0x142>
 8009f54:	4b41      	ldr	r3, [pc, #260]	; (800a05c <pvPortMalloc+0x178>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d863      	bhi.n	800a026 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009f5e:	4b40      	ldr	r3, [pc, #256]	; (800a060 <pvPortMalloc+0x17c>)
 8009f60:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009f62:	4b3f      	ldr	r3, [pc, #252]	; (800a060 <pvPortMalloc+0x17c>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f68:	e004      	b.n	8009f74 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d903      	bls.n	8009f86 <pvPortMalloc+0xa2>
 8009f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d1f1      	bne.n	8009f6a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009f86:	4b33      	ldr	r3, [pc, #204]	; (800a054 <pvPortMalloc+0x170>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d04a      	beq.n	800a026 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009f90:	6a3b      	ldr	r3, [r7, #32]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2208      	movs	r2, #8
 8009f96:	4413      	add	r3, r2
 8009f98:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	6a3b      	ldr	r3, [r7, #32]
 8009fa0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa4:	685a      	ldr	r2, [r3, #4]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	1ad2      	subs	r2, r2, r3
 8009faa:	2308      	movs	r3, #8
 8009fac:	005b      	lsls	r3, r3, #1
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d91e      	bls.n	8009ff0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	4413      	add	r3, r2
 8009fb8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	f003 0307 	and.w	r3, r3, #7
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d009      	beq.n	8009fd8 <pvPortMalloc+0xf4>
 8009fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc8:	f383 8811 	msr	BASEPRI, r3
 8009fcc:	f3bf 8f6f 	isb	sy
 8009fd0:	f3bf 8f4f 	dsb	sy
 8009fd4:	613b      	str	r3, [r7, #16]
 8009fd6:	e7fe      	b.n	8009fd6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fda:	685a      	ldr	r2, [r3, #4]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	1ad2      	subs	r2, r2, r3
 8009fe0:	69bb      	ldr	r3, [r7, #24]
 8009fe2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009fea:	69b8      	ldr	r0, [r7, #24]
 8009fec:	f000 f8f8 	bl	800a1e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ff0:	4b1a      	ldr	r3, [pc, #104]	; (800a05c <pvPortMalloc+0x178>)
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	1ad3      	subs	r3, r2, r3
 8009ffa:	4a18      	ldr	r2, [pc, #96]	; (800a05c <pvPortMalloc+0x178>)
 8009ffc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009ffe:	4b17      	ldr	r3, [pc, #92]	; (800a05c <pvPortMalloc+0x178>)
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	4b18      	ldr	r3, [pc, #96]	; (800a064 <pvPortMalloc+0x180>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	429a      	cmp	r2, r3
 800a008:	d203      	bcs.n	800a012 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a00a:	4b14      	ldr	r3, [pc, #80]	; (800a05c <pvPortMalloc+0x178>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a15      	ldr	r2, [pc, #84]	; (800a064 <pvPortMalloc+0x180>)
 800a010:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a014:	685a      	ldr	r2, [r3, #4]
 800a016:	4b10      	ldr	r3, [pc, #64]	; (800a058 <pvPortMalloc+0x174>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	431a      	orrs	r2, r3
 800a01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a022:	2200      	movs	r2, #0
 800a024:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a026:	f7ff f9d9 	bl	80093dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a02a:	69fb      	ldr	r3, [r7, #28]
 800a02c:	f003 0307 	and.w	r3, r3, #7
 800a030:	2b00      	cmp	r3, #0
 800a032:	d009      	beq.n	800a048 <pvPortMalloc+0x164>
 800a034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a038:	f383 8811 	msr	BASEPRI, r3
 800a03c:	f3bf 8f6f 	isb	sy
 800a040:	f3bf 8f4f 	dsb	sy
 800a044:	60fb      	str	r3, [r7, #12]
 800a046:	e7fe      	b.n	800a046 <pvPortMalloc+0x162>
	return pvReturn;
 800a048:	69fb      	ldr	r3, [r7, #28]
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3728      	adds	r7, #40	; 0x28
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	2001a404 	.word	0x2001a404
 800a058:	2001a410 	.word	0x2001a410
 800a05c:	2001a408 	.word	0x2001a408
 800a060:	2001a3fc 	.word	0x2001a3fc
 800a064:	2001a40c 	.word	0x2001a40c

0800a068 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b086      	sub	sp, #24
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d046      	beq.n	800a108 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a07a:	2308      	movs	r3, #8
 800a07c:	425b      	negs	r3, r3
 800a07e:	697a      	ldr	r2, [r7, #20]
 800a080:	4413      	add	r3, r2
 800a082:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	685a      	ldr	r2, [r3, #4]
 800a08c:	4b20      	ldr	r3, [pc, #128]	; (800a110 <vPortFree+0xa8>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4013      	ands	r3, r2
 800a092:	2b00      	cmp	r3, #0
 800a094:	d109      	bne.n	800a0aa <vPortFree+0x42>
 800a096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09a:	f383 8811 	msr	BASEPRI, r3
 800a09e:	f3bf 8f6f 	isb	sy
 800a0a2:	f3bf 8f4f 	dsb	sy
 800a0a6:	60fb      	str	r3, [r7, #12]
 800a0a8:	e7fe      	b.n	800a0a8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d009      	beq.n	800a0c6 <vPortFree+0x5e>
 800a0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b6:	f383 8811 	msr	BASEPRI, r3
 800a0ba:	f3bf 8f6f 	isb	sy
 800a0be:	f3bf 8f4f 	dsb	sy
 800a0c2:	60bb      	str	r3, [r7, #8]
 800a0c4:	e7fe      	b.n	800a0c4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	685a      	ldr	r2, [r3, #4]
 800a0ca:	4b11      	ldr	r3, [pc, #68]	; (800a110 <vPortFree+0xa8>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4013      	ands	r3, r2
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d019      	beq.n	800a108 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d115      	bne.n	800a108 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	685a      	ldr	r2, [r3, #4]
 800a0e0:	4b0b      	ldr	r3, [pc, #44]	; (800a110 <vPortFree+0xa8>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	43db      	mvns	r3, r3
 800a0e6:	401a      	ands	r2, r3
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a0ec:	f7ff f968 	bl	80093c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	685a      	ldr	r2, [r3, #4]
 800a0f4:	4b07      	ldr	r3, [pc, #28]	; (800a114 <vPortFree+0xac>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4413      	add	r3, r2
 800a0fa:	4a06      	ldr	r2, [pc, #24]	; (800a114 <vPortFree+0xac>)
 800a0fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a0fe:	6938      	ldr	r0, [r7, #16]
 800a100:	f000 f86e 	bl	800a1e0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a104:	f7ff f96a 	bl	80093dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a108:	bf00      	nop
 800a10a:	3718      	adds	r7, #24
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}
 800a110:	2001a410 	.word	0x2001a410
 800a114:	2001a408 	.word	0x2001a408

0800a118 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a118:	b480      	push	{r7}
 800a11a:	b085      	sub	sp, #20
 800a11c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a11e:	4b29      	ldr	r3, [pc, #164]	; (800a1c4 <prvHeapInit+0xac>)
 800a120:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a122:	4b29      	ldr	r3, [pc, #164]	; (800a1c8 <prvHeapInit+0xb0>)
 800a124:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f003 0307 	and.w	r3, r3, #7
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00c      	beq.n	800a14a <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	3307      	adds	r3, #7
 800a134:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f023 0307 	bic.w	r3, r3, #7
 800a13c:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a13e:	68ba      	ldr	r2, [r7, #8]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	1ad3      	subs	r3, r2, r3
 800a144:	4a20      	ldr	r2, [pc, #128]	; (800a1c8 <prvHeapInit+0xb0>)
 800a146:	4413      	add	r3, r2
 800a148:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a14e:	4a1f      	ldr	r2, [pc, #124]	; (800a1cc <prvHeapInit+0xb4>)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a154:	4b1d      	ldr	r3, [pc, #116]	; (800a1cc <prvHeapInit+0xb4>)
 800a156:	2200      	movs	r2, #0
 800a158:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	68ba      	ldr	r2, [r7, #8]
 800a15e:	4413      	add	r3, r2
 800a160:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a162:	2208      	movs	r2, #8
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	1a9b      	subs	r3, r3, r2
 800a168:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f023 0307 	bic.w	r3, r3, #7
 800a170:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	4a16      	ldr	r2, [pc, #88]	; (800a1d0 <prvHeapInit+0xb8>)
 800a176:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a178:	4b15      	ldr	r3, [pc, #84]	; (800a1d0 <prvHeapInit+0xb8>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	2200      	movs	r2, #0
 800a17e:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a180:	4b13      	ldr	r3, [pc, #76]	; (800a1d0 <prvHeapInit+0xb8>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2200      	movs	r2, #0
 800a186:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	68fa      	ldr	r2, [r7, #12]
 800a190:	1ad2      	subs	r2, r2, r3
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a196:	4b0e      	ldr	r3, [pc, #56]	; (800a1d0 <prvHeapInit+0xb8>)
 800a198:	681a      	ldr	r2, [r3, #0]
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	4a0c      	ldr	r2, [pc, #48]	; (800a1d4 <prvHeapInit+0xbc>)
 800a1a4:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	4a0b      	ldr	r2, [pc, #44]	; (800a1d8 <prvHeapInit+0xc0>)
 800a1ac:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a1ae:	4b0b      	ldr	r3, [pc, #44]	; (800a1dc <prvHeapInit+0xc4>)
 800a1b0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a1b4:	601a      	str	r2, [r3, #0]
}
 800a1b6:	bf00      	nop
 800a1b8:	3714      	adds	r7, #20
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr
 800a1c2:	bf00      	nop
 800a1c4:	000186a0 	.word	0x000186a0
 800a1c8:	20001d5c 	.word	0x20001d5c
 800a1cc:	2001a3fc 	.word	0x2001a3fc
 800a1d0:	2001a404 	.word	0x2001a404
 800a1d4:	2001a40c 	.word	0x2001a40c
 800a1d8:	2001a408 	.word	0x2001a408
 800a1dc:	2001a410 	.word	0x2001a410

0800a1e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b085      	sub	sp, #20
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a1e8:	4b28      	ldr	r3, [pc, #160]	; (800a28c <prvInsertBlockIntoFreeList+0xac>)
 800a1ea:	60fb      	str	r3, [r7, #12]
 800a1ec:	e002      	b.n	800a1f4 <prvInsertBlockIntoFreeList+0x14>
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	60fb      	str	r3, [r7, #12]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d8f7      	bhi.n	800a1ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	68ba      	ldr	r2, [r7, #8]
 800a208:	4413      	add	r3, r2
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d108      	bne.n	800a222 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	685a      	ldr	r2, [r3, #4]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	441a      	add	r2, r3
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	68ba      	ldr	r2, [r7, #8]
 800a22c:	441a      	add	r2, r3
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	429a      	cmp	r2, r3
 800a234:	d118      	bne.n	800a268 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	4b15      	ldr	r3, [pc, #84]	; (800a290 <prvInsertBlockIntoFreeList+0xb0>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d00d      	beq.n	800a25e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	685a      	ldr	r2, [r3, #4]
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	441a      	add	r2, r3
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	601a      	str	r2, [r3, #0]
 800a25c:	e008      	b.n	800a270 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a25e:	4b0c      	ldr	r3, [pc, #48]	; (800a290 <prvInsertBlockIntoFreeList+0xb0>)
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	601a      	str	r2, [r3, #0]
 800a266:	e003      	b.n	800a270 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a270:	68fa      	ldr	r2, [r7, #12]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	429a      	cmp	r2, r3
 800a276:	d002      	beq.n	800a27e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a27e:	bf00      	nop
 800a280:	3714      	adds	r7, #20
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop
 800a28c:	2001a3fc 	.word	0x2001a3fc
 800a290:	2001a404 	.word	0x2001a404

0800a294 <_ZdlPvj>:
 800a294:	f000 b800 	b.w	800a298 <_ZdlPv>

0800a298 <_ZdlPv>:
 800a298:	f000 b824 	b.w	800a2e4 <free>

0800a29c <__libc_init_array>:
 800a29c:	b570      	push	{r4, r5, r6, lr}
 800a29e:	4e0d      	ldr	r6, [pc, #52]	; (800a2d4 <__libc_init_array+0x38>)
 800a2a0:	4c0d      	ldr	r4, [pc, #52]	; (800a2d8 <__libc_init_array+0x3c>)
 800a2a2:	1ba4      	subs	r4, r4, r6
 800a2a4:	10a4      	asrs	r4, r4, #2
 800a2a6:	2500      	movs	r5, #0
 800a2a8:	42a5      	cmp	r5, r4
 800a2aa:	d109      	bne.n	800a2c0 <__libc_init_array+0x24>
 800a2ac:	4e0b      	ldr	r6, [pc, #44]	; (800a2dc <__libc_init_array+0x40>)
 800a2ae:	4c0c      	ldr	r4, [pc, #48]	; (800a2e0 <__libc_init_array+0x44>)
 800a2b0:	f000 f884 	bl	800a3bc <_init>
 800a2b4:	1ba4      	subs	r4, r4, r6
 800a2b6:	10a4      	asrs	r4, r4, #2
 800a2b8:	2500      	movs	r5, #0
 800a2ba:	42a5      	cmp	r5, r4
 800a2bc:	d105      	bne.n	800a2ca <__libc_init_array+0x2e>
 800a2be:	bd70      	pop	{r4, r5, r6, pc}
 800a2c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a2c4:	4798      	blx	r3
 800a2c6:	3501      	adds	r5, #1
 800a2c8:	e7ee      	b.n	800a2a8 <__libc_init_array+0xc>
 800a2ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a2ce:	4798      	blx	r3
 800a2d0:	3501      	adds	r5, #1
 800a2d2:	e7f2      	b.n	800a2ba <__libc_init_array+0x1e>
 800a2d4:	0800a540 	.word	0x0800a540
 800a2d8:	0800a540 	.word	0x0800a540
 800a2dc:	0800a540 	.word	0x0800a540
 800a2e0:	0800a548 	.word	0x0800a548

0800a2e4 <free>:
 800a2e4:	4b02      	ldr	r3, [pc, #8]	; (800a2f0 <free+0xc>)
 800a2e6:	4601      	mov	r1, r0
 800a2e8:	6818      	ldr	r0, [r3, #0]
 800a2ea:	f000 b817 	b.w	800a31c <_free_r>
 800a2ee:	bf00      	nop
 800a2f0:	200003a0 	.word	0x200003a0

0800a2f4 <memcpy>:
 800a2f4:	b510      	push	{r4, lr}
 800a2f6:	1e43      	subs	r3, r0, #1
 800a2f8:	440a      	add	r2, r1
 800a2fa:	4291      	cmp	r1, r2
 800a2fc:	d100      	bne.n	800a300 <memcpy+0xc>
 800a2fe:	bd10      	pop	{r4, pc}
 800a300:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a304:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a308:	e7f7      	b.n	800a2fa <memcpy+0x6>

0800a30a <memset>:
 800a30a:	4402      	add	r2, r0
 800a30c:	4603      	mov	r3, r0
 800a30e:	4293      	cmp	r3, r2
 800a310:	d100      	bne.n	800a314 <memset+0xa>
 800a312:	4770      	bx	lr
 800a314:	f803 1b01 	strb.w	r1, [r3], #1
 800a318:	e7f9      	b.n	800a30e <memset+0x4>
	...

0800a31c <_free_r>:
 800a31c:	b538      	push	{r3, r4, r5, lr}
 800a31e:	4605      	mov	r5, r0
 800a320:	2900      	cmp	r1, #0
 800a322:	d045      	beq.n	800a3b0 <_free_r+0x94>
 800a324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a328:	1f0c      	subs	r4, r1, #4
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	bfb8      	it	lt
 800a32e:	18e4      	addlt	r4, r4, r3
 800a330:	f000 f842 	bl	800a3b8 <__malloc_lock>
 800a334:	4a1f      	ldr	r2, [pc, #124]	; (800a3b4 <_free_r+0x98>)
 800a336:	6813      	ldr	r3, [r2, #0]
 800a338:	4610      	mov	r0, r2
 800a33a:	b933      	cbnz	r3, 800a34a <_free_r+0x2e>
 800a33c:	6063      	str	r3, [r4, #4]
 800a33e:	6014      	str	r4, [r2, #0]
 800a340:	4628      	mov	r0, r5
 800a342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a346:	f000 b838 	b.w	800a3ba <__malloc_unlock>
 800a34a:	42a3      	cmp	r3, r4
 800a34c:	d90c      	bls.n	800a368 <_free_r+0x4c>
 800a34e:	6821      	ldr	r1, [r4, #0]
 800a350:	1862      	adds	r2, r4, r1
 800a352:	4293      	cmp	r3, r2
 800a354:	bf04      	itt	eq
 800a356:	681a      	ldreq	r2, [r3, #0]
 800a358:	685b      	ldreq	r3, [r3, #4]
 800a35a:	6063      	str	r3, [r4, #4]
 800a35c:	bf04      	itt	eq
 800a35e:	1852      	addeq	r2, r2, r1
 800a360:	6022      	streq	r2, [r4, #0]
 800a362:	6004      	str	r4, [r0, #0]
 800a364:	e7ec      	b.n	800a340 <_free_r+0x24>
 800a366:	4613      	mov	r3, r2
 800a368:	685a      	ldr	r2, [r3, #4]
 800a36a:	b10a      	cbz	r2, 800a370 <_free_r+0x54>
 800a36c:	42a2      	cmp	r2, r4
 800a36e:	d9fa      	bls.n	800a366 <_free_r+0x4a>
 800a370:	6819      	ldr	r1, [r3, #0]
 800a372:	1858      	adds	r0, r3, r1
 800a374:	42a0      	cmp	r0, r4
 800a376:	d10b      	bne.n	800a390 <_free_r+0x74>
 800a378:	6820      	ldr	r0, [r4, #0]
 800a37a:	4401      	add	r1, r0
 800a37c:	1858      	adds	r0, r3, r1
 800a37e:	4282      	cmp	r2, r0
 800a380:	6019      	str	r1, [r3, #0]
 800a382:	d1dd      	bne.n	800a340 <_free_r+0x24>
 800a384:	6810      	ldr	r0, [r2, #0]
 800a386:	6852      	ldr	r2, [r2, #4]
 800a388:	605a      	str	r2, [r3, #4]
 800a38a:	4401      	add	r1, r0
 800a38c:	6019      	str	r1, [r3, #0]
 800a38e:	e7d7      	b.n	800a340 <_free_r+0x24>
 800a390:	d902      	bls.n	800a398 <_free_r+0x7c>
 800a392:	230c      	movs	r3, #12
 800a394:	602b      	str	r3, [r5, #0]
 800a396:	e7d3      	b.n	800a340 <_free_r+0x24>
 800a398:	6820      	ldr	r0, [r4, #0]
 800a39a:	1821      	adds	r1, r4, r0
 800a39c:	428a      	cmp	r2, r1
 800a39e:	bf04      	itt	eq
 800a3a0:	6811      	ldreq	r1, [r2, #0]
 800a3a2:	6852      	ldreq	r2, [r2, #4]
 800a3a4:	6062      	str	r2, [r4, #4]
 800a3a6:	bf04      	itt	eq
 800a3a8:	1809      	addeq	r1, r1, r0
 800a3aa:	6021      	streq	r1, [r4, #0]
 800a3ac:	605c      	str	r4, [r3, #4]
 800a3ae:	e7c7      	b.n	800a340 <_free_r+0x24>
 800a3b0:	bd38      	pop	{r3, r4, r5, pc}
 800a3b2:	bf00      	nop
 800a3b4:	2001a414 	.word	0x2001a414

0800a3b8 <__malloc_lock>:
 800a3b8:	4770      	bx	lr

0800a3ba <__malloc_unlock>:
 800a3ba:	4770      	bx	lr

0800a3bc <_init>:
 800a3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3be:	bf00      	nop
 800a3c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3c2:	bc08      	pop	{r3}
 800a3c4:	469e      	mov	lr, r3
 800a3c6:	4770      	bx	lr

0800a3c8 <_fini>:
 800a3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ca:	bf00      	nop
 800a3cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3ce:	bc08      	pop	{r3}
 800a3d0:	469e      	mov	lr, r3
 800a3d2:	4770      	bx	lr
