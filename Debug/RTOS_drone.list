
RTOS_drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b734  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  0800b8c8  0800b8c8  0001b8c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba5c  0800ba5c  00020578  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba5c  0800ba5c  0001ba5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba64  0800ba64  00020578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ba64  0800ba64  0001ba64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800ba6c  0800ba6c  0001ba6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000578  20000000  0800ba74  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a3b4  20000578  0800bfec  00020578  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2001a92c  0800bfec  0002a92c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020578  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fd7a  00000000  00000000  000205a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003cba  00000000  00000000  00040322  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018f8  00000000  00000000  00043fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017a0  00000000  00000000  000458d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024c96  00000000  00000000  00047078  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001356a  00000000  00000000  0006bd0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce412  00000000  00000000  0007f278  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014d68a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007090  00000000  00000000  0014d708  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000578 	.word	0x20000578
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b8ac 	.word	0x0800b8ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000057c 	.word	0x2000057c
 80001cc:	0800b8ac 	.word	0x0800b8ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2iz>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d215      	bcs.n	8000aee <__aeabi_d2iz+0x36>
 8000ac2:	d511      	bpl.n	8000ae8 <__aeabi_d2iz+0x30>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d912      	bls.n	8000af4 <__aeabi_d2iz+0x3c>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d105      	bne.n	8000b00 <__aeabi_d2iz+0x48>
 8000af4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	bf08      	it	eq
 8000afa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_d2uiz>:
 8000b08:	004a      	lsls	r2, r1, #1
 8000b0a:	d211      	bcs.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d211      	bcs.n	8000b36 <__aeabi_d2uiz+0x2e>
 8000b12:	d50d      	bpl.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d40e      	bmi.n	8000b3c <__aeabi_d2uiz+0x34>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_d2uiz+0x3a>
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0000 	mov.w	r0, #0
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b972 	b.w	8000ee4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4688      	mov	r8, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14b      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4615      	mov	r5, r2
 8000c2a:	d967      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0720 	rsb	r7, r2, #32
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c3e:	4095      	lsls	r5, r2
 8000c40:	ea47 0803 	orr.w	r8, r7, r3
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c50:	fa1f fc85 	uxth.w	ip, r5
 8000c54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18eb      	adds	r3, r5, r3
 8000c66:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c6a:	f080 811b 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8118 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000c74:	3f02      	subs	r7, #2
 8000c76:	442b      	add	r3, r5
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8c:	45a4      	cmp	ip, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	192c      	adds	r4, r5, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	442c      	add	r4, r5
 8000ca4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca8:	eba4 040c 	sub.w	r4, r4, ip
 8000cac:	2700      	movs	r7, #0
 8000cae:	b11e      	cbz	r6, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0xbe>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80eb 	beq.w	8000e9e <__udivmoddi4+0x286>
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e9c6 0100 	strd	r0, r1, [r6]
 8000cce:	4638      	mov	r0, r7
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f783 	clz	r7, r3
 8000cda:	2f00      	cmp	r7, #0
 8000cdc:	d147      	bne.n	8000d6e <__udivmoddi4+0x156>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xd0>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80fa 	bhi.w	8000edc <__udivmoddi4+0x2c4>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0303 	sbc.w	r3, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d0e0      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000cf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cfa:	e7dd      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000cfc:	b902      	cbnz	r2, 8000d00 <__udivmoddi4+0xe8>
 8000cfe:	deff      	udf	#255	; 0xff
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f040 808f 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d0a:	1b49      	subs	r1, r1, r5
 8000d0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d10:	fa1f f885 	uxth.w	r8, r5
 8000d14:	2701      	movs	r7, #1
 8000d16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d24:	fb08 f10c 	mul.w	r1, r8, ip
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2c:	18eb      	adds	r3, r5, r3
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x14c>
 8000d54:	192c      	adds	r4, r5, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x14a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80b6 	bhi.w	8000ece <__udivmoddi4+0x2b6>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e79f      	b.n	8000cae <__udivmoddi4+0x96>
 8000d6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d72:	40bb      	lsls	r3, r7
 8000d74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d8c:	4325      	orrs	r5, r4
 8000d8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d92:	0c2c      	lsrs	r4, r5, #16
 8000d94:	fb08 3319 	mls	r3, r8, r9, r3
 8000d98:	fa1f fa8e 	uxth.w	sl, lr
 8000d9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000da0:	fb09 f40a 	mul.w	r4, r9, sl
 8000da4:	429c      	cmp	r4, r3
 8000da6:	fa02 f207 	lsl.w	r2, r2, r7
 8000daa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1e 0303 	adds.w	r3, lr, r3
 8000db4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000db8:	f080 8087 	bcs.w	8000eca <__udivmoddi4+0x2b2>
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	f240 8084 	bls.w	8000eca <__udivmoddi4+0x2b2>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	4473      	add	r3, lr
 8000dc8:	1b1b      	subs	r3, r3, r4
 8000dca:	b2ad      	uxth	r5, r5
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ddc:	45a2      	cmp	sl, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1e 0404 	adds.w	r4, lr, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de8:	d26b      	bcs.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dea:	45a2      	cmp	sl, r4
 8000dec:	d969      	bls.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4474      	add	r4, lr
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfa:	eba4 040a 	sub.w	r4, r4, sl
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c2      	mov	sl, r8
 8000e02:	464b      	mov	r3, r9
 8000e04:	d354      	bcc.n	8000eb0 <__udivmoddi4+0x298>
 8000e06:	d051      	beq.n	8000eac <__udivmoddi4+0x294>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d069      	beq.n	8000ee0 <__udivmoddi4+0x2c8>
 8000e0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e10:	eb64 0403 	sbc.w	r4, r4, r3
 8000e14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	40fc      	lsrs	r4, r7
 8000e1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e20:	e9c6 5400 	strd	r5, r4, [r6]
 8000e24:	2700      	movs	r7, #0
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e30:	4095      	lsls	r5, r2
 8000e32:	fa01 f002 	lsl.w	r0, r1, r2
 8000e36:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e3e:	4338      	orrs	r0, r7
 8000e40:	0c01      	lsrs	r1, r0, #16
 8000e42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e46:	fa1f f885 	uxth.w	r8, r5
 8000e4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb07 f308 	mul.w	r3, r7, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x256>
 8000e5e:	1869      	adds	r1, r5, r1
 8000e60:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e64:	d22f      	bcs.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d92d      	bls.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e6a:	3f02      	subs	r7, #2
 8000e6c:	4429      	add	r1, r5
 8000e6e:	1acb      	subs	r3, r1, r3
 8000e70:	b281      	uxth	r1, r0
 8000e72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb00 f308 	mul.w	r3, r0, r8
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x27e>
 8000e86:	1869      	adds	r1, r5, r1
 8000e88:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e8c:	d217      	bcs.n	8000ebe <__udivmoddi4+0x2a6>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d915      	bls.n	8000ebe <__udivmoddi4+0x2a6>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4429      	add	r1, r5
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e9c:	e73b      	b.n	8000d16 <__udivmoddi4+0xfe>
 8000e9e:	4637      	mov	r7, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e709      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	e6e7      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000eac:	4541      	cmp	r1, r8
 8000eae:	d2ab      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb8:	3801      	subs	r0, #1
 8000eba:	4613      	mov	r3, r2
 8000ebc:	e7a4      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ebe:	4660      	mov	r0, ip
 8000ec0:	e7e9      	b.n	8000e96 <__udivmoddi4+0x27e>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	e795      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec6:	4667      	mov	r7, ip
 8000ec8:	e7d1      	b.n	8000e6e <__udivmoddi4+0x256>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e77c      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	442c      	add	r4, r5
 8000ed2:	e747      	b.n	8000d64 <__udivmoddi4+0x14c>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	442b      	add	r3, r5
 8000eda:	e72f      	b.n	8000d3c <__udivmoddi4+0x124>
 8000edc:	4638      	mov	r0, r7
 8000ede:	e708      	b.n	8000cf2 <__udivmoddi4+0xda>
 8000ee0:	4637      	mov	r7, r6
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0xa0>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ef8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	4a06      	ldr	r2, [pc, #24]	; (8000f18 <vApplicationGetIdleTaskMemory+0x30>)
 8000efe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2280      	movs	r2, #128	; 0x80
 8000f04:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000f06:	bf00      	nop
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000594 	.word	0x20000594
 8000f18:	200005f4 	.word	0x200005f4

08000f1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_I2C1_Init+0x4c>)
 8000f22:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <MX_I2C1_Init+0x50>)
 8000f24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <MX_I2C1_Init+0x4c>)
 8000f28:	4a11      	ldr	r2, [pc, #68]	; (8000f70 <MX_I2C1_Init+0x54>)
 8000f2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_I2C1_Init+0x4c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <MX_I2C1_Init+0x4c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <MX_I2C1_Init+0x4c>)
 8000f3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_I2C1_Init+0x4c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <MX_I2C1_Init+0x4c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_I2C1_Init+0x4c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f52:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <MX_I2C1_Init+0x4c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f58:	4803      	ldr	r0, [pc, #12]	; (8000f68 <MX_I2C1_Init+0x4c>)
 8000f5a:	f004 fffb 	bl	8005f54 <HAL_I2C_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200007f4 	.word	0x200007f4
 8000f6c:	40005400 	.word	0x40005400
 8000f70:	00061a80 	.word	0x00061a80

08000f74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b096      	sub	sp, #88	; 0x58
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]
 8000fa2:	615a      	str	r2, [r3, #20]
 8000fa4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2220      	movs	r2, #32
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f00a fc25 	bl	800b7fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fb2:	4b43      	ldr	r3, [pc, #268]	; (80010c0 <MX_TIM1_Init+0x14c>)
 8000fb4:	4a43      	ldr	r2, [pc, #268]	; (80010c4 <MX_TIM1_Init+0x150>)
 8000fb6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8000fb8:	4b41      	ldr	r3, [pc, #260]	; (80010c0 <MX_TIM1_Init+0x14c>)
 8000fba:	22a7      	movs	r2, #167	; 0xa7
 8000fbc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fbe:	4b40      	ldr	r3, [pc, #256]	; (80010c0 <MX_TIM1_Init+0x14c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000fc4:	4b3e      	ldr	r3, [pc, #248]	; (80010c0 <MX_TIM1_Init+0x14c>)
 8000fc6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000fca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fcc:	4b3c      	ldr	r3, [pc, #240]	; (80010c0 <MX_TIM1_Init+0x14c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fd2:	4b3b      	ldr	r3, [pc, #236]	; (80010c0 <MX_TIM1_Init+0x14c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd8:	4b39      	ldr	r3, [pc, #228]	; (80010c0 <MX_TIM1_Init+0x14c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fde:	4838      	ldr	r0, [pc, #224]	; (80010c0 <MX_TIM1_Init+0x14c>)
 8000fe0:	f006 fcdc 	bl	800799c <HAL_TIM_Base_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
  {

  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4832      	ldr	r0, [pc, #200]	; (80010c0 <MX_TIM1_Init+0x14c>)
 8000ff6:	f006 ff85 	bl	8007f04 <HAL_TIM_ConfigClockSource>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
  {

  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ffe:	4830      	ldr	r0, [pc, #192]	; (80010c0 <MX_TIM1_Init+0x14c>)
 8001000:	f006 fd3f 	bl	8007a82 <HAL_TIM_PWM_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
  {

  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001008:	2300      	movs	r3, #0
 800100a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001010:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001014:	4619      	mov	r1, r3
 8001016:	482a      	ldr	r0, [pc, #168]	; (80010c0 <MX_TIM1_Init+0x14c>)
 8001018:	f007 fb64 	bl	80086e4 <HAL_TIMEx_MasterConfigSynchronization>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
  {

  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001020:	2360      	movs	r3, #96	; 0x60
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001028:	2300      	movs	r3, #0
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800102c:	2300      	movs	r3, #0
 800102e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001030:	2300      	movs	r3, #0
 8001032:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001034:	2300      	movs	r3, #0
 8001036:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001038:	2300      	movs	r3, #0
 800103a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800103c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001040:	2200      	movs	r2, #0
 8001042:	4619      	mov	r1, r3
 8001044:	481e      	ldr	r0, [pc, #120]	; (80010c0 <MX_TIM1_Init+0x14c>)
 8001046:	f006 fe97 	bl	8007d78 <HAL_TIM_PWM_ConfigChannel>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
  {

  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	2204      	movs	r2, #4
 8001054:	4619      	mov	r1, r3
 8001056:	481a      	ldr	r0, [pc, #104]	; (80010c0 <MX_TIM1_Init+0x14c>)
 8001058:	f006 fe8e 	bl	8007d78 <HAL_TIM_PWM_ConfigChannel>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
  {

  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001064:	2208      	movs	r2, #8
 8001066:	4619      	mov	r1, r3
 8001068:	4815      	ldr	r0, [pc, #84]	; (80010c0 <MX_TIM1_Init+0x14c>)
 800106a:	f006 fe85 	bl	8007d78 <HAL_TIM_PWM_ConfigChannel>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
  {

  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001076:	220c      	movs	r2, #12
 8001078:	4619      	mov	r1, r3
 800107a:	4811      	ldr	r0, [pc, #68]	; (80010c0 <MX_TIM1_Init+0x14c>)
 800107c:	f006 fe7c 	bl	8007d78 <HAL_TIM_PWM_ConfigChannel>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
  {

  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001084:	2300      	movs	r3, #0
 8001086:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001098:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800109c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800109e:	2300      	movs	r3, #0
 80010a0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	4619      	mov	r1, r3
 80010a6:	4806      	ldr	r0, [pc, #24]	; (80010c0 <MX_TIM1_Init+0x14c>)
 80010a8:	f007 fb98 	bl	80087dc <HAL_TIMEx_ConfigBreakDeadTime>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0

  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010b0:	4803      	ldr	r0, [pc, #12]	; (80010c0 <MX_TIM1_Init+0x14c>)
 80010b2:	f003 ff93 	bl	8004fdc <HAL_TIM_MspPostInit>

}
 80010b6:	bf00      	nop
 80010b8:	3758      	adds	r7, #88	; 0x58
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000888 	.word	0x20000888
 80010c4:	40010000 	.word	0x40010000

080010c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ce:	f107 0308 	add.w	r3, r7, #8
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010dc:	463b      	mov	r3, r7
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <MX_TIM4_Init+0x80>)
 80010e6:	4a19      	ldr	r2, [pc, #100]	; (800114c <MX_TIM4_Init+0x84>)
 80010e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 167;
 80010ea:	4b17      	ldr	r3, [pc, #92]	; (8001148 <MX_TIM4_Init+0x80>)
 80010ec:	22a7      	movs	r2, #167	; 0xa7
 80010ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f0:	4b15      	ldr	r3, [pc, #84]	; (8001148 <MX_TIM4_Init+0x80>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 80010f6:	4b14      	ldr	r3, [pc, #80]	; (8001148 <MX_TIM4_Init+0x80>)
 80010f8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80010fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <MX_TIM4_Init+0x80>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001104:	4b10      	ldr	r3, [pc, #64]	; (8001148 <MX_TIM4_Init+0x80>)
 8001106:	2200      	movs	r2, #0
 8001108:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800110a:	480f      	ldr	r0, [pc, #60]	; (8001148 <MX_TIM4_Init+0x80>)
 800110c:	f006 fc46 	bl	800799c <HAL_TIM_Base_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
  {

  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001118:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800111a:	f107 0308 	add.w	r3, r7, #8
 800111e:	4619      	mov	r1, r3
 8001120:	4809      	ldr	r0, [pc, #36]	; (8001148 <MX_TIM4_Init+0x80>)
 8001122:	f006 feef 	bl	8007f04 <HAL_TIM_ConfigClockSource>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
  {

  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800112a:	2300      	movs	r3, #0
 800112c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001132:	463b      	mov	r3, r7
 8001134:	4619      	mov	r1, r3
 8001136:	4804      	ldr	r0, [pc, #16]	; (8001148 <MX_TIM4_Init+0x80>)
 8001138:	f007 fad4 	bl	80086e4 <HAL_TIMEx_MasterConfigSynchronization>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200008c8 	.word	0x200008c8
 800114c:	40000800 	.word	0x40000800

08001150 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <MX_USART1_UART_Init+0x44>)
 8001156:	4a10      	ldr	r2, [pc, #64]	; (8001198 <MX_USART1_UART_Init+0x48>)
 8001158:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <MX_USART1_UART_Init+0x44>)
 800115c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001160:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <MX_USART1_UART_Init+0x44>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <MX_USART1_UART_Init+0x44>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <MX_USART1_UART_Init+0x44>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <MX_USART1_UART_Init+0x44>)
 8001176:	220c      	movs	r2, #12
 8001178:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <MX_USART1_UART_Init+0x44>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <MX_USART1_UART_Init+0x44>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001186:	4803      	ldr	r0, [pc, #12]	; (8001194 <MX_USART1_UART_Init+0x44>)
 8001188:	f007 fb8e 	bl	80088a8 <HAL_UART_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000908 	.word	0x20000908
 8001198:	40011000 	.word	0x40011000

0800119c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <MX_USART3_UART_Init+0x44>)
 80011a2:	4a10      	ldr	r2, [pc, #64]	; (80011e4 <MX_USART3_UART_Init+0x48>)
 80011a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <MX_USART3_UART_Init+0x44>)
 80011a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011ae:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <MX_USART3_UART_Init+0x44>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011b4:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <MX_USART3_UART_Init+0x44>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <MX_USART3_UART_Init+0x44>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011c0:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <MX_USART3_UART_Init+0x44>)
 80011c2:	220c      	movs	r2, #12
 80011c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <MX_USART3_UART_Init+0x44>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <MX_USART3_UART_Init+0x44>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011d2:	4803      	ldr	r0, [pc, #12]	; (80011e0 <MX_USART3_UART_Init+0x44>)
 80011d4:	f007 fb68 	bl	80088a8 <HAL_UART_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000848 	.word	0x20000848
 80011e4:	40004800 	.word	0x40004800

080011e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	; 0x28
 80011ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	4b3a      	ldr	r3, [pc, #232]	; (80012ec <MX_GPIO_Init+0x104>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a39      	ldr	r2, [pc, #228]	; (80012ec <MX_GPIO_Init+0x104>)
 8001208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b37      	ldr	r3, [pc, #220]	; (80012ec <MX_GPIO_Init+0x104>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	4b33      	ldr	r3, [pc, #204]	; (80012ec <MX_GPIO_Init+0x104>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a32      	ldr	r2, [pc, #200]	; (80012ec <MX_GPIO_Init+0x104>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b30      	ldr	r3, [pc, #192]	; (80012ec <MX_GPIO_Init+0x104>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	4b2c      	ldr	r3, [pc, #176]	; (80012ec <MX_GPIO_Init+0x104>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a2b      	ldr	r2, [pc, #172]	; (80012ec <MX_GPIO_Init+0x104>)
 8001240:	f043 0304 	orr.w	r3, r3, #4
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b29      	ldr	r3, [pc, #164]	; (80012ec <MX_GPIO_Init+0x104>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0304 	and.w	r3, r3, #4
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	4b25      	ldr	r3, [pc, #148]	; (80012ec <MX_GPIO_Init+0x104>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a24      	ldr	r2, [pc, #144]	; (80012ec <MX_GPIO_Init+0x104>)
 800125c:	f043 0302 	orr.w	r3, r3, #2
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b22      	ldr	r3, [pc, #136]	; (80012ec <MX_GPIO_Init+0x104>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	2110      	movs	r1, #16
 8001272:	481f      	ldr	r0, [pc, #124]	; (80012f0 <MX_GPIO_Init+0x108>)
 8001274:	f004 fe3a 	bl	8005eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	2130      	movs	r1, #48	; 0x30
 800127c:	481d      	ldr	r0, [pc, #116]	; (80012f4 <MX_GPIO_Init+0x10c>)
 800127e:	f004 fe35 	bl	8005eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	f243 0104 	movw	r1, #12292	; 0x3004
 8001288:	481b      	ldr	r0, [pc, #108]	; (80012f8 <MX_GPIO_Init+0x110>)
 800128a:	f004 fe2f 	bl	8005eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800128e:	2310      	movs	r3, #16
 8001290:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001292:	2301      	movs	r3, #1
 8001294:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4619      	mov	r1, r3
 80012a4:	4812      	ldr	r0, [pc, #72]	; (80012f0 <MX_GPIO_Init+0x108>)
 80012a6:	f004 fc87 	bl	8005bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80012aa:	2330      	movs	r3, #48	; 0x30
 80012ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	480c      	ldr	r0, [pc, #48]	; (80012f4 <MX_GPIO_Init+0x10c>)
 80012c2:	f004 fc79 	bl	8005bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13;
 80012c6:	f243 0304 	movw	r3, #12292	; 0x3004
 80012ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	4806      	ldr	r0, [pc, #24]	; (80012f8 <MX_GPIO_Init+0x110>)
 80012e0:	f004 fc6a 	bl	8005bb8 <HAL_GPIO_Init>

}
 80012e4:	bf00      	nop
 80012e6:	3728      	adds	r7, #40	; 0x28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020000 	.word	0x40020000
 80012f4:	40020800 	.word	0x40020800
 80012f8:	40020400 	.word	0x40020400

080012fc <MX_TIM7_Init>:
  */

TIM_HandleTypeDef htim7;
volatile unsigned long ulHighFrequencyTimerTicks;
static void MX_TIM7_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001302:	463b      	mov	r3, r7
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <MX_TIM7_Init+0x5c>)
 800130c:	4a13      	ldr	r2, [pc, #76]	; (800135c <MX_TIM7_Init+0x60>)
 800130e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 167;
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_TIM7_Init+0x5c>)
 8001312:	22a7      	movs	r2, #167	; 0xa7
 8001314:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <MX_TIM7_Init+0x5c>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100;
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_TIM7_Init+0x5c>)
 800131e:	2264      	movs	r2, #100	; 0x64
 8001320:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <MX_TIM7_Init+0x5c>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001328:	480b      	ldr	r0, [pc, #44]	; (8001358 <MX_TIM7_Init+0x5c>)
 800132a:	f006 fb37 	bl	800799c <HAL_TIM_Base_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
  {

  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001332:	2300      	movs	r3, #0
 8001334:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800133a:	463b      	mov	r3, r7
 800133c:	4619      	mov	r1, r3
 800133e:	4806      	ldr	r0, [pc, #24]	; (8001358 <MX_TIM7_Init+0x5c>)
 8001340:	f007 f9d0 	bl	80086e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
  {

  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8001348:	4803      	ldr	r0, [pc, #12]	; (8001358 <MX_TIM7_Init+0x5c>)
 800134a:	f006 fb76 	bl	8007a3a <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM7_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	2000094c 	.word	0x2000094c
 800135c:	40001400 	.word	0x40001400

08001360 <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	ed87 0a01 	vstr	s0, [r7, #4]
 800136a:	ed97 0a01 	vldr	s0, [r7, #4]
 800136e:	f009 ff63 	bl	800b238 <asinf>
 8001372:	eef0 7a40 	vmov.f32	s15, s0
 8001376:	eeb0 0a67 	vmov.f32	s0, s15
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	ed87 0a01 	vstr	s0, [r7, #4]
 800138a:	edc7 0a00 	vstr	s1, [r7]
 800138e:	edd7 0a00 	vldr	s1, [r7]
 8001392:	ed97 0a01 	vldr	s0, [r7, #4]
 8001396:	f009 ffa7 	bl	800b2e8 <atan2f>
 800139a:	eef0 7a40 	vmov.f32	s15, s0
 800139e:	eeb0 0a67 	vmov.f32	s0, s15
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <_Z4ftoadPci>:
	0.0000000005,		// 9
	0.00000000005		// 10
};

char * ftoa(double f, char * buf, int precision)
{
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b08b      	sub	sp, #44	; 0x2c
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	ed87 0b02 	vstr	d0, [r7, #8]
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
	char * ptr = buf;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
	char * p = ptr;
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	623b      	str	r3, [r7, #32]
	char * p1;
	char c;
	long intPart;

	// check precision bounds
	if (precision > MAX_PRECISION)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	2b0a      	cmp	r3, #10
 80013c2:	dd01      	ble.n	80013c8 <_Z4ftoadPci+0x20>
		precision = MAX_PRECISION;
 80013c4:	230a      	movs	r3, #10
 80013c6:	603b      	str	r3, [r7, #0]

	// sign stuff
	if (f < 0)
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013d4:	f7ff fb32 	bl	8000a3c <__aeabi_dcmplt>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00a      	beq.n	80013f4 <_Z4ftoadPci+0x4c>
	{
		f = -f;
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80013e8:	60fb      	str	r3, [r7, #12]
		*ptr++ = '-';
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	1c5a      	adds	r2, r3, #1
 80013ee:	627a      	str	r2, [r7, #36]	; 0x24
 80013f0:	222d      	movs	r2, #45	; 0x2d
 80013f2:	701a      	strb	r2, [r3, #0]
	}

	if (precision < 0)  // negative precision == automatic precision guess
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	da4f      	bge.n	800149a <_Z4ftoadPci+0xf2>
	{
		if (f < 1.0) precision = 6;
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	4b82      	ldr	r3, [pc, #520]	; (8001608 <_Z4ftoadPci+0x260>)
 8001400:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001404:	f7ff fb1a 	bl	8000a3c <__aeabi_dcmplt>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d002      	beq.n	8001414 <_Z4ftoadPci+0x6c>
 800140e:	2306      	movs	r3, #6
 8001410:	603b      	str	r3, [r7, #0]
 8001412:	e042      	b.n	800149a <_Z4ftoadPci+0xf2>
		else if (f < 10.0) precision = 5;
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	4b7c      	ldr	r3, [pc, #496]	; (800160c <_Z4ftoadPci+0x264>)
 800141a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800141e:	f7ff fb0d 	bl	8000a3c <__aeabi_dcmplt>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d002      	beq.n	800142e <_Z4ftoadPci+0x86>
 8001428:	2305      	movs	r3, #5
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	e035      	b.n	800149a <_Z4ftoadPci+0xf2>
		else if (f < 100.0) precision = 4;
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	4b77      	ldr	r3, [pc, #476]	; (8001610 <_Z4ftoadPci+0x268>)
 8001434:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001438:	f7ff fb00 	bl	8000a3c <__aeabi_dcmplt>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d002      	beq.n	8001448 <_Z4ftoadPci+0xa0>
 8001442:	2304      	movs	r3, #4
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	e028      	b.n	800149a <_Z4ftoadPci+0xf2>
		else if (f < 1000.0) precision = 3;
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	4b71      	ldr	r3, [pc, #452]	; (8001614 <_Z4ftoadPci+0x26c>)
 800144e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001452:	f7ff faf3 	bl	8000a3c <__aeabi_dcmplt>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d002      	beq.n	8001462 <_Z4ftoadPci+0xba>
 800145c:	2303      	movs	r3, #3
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	e01b      	b.n	800149a <_Z4ftoadPci+0xf2>
		else if (f < 10000.0) precision = 2;
 8001462:	a365      	add	r3, pc, #404	; (adr r3, 80015f8 <_Z4ftoadPci+0x250>)
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800146c:	f7ff fae6 	bl	8000a3c <__aeabi_dcmplt>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d002      	beq.n	800147c <_Z4ftoadPci+0xd4>
 8001476:	2302      	movs	r3, #2
 8001478:	603b      	str	r3, [r7, #0]
 800147a:	e00e      	b.n	800149a <_Z4ftoadPci+0xf2>
		else if (f < 100000.0) precision = 1;
 800147c:	a360      	add	r3, pc, #384	; (adr r3, 8001600 <_Z4ftoadPci+0x258>)
 800147e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001482:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001486:	f7ff fad9 	bl	8000a3c <__aeabi_dcmplt>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d002      	beq.n	8001496 <_Z4ftoadPci+0xee>
 8001490:	2301      	movs	r3, #1
 8001492:	603b      	str	r3, [r7, #0]
 8001494:	e001      	b.n	800149a <_Z4ftoadPci+0xf2>
		else precision = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	603b      	str	r3, [r7, #0]
	}

	// round value according the precision
	if (precision)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00f      	beq.n	80014c0 <_Z4ftoadPci+0x118>
		f += rounders[precision];
 80014a0:	4a5d      	ldr	r2, [pc, #372]	; (8001618 <_Z4ftoadPci+0x270>)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	4413      	add	r3, r2
 80014a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4623      	mov	r3, r4
 80014b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014b4:	f7fe fe9a 	bl	80001ec <__adddf3>
 80014b8:	4603      	mov	r3, r0
 80014ba:	460c      	mov	r4, r1
 80014bc:	e9c7 3402 	strd	r3, r4, [r7, #8]

	// integer part...
	intPart = f;
 80014c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014c4:	f7ff faf8 	bl	8000ab8 <__aeabi_d2iz>
 80014c8:	4603      	mov	r3, r0
 80014ca:	61fb      	str	r3, [r7, #28]
	f -= intPart;
 80014cc:	69f8      	ldr	r0, [r7, #28]
 80014ce:	f7fe ffd9 	bl	8000484 <__aeabi_i2d>
 80014d2:	4603      	mov	r3, r0
 80014d4:	460c      	mov	r4, r1
 80014d6:	461a      	mov	r2, r3
 80014d8:	4623      	mov	r3, r4
 80014da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014de:	f7fe fe83 	bl	80001e8 <__aeabi_dsub>
 80014e2:	4603      	mov	r3, r0
 80014e4:	460c      	mov	r4, r1
 80014e6:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (!intPart)
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d105      	bne.n	80014fc <_Z4ftoadPci+0x154>
		*ptr++ = '0';
 80014f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f2:	1c5a      	adds	r2, r3, #1
 80014f4:	627a      	str	r2, [r7, #36]	; 0x24
 80014f6:	2230      	movs	r2, #48	; 0x30
 80014f8:	701a      	strb	r2, [r3, #0]
 80014fa:	e038      	b.n	800156e <_Z4ftoadPci+0x1c6>
	else
	{
		// save start pointer
		p = ptr;
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	623b      	str	r3, [r7, #32]

		// convert (reverse order)
		while (intPart)
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d01b      	beq.n	800153e <_Z4ftoadPci+0x196>
		{
			*p++ = '0' + intPart % 10;
 8001506:	69fa      	ldr	r2, [r7, #28]
 8001508:	4b44      	ldr	r3, [pc, #272]	; (800161c <_Z4ftoadPci+0x274>)
 800150a:	fb83 1302 	smull	r1, r3, r3, r2
 800150e:	1099      	asrs	r1, r3, #2
 8001510:	17d3      	asrs	r3, r2, #31
 8001512:	1ac9      	subs	r1, r1, r3
 8001514:	460b      	mov	r3, r1
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	1ad1      	subs	r1, r2, r3
 800151e:	b2ca      	uxtb	r2, r1
 8001520:	6a3b      	ldr	r3, [r7, #32]
 8001522:	1c59      	adds	r1, r3, #1
 8001524:	6239      	str	r1, [r7, #32]
 8001526:	3230      	adds	r2, #48	; 0x30
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	4a3b      	ldr	r2, [pc, #236]	; (800161c <_Z4ftoadPci+0x274>)
 8001530:	fb82 1203 	smull	r1, r2, r2, r3
 8001534:	1092      	asrs	r2, r2, #2
 8001536:	17db      	asrs	r3, r3, #31
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	61fb      	str	r3, [r7, #28]
		while (intPart)
 800153c:	e7e0      	b.n	8001500 <_Z4ftoadPci+0x158>
		}

		// save end pos
		p1 = p;
 800153e:	6a3b      	ldr	r3, [r7, #32]
 8001540:	61bb      	str	r3, [r7, #24]

		// reverse result
		while (p > ptr)
 8001542:	6a3a      	ldr	r2, [r7, #32]
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	429a      	cmp	r2, r3
 8001548:	d90f      	bls.n	800156a <_Z4ftoadPci+0x1c2>
		{
			c = *--p;
 800154a:	6a3b      	ldr	r3, [r7, #32]
 800154c:	3b01      	subs	r3, #1
 800154e:	623b      	str	r3, [r7, #32]
 8001550:	6a3b      	ldr	r3, [r7, #32]
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	75fb      	strb	r3, [r7, #23]
			*p = *ptr;
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	781a      	ldrb	r2, [r3, #0]
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	1c5a      	adds	r2, r3, #1
 8001562:	627a      	str	r2, [r7, #36]	; 0x24
 8001564:	7dfa      	ldrb	r2, [r7, #23]
 8001566:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 8001568:	e7eb      	b.n	8001542 <_Z4ftoadPci+0x19a>
		}

		// restore end pos
		ptr = p1;
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
	}

	// decimal part
	if (precision)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d037      	beq.n	80015e4 <_Z4ftoadPci+0x23c>
	{
		// place decimal point
		*ptr++ = '.';
 8001574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001576:	1c5a      	adds	r2, r3, #1
 8001578:	627a      	str	r2, [r7, #36]	; 0x24
 800157a:	222e      	movs	r2, #46	; 0x2e
 800157c:	701a      	strb	r2, [r3, #0]

		// convert
		while (precision--)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	1e5a      	subs	r2, r3, #1
 8001582:	603a      	str	r2, [r7, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	bf14      	ite	ne
 8001588:	2301      	movne	r3, #1
 800158a:	2300      	moveq	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d028      	beq.n	80015e4 <_Z4ftoadPci+0x23c>
		{
			f *= 10.0;
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	4b1d      	ldr	r3, [pc, #116]	; (800160c <_Z4ftoadPci+0x264>)
 8001598:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800159c:	f7fe ffdc 	bl	8000558 <__aeabi_dmul>
 80015a0:	4603      	mov	r3, r0
 80015a2:	460c      	mov	r4, r1
 80015a4:	e9c7 3402 	strd	r3, r4, [r7, #8]
			c = f;
 80015a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015ac:	f7ff faac 	bl	8000b08 <__aeabi_d2uiz>
 80015b0:	4603      	mov	r3, r0
 80015b2:	75fb      	strb	r3, [r7, #23]
			*ptr++ = '0' + c;
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	1c5a      	adds	r2, r3, #1
 80015b8:	627a      	str	r2, [r7, #36]	; 0x24
 80015ba:	7dfa      	ldrb	r2, [r7, #23]
 80015bc:	3230      	adds	r2, #48	; 0x30
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	701a      	strb	r2, [r3, #0]
			f -= c;
 80015c2:	7dfb      	ldrb	r3, [r7, #23]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe ff5d 	bl	8000484 <__aeabi_i2d>
 80015ca:	4603      	mov	r3, r0
 80015cc:	460c      	mov	r4, r1
 80015ce:	461a      	mov	r2, r3
 80015d0:	4623      	mov	r3, r4
 80015d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015d6:	f7fe fe07 	bl	80001e8 <__aeabi_dsub>
 80015da:	4603      	mov	r3, r0
 80015dc:	460c      	mov	r4, r1
 80015de:	e9c7 3402 	strd	r3, r4, [r7, #8]
		while (precision--)
 80015e2:	e7cc      	b.n	800157e <_Z4ftoadPci+0x1d6>
		}
	}

	// terminating zero
	*ptr = 0;
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]

	return buf;
 80015ea:	687b      	ldr	r3, [r7, #4]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	372c      	adds	r7, #44	; 0x2c
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd90      	pop	{r4, r7, pc}
 80015f4:	f3af 8000 	nop.w
 80015f8:	00000000 	.word	0x00000000
 80015fc:	40c38800 	.word	0x40c38800
 8001600:	00000000 	.word	0x00000000
 8001604:	40f86a00 	.word	0x40f86a00
 8001608:	3ff00000 	.word	0x3ff00000
 800160c:	40240000 	.word	0x40240000
 8001610:	40590000 	.word	0x40590000
 8001614:	408f4000 	.word	0x408f4000
 8001618:	0800b9a0 	.word	0x0800b9a0
 800161c:	66666667 	.word	0x66666667

08001620 <_Z7invSqrtf>:
	bool IMU = true;
	bool magnet = true;
	bool baro = true;
} AHRS_con;

float invSqrt(float x) {
 8001620:	b480      	push	{r7}
 8001622:	b087      	sub	sp, #28
 8001624:	af00      	add	r7, sp, #0
 8001626:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 800162a:	edd7 7a01 	vldr	s15, [r7, #4]
 800162e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001632:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001636:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800163e:	f107 0310 	add.w	r3, r7, #16
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	105a      	asrs	r2, r3, #1
 800164a:	4b12      	ldr	r3, [pc, #72]	; (8001694 <_Z7invSqrtf+0x74>)
 800164c:	1a9b      	subs	r3, r3, r2
 800164e:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001658:	ed97 7a04 	vldr	s14, [r7, #16]
 800165c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001660:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001664:	edd7 7a04 	vldr	s15, [r7, #16]
 8001668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800166c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001670:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001674:	edd7 7a04 	vldr	s15, [r7, #16]
 8001678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800167c:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	ee07 3a90 	vmov	s15, r3
}
 8001686:	eeb0 0a67 	vmov.f32	s0, s15
 800168a:	371c      	adds	r7, #28
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	5f3759df 	.word	0x5f3759df

08001698 <_ZN3LPF4loadEPd>:
	double w, w1, w2;
	double b0,b1,b2;
	double a1, a2, g;
public:
     LPF();
     void load(double coff[6]){
 8001698:	b490      	push	{r4, r7}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
    	this->b0 = coff[0];
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	e9c2 3406 	strd	r3, r4, [r2, #24]
        this->b1 = coff[1];
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	e9c2 3408 	strd	r3, r4, [r2, #32]
    	this->b2 = coff[2];
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

    	this->a1 = coff[3];
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    	this->a2 = coff[4];
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

    	this->g = coff[5];
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
     }
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc90      	pop	{r4, r7}
 80016f2:	4770      	bx	lr

080016f4 <_ZN3LPF6updateEd>:
     double update(double Input){
 80016f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016f6:	b087      	sub	sp, #28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	ed87 0b00 	vstr	d0, [r7]
    	 double y1;
    	 w = Input - a1*w1 - a2*w2;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800170c:	461a      	mov	r2, r3
 800170e:	4623      	mov	r3, r4
 8001710:	f7fe ff22 	bl	8000558 <__aeabi_dmul>
 8001714:	4603      	mov	r3, r0
 8001716:	460c      	mov	r4, r1
 8001718:	461a      	mov	r2, r3
 800171a:	4623      	mov	r3, r4
 800171c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001720:	f7fe fd62 	bl	80001e8 <__aeabi_dsub>
 8001724:	4603      	mov	r3, r0
 8001726:	460c      	mov	r4, r1
 8001728:	461d      	mov	r5, r3
 800172a:	4626      	mov	r6, r4
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001738:	461a      	mov	r2, r3
 800173a:	4623      	mov	r3, r4
 800173c:	f7fe ff0c 	bl	8000558 <__aeabi_dmul>
 8001740:	4603      	mov	r3, r0
 8001742:	460c      	mov	r4, r1
 8001744:	461a      	mov	r2, r3
 8001746:	4623      	mov	r3, r4
 8001748:	4628      	mov	r0, r5
 800174a:	4631      	mov	r1, r6
 800174c:	f7fe fd4c 	bl	80001e8 <__aeabi_dsub>
 8001750:	4603      	mov	r3, r0
 8001752:	460c      	mov	r4, r1
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	e9c2 3400 	strd	r3, r4, [r2]
    	 y1 = (w*b0 + w1*b1 + w2*b2)*g;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8001766:	461a      	mov	r2, r3
 8001768:	4623      	mov	r3, r4
 800176a:	f7fe fef5 	bl	8000558 <__aeabi_dmul>
 800176e:	4603      	mov	r3, r0
 8001770:	460c      	mov	r4, r1
 8001772:	461d      	mov	r5, r3
 8001774:	4626      	mov	r6, r4
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8001782:	461a      	mov	r2, r3
 8001784:	4623      	mov	r3, r4
 8001786:	f7fe fee7 	bl	8000558 <__aeabi_dmul>
 800178a:	4603      	mov	r3, r0
 800178c:	460c      	mov	r4, r1
 800178e:	461a      	mov	r2, r3
 8001790:	4623      	mov	r3, r4
 8001792:	4628      	mov	r0, r5
 8001794:	4631      	mov	r1, r6
 8001796:	f7fe fd29 	bl	80001ec <__adddf3>
 800179a:	4603      	mov	r3, r0
 800179c:	460c      	mov	r4, r1
 800179e:	461d      	mov	r5, r3
 80017a0:	4626      	mov	r6, r4
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80017ae:	461a      	mov	r2, r3
 80017b0:	4623      	mov	r3, r4
 80017b2:	f7fe fed1 	bl	8000558 <__aeabi_dmul>
 80017b6:	4603      	mov	r3, r0
 80017b8:	460c      	mov	r4, r1
 80017ba:	461a      	mov	r2, r3
 80017bc:	4623      	mov	r3, r4
 80017be:	4628      	mov	r0, r5
 80017c0:	4631      	mov	r1, r6
 80017c2:	f7fe fd13 	bl	80001ec <__adddf3>
 80017c6:	4603      	mov	r3, r0
 80017c8:	460c      	mov	r4, r1
 80017ca:	4618      	mov	r0, r3
 80017cc:	4621      	mov	r1, r4
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 80017d4:	461a      	mov	r2, r3
 80017d6:	4623      	mov	r3, r4
 80017d8:	f7fe febe 	bl	8000558 <__aeabi_dmul>
 80017dc:	4603      	mov	r3, r0
 80017de:	460c      	mov	r4, r1
 80017e0:	e9c7 3404 	strd	r3, r4, [r7, #16]
    	 w2 = w1;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	e9c2 3404 	strd	r3, r4, [r2, #16]
    	 w1 = w;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	e9c2 3402 	strd	r3, r4, [r2, #8]
    	 return y1;
 80017fc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001800:	ec44 3b17 	vmov	d7, r3, r4
     }
 8001804:	eeb0 0a47 	vmov.f32	s0, s14
 8001808:	eef0 0a67 	vmov.f32	s1, s15
 800180c:	371c      	adds	r7, #28
 800180e:	46bd      	mov	sp, r7
 8001810:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001812 <_ZN3LPFC1Ev>:
};
LPF::LPF(){
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]

}
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4618      	mov	r0, r3
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <_Z8init_MPUv>:
float b2 = 1.0000;
float roll_acc;
float a1 = -1.9382;
float a2 = 0.9400;

char init_MPU(){
 8001828:	b590      	push	{r4, r7, lr}
 800182a:	b091      	sub	sp, #68	; 0x44
 800182c:	af02      	add	r7, sp, #8
    char status = 1;
 800182e:	2301      	movs	r3, #1
 8001830:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    uint8_t d[2];
    uint8_t device_address = MPU_ADDRESS;
 8001834:	23d0      	movs	r3, #208	; 0xd0
 8001836:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint8_t magnet_address = MAG_ADRRESS;
 800183a:	2318      	movs	r3, #24
 800183c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29



  	char rx_data[25];
    while (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 2) != HAL_OK) {
 8001840:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001844:	b299      	uxth	r1, r3
 8001846:	2302      	movs	r3, #2
 8001848:	2203      	movs	r2, #3
 800184a:	48bb      	ldr	r0, [pc, #748]	; (8001b38 <_Z8init_MPUv+0x310>)
 800184c:	f004 ffde 	bl	800680c <HAL_I2C_IsDeviceReady>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	bf14      	ite	ne
 8001856:	2301      	movne	r3, #1
 8001858:	2300      	moveq	r3, #0
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	d010      	beq.n	8001882 <_Z8init_MPUv+0x5a>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_SET);
 8001860:	2201      	movs	r2, #1
 8001862:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001866:	48b5      	ldr	r0, [pc, #724]	; (8001b3c <_Z8init_MPUv+0x314>)
 8001868:	f004 fb40 	bl	8005eec <HAL_GPIO_WritePin>
    	HAL_Delay(500);
 800186c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001870:	f003 fda6 	bl	80053c0 <HAL_Delay>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 8001874:	2200      	movs	r2, #0
 8001876:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800187a:	48b0      	ldr	r0, [pc, #704]	; (8001b3c <_Z8init_MPUv+0x314>)
 800187c:	f004 fb36 	bl	8005eec <HAL_GPIO_WritePin>
    while (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 2) != HAL_OK) {
 8001880:	e7de      	b.n	8001840 <_Z8init_MPUv+0x18>
      }

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_SET);
 8001882:	2201      	movs	r2, #1
 8001884:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001888:	48ac      	ldr	r0, [pc, #688]	; (8001b3c <_Z8init_MPUv+0x314>)
 800188a:	f004 fb2f 	bl	8005eec <HAL_GPIO_WritePin>


//    HAL_UART_Transmit(&huart3,rx_data, strlen(rx_data),1000);

	/* Try to transmit via I2C */
	d[0] = PWR_MGMT_1;
 800188e:	236b      	movs	r3, #107	; 0x6b
 8001890:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    d[1] = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	if(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address , (uint8_t *)d, 2, 1000) != HAL_OK)
 800189a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800189e:	b299      	uxth	r1, r3
 80018a0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80018a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	2302      	movs	r3, #2
 80018ac:	48a2      	ldr	r0, [pc, #648]	; (8001b38 <_Z8init_MPUv+0x310>)
 80018ae:	f004 fc89 	bl	80061c4 <HAL_I2C_Master_Transmit>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0

	}

	/* Set data sample rate */

	d[0] = SAMPLE_RATE;
 80018b6:	2319      	movs	r3, #25
 80018b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = sample_1khz;
 80018bc:	2307      	movs	r3, #7
 80018be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80018c2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80018c6:	b299      	uxth	r1, r3
 80018c8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80018cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	2302      	movs	r3, #2
 80018d4:	4898      	ldr	r0, [pc, #608]	; (8001b38 <_Z8init_MPUv+0x310>)
 80018d6:	f004 fc75 	bl	80061c4 <HAL_I2C_Master_Transmit>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	bf14      	ite	ne
 80018e0:	2301      	movne	r3, #1
 80018e2:	2300      	moveq	r3, #0
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d000      	beq.n	80018ec <_Z8init_MPUv+0xc4>
 80018ea:	e7ea      	b.n	80018c2 <_Z8init_MPUv+0x9a>

	d[0] = CONFIG;
 80018ec:	231a      	movs	r3, #26
 80018ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = lpf;
 80018f2:	2301      	movs	r3, #1
 80018f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80018f8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80018fc:	b299      	uxth	r1, r3
 80018fe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	2302      	movs	r3, #2
 800190a:	488b      	ldr	r0, [pc, #556]	; (8001b38 <_Z8init_MPUv+0x310>)
 800190c:	f004 fc5a 	bl	80061c4 <HAL_I2C_Master_Transmit>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	bf14      	ite	ne
 8001916:	2301      	movne	r3, #1
 8001918:	2300      	moveq	r3, #0
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	d000      	beq.n	8001922 <_Z8init_MPUv+0xfa>
 8001920:	e7ea      	b.n	80018f8 <_Z8init_MPUv+0xd0>

	d[0] = GYRO_CONFIG;
 8001922:	231b      	movs	r3, #27
 8001924:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = gyro_con;
 8001928:	2318      	movs	r3, #24
 800192a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 800192e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001932:	b299      	uxth	r1, r3
 8001934:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001938:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	2302      	movs	r3, #2
 8001940:	487d      	ldr	r0, [pc, #500]	; (8001b38 <_Z8init_MPUv+0x310>)
 8001942:	f004 fc3f 	bl	80061c4 <HAL_I2C_Master_Transmit>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	bf14      	ite	ne
 800194c:	2301      	movne	r3, #1
 800194e:	2300      	moveq	r3, #0
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d000      	beq.n	8001958 <_Z8init_MPUv+0x130>
 8001956:	e7ea      	b.n	800192e <_Z8init_MPUv+0x106>

	d[0] = ACCEL_CONFIG;
 8001958:	231c      	movs	r3, #28
 800195a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = 0x00;
 800195e:	2300      	movs	r3, #0
 8001960:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001964:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001968:	b299      	uxth	r1, r3
 800196a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800196e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	2302      	movs	r3, #2
 8001976:	4870      	ldr	r0, [pc, #448]	; (8001b38 <_Z8init_MPUv+0x310>)
 8001978:	f004 fc24 	bl	80061c4 <HAL_I2C_Master_Transmit>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	bf14      	ite	ne
 8001982:	2301      	movne	r3, #1
 8001984:	2300      	moveq	r3, #0
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	d000      	beq.n	800198e <_Z8init_MPUv+0x166>
 800198c:	e7ea      	b.n	8001964 <_Z8init_MPUv+0x13c>

	d[0] = ACCEL_CONFIG2;
 800198e:	231d      	movs	r3, #29
 8001990:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = 0x02;
 8001994:	2302      	movs	r3, #2
 8001996:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 800199a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800199e:	b299      	uxth	r1, r3
 80019a0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80019a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	2302      	movs	r3, #2
 80019ac:	4862      	ldr	r0, [pc, #392]	; (8001b38 <_Z8init_MPUv+0x310>)
 80019ae:	f004 fc09 	bl	80061c4 <HAL_I2C_Master_Transmit>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	bf14      	ite	ne
 80019b8:	2301      	movne	r3, #1
 80019ba:	2300      	moveq	r3, #0
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d000      	beq.n	80019c4 <_Z8init_MPUv+0x19c>
 80019c2:	e7ea      	b.n	800199a <_Z8init_MPUv+0x172>


	d[0] = INIT_ENB;
 80019c4:	2338      	movs	r3, #56	; 0x38
 80019c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = inter;
 80019ca:	2301      	movs	r3, #1
 80019cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80019d0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80019d4:	b299      	uxth	r1, r3
 80019d6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80019da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	2302      	movs	r3, #2
 80019e2:	4855      	ldr	r0, [pc, #340]	; (8001b38 <_Z8init_MPUv+0x310>)
 80019e4:	f004 fbee 	bl	80061c4 <HAL_I2C_Master_Transmit>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	bf14      	ite	ne
 80019ee:	2301      	movne	r3, #1
 80019f0:	2300      	moveq	r3, #0
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d000      	beq.n	80019fa <_Z8init_MPUv+0x1d2>
 80019f8:	e7ea      	b.n	80019d0 <_Z8init_MPUv+0x1a8>

	d[0] = USER_CTRL;
 80019fa:	236a      	movs	r3, #106	; 0x6a
 80019fc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    d[1] = zero;
 8001a00:	2300      	movs	r3, #0
 8001a02:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001a06:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001a0a:	b299      	uxth	r1, r3
 8001a0c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001a10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	2302      	movs	r3, #2
 8001a18:	4847      	ldr	r0, [pc, #284]	; (8001b38 <_Z8init_MPUv+0x310>)
 8001a1a:	f004 fbd3 	bl	80061c4 <HAL_I2C_Master_Transmit>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	bf14      	ite	ne
 8001a24:	2301      	movne	r3, #1
 8001a26:	2300      	moveq	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d000      	beq.n	8001a30 <_Z8init_MPUv+0x208>
 8001a2e:	e7ea      	b.n	8001a06 <_Z8init_MPUv+0x1de>

	d[0] = INT_BYPASS;
 8001a30:	2337      	movs	r3, #55	; 0x37
 8001a32:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = stop_i2c_master;
 8001a36:	2322      	movs	r3, #34	; 0x22
 8001a38:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001a3c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001a40:	b299      	uxth	r1, r3
 8001a42:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	483a      	ldr	r0, [pc, #232]	; (8001b38 <_Z8init_MPUv+0x310>)
 8001a50:	f004 fbb8 	bl	80061c4 <HAL_I2C_Master_Transmit>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	bf14      	ite	ne
 8001a5a:	2301      	movne	r3, #1
 8001a5c:	2300      	moveq	r3, #0
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d000      	beq.n	8001a66 <_Z8init_MPUv+0x23e>
 8001a64:	e7ea      	b.n	8001a3c <_Z8init_MPUv+0x214>

	if (HAL_I2C_IsDeviceReady(&hi2c1, magnet_address, 3, 200) != HAL_OK) {
 8001a66:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001a6a:	b299      	uxth	r1, r3
 8001a6c:	23c8      	movs	r3, #200	; 0xc8
 8001a6e:	2203      	movs	r2, #3
 8001a70:	4831      	ldr	r0, [pc, #196]	; (8001b38 <_Z8init_MPUv+0x310>)
 8001a72:	f004 fecb 	bl	800680c <HAL_I2C_IsDeviceReady>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	bf14      	ite	ne
 8001a7c:	2301      	movne	r3, #1
 8001a7e:	2300      	moveq	r3, #0
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d01e      	beq.n	8001ac4 <_Z8init_MPUv+0x29c>
	    	strcpy( rx_data, "No Device \r \n");
 8001a86:	f107 0308 	add.w	r3, r7, #8
 8001a8a:	4a2d      	ldr	r2, [pc, #180]	; (8001b40 <_Z8init_MPUv+0x318>)
 8001a8c:	461c      	mov	r4, r3
 8001a8e:	4613      	mov	r3, r2
 8001a90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a92:	c407      	stmia	r4!, {r0, r1, r2}
 8001a94:	8023      	strh	r3, [r4, #0]
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 8001a96:	2200      	movs	r2, #0
 8001a98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a9c:	4827      	ldr	r0, [pc, #156]	; (8001b3c <_Z8init_MPUv+0x314>)
 8001a9e:	f004 fa25 	bl	8005eec <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_SET);
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aa8:	4824      	ldr	r0, [pc, #144]	; (8001b3c <_Z8init_MPUv+0x314>)
 8001aaa:	f004 fa1f 	bl	8005eec <HAL_GPIO_WritePin>
	    	HAL_Delay(500);
 8001aae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ab2:	f003 fc85 	bl	80053c0 <HAL_Delay>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001abc:	481f      	ldr	r0, [pc, #124]	; (8001b3c <_Z8init_MPUv+0x314>)
 8001abe:	f004 fa15 	bl	8005eec <HAL_GPIO_WritePin>
 8001ac2:	e10c      	b.n	8001cde <_Z8init_MPUv+0x4b6>
	      }
	      else{
	    	    d[0] = CNTL1_AD;
 8001ac4:	230a      	movs	r3, #10
 8001ac6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	    	  	d[1] = ROM_MODE;
 8001aca:	231f      	movs	r3, #31
 8001acc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	    	  	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t) magnet_address,(uint8_t *)d,2,2)!=HAL_OK);
 8001ad0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001ad4:	b299      	uxth	r1, r3
 8001ad6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001ada:	2302      	movs	r3, #2
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	2302      	movs	r3, #2
 8001ae0:	4815      	ldr	r0, [pc, #84]	; (8001b38 <_Z8init_MPUv+0x310>)
 8001ae2:	f004 fb6f 	bl	80061c4 <HAL_I2C_Master_Transmit>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	bf14      	ite	ne
 8001aec:	2301      	movne	r3, #1
 8001aee:	2300      	moveq	r3, #0
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d000      	beq.n	8001af8 <_Z8init_MPUv+0x2d0>
 8001af6:	e7eb      	b.n	8001ad0 <_Z8init_MPUv+0x2a8>

	    	  //	HAL_Delay(100);
	    	  	 for(long i = 1000000; i>0 ;i--){
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <_Z8init_MPUv+0x31c>)
 8001afa:	637b      	str	r3, [r7, #52]	; 0x34
 8001afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	dd03      	ble.n	8001b0a <_Z8init_MPUv+0x2e2>
 8001b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b04:	3b01      	subs	r3, #1
 8001b06:	637b      	str	r3, [r7, #52]	; 0x34
 8001b08:	e7f8      	b.n	8001afc <_Z8init_MPUv+0x2d4>

	    	  		    	      }

	    	  	uint8_t sensitive = ASAX_AD;
 8001b0a:	2310      	movs	r3, #16
 8001b0c:	71fb      	strb	r3, [r7, #7]
	    	  	uint8_t asa [3];
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address, &sensitive, 1, 1000) != HAL_OK);
 8001b0e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001b12:	b299      	uxth	r1, r3
 8001b14:	1dfa      	adds	r2, r7, #7
 8001b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	4806      	ldr	r0, [pc, #24]	; (8001b38 <_Z8init_MPUv+0x310>)
 8001b20:	f004 fb50 	bl	80061c4 <HAL_I2C_Master_Transmit>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	bf14      	ite	ne
 8001b2a:	2301      	movne	r3, #1
 8001b2c:	2300      	moveq	r3, #0
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d009      	beq.n	8001b48 <_Z8init_MPUv+0x320>
 8001b34:	e7eb      	b.n	8001b0e <_Z8init_MPUv+0x2e6>
 8001b36:	bf00      	nop
 8001b38:	200007f4 	.word	0x200007f4
 8001b3c:	40020400 	.word	0x40020400
 8001b40:	0800b8c8 	.word	0x0800b8c8
 8001b44:	000f4240 	.word	0x000f4240
	    	      while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)magnet_address, (uint8_t *)asa,(uint16_t) 3, 1000) != HAL_OK);
 8001b48:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001b4c:	b299      	uxth	r1, r3
 8001b4e:	1d3a      	adds	r2, r7, #4
 8001b50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	2303      	movs	r3, #3
 8001b58:	4864      	ldr	r0, [pc, #400]	; (8001cec <_Z8init_MPUv+0x4c4>)
 8001b5a:	f004 fc31 	bl	80063c0 <HAL_I2C_Master_Receive>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	bf14      	ite	ne
 8001b64:	2301      	movne	r3, #1
 8001b66:	2300      	moveq	r3, #0
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d000      	beq.n	8001b70 <_Z8init_MPUv+0x348>
 8001b6e:	e7eb      	b.n	8001b48 <_Z8init_MPUv+0x320>

	    	      asax = (asa[0]-128)*0.5/128+1;
 8001b70:	793b      	ldrb	r3, [r7, #4]
 8001b72:	3b80      	subs	r3, #128	; 0x80
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fc85 	bl	8000484 <__aeabi_i2d>
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	4b5c      	ldr	r3, [pc, #368]	; (8001cf0 <_Z8init_MPUv+0x4c8>)
 8001b80:	f7fe fcea 	bl	8000558 <__aeabi_dmul>
 8001b84:	4603      	mov	r3, r0
 8001b86:	460c      	mov	r4, r1
 8001b88:	4618      	mov	r0, r3
 8001b8a:	4621      	mov	r1, r4
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	4b58      	ldr	r3, [pc, #352]	; (8001cf4 <_Z8init_MPUv+0x4cc>)
 8001b92:	f7fe fe0b 	bl	80007ac <__aeabi_ddiv>
 8001b96:	4603      	mov	r3, r0
 8001b98:	460c      	mov	r4, r1
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	4621      	mov	r1, r4
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	4b55      	ldr	r3, [pc, #340]	; (8001cf8 <_Z8init_MPUv+0x4d0>)
 8001ba4:	f7fe fb22 	bl	80001ec <__adddf3>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	460c      	mov	r4, r1
 8001bac:	4618      	mov	r0, r3
 8001bae:	4621      	mov	r1, r4
 8001bb0:	f7fe ffca 	bl	8000b48 <__aeabi_d2f>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	4b51      	ldr	r3, [pc, #324]	; (8001cfc <_Z8init_MPUv+0x4d4>)
 8001bb8:	601a      	str	r2, [r3, #0]
	    	      asay = (asa[1]-128)*0.5/128+1;
 8001bba:	797b      	ldrb	r3, [r7, #5]
 8001bbc:	3b80      	subs	r3, #128	; 0x80
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fc60 	bl	8000484 <__aeabi_i2d>
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	4b49      	ldr	r3, [pc, #292]	; (8001cf0 <_Z8init_MPUv+0x4c8>)
 8001bca:	f7fe fcc5 	bl	8000558 <__aeabi_dmul>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	460c      	mov	r4, r1
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	4621      	mov	r1, r4
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	4b46      	ldr	r3, [pc, #280]	; (8001cf4 <_Z8init_MPUv+0x4cc>)
 8001bdc:	f7fe fde6 	bl	80007ac <__aeabi_ddiv>
 8001be0:	4603      	mov	r3, r0
 8001be2:	460c      	mov	r4, r1
 8001be4:	4618      	mov	r0, r3
 8001be6:	4621      	mov	r1, r4
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	4b42      	ldr	r3, [pc, #264]	; (8001cf8 <_Z8init_MPUv+0x4d0>)
 8001bee:	f7fe fafd 	bl	80001ec <__adddf3>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	460c      	mov	r4, r1
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	4621      	mov	r1, r4
 8001bfa:	f7fe ffa5 	bl	8000b48 <__aeabi_d2f>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	4b3f      	ldr	r3, [pc, #252]	; (8001d00 <_Z8init_MPUv+0x4d8>)
 8001c02:	601a      	str	r2, [r3, #0]
	    	      asaz = (asa[2]-128)*0.5/128+1;
 8001c04:	79bb      	ldrb	r3, [r7, #6]
 8001c06:	3b80      	subs	r3, #128	; 0x80
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe fc3b 	bl	8000484 <__aeabi_i2d>
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	4b37      	ldr	r3, [pc, #220]	; (8001cf0 <_Z8init_MPUv+0x4c8>)
 8001c14:	f7fe fca0 	bl	8000558 <__aeabi_dmul>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	460c      	mov	r4, r1
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	4621      	mov	r1, r4
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	4b33      	ldr	r3, [pc, #204]	; (8001cf4 <_Z8init_MPUv+0x4cc>)
 8001c26:	f7fe fdc1 	bl	80007ac <__aeabi_ddiv>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	460c      	mov	r4, r1
 8001c2e:	4618      	mov	r0, r3
 8001c30:	4621      	mov	r1, r4
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	4b30      	ldr	r3, [pc, #192]	; (8001cf8 <_Z8init_MPUv+0x4d0>)
 8001c38:	f7fe fad8 	bl	80001ec <__adddf3>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	460c      	mov	r4, r1
 8001c40:	4618      	mov	r0, r3
 8001c42:	4621      	mov	r1, r4
 8001c44:	f7fe ff80 	bl	8000b48 <__aeabi_d2f>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	4b2e      	ldr	r3, [pc, #184]	; (8001d04 <_Z8init_MPUv+0x4dc>)
 8001c4c:	601a      	str	r2, [r3, #0]

	    	      d[0] = CNTL1_AD;
 8001c4e:	230a      	movs	r3, #10
 8001c50:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	    	      d[1] = zero;
 8001c54:	2300      	movs	r3, #0
 8001c56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001c5a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001c5e:	b299      	uxth	r1, r3
 8001c60:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001c64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	481f      	ldr	r0, [pc, #124]	; (8001cec <_Z8init_MPUv+0x4c4>)
 8001c6e:	f004 faa9 	bl	80061c4 <HAL_I2C_Master_Transmit>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	bf14      	ite	ne
 8001c78:	2301      	movne	r3, #1
 8001c7a:	2300      	moveq	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d000      	beq.n	8001c84 <_Z8init_MPUv+0x45c>
 8001c82:	e7ea      	b.n	8001c5a <_Z8init_MPUv+0x432>

	    	      for(long i = 1000000; i>0 ;i--){
 8001c84:	4b20      	ldr	r3, [pc, #128]	; (8001d08 <_Z8init_MPUv+0x4e0>)
 8001c86:	633b      	str	r3, [r7, #48]	; 0x30
 8001c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	dd03      	ble.n	8001c96 <_Z8init_MPUv+0x46e>
 8001c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c90:	3b01      	subs	r3, #1
 8001c92:	633b      	str	r3, [r7, #48]	; 0x30
 8001c94:	e7f8      	b.n	8001c88 <_Z8init_MPUv+0x460>

	    	      }

	    	      d[0] = CNTL1_AD;
 8001c96:	230a      	movs	r3, #10
 8001c98:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	    	      d[1] = 0x16;
 8001c9c:	2316      	movs	r3, #22
 8001c9e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001ca2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001ca6:	b299      	uxth	r1, r3
 8001ca8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001cac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	480d      	ldr	r0, [pc, #52]	; (8001cec <_Z8init_MPUv+0x4c4>)
 8001cb6:	f004 fa85 	bl	80061c4 <HAL_I2C_Master_Transmit>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	bf14      	ite	ne
 8001cc0:	2301      	movne	r3, #1
 8001cc2:	2300      	moveq	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d000      	beq.n	8001ccc <_Z8init_MPUv+0x4a4>
 8001cca:	e7ea      	b.n	8001ca2 <_Z8init_MPUv+0x47a>
	    	      for(long i = 1000000; i>0 ;i--){
 8001ccc:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <_Z8init_MPUv+0x4e0>)
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	dd03      	ble.n	8001cde <_Z8init_MPUv+0x4b6>
 8001cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cdc:	e7f8      	b.n	8001cd0 <_Z8init_MPUv+0x4a8>
	    	    }
	    	      //HAL_Delay(100);
	      }


  return status;
 8001cde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	373c      	adds	r7, #60	; 0x3c
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd90      	pop	{r4, r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200007f4 	.word	0x200007f4
 8001cf0:	3fe00000 	.word	0x3fe00000
 8001cf4:	40600000 	.word	0x40600000
 8001cf8:	3ff00000 	.word	0x3ff00000
 8001cfc:	20000994 	.word	0x20000994
 8001d00:	20000998 	.word	0x20000998
 8001d04:	2000099c 	.word	0x2000099c
 8001d08:	000f4240 	.word	0x000f4240

08001d0c <_Z10adding_rawv>:
void adding_raw(){
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
	  Gyro_x_ += Gyro_x;
 8001d10:	4b23      	ldr	r3, [pc, #140]	; (8001da0 <_Z10adding_rawv+0x94>)
 8001d12:	ed93 7a00 	vldr	s14, [r3]
 8001d16:	4b23      	ldr	r3, [pc, #140]	; (8001da4 <_Z10adding_rawv+0x98>)
 8001d18:	edd3 7a00 	vldr	s15, [r3]
 8001d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d20:	4b1f      	ldr	r3, [pc, #124]	; (8001da0 <_Z10adding_rawv+0x94>)
 8001d22:	edc3 7a00 	vstr	s15, [r3]
	  Gyro_y_  += Gyro_y;
 8001d26:	4b20      	ldr	r3, [pc, #128]	; (8001da8 <_Z10adding_rawv+0x9c>)
 8001d28:	ed93 7a00 	vldr	s14, [r3]
 8001d2c:	4b1f      	ldr	r3, [pc, #124]	; (8001dac <_Z10adding_rawv+0xa0>)
 8001d2e:	edd3 7a00 	vldr	s15, [r3]
 8001d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d36:	4b1c      	ldr	r3, [pc, #112]	; (8001da8 <_Z10adding_rawv+0x9c>)
 8001d38:	edc3 7a00 	vstr	s15, [r3]
	  Gyro_z_  += Gyro_z;
 8001d3c:	4b1c      	ldr	r3, [pc, #112]	; (8001db0 <_Z10adding_rawv+0xa4>)
 8001d3e:	ed93 7a00 	vldr	s14, [r3]
 8001d42:	4b1c      	ldr	r3, [pc, #112]	; (8001db4 <_Z10adding_rawv+0xa8>)
 8001d44:	edd3 7a00 	vldr	s15, [r3]
 8001d48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d4c:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <_Z10adding_rawv+0xa4>)
 8001d4e:	edc3 7a00 	vstr	s15, [r3]
	  Acc_x_  += Acc_x;
 8001d52:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <_Z10adding_rawv+0xac>)
 8001d54:	ed93 7a00 	vldr	s14, [r3]
 8001d58:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <_Z10adding_rawv+0xb0>)
 8001d5a:	edd3 7a00 	vldr	s15, [r3]
 8001d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <_Z10adding_rawv+0xac>)
 8001d64:	edc3 7a00 	vstr	s15, [r3]
	  Acc_y_  += Acc_y;
 8001d68:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <_Z10adding_rawv+0xb4>)
 8001d6a:	ed93 7a00 	vldr	s14, [r3]
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <_Z10adding_rawv+0xb8>)
 8001d70:	edd3 7a00 	vldr	s15, [r3]
 8001d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d78:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <_Z10adding_rawv+0xb4>)
 8001d7a:	edc3 7a00 	vstr	s15, [r3]
	  Acc_z_  += Acc_z;
 8001d7e:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <_Z10adding_rawv+0xbc>)
 8001d80:	ed93 7a00 	vldr	s14, [r3]
 8001d84:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <_Z10adding_rawv+0xc0>)
 8001d86:	edd3 7a00 	vldr	s15, [r3]
 8001d8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <_Z10adding_rawv+0xbc>)
 8001d90:	edc3 7a00 	vstr	s15, [r3]
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	20000a14 	.word	0x20000a14
 8001da4:	200009f0 	.word	0x200009f0
 8001da8:	20000a18 	.word	0x20000a18
 8001dac:	200009f4 	.word	0x200009f4
 8001db0:	20000a1c 	.word	0x20000a1c
 8001db4:	200009f8 	.word	0x200009f8
 8001db8:	20000a08 	.word	0x20000a08
 8001dbc:	200009e4 	.word	0x200009e4
 8001dc0:	20000a0c 	.word	0x20000a0c
 8001dc4:	200009e8 	.word	0x200009e8
 8001dc8:	20000a10 	.word	0x20000a10
 8001dcc:	200009ec 	.word	0x200009ec

08001dd0 <_Z10delete_rawv>:

void delete_raw(){
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
	  Gyro_x_ = 0;
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <_Z10delete_rawv+0x40>)
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
	  Gyro_y_ = 0;
 8001ddc:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <_Z10delete_rawv+0x44>)
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
	  Gyro_z_ = 0;
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <_Z10delete_rawv+0x48>)
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
	  Acc_x_  = 0;
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <_Z10delete_rawv+0x4c>)
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
	  Acc_y_  = 0;
 8001df4:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <_Z10delete_rawv+0x50>)
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
	  Acc_z_  = 0;
 8001dfc:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <_Z10delete_rawv+0x54>)
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]

}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	20000a14 	.word	0x20000a14
 8001e14:	20000a18 	.word	0x20000a18
 8001e18:	20000a1c 	.word	0x20000a1c
 8001e1c:	20000a08 	.word	0x20000a08
 8001e20:	20000a0c 	.word	0x20000a0c
 8001e24:	20000a10 	.word	0x20000a10

08001e28 <_Z11process_MPUbb>:


IMU_data process_MPU(bool EKF, bool LPF){
 8001e28:	b590      	push	{r4, r7, lr}
 8001e2a:	b08b      	sub	sp, #44	; 0x2c
 8001e2c:	af02      	add	r7, sp, #8
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	70fb      	strb	r3, [r7, #3]
 8001e34:	4613      	mov	r3, r2
 8001e36:	70bb      	strb	r3, [r7, #2]
	IMU_data data_raw;
	uint8_t data[13];

	uint8_t reg = ACCEL_XOUT_H;
 8001e38:	233b      	movs	r3, #59	; 0x3b
 8001e3a:	73fb      	strb	r3, [r7, #15]
	uint8_t device_address = MPU_ADDRESS;
 8001e3c:	23d0      	movs	r3, #208	; 0xd0
 8001e3e:	77fb      	strb	r3, [r7, #31]


	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address, &reg, 1, 1000) != HAL_OK);
 8001e40:	7ffb      	ldrb	r3, [r7, #31]
 8001e42:	b299      	uxth	r1, r3
 8001e44:	f107 020f 	add.w	r2, r7, #15
 8001e48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	2301      	movs	r3, #1
 8001e50:	48a1      	ldr	r0, [pc, #644]	; (80020d8 <_Z11process_MPUbb+0x2b0>)
 8001e52:	f004 f9b7 	bl	80061c4 <HAL_I2C_Master_Transmit>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	bf14      	ite	ne
 8001e5c:	2301      	movne	r3, #1
 8001e5e:	2300      	moveq	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d000      	beq.n	8001e68 <_Z11process_MPUbb+0x40>
 8001e66:	e7eb      	b.n	8001e40 <_Z11process_MPUbb+0x18>
	while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)device_address, data,14, 1000) != HAL_OK);
 8001e68:	7ffb      	ldrb	r3, [r7, #31]
 8001e6a:	b299      	uxth	r1, r3
 8001e6c:	f107 0210 	add.w	r2, r7, #16
 8001e70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	230e      	movs	r3, #14
 8001e78:	4897      	ldr	r0, [pc, #604]	; (80020d8 <_Z11process_MPUbb+0x2b0>)
 8001e7a:	f004 faa1 	bl	80063c0 <HAL_I2C_Master_Receive>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	bf14      	ite	ne
 8001e84:	2301      	movne	r3, #1
 8001e86:	2300      	moveq	r3, #0
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d000      	beq.n	8001e90 <_Z11process_MPUbb+0x68>
 8001e8e:	e7eb      	b.n	8001e68 <_Z11process_MPUbb+0x40>

	Acc_x = (int16_t)(data[0] << 8 | data[1]);
 8001e90:	7c3b      	ldrb	r3, [r7, #16]
 8001e92:	021b      	lsls	r3, r3, #8
 8001e94:	b21a      	sxth	r2, r3
 8001e96:	7c7b      	ldrb	r3, [r7, #17]
 8001e98:	b21b      	sxth	r3, r3
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	b21b      	sxth	r3, r3
 8001e9e:	ee07 3a90 	vmov	s15, r3
 8001ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea6:	4b8d      	ldr	r3, [pc, #564]	; (80020dc <_Z11process_MPUbb+0x2b4>)
 8001ea8:	edc3 7a00 	vstr	s15, [r3]
	Acc_y = (int16_t)(data[2] << 8 | data[3]);
 8001eac:	7cbb      	ldrb	r3, [r7, #18]
 8001eae:	021b      	lsls	r3, r3, #8
 8001eb0:	b21a      	sxth	r2, r3
 8001eb2:	7cfb      	ldrb	r3, [r7, #19]
 8001eb4:	b21b      	sxth	r3, r3
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	b21b      	sxth	r3, r3
 8001eba:	ee07 3a90 	vmov	s15, r3
 8001ebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec2:	4b87      	ldr	r3, [pc, #540]	; (80020e0 <_Z11process_MPUbb+0x2b8>)
 8001ec4:	edc3 7a00 	vstr	s15, [r3]
	Acc_z = (int16_t)(data[4] << 8 | data[5]);
 8001ec8:	7d3b      	ldrb	r3, [r7, #20]
 8001eca:	021b      	lsls	r3, r3, #8
 8001ecc:	b21a      	sxth	r2, r3
 8001ece:	7d7b      	ldrb	r3, [r7, #21]
 8001ed0:	b21b      	sxth	r3, r3
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	b21b      	sxth	r3, r3
 8001ed6:	ee07 3a90 	vmov	s15, r3
 8001eda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ede:	4b81      	ldr	r3, [pc, #516]	; (80020e4 <_Z11process_MPUbb+0x2bc>)
 8001ee0:	edc3 7a00 	vstr	s15, [r3]

    temp = (int16_t)(data[6] << 8 | data[7]);
 8001ee4:	7dbb      	ldrb	r3, [r7, #22]
 8001ee6:	021b      	lsls	r3, r3, #8
 8001ee8:	b21a      	sxth	r2, r3
 8001eea:	7dfb      	ldrb	r3, [r7, #23]
 8001eec:	b21b      	sxth	r3, r3
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	b21b      	sxth	r3, r3
 8001ef2:	ee07 3a90 	vmov	s15, r3
 8001ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001efa:	4b7b      	ldr	r3, [pc, #492]	; (80020e8 <_Z11process_MPUbb+0x2c0>)
 8001efc:	edc3 7a00 	vstr	s15, [r3]

    Gyro_x = (int16_t)(data[8] << 8 | data[9]);
 8001f00:	7e3b      	ldrb	r3, [r7, #24]
 8001f02:	021b      	lsls	r3, r3, #8
 8001f04:	b21a      	sxth	r2, r3
 8001f06:	7e7b      	ldrb	r3, [r7, #25]
 8001f08:	b21b      	sxth	r3, r3
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	b21b      	sxth	r3, r3
 8001f0e:	ee07 3a90 	vmov	s15, r3
 8001f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f16:	4b75      	ldr	r3, [pc, #468]	; (80020ec <_Z11process_MPUbb+0x2c4>)
 8001f18:	edc3 7a00 	vstr	s15, [r3]
    Gyro_y = (int16_t)(data[10] << 8 | data[11]);
 8001f1c:	7ebb      	ldrb	r3, [r7, #26]
 8001f1e:	021b      	lsls	r3, r3, #8
 8001f20:	b21a      	sxth	r2, r3
 8001f22:	7efb      	ldrb	r3, [r7, #27]
 8001f24:	b21b      	sxth	r3, r3
 8001f26:	4313      	orrs	r3, r2
 8001f28:	b21b      	sxth	r3, r3
 8001f2a:	ee07 3a90 	vmov	s15, r3
 8001f2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f32:	4b6f      	ldr	r3, [pc, #444]	; (80020f0 <_Z11process_MPUbb+0x2c8>)
 8001f34:	edc3 7a00 	vstr	s15, [r3]
    Gyro_z = (int16_t)(data[12] << 8 | data[13]);
 8001f38:	7f3b      	ldrb	r3, [r7, #28]
 8001f3a:	021b      	lsls	r3, r3, #8
 8001f3c:	b21a      	sxth	r2, r3
 8001f3e:	7f7b      	ldrb	r3, [r7, #29]
 8001f40:	b21b      	sxth	r3, r3
 8001f42:	4313      	orrs	r3, r2
 8001f44:	b21b      	sxth	r3, r3
 8001f46:	ee07 3a90 	vmov	s15, r3
 8001f4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f4e:	4b69      	ldr	r3, [pc, #420]	; (80020f4 <_Z11process_MPUbb+0x2cc>)
 8001f50:	edc3 7a00 	vstr	s15, [r3]

	Acc_x= (Acc_x)/16384.0 - bAx ;
 8001f54:	4b61      	ldr	r3, [pc, #388]	; (80020dc <_Z11process_MPUbb+0x2b4>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7fe faa5 	bl	80004a8 <__aeabi_f2d>
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	4b65      	ldr	r3, [pc, #404]	; (80020f8 <_Z11process_MPUbb+0x2d0>)
 8001f64:	f7fe fc22 	bl	80007ac <__aeabi_ddiv>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	460c      	mov	r4, r1
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	4621      	mov	r1, r4
 8001f70:	4b62      	ldr	r3, [pc, #392]	; (80020fc <_Z11process_MPUbb+0x2d4>)
 8001f72:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f76:	461a      	mov	r2, r3
 8001f78:	4623      	mov	r3, r4
 8001f7a:	f7fe f935 	bl	80001e8 <__aeabi_dsub>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	460c      	mov	r4, r1
 8001f82:	4618      	mov	r0, r3
 8001f84:	4621      	mov	r1, r4
 8001f86:	f7fe fddf 	bl	8000b48 <__aeabi_d2f>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	4b53      	ldr	r3, [pc, #332]	; (80020dc <_Z11process_MPUbb+0x2b4>)
 8001f8e:	601a      	str	r2, [r3, #0]
	Acc_y = (Acc_y)/16384.0 - bAy;
 8001f90:	4b53      	ldr	r3, [pc, #332]	; (80020e0 <_Z11process_MPUbb+0x2b8>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe fa87 	bl	80004a8 <__aeabi_f2d>
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	4b56      	ldr	r3, [pc, #344]	; (80020f8 <_Z11process_MPUbb+0x2d0>)
 8001fa0:	f7fe fc04 	bl	80007ac <__aeabi_ddiv>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	460c      	mov	r4, r1
 8001fa8:	4618      	mov	r0, r3
 8001faa:	4621      	mov	r1, r4
 8001fac:	4b54      	ldr	r3, [pc, #336]	; (8002100 <_Z11process_MPUbb+0x2d8>)
 8001fae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	4623      	mov	r3, r4
 8001fb6:	f7fe f917 	bl	80001e8 <__aeabi_dsub>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	460c      	mov	r4, r1
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	4621      	mov	r1, r4
 8001fc2:	f7fe fdc1 	bl	8000b48 <__aeabi_d2f>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	4b45      	ldr	r3, [pc, #276]	; (80020e0 <_Z11process_MPUbb+0x2b8>)
 8001fca:	601a      	str	r2, [r3, #0]
	Acc_z = (Acc_z)/16384.0 + bAz;
 8001fcc:	4b45      	ldr	r3, [pc, #276]	; (80020e4 <_Z11process_MPUbb+0x2bc>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe fa69 	bl	80004a8 <__aeabi_f2d>
 8001fd6:	f04f 0200 	mov.w	r2, #0
 8001fda:	4b47      	ldr	r3, [pc, #284]	; (80020f8 <_Z11process_MPUbb+0x2d0>)
 8001fdc:	f7fe fbe6 	bl	80007ac <__aeabi_ddiv>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	460c      	mov	r4, r1
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	4621      	mov	r1, r4
 8001fe8:	4b46      	ldr	r3, [pc, #280]	; (8002104 <_Z11process_MPUbb+0x2dc>)
 8001fea:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	4623      	mov	r3, r4
 8001ff2:	f7fe f8fb 	bl	80001ec <__adddf3>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	460c      	mov	r4, r1
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	4621      	mov	r1, r4
 8001ffe:	f7fe fda3 	bl	8000b48 <__aeabi_d2f>
 8002002:	4602      	mov	r2, r0
 8002004:	4b37      	ldr	r3, [pc, #220]	; (80020e4 <_Z11process_MPUbb+0x2bc>)
 8002006:	601a      	str	r2, [r3, #0]
    if(!EKF){
 8002008:	78fb      	ldrb	r3, [r7, #3]
 800200a:	f083 0301 	eor.w	r3, r3, #1
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d07f      	beq.n	8002114 <_Z11process_MPUbb+0x2ec>
	Gyro_x = (Gyro_x )/16.4- bGx;
 8002014:	4b35      	ldr	r3, [pc, #212]	; (80020ec <_Z11process_MPUbb+0x2c4>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe fa45 	bl	80004a8 <__aeabi_f2d>
 800201e:	a32c      	add	r3, pc, #176	; (adr r3, 80020d0 <_Z11process_MPUbb+0x2a8>)
 8002020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002024:	f7fe fbc2 	bl	80007ac <__aeabi_ddiv>
 8002028:	4603      	mov	r3, r0
 800202a:	460c      	mov	r4, r1
 800202c:	4618      	mov	r0, r3
 800202e:	4621      	mov	r1, r4
 8002030:	4b35      	ldr	r3, [pc, #212]	; (8002108 <_Z11process_MPUbb+0x2e0>)
 8002032:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002036:	461a      	mov	r2, r3
 8002038:	4623      	mov	r3, r4
 800203a:	f7fe f8d5 	bl	80001e8 <__aeabi_dsub>
 800203e:	4603      	mov	r3, r0
 8002040:	460c      	mov	r4, r1
 8002042:	4618      	mov	r0, r3
 8002044:	4621      	mov	r1, r4
 8002046:	f7fe fd7f 	bl	8000b48 <__aeabi_d2f>
 800204a:	4602      	mov	r2, r0
 800204c:	4b27      	ldr	r3, [pc, #156]	; (80020ec <_Z11process_MPUbb+0x2c4>)
 800204e:	601a      	str	r2, [r3, #0]
	Gyro_y = (Gyro_y )/16.4- bGy;
 8002050:	4b27      	ldr	r3, [pc, #156]	; (80020f0 <_Z11process_MPUbb+0x2c8>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe fa27 	bl	80004a8 <__aeabi_f2d>
 800205a:	a31d      	add	r3, pc, #116	; (adr r3, 80020d0 <_Z11process_MPUbb+0x2a8>)
 800205c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002060:	f7fe fba4 	bl	80007ac <__aeabi_ddiv>
 8002064:	4603      	mov	r3, r0
 8002066:	460c      	mov	r4, r1
 8002068:	4618      	mov	r0, r3
 800206a:	4621      	mov	r1, r4
 800206c:	4b27      	ldr	r3, [pc, #156]	; (800210c <_Z11process_MPUbb+0x2e4>)
 800206e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002072:	461a      	mov	r2, r3
 8002074:	4623      	mov	r3, r4
 8002076:	f7fe f8b7 	bl	80001e8 <__aeabi_dsub>
 800207a:	4603      	mov	r3, r0
 800207c:	460c      	mov	r4, r1
 800207e:	4618      	mov	r0, r3
 8002080:	4621      	mov	r1, r4
 8002082:	f7fe fd61 	bl	8000b48 <__aeabi_d2f>
 8002086:	4602      	mov	r2, r0
 8002088:	4b19      	ldr	r3, [pc, #100]	; (80020f0 <_Z11process_MPUbb+0x2c8>)
 800208a:	601a      	str	r2, [r3, #0]
	Gyro_z = (Gyro_z )/16.4- bGz;
 800208c:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <_Z11process_MPUbb+0x2cc>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe fa09 	bl	80004a8 <__aeabi_f2d>
 8002096:	a30e      	add	r3, pc, #56	; (adr r3, 80020d0 <_Z11process_MPUbb+0x2a8>)
 8002098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209c:	f7fe fb86 	bl	80007ac <__aeabi_ddiv>
 80020a0:	4603      	mov	r3, r0
 80020a2:	460c      	mov	r4, r1
 80020a4:	4618      	mov	r0, r3
 80020a6:	4621      	mov	r1, r4
 80020a8:	4b19      	ldr	r3, [pc, #100]	; (8002110 <_Z11process_MPUbb+0x2e8>)
 80020aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80020ae:	461a      	mov	r2, r3
 80020b0:	4623      	mov	r3, r4
 80020b2:	f7fe f899 	bl	80001e8 <__aeabi_dsub>
 80020b6:	4603      	mov	r3, r0
 80020b8:	460c      	mov	r4, r1
 80020ba:	4618      	mov	r0, r3
 80020bc:	4621      	mov	r1, r4
 80020be:	f7fe fd43 	bl	8000b48 <__aeabi_d2f>
 80020c2:	4602      	mov	r2, r0
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <_Z11process_MPUbb+0x2cc>)
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	e05d      	b.n	8002186 <_Z11process_MPUbb+0x35e>
 80020ca:	bf00      	nop
 80020cc:	f3af 8000 	nop.w
 80020d0:	66666666 	.word	0x66666666
 80020d4:	40306666 	.word	0x40306666
 80020d8:	200007f4 	.word	0x200007f4
 80020dc:	200009e4 	.word	0x200009e4
 80020e0:	200009e8 	.word	0x200009e8
 80020e4:	200009ec 	.word	0x200009ec
 80020e8:	20000990 	.word	0x20000990
 80020ec:	200009f0 	.word	0x200009f0
 80020f0:	200009f4 	.word	0x200009f4
 80020f4:	200009f8 	.word	0x200009f8
 80020f8:	40d00000 	.word	0x40d00000
 80020fc:	200009a0 	.word	0x200009a0
 8002100:	200009a8 	.word	0x200009a8
 8002104:	200009b0 	.word	0x200009b0
 8002108:	200009b8 	.word	0x200009b8
 800210c:	200009c0 	.word	0x200009c0
 8002110:	200009c8 	.word	0x200009c8
    }
    else{
    	Gyro_x = (Gyro_x )/16.4;
 8002114:	4b30      	ldr	r3, [pc, #192]	; (80021d8 <_Z11process_MPUbb+0x3b0>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe f9c5 	bl	80004a8 <__aeabi_f2d>
 800211e:	a32c      	add	r3, pc, #176	; (adr r3, 80021d0 <_Z11process_MPUbb+0x3a8>)
 8002120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002124:	f7fe fb42 	bl	80007ac <__aeabi_ddiv>
 8002128:	4603      	mov	r3, r0
 800212a:	460c      	mov	r4, r1
 800212c:	4618      	mov	r0, r3
 800212e:	4621      	mov	r1, r4
 8002130:	f7fe fd0a 	bl	8000b48 <__aeabi_d2f>
 8002134:	4602      	mov	r2, r0
 8002136:	4b28      	ldr	r3, [pc, #160]	; (80021d8 <_Z11process_MPUbb+0x3b0>)
 8002138:	601a      	str	r2, [r3, #0]
    	Gyro_y = (Gyro_y )/16.4;
 800213a:	4b28      	ldr	r3, [pc, #160]	; (80021dc <_Z11process_MPUbb+0x3b4>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe f9b2 	bl	80004a8 <__aeabi_f2d>
 8002144:	a322      	add	r3, pc, #136	; (adr r3, 80021d0 <_Z11process_MPUbb+0x3a8>)
 8002146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214a:	f7fe fb2f 	bl	80007ac <__aeabi_ddiv>
 800214e:	4603      	mov	r3, r0
 8002150:	460c      	mov	r4, r1
 8002152:	4618      	mov	r0, r3
 8002154:	4621      	mov	r1, r4
 8002156:	f7fe fcf7 	bl	8000b48 <__aeabi_d2f>
 800215a:	4602      	mov	r2, r0
 800215c:	4b1f      	ldr	r3, [pc, #124]	; (80021dc <_Z11process_MPUbb+0x3b4>)
 800215e:	601a      	str	r2, [r3, #0]
    	Gyro_z = (Gyro_z )/16.4;
 8002160:	4b1f      	ldr	r3, [pc, #124]	; (80021e0 <_Z11process_MPUbb+0x3b8>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe f99f 	bl	80004a8 <__aeabi_f2d>
 800216a:	a319      	add	r3, pc, #100	; (adr r3, 80021d0 <_Z11process_MPUbb+0x3a8>)
 800216c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002170:	f7fe fb1c 	bl	80007ac <__aeabi_ddiv>
 8002174:	4603      	mov	r3, r0
 8002176:	460c      	mov	r4, r1
 8002178:	4618      	mov	r0, r3
 800217a:	4621      	mov	r1, r4
 800217c:	f7fe fce4 	bl	8000b48 <__aeabi_d2f>
 8002180:	4602      	mov	r2, r0
 8002182:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <_Z11process_MPUbb+0x3b8>)
 8002184:	601a      	str	r2, [r3, #0]
    }

    if(!LPF){
 8002186:	78bb      	ldrb	r3, [r7, #2]
 8002188:	f083 0301 	eor.w	r3, r3, #1
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d018      	beq.n	80021c4 <_Z11process_MPUbb+0x39c>
		data_raw.Gyro_x = Gyro_x;
 8002192:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <_Z11process_MPUbb+0x3b0>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	601a      	str	r2, [r3, #0]
		data_raw.Gyro_y = Gyro_y;
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <_Z11process_MPUbb+0x3b4>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	605a      	str	r2, [r3, #4]
		data_raw.Gyro_z = Gyro_z;
 80021a2:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <_Z11process_MPUbb+0x3b8>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	609a      	str	r2, [r3, #8]
		data_raw.Acc_x = Acc_x;
 80021aa:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <_Z11process_MPUbb+0x3bc>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	60da      	str	r2, [r3, #12]
		data_raw.Acc_y = Acc_y;
 80021b2:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <_Z11process_MPUbb+0x3c0>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	611a      	str	r2, [r3, #16]
		data_raw.Acc_z = Acc_z;
 80021ba:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <_Z11process_MPUbb+0x3c4>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	615a      	str	r2, [r3, #20]
    }

    return data_raw;
 80021c2:	bf00      	nop
 80021c4:	bf00      	nop
}
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	3724      	adds	r7, #36	; 0x24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd90      	pop	{r4, r7, pc}
 80021ce:	bf00      	nop
 80021d0:	66666666 	.word	0x66666666
 80021d4:	40306666 	.word	0x40306666
 80021d8:	200009f0 	.word	0x200009f0
 80021dc:	200009f4 	.word	0x200009f4
 80021e0:	200009f8 	.word	0x200009f8
 80021e4:	200009e4 	.word	0x200009e4
 80021e8:	200009e8 	.word	0x200009e8
 80021ec:	200009ec 	.word	0x200009ec

080021f0 <_Z14process_magnetv>:
	    temp.Mag_y = Mag_y;
	    temp.Mag_z = Mag_z;
	    return temp;
}

MAG_data process_magnet(){
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b096      	sub	sp, #88	; 0x58
 80021f4:	af02      	add	r7, sp, #8
	MAG_data temp;
	uint8_t mag_data[7];

	uint8_t status;
	uint8_t reg = ACCEL_XOUT_H;
 80021f6:	233b      	movs	r3, #59	; 0x3b
 80021f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t magnet_address = MAG_ADRRESS;
 80021fc:	2318      	movs	r3, #24
 80021fe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 reg = 0x02;
 8002202:	2302      	movs	r3, #2
 8002204:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address, &reg, 1, 1000) != HAL_OK);
 8002208:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800220c:	b299      	uxth	r1, r3
 800220e:	f107 022a 	add.w	r2, r7, #42	; 0x2a
 8002212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	2301      	movs	r3, #1
 800221a:	488e      	ldr	r0, [pc, #568]	; (8002454 <_Z14process_magnetv+0x264>)
 800221c:	f003 ffd2 	bl	80061c4 <HAL_I2C_Master_Transmit>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	bf14      	ite	ne
 8002226:	2301      	movne	r3, #1
 8002228:	2300      	moveq	r3, #0
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	d000      	beq.n	8002232 <_Z14process_magnetv+0x42>
 8002230:	e7ea      	b.n	8002208 <_Z14process_magnetv+0x18>
		while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)magnet_address, &status,1, 1000) != HAL_OK);
 8002232:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002236:	b299      	uxth	r1, r3
 8002238:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 800223c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	2301      	movs	r3, #1
 8002244:	4883      	ldr	r0, [pc, #524]	; (8002454 <_Z14process_magnetv+0x264>)
 8002246:	f004 f8bb 	bl	80063c0 <HAL_I2C_Master_Receive>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	bf14      	ite	ne
 8002250:	2301      	movne	r3, #1
 8002252:	2300      	moveq	r3, #0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d000      	beq.n	800225c <_Z14process_magnetv+0x6c>
 800225a:	e7ea      	b.n	8002232 <_Z14process_magnetv+0x42>
	    if(status == 3){
 800225c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002260:	2b03      	cmp	r3, #3
 8002262:	f040 80d5 	bne.w	8002410 <_Z14process_magnetv+0x220>
	    	reg = 0x03;
 8002266:	2303      	movs	r3, #3
 8002268:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	    	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address, &reg, 1, 1000) != HAL_OK);
 800226c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002270:	b299      	uxth	r1, r3
 8002272:	f107 022a 	add.w	r2, r7, #42	; 0x2a
 8002276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	2301      	movs	r3, #1
 800227e:	4875      	ldr	r0, [pc, #468]	; (8002454 <_Z14process_magnetv+0x264>)
 8002280:	f003 ffa0 	bl	80061c4 <HAL_I2C_Master_Transmit>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	bf14      	ite	ne
 800228a:	2301      	movne	r3, #1
 800228c:	2300      	moveq	r3, #0
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d000      	beq.n	8002296 <_Z14process_magnetv+0xa6>
 8002294:	e7ea      	b.n	800226c <_Z14process_magnetv+0x7c>
	    	while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)magnet_address, (uint8_t *)mag_data,7, 1000) != HAL_OK);
 8002296:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800229a:	b299      	uxth	r1, r3
 800229c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80022a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	2307      	movs	r3, #7
 80022a8:	486a      	ldr	r0, [pc, #424]	; (8002454 <_Z14process_magnetv+0x264>)
 80022aa:	f004 f889 	bl	80063c0 <HAL_I2C_Master_Receive>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	bf14      	ite	ne
 80022b4:	2301      	movne	r3, #1
 80022b6:	2300      	moveq	r3, #0
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d000      	beq.n	80022c0 <_Z14process_magnetv+0xd0>
 80022be:	e7ea      	b.n	8002296 <_Z14process_magnetv+0xa6>
	//    	if(!(mag_data[6]|MAGIC_OVERFLOW_MASK)){
	    		Mag_x = (int16_t)(mag_data[0] | (mag_data[1]<<8));
 80022c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80022c4:	b21a      	sxth	r2, r3
 80022c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022ca:	021b      	lsls	r3, r3, #8
 80022cc:	b21b      	sxth	r3, r3
 80022ce:	4313      	orrs	r3, r2
 80022d0:	b21b      	sxth	r3, r3
 80022d2:	ee07 3a90 	vmov	s15, r3
 80022d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022da:	4b5f      	ldr	r3, [pc, #380]	; (8002458 <_Z14process_magnetv+0x268>)
 80022dc:	edc3 7a00 	vstr	s15, [r3]
	    		Mag_y = (int16_t)(mag_data[2] | (mag_data[3]<<8));
 80022e0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80022e4:	b21a      	sxth	r2, r3
 80022e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022ea:	021b      	lsls	r3, r3, #8
 80022ec:	b21b      	sxth	r3, r3
 80022ee:	4313      	orrs	r3, r2
 80022f0:	b21b      	sxth	r3, r3
 80022f2:	ee07 3a90 	vmov	s15, r3
 80022f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022fa:	4b58      	ldr	r3, [pc, #352]	; (800245c <_Z14process_magnetv+0x26c>)
 80022fc:	edc3 7a00 	vstr	s15, [r3]
	    		Mag_z = (int16_t)(mag_data[4] | (mag_data[5]<<8));
 8002300:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002304:	b21a      	sxth	r2, r3
 8002306:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800230a:	021b      	lsls	r3, r3, #8
 800230c:	b21b      	sxth	r3, r3
 800230e:	4313      	orrs	r3, r2
 8002310:	b21b      	sxth	r3, r3
 8002312:	ee07 3a90 	vmov	s15, r3
 8002316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800231a:	4b51      	ldr	r3, [pc, #324]	; (8002460 <_Z14process_magnetv+0x270>)
 800231c:	edc3 7a00 	vstr	s15, [r3]

	            float m[3] = {Mag_x,Mag_y,Mag_z};
 8002320:	4b4d      	ldr	r3, [pc, #308]	; (8002458 <_Z14process_magnetv+0x268>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	61fb      	str	r3, [r7, #28]
 8002326:	4b4d      	ldr	r3, [pc, #308]	; (800245c <_Z14process_magnetv+0x26c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	623b      	str	r3, [r7, #32]
 800232c:	4b4c      	ldr	r3, [pc, #304]	; (8002460 <_Z14process_magnetv+0x270>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
	        	float temp[3] ;
	            temp[0] = m[0] - b_m[0];
 8002332:	ed97 7a07 	vldr	s14, [r7, #28]
 8002336:	4b4b      	ldr	r3, [pc, #300]	; (8002464 <_Z14process_magnetv+0x274>)
 8002338:	edd3 7a00 	vldr	s15, [r3]
 800233c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002340:	edc7 7a04 	vstr	s15, [r7, #16]
	            temp[1] = m[1] - b_m[1];
 8002344:	ed97 7a08 	vldr	s14, [r7, #32]
 8002348:	4b46      	ldr	r3, [pc, #280]	; (8002464 <_Z14process_magnetv+0x274>)
 800234a:	edd3 7a01 	vldr	s15, [r3, #4]
 800234e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002352:	edc7 7a05 	vstr	s15, [r7, #20]
	            temp[2] = m[2] - b_m[2];
 8002356:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800235a:	4b42      	ldr	r3, [pc, #264]	; (8002464 <_Z14process_magnetv+0x274>)
 800235c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002360:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002364:	edc7 7a06 	vstr	s15, [r7, #24]

	            magnet_calib[0] = A_m[0]*temp[0] + A_m[1]*temp[1] +A_m[2]*temp[2];
 8002368:	4b3f      	ldr	r3, [pc, #252]	; (8002468 <_Z14process_magnetv+0x278>)
 800236a:	ed93 7a00 	vldr	s14, [r3]
 800236e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002372:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002376:	4b3c      	ldr	r3, [pc, #240]	; (8002468 <_Z14process_magnetv+0x278>)
 8002378:	edd3 6a01 	vldr	s13, [r3, #4]
 800237c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002380:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002384:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002388:	4b37      	ldr	r3, [pc, #220]	; (8002468 <_Z14process_magnetv+0x278>)
 800238a:	edd3 6a02 	vldr	s13, [r3, #8]
 800238e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002392:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002396:	ee77 7a27 	vadd.f32	s15, s14, s15
 800239a:	4b34      	ldr	r3, [pc, #208]	; (800246c <_Z14process_magnetv+0x27c>)
 800239c:	edc3 7a00 	vstr	s15, [r3]
	            magnet_calib[1] = A_m[3]*temp[0] + A_m[4]*temp[1] +A_m[5]*temp[2];
 80023a0:	4b31      	ldr	r3, [pc, #196]	; (8002468 <_Z14process_magnetv+0x278>)
 80023a2:	ed93 7a03 	vldr	s14, [r3, #12]
 80023a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80023aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ae:	4b2e      	ldr	r3, [pc, #184]	; (8002468 <_Z14process_magnetv+0x278>)
 80023b0:	edd3 6a04 	vldr	s13, [r3, #16]
 80023b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80023b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023c0:	4b29      	ldr	r3, [pc, #164]	; (8002468 <_Z14process_magnetv+0x278>)
 80023c2:	edd3 6a05 	vldr	s13, [r3, #20]
 80023c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80023ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d2:	4b26      	ldr	r3, [pc, #152]	; (800246c <_Z14process_magnetv+0x27c>)
 80023d4:	edc3 7a01 	vstr	s15, [r3, #4]
	            magnet_calib[2] = A_m[6]*temp[0] + A_m[7]*temp[1] +A_m[8]*temp[2];
 80023d8:	4b23      	ldr	r3, [pc, #140]	; (8002468 <_Z14process_magnetv+0x278>)
 80023da:	ed93 7a06 	vldr	s14, [r3, #24]
 80023de:	edd7 7a04 	vldr	s15, [r7, #16]
 80023e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023e6:	4b20      	ldr	r3, [pc, #128]	; (8002468 <_Z14process_magnetv+0x278>)
 80023e8:	edd3 6a07 	vldr	s13, [r3, #28]
 80023ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80023f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023f8:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <_Z14process_magnetv+0x278>)
 80023fa:	edd3 6a08 	vldr	s13, [r3, #32]
 80023fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8002402:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800240a:	4b18      	ldr	r3, [pc, #96]	; (800246c <_Z14process_magnetv+0x27c>)
 800240c:	edc3 7a02 	vstr	s15, [r3, #8]

	}
	    temp.Mag_x = magnet_calib[0];
 8002410:	4b16      	ldr	r3, [pc, #88]	; (800246c <_Z14process_magnetv+0x27c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	637b      	str	r3, [r7, #52]	; 0x34
	    temp.Mag_y = magnet_calib[1];
 8002416:	4b15      	ldr	r3, [pc, #84]	; (800246c <_Z14process_magnetv+0x27c>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	63bb      	str	r3, [r7, #56]	; 0x38
	    temp.Mag_z = magnet_calib[2];
 800241c:	4b13      	ldr	r3, [pc, #76]	; (800246c <_Z14process_magnetv+0x27c>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	63fb      	str	r3, [r7, #60]	; 0x3c
	    return temp;
 8002422:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002426:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800242a:	ca07      	ldmia	r2, {r0, r1, r2}
 800242c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002430:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002432:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002436:	ee06 1a90 	vmov	s13, r1
 800243a:	ee07 2a10 	vmov	s14, r2
 800243e:	ee07 3a90 	vmov	s15, r3
}
 8002442:	eeb0 0a66 	vmov.f32	s0, s13
 8002446:	eef0 0a47 	vmov.f32	s1, s14
 800244a:	eeb0 1a67 	vmov.f32	s2, s15
 800244e:	3750      	adds	r7, #80	; 0x50
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	200007f4 	.word	0x200007f4
 8002458:	200009fc 	.word	0x200009fc
 800245c:	20000a00 	.word	0x20000a00
 8002460:	20000a04 	.word	0x20000a04
 8002464:	200004b4 	.word	0x200004b4
 8002468:	20000490 	.word	0x20000490
 800246c:	200009d8 	.word	0x200009d8

08002470 <_Z12notify_state8AHRS_con>:
    temp.roll = com_angle_r;

    return temp;
}

void notify_state(AHRS_con state){
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
    if(state.IMU == true && state.magnet == true && state.magnet == true){
 8002478:	793b      	ldrb	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d01f      	beq.n	80024be <_Z12notify_state8AHRS_con+0x4e>
 800247e:	797b      	ldrb	r3, [r7, #5]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d01c      	beq.n	80024be <_Z12notify_state8AHRS_con+0x4e>
 8002484:	797b      	ldrb	r3, [r7, #5]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d019      	beq.n	80024be <_Z12notify_state8AHRS_con+0x4e>
    for(uint8_t i = 0; i<4; i++){
 800248a:	2300      	movs	r3, #0
 800248c:	73fb      	strb	r3, [r7, #15]
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	2b03      	cmp	r3, #3
 8002492:	d814      	bhi.n	80024be <_Z12notify_state8AHRS_con+0x4e>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8002494:	2104      	movs	r1, #4
 8002496:	480e      	ldr	r0, [pc, #56]	; (80024d0 <_Z12notify_state8AHRS_con+0x60>)
 8002498:	f003 fd41 	bl	8005f1e <HAL_GPIO_TogglePin>
 	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 800249c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024a0:	480b      	ldr	r0, [pc, #44]	; (80024d0 <_Z12notify_state8AHRS_con+0x60>)
 80024a2:	f003 fd3c 	bl	8005f1e <HAL_GPIO_TogglePin>
 	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80024a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024aa:	4809      	ldr	r0, [pc, #36]	; (80024d0 <_Z12notify_state8AHRS_con+0x60>)
 80024ac:	f003 fd37 	bl	8005f1e <HAL_GPIO_TogglePin>
 	HAL_Delay(100);
 80024b0:	2064      	movs	r0, #100	; 0x64
 80024b2:	f002 ff85 	bl	80053c0 <HAL_Delay>
    for(uint8_t i = 0; i<4; i++){
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	3301      	adds	r3, #1
 80024ba:	73fb      	strb	r3, [r7, #15]
 80024bc:	e7e7      	b.n	800248e <_Z12notify_state8AHRS_con+0x1e>
    }
    }
    HAL_Delay(1000);
 80024be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024c2:	f002 ff7d 	bl	80053c0 <HAL_Delay>
}
 80024c6:	bf00      	nop
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40020400 	.word	0x40020400

080024d4 <_Z10check_AHRSb>:

AHRS_con check_AHRS(bool notify){
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	71fb      	strb	r3, [r7, #7]
	AHRS_con state;
 80024de:	4a4d      	ldr	r2, [pc, #308]	; (8002614 <_Z10check_AHRSb+0x140>)
 80024e0:	f107 030c 	add.w	r3, r7, #12
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	4611      	mov	r1, r2
 80024e8:	8019      	strh	r1, [r3, #0]
 80024ea:	3302      	adds	r3, #2
 80024ec:	0c12      	lsrs	r2, r2, #16
 80024ee:	701a      	strb	r2, [r3, #0]
	uint8_t magnet_address = MAG_ADRRESS;
 80024f0:	2318      	movs	r3, #24
 80024f2:	75fb      	strb	r3, [r7, #23]
	uint8_t device_address = MPU_ADDRESS;
 80024f4:	23d0      	movs	r3, #208	; 0xd0
 80024f6:	75bb      	strb	r3, [r7, #22]
	uint8_t  BMP_ADDRESS  = 0xEE;
 80024f8:	23ee      	movs	r3, #238	; 0xee
 80024fa:	757b      	strb	r3, [r7, #21]
	 if (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 2) != HAL_OK) {
 80024fc:	7dbb      	ldrb	r3, [r7, #22]
 80024fe:	b299      	uxth	r1, r3
 8002500:	2302      	movs	r3, #2
 8002502:	2203      	movs	r2, #3
 8002504:	4844      	ldr	r0, [pc, #272]	; (8002618 <_Z10check_AHRSb+0x144>)
 8002506:	f004 f981 	bl	800680c <HAL_I2C_IsDeviceReady>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	bf14      	ite	ne
 8002510:	2301      	movne	r3, #1
 8002512:	2300      	moveq	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d015      	beq.n	8002546 <_Z10check_AHRSb+0x72>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_SET);
 800251a:	2201      	movs	r2, #1
 800251c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002520:	483e      	ldr	r0, [pc, #248]	; (800261c <_Z10check_AHRSb+0x148>)
 8002522:	f003 fce3 	bl	8005eec <HAL_GPIO_WritePin>
	    	HAL_Delay(500);
 8002526:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800252a:	f002 ff49 	bl	80053c0 <HAL_Delay>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 800252e:	2200      	movs	r2, #0
 8002530:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002534:	4839      	ldr	r0, [pc, #228]	; (800261c <_Z10check_AHRSb+0x148>)
 8002536:	f003 fcd9 	bl	8005eec <HAL_GPIO_WritePin>
	    	HAL_Delay(500);
 800253a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800253e:	f002 ff3f 	bl	80053c0 <HAL_Delay>
	    	state.IMU = false;
 8002542:	2300      	movs	r3, #0
 8002544:	733b      	strb	r3, [r7, #12]
	}
	if (HAL_I2C_IsDeviceReady(&hi2c1, magnet_address, 3, 200) != HAL_OK) {
 8002546:	7dfb      	ldrb	r3, [r7, #23]
 8002548:	b299      	uxth	r1, r3
 800254a:	23c8      	movs	r3, #200	; 0xc8
 800254c:	2203      	movs	r2, #3
 800254e:	4832      	ldr	r0, [pc, #200]	; (8002618 <_Z10check_AHRSb+0x144>)
 8002550:	f004 f95c 	bl	800680c <HAL_I2C_IsDeviceReady>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	bf14      	ite	ne
 800255a:	2301      	movne	r3, #1
 800255c:	2300      	moveq	r3, #0
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	d015      	beq.n	8002590 <_Z10check_AHRSb+0xbc>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_SET);
 8002564:	2201      	movs	r2, #1
 8002566:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800256a:	482c      	ldr	r0, [pc, #176]	; (800261c <_Z10check_AHRSb+0x148>)
 800256c:	f003 fcbe 	bl	8005eec <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8002570:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002574:	f002 ff24 	bl	80053c0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 8002578:	2200      	movs	r2, #0
 800257a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800257e:	4827      	ldr	r0, [pc, #156]	; (800261c <_Z10check_AHRSb+0x148>)
 8002580:	f003 fcb4 	bl	8005eec <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8002584:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002588:	f002 ff1a 	bl	80053c0 <HAL_Delay>
		state.magnet = false;
 800258c:	2300      	movs	r3, #0
 800258e:	737b      	strb	r3, [r7, #13]
	}
	 if(HAL_I2C_IsDeviceReady(&hi2c1, (uint8_t) BMP_ADDRESS, 3, 2) != HAL_OK) {
 8002590:	7d7b      	ldrb	r3, [r7, #21]
 8002592:	b299      	uxth	r1, r3
 8002594:	2302      	movs	r3, #2
 8002596:	2203      	movs	r2, #3
 8002598:	481f      	ldr	r0, [pc, #124]	; (8002618 <_Z10check_AHRSb+0x144>)
 800259a:	f004 f937 	bl	800680c <HAL_I2C_IsDeviceReady>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	bf14      	ite	ne
 80025a4:	2301      	movne	r3, #1
 80025a6:	2300      	moveq	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d013      	beq.n	80025d6 <_Z10check_AHRSb+0x102>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_SET);
 80025ae:	2201      	movs	r2, #1
 80025b0:	2104      	movs	r1, #4
 80025b2:	481a      	ldr	r0, [pc, #104]	; (800261c <_Z10check_AHRSb+0x148>)
 80025b4:	f003 fc9a 	bl	8005eec <HAL_GPIO_WritePin>
	    	HAL_Delay(500);
 80025b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025bc:	f002 ff00 	bl	80053c0 <HAL_Delay>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_RESET);
 80025c0:	2200      	movs	r2, #0
 80025c2:	2104      	movs	r1, #4
 80025c4:	4815      	ldr	r0, [pc, #84]	; (800261c <_Z10check_AHRSb+0x148>)
 80025c6:	f003 fc91 	bl	8005eec <HAL_GPIO_WritePin>
	    	HAL_Delay(500);
 80025ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025ce:	f002 fef7 	bl	80053c0 <HAL_Delay>
	    	state.baro = false;
 80025d2:	2300      	movs	r3, #0
 80025d4:	73bb      	strb	r3, [r7, #14]
	      }
	 if(notify){
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d002      	beq.n	80025e2 <_Z10check_AHRSb+0x10e>
		 notify_state(state);
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f7ff ff47 	bl	8002470 <_Z12notify_state8AHRS_con>
	 }
    return state;
 80025e2:	f107 0310 	add.w	r3, r7, #16
 80025e6:	f107 020c 	add.w	r2, r7, #12
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	4611      	mov	r1, r2
 80025ee:	8019      	strh	r1, [r3, #0]
 80025f0:	3302      	adds	r3, #2
 80025f2:	0c12      	lsrs	r2, r2, #16
 80025f4:	701a      	strb	r2, [r3, #0]
 80025f6:	2300      	movs	r3, #0
 80025f8:	7c3a      	ldrb	r2, [r7, #16]
 80025fa:	f362 0307 	bfi	r3, r2, #0, #8
 80025fe:	7c7a      	ldrb	r2, [r7, #17]
 8002600:	f362 230f 	bfi	r3, r2, #8, #8
 8002604:	7cba      	ldrb	r2, [r7, #18]
 8002606:	f362 4317 	bfi	r3, r2, #16, #8
}
 800260a:	4618      	mov	r0, r3
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	0800b8d8 	.word	0x0800b8d8
 8002618:	200007f4 	.word	0x200007f4
 800261c:	40020400 	.word	0x40020400

08002620 <_Z15calibration_IMUv>:
		angle_e.roll = r*RAD2DEC;
		angle_e.pitch = p*RAD2DEC;
		angle_e.yaw = y*RAD2DEC;
		return angle_e;
}
void calibration_IMU(){
 8002620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002622:	b089      	sub	sp, #36	; 0x24
 8002624:	af02      	add	r7, sp, #8
    /*This function is performed when the sensor is fully stationary, we assume that MPU has been inited*/
//	    print_msg("Calibrating the sensor....\n");
		uint8_t data[13];
		uint8_t reg = ACCEL_XOUT_H;
 8002626:	233b      	movs	r3, #59	; 0x3b
 8002628:	70fb      	strb	r3, [r7, #3]
		uint8_t device_address = MPU_ADDRESS;
 800262a:	23d0      	movs	r3, #208	; 0xd0
 800262c:	74fb      	strb	r3, [r7, #19]

        for(int i = 0; i<200; i++){
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2bc7      	cmp	r3, #199	; 0xc7
 8002636:	f300 8163 	bgt.w	8002900 <_Z15calibration_IMUv+0x2e0>

		while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address, &reg, 1, 1000) != HAL_OK);
 800263a:	7cfb      	ldrb	r3, [r7, #19]
 800263c:	b299      	uxth	r1, r3
 800263e:	1cfa      	adds	r2, r7, #3
 8002640:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	2301      	movs	r3, #1
 8002648:	489d      	ldr	r0, [pc, #628]	; (80028c0 <_Z15calibration_IMUv+0x2a0>)
 800264a:	f003 fdbb 	bl	80061c4 <HAL_I2C_Master_Transmit>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	bf14      	ite	ne
 8002654:	2301      	movne	r3, #1
 8002656:	2300      	moveq	r3, #0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d000      	beq.n	8002660 <_Z15calibration_IMUv+0x40>
 800265e:	e7ec      	b.n	800263a <_Z15calibration_IMUv+0x1a>
		while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)device_address, data,14, 1000) != HAL_OK);
 8002660:	7cfb      	ldrb	r3, [r7, #19]
 8002662:	b299      	uxth	r1, r3
 8002664:	1d3a      	adds	r2, r7, #4
 8002666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	230e      	movs	r3, #14
 800266e:	4894      	ldr	r0, [pc, #592]	; (80028c0 <_Z15calibration_IMUv+0x2a0>)
 8002670:	f003 fea6 	bl	80063c0 <HAL_I2C_Master_Receive>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	bf14      	ite	ne
 800267a:	2301      	movne	r3, #1
 800267c:	2300      	moveq	r3, #0
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d000      	beq.n	8002686 <_Z15calibration_IMUv+0x66>
 8002684:	e7ec      	b.n	8002660 <_Z15calibration_IMUv+0x40>

		Acc_x = (int16_t)(data[0] << 8 | data[1])/accel_factor;
 8002686:	793b      	ldrb	r3, [r7, #4]
 8002688:	021b      	lsls	r3, r3, #8
 800268a:	b21a      	sxth	r2, r3
 800268c:	797b      	ldrb	r3, [r7, #5]
 800268e:	b21b      	sxth	r3, r3
 8002690:	4313      	orrs	r3, r2
 8002692:	b21b      	sxth	r3, r3
 8002694:	4618      	mov	r0, r3
 8002696:	f7fd fef5 	bl	8000484 <__aeabi_i2d>
 800269a:	f04f 0200 	mov.w	r2, #0
 800269e:	4b89      	ldr	r3, [pc, #548]	; (80028c4 <_Z15calibration_IMUv+0x2a4>)
 80026a0:	f7fe f884 	bl	80007ac <__aeabi_ddiv>
 80026a4:	4603      	mov	r3, r0
 80026a6:	460c      	mov	r4, r1
 80026a8:	4618      	mov	r0, r3
 80026aa:	4621      	mov	r1, r4
 80026ac:	f7fe fa4c 	bl	8000b48 <__aeabi_d2f>
 80026b0:	4602      	mov	r2, r0
 80026b2:	4b85      	ldr	r3, [pc, #532]	; (80028c8 <_Z15calibration_IMUv+0x2a8>)
 80026b4:	601a      	str	r2, [r3, #0]
		Acc_y = (int16_t)(data[2] << 8 | data[3])/accel_factor;
 80026b6:	79bb      	ldrb	r3, [r7, #6]
 80026b8:	021b      	lsls	r3, r3, #8
 80026ba:	b21a      	sxth	r2, r3
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	b21b      	sxth	r3, r3
 80026c0:	4313      	orrs	r3, r2
 80026c2:	b21b      	sxth	r3, r3
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fd fedd 	bl	8000484 <__aeabi_i2d>
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	4b7d      	ldr	r3, [pc, #500]	; (80028c4 <_Z15calibration_IMUv+0x2a4>)
 80026d0:	f7fe f86c 	bl	80007ac <__aeabi_ddiv>
 80026d4:	4603      	mov	r3, r0
 80026d6:	460c      	mov	r4, r1
 80026d8:	4618      	mov	r0, r3
 80026da:	4621      	mov	r1, r4
 80026dc:	f7fe fa34 	bl	8000b48 <__aeabi_d2f>
 80026e0:	4602      	mov	r2, r0
 80026e2:	4b7a      	ldr	r3, [pc, #488]	; (80028cc <_Z15calibration_IMUv+0x2ac>)
 80026e4:	601a      	str	r2, [r3, #0]
		Acc_z = (int16_t)(data[4] << 8 | data[5])/accel_factor;
 80026e6:	7a3b      	ldrb	r3, [r7, #8]
 80026e8:	021b      	lsls	r3, r3, #8
 80026ea:	b21a      	sxth	r2, r3
 80026ec:	7a7b      	ldrb	r3, [r7, #9]
 80026ee:	b21b      	sxth	r3, r3
 80026f0:	4313      	orrs	r3, r2
 80026f2:	b21b      	sxth	r3, r3
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fd fec5 	bl	8000484 <__aeabi_i2d>
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	4b71      	ldr	r3, [pc, #452]	; (80028c4 <_Z15calibration_IMUv+0x2a4>)
 8002700:	f7fe f854 	bl	80007ac <__aeabi_ddiv>
 8002704:	4603      	mov	r3, r0
 8002706:	460c      	mov	r4, r1
 8002708:	4618      	mov	r0, r3
 800270a:	4621      	mov	r1, r4
 800270c:	f7fe fa1c 	bl	8000b48 <__aeabi_d2f>
 8002710:	4602      	mov	r2, r0
 8002712:	4b6f      	ldr	r3, [pc, #444]	; (80028d0 <_Z15calibration_IMUv+0x2b0>)
 8002714:	601a      	str	r2, [r3, #0]

	    temp = (int16_t)(data[6] << 8 | data[7]);
 8002716:	7abb      	ldrb	r3, [r7, #10]
 8002718:	021b      	lsls	r3, r3, #8
 800271a:	b21a      	sxth	r2, r3
 800271c:	7afb      	ldrb	r3, [r7, #11]
 800271e:	b21b      	sxth	r3, r3
 8002720:	4313      	orrs	r3, r2
 8002722:	b21b      	sxth	r3, r3
 8002724:	ee07 3a90 	vmov	s15, r3
 8002728:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800272c:	4b69      	ldr	r3, [pc, #420]	; (80028d4 <_Z15calibration_IMUv+0x2b4>)
 800272e:	edc3 7a00 	vstr	s15, [r3]

	    Gyro_x = (int16_t)(data[8] << 8 | data[9])/gyro_factor;
 8002732:	7b3b      	ldrb	r3, [r7, #12]
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	b21a      	sxth	r2, r3
 8002738:	7b7b      	ldrb	r3, [r7, #13]
 800273a:	b21b      	sxth	r3, r3
 800273c:	4313      	orrs	r3, r2
 800273e:	b21b      	sxth	r3, r3
 8002740:	4618      	mov	r0, r3
 8002742:	f7fd fe9f 	bl	8000484 <__aeabi_i2d>
 8002746:	a35c      	add	r3, pc, #368	; (adr r3, 80028b8 <_Z15calibration_IMUv+0x298>)
 8002748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274c:	f7fe f82e 	bl	80007ac <__aeabi_ddiv>
 8002750:	4603      	mov	r3, r0
 8002752:	460c      	mov	r4, r1
 8002754:	4618      	mov	r0, r3
 8002756:	4621      	mov	r1, r4
 8002758:	f7fe f9f6 	bl	8000b48 <__aeabi_d2f>
 800275c:	4602      	mov	r2, r0
 800275e:	4b5e      	ldr	r3, [pc, #376]	; (80028d8 <_Z15calibration_IMUv+0x2b8>)
 8002760:	601a      	str	r2, [r3, #0]
	    Gyro_y = (int16_t)(data[10] << 8 | data[11])/gyro_factor;
 8002762:	7bbb      	ldrb	r3, [r7, #14]
 8002764:	021b      	lsls	r3, r3, #8
 8002766:	b21a      	sxth	r2, r3
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	b21b      	sxth	r3, r3
 800276c:	4313      	orrs	r3, r2
 800276e:	b21b      	sxth	r3, r3
 8002770:	4618      	mov	r0, r3
 8002772:	f7fd fe87 	bl	8000484 <__aeabi_i2d>
 8002776:	a350      	add	r3, pc, #320	; (adr r3, 80028b8 <_Z15calibration_IMUv+0x298>)
 8002778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277c:	f7fe f816 	bl	80007ac <__aeabi_ddiv>
 8002780:	4603      	mov	r3, r0
 8002782:	460c      	mov	r4, r1
 8002784:	4618      	mov	r0, r3
 8002786:	4621      	mov	r1, r4
 8002788:	f7fe f9de 	bl	8000b48 <__aeabi_d2f>
 800278c:	4602      	mov	r2, r0
 800278e:	4b53      	ldr	r3, [pc, #332]	; (80028dc <_Z15calibration_IMUv+0x2bc>)
 8002790:	601a      	str	r2, [r3, #0]
	    Gyro_z = (int16_t)(data[12] << 8 | data[13])/gyro_factor;
 8002792:	7c3b      	ldrb	r3, [r7, #16]
 8002794:	021b      	lsls	r3, r3, #8
 8002796:	b21a      	sxth	r2, r3
 8002798:	7c7b      	ldrb	r3, [r7, #17]
 800279a:	b21b      	sxth	r3, r3
 800279c:	4313      	orrs	r3, r2
 800279e:	b21b      	sxth	r3, r3
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fd fe6f 	bl	8000484 <__aeabi_i2d>
 80027a6:	a344      	add	r3, pc, #272	; (adr r3, 80028b8 <_Z15calibration_IMUv+0x298>)
 80027a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ac:	f7fd fffe 	bl	80007ac <__aeabi_ddiv>
 80027b0:	4603      	mov	r3, r0
 80027b2:	460c      	mov	r4, r1
 80027b4:	4618      	mov	r0, r3
 80027b6:	4621      	mov	r1, r4
 80027b8:	f7fe f9c6 	bl	8000b48 <__aeabi_d2f>
 80027bc:	4602      	mov	r2, r0
 80027be:	4b48      	ldr	r3, [pc, #288]	; (80028e0 <_Z15calibration_IMUv+0x2c0>)
 80027c0:	601a      	str	r2, [r3, #0]

	    bAx += Acc_x;
 80027c2:	4b41      	ldr	r3, [pc, #260]	; (80028c8 <_Z15calibration_IMUv+0x2a8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fd fe6e 	bl	80004a8 <__aeabi_f2d>
 80027cc:	4b45      	ldr	r3, [pc, #276]	; (80028e4 <_Z15calibration_IMUv+0x2c4>)
 80027ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80027d2:	461a      	mov	r2, r3
 80027d4:	4623      	mov	r3, r4
 80027d6:	f7fd fd09 	bl	80001ec <__adddf3>
 80027da:	4603      	mov	r3, r0
 80027dc:	460c      	mov	r4, r1
 80027de:	4a41      	ldr	r2, [pc, #260]	; (80028e4 <_Z15calibration_IMUv+0x2c4>)
 80027e0:	e9c2 3400 	strd	r3, r4, [r2]
	    bAy += Acc_y;
 80027e4:	4b39      	ldr	r3, [pc, #228]	; (80028cc <_Z15calibration_IMUv+0x2ac>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fd fe5d 	bl	80004a8 <__aeabi_f2d>
 80027ee:	4b3e      	ldr	r3, [pc, #248]	; (80028e8 <_Z15calibration_IMUv+0x2c8>)
 80027f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80027f4:	461a      	mov	r2, r3
 80027f6:	4623      	mov	r3, r4
 80027f8:	f7fd fcf8 	bl	80001ec <__adddf3>
 80027fc:	4603      	mov	r3, r0
 80027fe:	460c      	mov	r4, r1
 8002800:	4a39      	ldr	r2, [pc, #228]	; (80028e8 <_Z15calibration_IMUv+0x2c8>)
 8002802:	e9c2 3400 	strd	r3, r4, [r2]
	    bAz += Acc_z;
 8002806:	4b32      	ldr	r3, [pc, #200]	; (80028d0 <_Z15calibration_IMUv+0x2b0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f7fd fe4c 	bl	80004a8 <__aeabi_f2d>
 8002810:	4b36      	ldr	r3, [pc, #216]	; (80028ec <_Z15calibration_IMUv+0x2cc>)
 8002812:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002816:	461a      	mov	r2, r3
 8002818:	4623      	mov	r3, r4
 800281a:	f7fd fce7 	bl	80001ec <__adddf3>
 800281e:	4603      	mov	r3, r0
 8002820:	460c      	mov	r4, r1
 8002822:	4a32      	ldr	r2, [pc, #200]	; (80028ec <_Z15calibration_IMUv+0x2cc>)
 8002824:	e9c2 3400 	strd	r3, r4, [r2]

	    bGx += Gyro_x;
 8002828:	4b2b      	ldr	r3, [pc, #172]	; (80028d8 <_Z15calibration_IMUv+0x2b8>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f7fd fe3b 	bl	80004a8 <__aeabi_f2d>
 8002832:	4b2f      	ldr	r3, [pc, #188]	; (80028f0 <_Z15calibration_IMUv+0x2d0>)
 8002834:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002838:	461a      	mov	r2, r3
 800283a:	4623      	mov	r3, r4
 800283c:	f7fd fcd6 	bl	80001ec <__adddf3>
 8002840:	4603      	mov	r3, r0
 8002842:	460c      	mov	r4, r1
 8002844:	4a2a      	ldr	r2, [pc, #168]	; (80028f0 <_Z15calibration_IMUv+0x2d0>)
 8002846:	e9c2 3400 	strd	r3, r4, [r2]
	    bGy += Gyro_y;
 800284a:	4b24      	ldr	r3, [pc, #144]	; (80028dc <_Z15calibration_IMUv+0x2bc>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7fd fe2a 	bl	80004a8 <__aeabi_f2d>
 8002854:	4b27      	ldr	r3, [pc, #156]	; (80028f4 <_Z15calibration_IMUv+0x2d4>)
 8002856:	e9d3 3400 	ldrd	r3, r4, [r3]
 800285a:	461a      	mov	r2, r3
 800285c:	4623      	mov	r3, r4
 800285e:	f7fd fcc5 	bl	80001ec <__adddf3>
 8002862:	4603      	mov	r3, r0
 8002864:	460c      	mov	r4, r1
 8002866:	4a23      	ldr	r2, [pc, #140]	; (80028f4 <_Z15calibration_IMUv+0x2d4>)
 8002868:	e9c2 3400 	strd	r3, r4, [r2]
	    bGz += Gyro_z;
 800286c:	4b1c      	ldr	r3, [pc, #112]	; (80028e0 <_Z15calibration_IMUv+0x2c0>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f7fd fe19 	bl	80004a8 <__aeabi_f2d>
 8002876:	4b20      	ldr	r3, [pc, #128]	; (80028f8 <_Z15calibration_IMUv+0x2d8>)
 8002878:	e9d3 3400 	ldrd	r3, r4, [r3]
 800287c:	461a      	mov	r2, r3
 800287e:	4623      	mov	r3, r4
 8002880:	f7fd fcb4 	bl	80001ec <__adddf3>
 8002884:	4603      	mov	r3, r0
 8002886:	460c      	mov	r4, r1
 8002888:	4a1b      	ldr	r2, [pc, #108]	; (80028f8 <_Z15calibration_IMUv+0x2d8>)
 800288a:	e9c2 3400 	strd	r3, r4, [r2]
	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 800288e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002892:	481a      	ldr	r0, [pc, #104]	; (80028fc <_Z15calibration_IMUv+0x2dc>)
 8002894:	f003 fb43 	bl	8005f1e <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8002898:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800289c:	4817      	ldr	r0, [pc, #92]	; (80028fc <_Z15calibration_IMUv+0x2dc>)
 800289e:	f003 fb3e 	bl	8005f1e <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80028a2:	2104      	movs	r1, #4
 80028a4:	4815      	ldr	r0, [pc, #84]	; (80028fc <_Z15calibration_IMUv+0x2dc>)
 80028a6:	f003 fb3a 	bl	8005f1e <HAL_GPIO_TogglePin>
	    HAL_Delay(30);
 80028aa:	201e      	movs	r0, #30
 80028ac:	f002 fd88 	bl	80053c0 <HAL_Delay>
        for(int i = 0; i<200; i++){
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	3301      	adds	r3, #1
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	e6bc      	b.n	8002632 <_Z15calibration_IMUv+0x12>
 80028b8:	66666666 	.word	0x66666666
 80028bc:	40306666 	.word	0x40306666
 80028c0:	200007f4 	.word	0x200007f4
 80028c4:	40d00000 	.word	0x40d00000
 80028c8:	200009e4 	.word	0x200009e4
 80028cc:	200009e8 	.word	0x200009e8
 80028d0:	200009ec 	.word	0x200009ec
 80028d4:	20000990 	.word	0x20000990
 80028d8:	200009f0 	.word	0x200009f0
 80028dc:	200009f4 	.word	0x200009f4
 80028e0:	200009f8 	.word	0x200009f8
 80028e4:	200009a0 	.word	0x200009a0
 80028e8:	200009a8 	.word	0x200009a8
 80028ec:	200009b0 	.word	0x200009b0
 80028f0:	200009b8 	.word	0x200009b8
 80028f4:	200009c0 	.word	0x200009c0
 80028f8:	200009c8 	.word	0x200009c8
 80028fc:	40020400 	.word	0x40020400
        }

     bAx /= 200;
 8002900:	4b5c      	ldr	r3, [pc, #368]	; (8002a74 <_Z15calibration_IMUv+0x454>)
 8002902:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	4b5b      	ldr	r3, [pc, #364]	; (8002a78 <_Z15calibration_IMUv+0x458>)
 800290c:	f7fd ff4e 	bl	80007ac <__aeabi_ddiv>
 8002910:	4603      	mov	r3, r0
 8002912:	460c      	mov	r4, r1
 8002914:	4a57      	ldr	r2, [pc, #348]	; (8002a74 <_Z15calibration_IMUv+0x454>)
 8002916:	e9c2 3400 	strd	r3, r4, [r2]
     bAy /= 200;
 800291a:	4b58      	ldr	r3, [pc, #352]	; (8002a7c <_Z15calibration_IMUv+0x45c>)
 800291c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	4b54      	ldr	r3, [pc, #336]	; (8002a78 <_Z15calibration_IMUv+0x458>)
 8002926:	f7fd ff41 	bl	80007ac <__aeabi_ddiv>
 800292a:	4603      	mov	r3, r0
 800292c:	460c      	mov	r4, r1
 800292e:	4a53      	ldr	r2, [pc, #332]	; (8002a7c <_Z15calibration_IMUv+0x45c>)
 8002930:	e9c2 3400 	strd	r3, r4, [r2]
     bAz /= 200;
 8002934:	4b52      	ldr	r3, [pc, #328]	; (8002a80 <_Z15calibration_IMUv+0x460>)
 8002936:	e9d3 0100 	ldrd	r0, r1, [r3]
 800293a:	f04f 0200 	mov.w	r2, #0
 800293e:	4b4e      	ldr	r3, [pc, #312]	; (8002a78 <_Z15calibration_IMUv+0x458>)
 8002940:	f7fd ff34 	bl	80007ac <__aeabi_ddiv>
 8002944:	4603      	mov	r3, r0
 8002946:	460c      	mov	r4, r1
 8002948:	4a4d      	ldr	r2, [pc, #308]	; (8002a80 <_Z15calibration_IMUv+0x460>)
 800294a:	e9c2 3400 	strd	r3, r4, [r2]
     g = sqrt(bAx*bAx + bAy*bAy + bAz*bAz);
 800294e:	4b49      	ldr	r3, [pc, #292]	; (8002a74 <_Z15calibration_IMUv+0x454>)
 8002950:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002954:	4b47      	ldr	r3, [pc, #284]	; (8002a74 <_Z15calibration_IMUv+0x454>)
 8002956:	e9d3 3400 	ldrd	r3, r4, [r3]
 800295a:	461a      	mov	r2, r3
 800295c:	4623      	mov	r3, r4
 800295e:	f7fd fdfb 	bl	8000558 <__aeabi_dmul>
 8002962:	4603      	mov	r3, r0
 8002964:	460c      	mov	r4, r1
 8002966:	461d      	mov	r5, r3
 8002968:	4626      	mov	r6, r4
 800296a:	4b44      	ldr	r3, [pc, #272]	; (8002a7c <_Z15calibration_IMUv+0x45c>)
 800296c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002970:	4b42      	ldr	r3, [pc, #264]	; (8002a7c <_Z15calibration_IMUv+0x45c>)
 8002972:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002976:	461a      	mov	r2, r3
 8002978:	4623      	mov	r3, r4
 800297a:	f7fd fded 	bl	8000558 <__aeabi_dmul>
 800297e:	4603      	mov	r3, r0
 8002980:	460c      	mov	r4, r1
 8002982:	461a      	mov	r2, r3
 8002984:	4623      	mov	r3, r4
 8002986:	4628      	mov	r0, r5
 8002988:	4631      	mov	r1, r6
 800298a:	f7fd fc2f 	bl	80001ec <__adddf3>
 800298e:	4603      	mov	r3, r0
 8002990:	460c      	mov	r4, r1
 8002992:	461d      	mov	r5, r3
 8002994:	4626      	mov	r6, r4
 8002996:	4b3a      	ldr	r3, [pc, #232]	; (8002a80 <_Z15calibration_IMUv+0x460>)
 8002998:	e9d3 0100 	ldrd	r0, r1, [r3]
 800299c:	4b38      	ldr	r3, [pc, #224]	; (8002a80 <_Z15calibration_IMUv+0x460>)
 800299e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80029a2:	461a      	mov	r2, r3
 80029a4:	4623      	mov	r3, r4
 80029a6:	f7fd fdd7 	bl	8000558 <__aeabi_dmul>
 80029aa:	4603      	mov	r3, r0
 80029ac:	460c      	mov	r4, r1
 80029ae:	461a      	mov	r2, r3
 80029b0:	4623      	mov	r3, r4
 80029b2:	4628      	mov	r0, r5
 80029b4:	4631      	mov	r1, r6
 80029b6:	f7fd fc19 	bl	80001ec <__adddf3>
 80029ba:	4603      	mov	r3, r0
 80029bc:	460c      	mov	r4, r1
 80029be:	ec44 3b17 	vmov	d7, r3, r4
 80029c2:	eeb0 0a47 	vmov.f32	s0, s14
 80029c6:	eef0 0a67 	vmov.f32	s1, s15
 80029ca:	f008 fbdb 	bl	800b184 <sqrt>
 80029ce:	eeb0 7a40 	vmov.f32	s14, s0
 80029d2:	eef0 7a60 	vmov.f32	s15, s1
 80029d6:	4b2b      	ldr	r3, [pc, #172]	; (8002a84 <_Z15calibration_IMUv+0x464>)
 80029d8:	ed83 7b00 	vstr	d7, [r3]
     bAz = -1 - bAz;
 80029dc:	4b28      	ldr	r3, [pc, #160]	; (8002a80 <_Z15calibration_IMUv+0x460>)
 80029de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80029e2:	461a      	mov	r2, r3
 80029e4:	4623      	mov	r3, r4
 80029e6:	f04f 0000 	mov.w	r0, #0
 80029ea:	4927      	ldr	r1, [pc, #156]	; (8002a88 <_Z15calibration_IMUv+0x468>)
 80029ec:	f7fd fbfc 	bl	80001e8 <__aeabi_dsub>
 80029f0:	4603      	mov	r3, r0
 80029f2:	460c      	mov	r4, r1
 80029f4:	4a22      	ldr	r2, [pc, #136]	; (8002a80 <_Z15calibration_IMUv+0x460>)
 80029f6:	e9c2 3400 	strd	r3, r4, [r2]
     bGx /= 200;
 80029fa:	4b24      	ldr	r3, [pc, #144]	; (8002a8c <_Z15calibration_IMUv+0x46c>)
 80029fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a00:	f04f 0200 	mov.w	r2, #0
 8002a04:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <_Z15calibration_IMUv+0x458>)
 8002a06:	f7fd fed1 	bl	80007ac <__aeabi_ddiv>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	460c      	mov	r4, r1
 8002a0e:	4a1f      	ldr	r2, [pc, #124]	; (8002a8c <_Z15calibration_IMUv+0x46c>)
 8002a10:	e9c2 3400 	strd	r3, r4, [r2]
     bGy /= 200;
 8002a14:	4b1e      	ldr	r3, [pc, #120]	; (8002a90 <_Z15calibration_IMUv+0x470>)
 8002a16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a1a:	f04f 0200 	mov.w	r2, #0
 8002a1e:	4b16      	ldr	r3, [pc, #88]	; (8002a78 <_Z15calibration_IMUv+0x458>)
 8002a20:	f7fd fec4 	bl	80007ac <__aeabi_ddiv>
 8002a24:	4603      	mov	r3, r0
 8002a26:	460c      	mov	r4, r1
 8002a28:	4a19      	ldr	r2, [pc, #100]	; (8002a90 <_Z15calibration_IMUv+0x470>)
 8002a2a:	e9c2 3400 	strd	r3, r4, [r2]
     bGz /= 200;
 8002a2e:	4b19      	ldr	r3, [pc, #100]	; (8002a94 <_Z15calibration_IMUv+0x474>)
 8002a30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	4b0f      	ldr	r3, [pc, #60]	; (8002a78 <_Z15calibration_IMUv+0x458>)
 8002a3a:	f7fd feb7 	bl	80007ac <__aeabi_ddiv>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	460c      	mov	r4, r1
 8002a42:	4a14      	ldr	r2, [pc, #80]	; (8002a94 <_Z15calibration_IMUv+0x474>)
 8002a44:	e9c2 3400 	strd	r3, r4, [r2]

	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a4e:	4812      	ldr	r0, [pc, #72]	; (8002a98 <_Z15calibration_IMUv+0x478>)
 8002a50:	f003 fa4c 	bl	8005eec <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 8002a54:	2200      	movs	r2, #0
 8002a56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a5a:	480f      	ldr	r0, [pc, #60]	; (8002a98 <_Z15calibration_IMUv+0x478>)
 8002a5c:	f003 fa46 	bl	8005eec <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_RESET);
 8002a60:	2200      	movs	r2, #0
 8002a62:	2104      	movs	r1, #4
 8002a64:	480c      	ldr	r0, [pc, #48]	; (8002a98 <_Z15calibration_IMUv+0x478>)
 8002a66:	f003 fa41 	bl	8005eec <HAL_GPIO_WritePin>
}
 8002a6a:	bf00      	nop
 8002a6c:	371c      	adds	r7, #28
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a72:	bf00      	nop
 8002a74:	200009a0 	.word	0x200009a0
 8002a78:	40690000 	.word	0x40690000
 8002a7c:	200009a8 	.word	0x200009a8
 8002a80:	200009b0 	.word	0x200009b0
 8002a84:	200009d0 	.word	0x200009d0
 8002a88:	bff00000 	.word	0xbff00000
 8002a8c:	200009b8 	.word	0x200009b8
 8002a90:	200009c0 	.word	0x200009c0
 8002a94:	200009c8 	.word	0x200009c8
 8002a98:	40020400 	.word	0x40020400

08002a9c <_Z11sbus_decodePh>:
}ESC_value;




ESC_value sbus_decode(uint8_t data[7]){
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
	ESC_value value;
	value.esc_value1 = (data[0] << 3) | ((data[1] & 0b11100000)>>5);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	b21a      	sxth	r2, r3
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	095b      	lsrs	r3, r3, #5
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	b21b      	sxth	r3, r3
 8002aba:	4313      	orrs	r3, r2
 8002abc:	b21b      	sxth	r3, r3
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	801a      	strh	r2, [r3, #0]
	value.esc_value2 = ((data[1] & 0b00011111)<<6)|((data[2] & 0b11111100)>>2);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	019b      	lsls	r3, r3, #6
 8002acc:	b21b      	sxth	r3, r3
 8002ace:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002ad2:	b21a      	sxth	r2, r3
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	3302      	adds	r3, #2
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	089b      	lsrs	r3, r3, #2
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	b21b      	sxth	r3, r3
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	b21b      	sxth	r3, r3
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	805a      	strh	r2, [r3, #2]
	value.esc_value3 = (((data[2] &0b00000011)<<9)|(data[3]<<1))|((data[4] & 0b10000000)>>7);
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	3302      	adds	r3, #2
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	025b      	lsls	r3, r3, #9
 8002af2:	b21b      	sxth	r3, r3
 8002af4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002af8:	b21a      	sxth	r2, r3
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	3303      	adds	r3, #3
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	b21b      	sxth	r3, r3
 8002b04:	4313      	orrs	r3, r2
 8002b06:	b21a      	sxth	r2, r3
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	09db      	lsrs	r3, r3, #7
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	b21b      	sxth	r3, r3
 8002b14:	4313      	orrs	r3, r2
 8002b16:	b21b      	sxth	r3, r3
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	809a      	strh	r2, [r3, #4]
	value.esc_value4 = ((data[4] & 0b01111111)<<4)|(data[5])>>4;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	3304      	adds	r3, #4
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	b21b      	sxth	r3, r3
 8002b28:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8002b2c:	b21a      	sxth	r2, r3
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	3305      	adds	r3, #5
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	111b      	asrs	r3, r3, #4
 8002b36:	b21b      	sxth	r3, r3
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	b21b      	sxth	r3, r3
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	80da      	strh	r2, [r3, #6]
    value.crc = data[6];
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	3306      	adds	r3, #6
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	811a      	strh	r2, [r3, #8]
	return value;
 8002b4e:	bf00      	nop
}
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <_Z9check_CRC9ESC_value>:
bool check_CRC(ESC_value value){
 8002b5c:	b480      	push	{r7}
 8002b5e:	b087      	sub	sp, #28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	1d3b      	adds	r3, r7, #4
 8002b64:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint16_t check = value.esc_value1 + value.esc_value2 + value.esc_value3 + value.esc_value4;
 8002b68:	88ba      	ldrh	r2, [r7, #4]
 8002b6a:	88fb      	ldrh	r3, [r7, #6]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	893b      	ldrh	r3, [r7, #8]
 8002b72:	4413      	add	r3, r2
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	897b      	ldrh	r3, [r7, #10]
 8002b78:	4413      	add	r3, r2
 8002b7a:	82fb      	strh	r3, [r7, #22]
    if(check % 37 != value.crc)
 8002b7c:	8afa      	ldrh	r2, [r7, #22]
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <_Z9check_CRC9ESC_value+0x58>)
 8002b80:	fba3 1302 	umull	r1, r3, r3, r2
 8002b84:	1ad1      	subs	r1, r2, r3
 8002b86:	0849      	lsrs	r1, r1, #1
 8002b88:	440b      	add	r3, r1
 8002b8a:	0959      	lsrs	r1, r3, #5
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	440b      	add	r3, r1
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	89bb      	ldrh	r3, [r7, #12]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d001      	beq.n	8002ba4 <_Z9check_CRC9ESC_value+0x48>
    	return false;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	e000      	b.n	8002ba6 <_Z9check_CRC9ESC_value+0x4a>
    return true;
 8002ba4:	2301      	movs	r3, #1
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	371c      	adds	r7, #28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	bacf914d 	.word	0xbacf914d

08002bb8 <_Z8init_ESCv>:
void init_ESC(){
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start(&htim4);
 8002bbe:	4830      	ldr	r0, [pc, #192]	; (8002c80 <_Z8init_ESCv+0xc8>)
 8002bc0:	f004 ff17 	bl	80079f2 <HAL_TIM_Base_Start>
	  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	482f      	ldr	r0, [pc, #188]	; (8002c84 <_Z8init_ESCv+0xcc>)
 8002bc8:	f004 ff90 	bl	8007aec <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8002bcc:	2104      	movs	r1, #4
 8002bce:	482d      	ldr	r0, [pc, #180]	; (8002c84 <_Z8init_ESCv+0xcc>)
 8002bd0:	f004 ff8c 	bl	8007aec <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8002bd4:	2108      	movs	r1, #8
 8002bd6:	482b      	ldr	r0, [pc, #172]	; (8002c84 <_Z8init_ESCv+0xcc>)
 8002bd8:	f004 ff88 	bl	8007aec <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8002bdc:	210c      	movs	r1, #12
 8002bde:	4829      	ldr	r0, [pc, #164]	; (8002c84 <_Z8init_ESCv+0xcc>)
 8002be0:	f004 ff84 	bl	8007aec <HAL_TIM_PWM_Start>
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1000);
 8002be4:	4b27      	ldr	r3, [pc, #156]	; (8002c84 <_Z8init_ESCv+0xcc>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bec:	635a      	str	r2, [r3, #52]	; 0x34
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1000);
 8002bee:	4b25      	ldr	r3, [pc, #148]	; (8002c84 <_Z8init_ESCv+0xcc>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bf6:	639a      	str	r2, [r3, #56]	; 0x38
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 1000);
 8002bf8:	4b22      	ldr	r3, [pc, #136]	; (8002c84 <_Z8init_ESCv+0xcc>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c00:	63da      	str	r2, [r3, #60]	; 0x3c
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1000);
 8002c02:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <_Z8init_ESCv+0xcc>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c0a:	641a      	str	r2, [r3, #64]	; 0x40

        for(int i = 0; i < 5; i++){
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	607b      	str	r3, [r7, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	dc1a      	bgt.n	8002c4c <_Z8init_ESCv+0x94>
        	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8002c16:	2104      	movs	r1, #4
 8002c18:	481b      	ldr	r0, [pc, #108]	; (8002c88 <_Z8init_ESCv+0xd0>)
 8002c1a:	f003 f980 	bl	8005f1e <HAL_GPIO_TogglePin>
        	HAL_Delay(50);
 8002c1e:	2032      	movs	r0, #50	; 0x32
 8002c20:	f002 fbce 	bl	80053c0 <HAL_Delay>
        	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8002c24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c28:	4817      	ldr	r0, [pc, #92]	; (8002c88 <_Z8init_ESCv+0xd0>)
 8002c2a:	f003 f978 	bl	8005f1e <HAL_GPIO_TogglePin>
        	HAL_Delay(50);
 8002c2e:	2032      	movs	r0, #50	; 0x32
 8002c30:	f002 fbc6 	bl	80053c0 <HAL_Delay>
        	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8002c34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c38:	4813      	ldr	r0, [pc, #76]	; (8002c88 <_Z8init_ESCv+0xd0>)
 8002c3a:	f003 f970 	bl	8005f1e <HAL_GPIO_TogglePin>
        	HAL_Delay(50);
 8002c3e:	2032      	movs	r0, #50	; 0x32
 8002c40:	f002 fbbe 	bl	80053c0 <HAL_Delay>
        for(int i = 0; i < 5; i++){
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3301      	adds	r3, #1
 8002c48:	607b      	str	r3, [r7, #4]
 8002c4a:	e7e1      	b.n	8002c10 <_Z8init_ESCv+0x58>
        }
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_RESET);
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2104      	movs	r1, #4
 8002c50:	480d      	ldr	r0, [pc, #52]	; (8002c88 <_Z8init_ESCv+0xd0>)
 8002c52:	f003 f94b 	bl	8005eec <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 8002c56:	2200      	movs	r2, #0
 8002c58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c5c:	480a      	ldr	r0, [pc, #40]	; (8002c88 <_Z8init_ESCv+0xd0>)
 8002c5e:	f003 f945 	bl	8005eec <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 8002c62:	2200      	movs	r2, #0
 8002c64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c68:	4807      	ldr	r0, [pc, #28]	; (8002c88 <_Z8init_ESCv+0xd0>)
 8002c6a:	f003 f93f 	bl	8005eec <HAL_GPIO_WritePin>
	    HAL_Delay(1000);
 8002c6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c72:	f002 fba5 	bl	80053c0 <HAL_Delay>
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	200008c8 	.word	0x200008c8
 8002c84:	20000888 	.word	0x20000888
 8002c88:	40020400 	.word	0x40020400

08002c8c <_Z7set_ESC9ESC_value>:

void set_ESC(ESC_value esc){
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	1d3b      	adds	r3, r7, #4
 8002c94:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,esc.esc_value1);
 8002c98:	88ba      	ldrh	r2, [r7, #4]
 8002c9a:	4b0a      	ldr	r3, [pc, #40]	; (8002cc4 <_Z7set_ESC9ESC_value+0x38>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	635a      	str	r2, [r3, #52]	; 0x34
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, esc.esc_value2);
 8002ca0:	88fa      	ldrh	r2, [r7, #6]
 8002ca2:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <_Z7set_ESC9ESC_value+0x38>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	639a      	str	r2, [r3, #56]	; 0x38
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,esc.esc_value3);
 8002ca8:	893a      	ldrh	r2, [r7, #8]
 8002caa:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <_Z7set_ESC9ESC_value+0x38>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	63da      	str	r2, [r3, #60]	; 0x3c
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,esc.esc_value4);
 8002cb0:	897a      	ldrh	r2, [r7, #10]
 8002cb2:	4b04      	ldr	r3, [pc, #16]	; (8002cc4 <_Z7set_ESC9ESC_value+0x38>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002cb8:	bf00      	nop
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	20000888 	.word	0x20000888

08002cc8 <_Z21MadgwickAHRSupdateIMU8IMU_dataf>:
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

EULER_angle MadgwickAHRSupdateIMU(IMU_data data,float dt) {
 8002cc8:	b084      	sub	sp, #16
 8002cca:	b590      	push	{r4, r7, lr}
 8002ccc:	b0af      	sub	sp, #188	; 0xbc
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8002cd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002cd8:	ed87 0a05 	vstr	s0, [r7, #20]
	float s0, s1, s2, s3;
	float gx,gy,gz,ax,ay,az;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	gx =  data.Gyro_x/180*PI;
 8002cdc:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8002ce0:	ed9f 7aeb 	vldr	s14, [pc, #940]	; 8003090 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3c8>
 8002ce4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ce8:	ee16 0a90 	vmov	r0, s13
 8002cec:	f7fd fbdc 	bl	80004a8 <__aeabi_f2d>
 8002cf0:	a3e5      	add	r3, pc, #916	; (adr r3, 8003088 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3c0>)
 8002cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf6:	f7fd fc2f 	bl	8000558 <__aeabi_dmul>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	460c      	mov	r4, r1
 8002cfe:	4618      	mov	r0, r3
 8002d00:	4621      	mov	r1, r4
 8002d02:	f7fd ff21 	bl	8000b48 <__aeabi_d2f>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	gy =  data.Gyro_y/180*PI;
 8002d0c:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8002d10:	ed9f 7adf 	vldr	s14, [pc, #892]	; 8003090 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3c8>
 8002d14:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002d18:	ee16 0a90 	vmov	r0, s13
 8002d1c:	f7fd fbc4 	bl	80004a8 <__aeabi_f2d>
 8002d20:	a3d9      	add	r3, pc, #868	; (adr r3, 8003088 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3c0>)
 8002d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d26:	f7fd fc17 	bl	8000558 <__aeabi_dmul>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	460c      	mov	r4, r1
 8002d2e:	4618      	mov	r0, r3
 8002d30:	4621      	mov	r1, r4
 8002d32:	f7fd ff09 	bl	8000b48 <__aeabi_d2f>
 8002d36:	4603      	mov	r3, r0
 8002d38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	gz =  data.Gyro_z/180*PI;
 8002d3c:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8002d40:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 8003090 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3c8>
 8002d44:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002d48:	ee16 0a90 	vmov	r0, s13
 8002d4c:	f7fd fbac 	bl	80004a8 <__aeabi_f2d>
 8002d50:	a3cd      	add	r3, pc, #820	; (adr r3, 8003088 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3c0>)
 8002d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d56:	f7fd fbff 	bl	8000558 <__aeabi_dmul>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	460c      	mov	r4, r1
 8002d5e:	4618      	mov	r0, r3
 8002d60:	4621      	mov	r1, r4
 8002d62:	f7fd fef1 	bl	8000b48 <__aeabi_d2f>
 8002d66:	4603      	mov	r3, r0
 8002d68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	ax =  data.Acc_x;
 8002d6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	ay =  data.Acc_y;
 8002d74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	az =  data.Acc_z;
 8002d7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8002d84:	4bc3      	ldr	r3, [pc, #780]	; (8003094 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3cc>)
 8002d86:	edd3 7a00 	vldr	s15, [r3]
 8002d8a:	eeb1 7a67 	vneg.f32	s14, s15
 8002d8e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002d92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d96:	4bc0      	ldr	r3, [pc, #768]	; (8003098 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d0>)
 8002d98:	edd3 6a00 	vldr	s13, [r3]
 8002d9c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002da0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002da4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002da8:	4bbc      	ldr	r3, [pc, #752]	; (800309c <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d4>)
 8002daa:	edd3 6a00 	vldr	s13, [r3]
 8002dae:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002db2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002dbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dc2:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8002dc6:	4bb6      	ldr	r3, [pc, #728]	; (80030a0 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d8>)
 8002dc8:	ed93 7a00 	vldr	s14, [r3]
 8002dcc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002dd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dd4:	4bb0      	ldr	r3, [pc, #704]	; (8003098 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d0>)
 8002dd6:	edd3 6a00 	vldr	s13, [r3]
 8002dda:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002dde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002de2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002de6:	4bad      	ldr	r3, [pc, #692]	; (800309c <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d4>)
 8002de8:	edd3 6a00 	vldr	s13, [r3]
 8002dec:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002df0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002df4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002df8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002dfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e00:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8002e04:	4ba6      	ldr	r3, [pc, #664]	; (80030a0 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d8>)
 8002e06:	ed93 7a00 	vldr	s14, [r3]
 8002e0a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002e0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e12:	4ba0      	ldr	r3, [pc, #640]	; (8003094 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3cc>)
 8002e14:	edd3 6a00 	vldr	s13, [r3]
 8002e18:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002e1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e24:	4b9d      	ldr	r3, [pc, #628]	; (800309c <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d4>)
 8002e26:	edd3 6a00 	vldr	s13, [r3]
 8002e2a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002e2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e36:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002e3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e3e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8002e42:	4b97      	ldr	r3, [pc, #604]	; (80030a0 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d8>)
 8002e44:	ed93 7a00 	vldr	s14, [r3]
 8002e48:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002e4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e50:	4b90      	ldr	r3, [pc, #576]	; (8003094 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3cc>)
 8002e52:	edd3 6a00 	vldr	s13, [r3]
 8002e56:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002e5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e62:	4b8d      	ldr	r3, [pc, #564]	; (8003098 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d0>)
 8002e64:	edd3 6a00 	vldr	s13, [r3]
 8002e68:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002e6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e74:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002e78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e7c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8002e80:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002e84:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e8c:	d10e      	bne.n	8002eac <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x1e4>
 8002e8e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002e92:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e9a:	d107      	bne.n	8002eac <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x1e4>
 8002e9c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002ea0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea8:	f000 81fb 	beq.w	80032a2 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x5da>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8002eac:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002eb0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002eb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eb8:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8002ebc:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002ec0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ec4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ec8:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8002ecc:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ed4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ed8:	eeb0 0a67 	vmov.f32	s0, s15
 8002edc:	f7fe fba0 	bl	8001620 <_Z7invSqrtf>
 8002ee0:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
		ax *= recipNorm;
 8002ee4:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002ee8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ef0:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		ay *= recipNorm;
 8002ef4:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002ef8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f00:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		az *= recipNorm;
 8002f04:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002f08:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f10:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8002f14:	4b62      	ldr	r3, [pc, #392]	; (80030a0 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d8>)
 8002f16:	edd3 7a00 	vldr	s15, [r3]
 8002f1a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f1e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		_2q1 = 2.0f * q1;
 8002f22:	4b5c      	ldr	r3, [pc, #368]	; (8003094 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3cc>)
 8002f24:	edd3 7a00 	vldr	s15, [r3]
 8002f28:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f2c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		_2q2 = 2.0f * q2;
 8002f30:	4b59      	ldr	r3, [pc, #356]	; (8003098 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d0>)
 8002f32:	edd3 7a00 	vldr	s15, [r3]
 8002f36:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f3a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		_2q3 = 2.0f * q3;
 8002f3e:	4b57      	ldr	r3, [pc, #348]	; (800309c <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d4>)
 8002f40:	edd3 7a00 	vldr	s15, [r3]
 8002f44:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f48:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		_4q0 = 4.0f * q0;
 8002f4c:	4b54      	ldr	r3, [pc, #336]	; (80030a0 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d8>)
 8002f4e:	edd3 7a00 	vldr	s15, [r3]
 8002f52:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002f56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f5a:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		_4q1 = 4.0f * q1;
 8002f5e:	4b4d      	ldr	r3, [pc, #308]	; (8003094 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3cc>)
 8002f60:	edd3 7a00 	vldr	s15, [r3]
 8002f64:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002f68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f6c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		_4q2 = 4.0f * q2;
 8002f70:	4b49      	ldr	r3, [pc, #292]	; (8003098 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d0>)
 8002f72:	edd3 7a00 	vldr	s15, [r3]
 8002f76:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002f7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f7e:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		_8q1 = 8.0f * q1;
 8002f82:	4b44      	ldr	r3, [pc, #272]	; (8003094 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3cc>)
 8002f84:	edd3 7a00 	vldr	s15, [r3]
 8002f88:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f90:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		_8q2 = 8.0f * q2;
 8002f94:	4b40      	ldr	r3, [pc, #256]	; (8003098 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d0>)
 8002f96:	edd3 7a00 	vldr	s15, [r3]
 8002f9a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002f9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fa2:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		q0q0 = q0 * q0;
 8002fa6:	4b3e      	ldr	r3, [pc, #248]	; (80030a0 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d8>)
 8002fa8:	ed93 7a00 	vldr	s14, [r3]
 8002fac:	4b3c      	ldr	r3, [pc, #240]	; (80030a0 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d8>)
 8002fae:	edd3 7a00 	vldr	s15, [r3]
 8002fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fb6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		q1q1 = q1 * q1;
 8002fba:	4b36      	ldr	r3, [pc, #216]	; (8003094 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3cc>)
 8002fbc:	ed93 7a00 	vldr	s14, [r3]
 8002fc0:	4b34      	ldr	r3, [pc, #208]	; (8003094 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3cc>)
 8002fc2:	edd3 7a00 	vldr	s15, [r3]
 8002fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fca:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		q2q2 = q2 * q2;
 8002fce:	4b32      	ldr	r3, [pc, #200]	; (8003098 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d0>)
 8002fd0:	ed93 7a00 	vldr	s14, [r3]
 8002fd4:	4b30      	ldr	r3, [pc, #192]	; (8003098 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d0>)
 8002fd6:	edd3 7a00 	vldr	s15, [r3]
 8002fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fde:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		q3q3 = q3 * q3;
 8002fe2:	4b2e      	ldr	r3, [pc, #184]	; (800309c <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d4>)
 8002fe4:	ed93 7a00 	vldr	s14, [r3]
 8002fe8:	4b2c      	ldr	r3, [pc, #176]	; (800309c <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d4>)
 8002fea:	edd3 7a00 	vldr	s15, [r3]
 8002fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ff2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8002ff6:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002ffa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002ffe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003002:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8003006:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800300a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800300e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003012:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8003016:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800301a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800301e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003022:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8003026:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800302a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800302e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003032:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8003036:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800303a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800303e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003042:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8003046:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800304a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800304e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003052:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003056:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800305a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800305e:	4b0d      	ldr	r3, [pc, #52]	; (8003094 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3cc>)
 8003060:	edd3 7a00 	vldr	s15, [r3]
 8003064:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003068:	ee37 7a27 	vadd.f32	s14, s14, s15
 800306c:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8003070:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003074:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003078:	ee37 7a67 	vsub.f32	s14, s14, s15
 800307c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003080:	e010      	b.n	80030a4 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3dc>
 8003082:	bf00      	nop
 8003084:	f3af 8000 	nop.w
 8003088:	54524550 	.word	0x54524550
 800308c:	400921fb 	.word	0x400921fb
 8003090:	43340000 	.word	0x43340000
 8003094:	20000a2c 	.word	0x20000a2c
 8003098:	20000a30 	.word	0x20000a30
 800309c:	20000a34 	.word	0x20000a34
 80030a0:	200004c4 	.word	0x200004c4
 80030a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030a8:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80030ac:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80030b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030b8:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80030bc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80030c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030c8:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 80030cc:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80030d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030d8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80030dc:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80030e0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80030e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030e8:	4be3      	ldr	r3, [pc, #908]	; (8003478 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b0>)
 80030ea:	edd3 7a00 	vldr	s15, [r3]
 80030ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030f2:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80030f6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80030fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003102:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8003106:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800310a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800310e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003112:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8003116:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800311a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800311e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003122:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003126:	ee37 7a67 	vsub.f32	s14, s14, s15
 800312a:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800312e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003132:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003136:	ee37 7a27 	vadd.f32	s14, s14, s15
 800313a:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800313e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003142:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003146:	ee37 7a27 	vadd.f32	s14, s14, s15
 800314a:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 800314e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003152:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003156:	ee77 7a27 	vadd.f32	s15, s14, s15
 800315a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 800315e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003162:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003166:	ee27 7a87 	vmul.f32	s14, s15, s14
 800316a:	4bc4      	ldr	r3, [pc, #784]	; (800347c <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b4>)
 800316c:	edd3 7a00 	vldr	s15, [r3]
 8003170:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003174:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8003178:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800317c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003180:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003184:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003188:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800318c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003190:	4bba      	ldr	r3, [pc, #744]	; (800347c <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b4>)
 8003192:	edd3 7a00 	vldr	s15, [r3]
 8003196:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800319a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800319e:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 80031a2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80031a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031ae:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80031b2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80031b6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80031ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031be:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80031c2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80031c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031ce:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80031d2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80031d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031de:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80031e2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80031e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ee:	eeb0 0a67 	vmov.f32	s0, s15
 80031f2:	f7fe fa15 	bl	8001620 <_Z7invSqrtf>
 80031f6:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
		s0 *= recipNorm;
 80031fa:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80031fe:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003206:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		s1 *= recipNorm;
 800320a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800320e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003216:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		s2 *= recipNorm;
 800321a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800321e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003226:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		s3 *= recipNorm;
 800322a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800322e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003236:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

		// Apply feedback step
		qDot1 -= beta * s0;
 800323a:	4b91      	ldr	r3, [pc, #580]	; (8003480 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b8>)
 800323c:	ed93 7a00 	vldr	s14, [r3]
 8003240:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003248:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800324c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003250:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		qDot2 -= beta * s1;
 8003254:	4b8a      	ldr	r3, [pc, #552]	; (8003480 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b8>)
 8003256:	ed93 7a00 	vldr	s14, [r3]
 800325a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800325e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003262:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8003266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800326a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		qDot3 -= beta * s2;
 800326e:	4b84      	ldr	r3, [pc, #528]	; (8003480 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b8>)
 8003270:	ed93 7a00 	vldr	s14, [r3]
 8003274:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800327c:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8003280:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003284:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		qDot4 -= beta * s3;
 8003288:	4b7d      	ldr	r3, [pc, #500]	; (8003480 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b8>)
 800328a:	ed93 7a00 	vldr	s14, [r3]
 800328e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003296:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 800329a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800329e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (dt);
 80032a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80032a6:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80032aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032ae:	4b75      	ldr	r3, [pc, #468]	; (8003484 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7bc>)
 80032b0:	edd3 7a00 	vldr	s15, [r3]
 80032b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032b8:	4b72      	ldr	r3, [pc, #456]	; (8003484 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7bc>)
 80032ba:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (dt);
 80032be:	ed97 7a05 	vldr	s14, [r7, #20]
 80032c2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80032c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032ca:	4b6f      	ldr	r3, [pc, #444]	; (8003488 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7c0>)
 80032cc:	edd3 7a00 	vldr	s15, [r3]
 80032d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032d4:	4b6c      	ldr	r3, [pc, #432]	; (8003488 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7c0>)
 80032d6:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (dt);
 80032da:	ed97 7a05 	vldr	s14, [r7, #20]
 80032de:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80032e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032e6:	4b64      	ldr	r3, [pc, #400]	; (8003478 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b0>)
 80032e8:	edd3 7a00 	vldr	s15, [r3]
 80032ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f0:	4b61      	ldr	r3, [pc, #388]	; (8003478 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b0>)
 80032f2:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (dt);
 80032f6:	ed97 7a05 	vldr	s14, [r7, #20]
 80032fa:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80032fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003302:	4b5e      	ldr	r3, [pc, #376]	; (800347c <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b4>)
 8003304:	edd3 7a00 	vldr	s15, [r3]
 8003308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800330c:	4b5b      	ldr	r3, [pc, #364]	; (800347c <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b4>)
 800330e:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8003312:	4b5c      	ldr	r3, [pc, #368]	; (8003484 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7bc>)
 8003314:	ed93 7a00 	vldr	s14, [r3]
 8003318:	4b5a      	ldr	r3, [pc, #360]	; (8003484 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7bc>)
 800331a:	edd3 7a00 	vldr	s15, [r3]
 800331e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003322:	4b59      	ldr	r3, [pc, #356]	; (8003488 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7c0>)
 8003324:	edd3 6a00 	vldr	s13, [r3]
 8003328:	4b57      	ldr	r3, [pc, #348]	; (8003488 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7c0>)
 800332a:	edd3 7a00 	vldr	s15, [r3]
 800332e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003332:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003336:	4b50      	ldr	r3, [pc, #320]	; (8003478 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b0>)
 8003338:	edd3 6a00 	vldr	s13, [r3]
 800333c:	4b4e      	ldr	r3, [pc, #312]	; (8003478 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b0>)
 800333e:	edd3 7a00 	vldr	s15, [r3]
 8003342:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003346:	ee37 7a27 	vadd.f32	s14, s14, s15
 800334a:	4b4c      	ldr	r3, [pc, #304]	; (800347c <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b4>)
 800334c:	edd3 6a00 	vldr	s13, [r3]
 8003350:	4b4a      	ldr	r3, [pc, #296]	; (800347c <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b4>)
 8003352:	edd3 7a00 	vldr	s15, [r3]
 8003356:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800335a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800335e:	eeb0 0a67 	vmov.f32	s0, s15
 8003362:	f7fe f95d 	bl	8001620 <_Z7invSqrtf>
 8003366:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
	q0 *= recipNorm;
 800336a:	4b46      	ldr	r3, [pc, #280]	; (8003484 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7bc>)
 800336c:	ed93 7a00 	vldr	s14, [r3]
 8003370:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003378:	4b42      	ldr	r3, [pc, #264]	; (8003484 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7bc>)
 800337a:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 800337e:	4b42      	ldr	r3, [pc, #264]	; (8003488 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7c0>)
 8003380:	ed93 7a00 	vldr	s14, [r3]
 8003384:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800338c:	4b3e      	ldr	r3, [pc, #248]	; (8003488 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7c0>)
 800338e:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8003392:	4b39      	ldr	r3, [pc, #228]	; (8003478 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b0>)
 8003394:	ed93 7a00 	vldr	s14, [r3]
 8003398:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800339c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033a0:	4b35      	ldr	r3, [pc, #212]	; (8003478 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b0>)
 80033a2:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 80033a6:	4b35      	ldr	r3, [pc, #212]	; (800347c <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b4>)
 80033a8:	ed93 7a00 	vldr	s14, [r3]
 80033ac:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80033b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033b4:	4b31      	ldr	r3, [pc, #196]	; (800347c <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b4>)
 80033b6:	edc3 7a00 	vstr	s15, [r3]


	float sinr = 2*(q0*q1 + q2 * q3);
 80033ba:	4b32      	ldr	r3, [pc, #200]	; (8003484 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7bc>)
 80033bc:	ed93 7a00 	vldr	s14, [r3]
 80033c0:	4b31      	ldr	r3, [pc, #196]	; (8003488 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7c0>)
 80033c2:	edd3 7a00 	vldr	s15, [r3]
 80033c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033ca:	4b2b      	ldr	r3, [pc, #172]	; (8003478 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b0>)
 80033cc:	edd3 6a00 	vldr	s13, [r3]
 80033d0:	4b2a      	ldr	r3, [pc, #168]	; (800347c <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b4>)
 80033d2:	edd3 7a00 	vldr	s15, [r3]
 80033d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80033e2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	float cosr = 1 - 2*(q1*q1 + q2 * q2);
 80033e6:	4b28      	ldr	r3, [pc, #160]	; (8003488 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7c0>)
 80033e8:	ed93 7a00 	vldr	s14, [r3]
 80033ec:	4b26      	ldr	r3, [pc, #152]	; (8003488 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7c0>)
 80033ee:	edd3 7a00 	vldr	s15, [r3]
 80033f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033f6:	4b20      	ldr	r3, [pc, #128]	; (8003478 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b0>)
 80033f8:	edd3 6a00 	vldr	s13, [r3]
 80033fc:	4b1e      	ldr	r3, [pc, #120]	; (8003478 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b0>)
 80033fe:	edd3 7a00 	vldr	s15, [r3]
 8003402:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800340a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800340e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003412:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003416:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	magd_r = atan2(sinr, cosr);
 800341a:	edd7 0a10 	vldr	s1, [r7, #64]	; 0x40
 800341e:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8003422:	f7fd ffad 	bl	8001380 <_ZSt5atan2ff>
 8003426:	eef0 7a40 	vmov.f32	s15, s0
 800342a:	4b18      	ldr	r3, [pc, #96]	; (800348c <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7c4>)
 800342c:	edc3 7a00 	vstr	s15, [r3]


	float sinp = 2*( q0*q2 - q3*q1);
 8003430:	4b14      	ldr	r3, [pc, #80]	; (8003484 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7bc>)
 8003432:	ed93 7a00 	vldr	s14, [r3]
 8003436:	4b10      	ldr	r3, [pc, #64]	; (8003478 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b0>)
 8003438:	edd3 7a00 	vldr	s15, [r3]
 800343c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003440:	4b0e      	ldr	r3, [pc, #56]	; (800347c <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b4>)
 8003442:	edd3 6a00 	vldr	s13, [r3]
 8003446:	4b10      	ldr	r3, [pc, #64]	; (8003488 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7c0>)
 8003448:	edd3 7a00 	vldr	s15, [r3]
 800344c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003450:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003454:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003458:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    if (sinp >= 1)
 800345c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003460:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003464:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800346c:	db14      	blt.n	8003498 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7d0>
    	magd_p = PI/2;
 800346e:	4b08      	ldr	r3, [pc, #32]	; (8003490 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7c8>)
 8003470:	4a08      	ldr	r2, [pc, #32]	; (8003494 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7cc>)
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	e026      	b.n	80034c4 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7fc>
 8003476:	bf00      	nop
 8003478:	20000a30 	.word	0x20000a30
 800347c:	20000a34 	.word	0x20000a34
 8003480:	200004c0 	.word	0x200004c0
 8003484:	200004c4 	.word	0x200004c4
 8003488:	20000a2c 	.word	0x20000a2c
 800348c:	20000a20 	.word	0x20000a20
 8003490:	20000a24 	.word	0x20000a24
 8003494:	3fc90fdb 	.word	0x3fc90fdb
    else{
    	if(sinp <= -1){
 8003498:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800349c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80034a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a8:	d803      	bhi.n	80034b2 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7ea>
    	magd_p = -PI/2;
 80034aa:	4b4f      	ldr	r3, [pc, #316]	; (80035e8 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x920>)
 80034ac:	4a4f      	ldr	r2, [pc, #316]	; (80035ec <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x924>)
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	e008      	b.n	80034c4 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7fc>
    }
    else{
    	magd_p = asin(sinp);
 80034b2:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80034b6:	f7fd ff53 	bl	8001360 <_ZSt4asinf>
 80034ba:	eef0 7a40 	vmov.f32	s15, s0
 80034be:	4b4a      	ldr	r3, [pc, #296]	; (80035e8 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x920>)
 80034c0:	edc3 7a00 	vstr	s15, [r3]
    }
    }


	float siny = 2*( q0*q3 + q2*q1);
 80034c4:	4b4a      	ldr	r3, [pc, #296]	; (80035f0 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x928>)
 80034c6:	ed93 7a00 	vldr	s14, [r3]
 80034ca:	4b4a      	ldr	r3, [pc, #296]	; (80035f4 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x92c>)
 80034cc:	edd3 7a00 	vldr	s15, [r3]
 80034d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034d4:	4b48      	ldr	r3, [pc, #288]	; (80035f8 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x930>)
 80034d6:	edd3 6a00 	vldr	s13, [r3]
 80034da:	4b48      	ldr	r3, [pc, #288]	; (80035fc <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x934>)
 80034dc:	edd3 7a00 	vldr	s15, [r3]
 80034e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80034ec:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float cosy = 1 - 2*( q1*q1 + q3*q3);
 80034f0:	4b42      	ldr	r3, [pc, #264]	; (80035fc <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x934>)
 80034f2:	ed93 7a00 	vldr	s14, [r3]
 80034f6:	4b41      	ldr	r3, [pc, #260]	; (80035fc <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x934>)
 80034f8:	edd3 7a00 	vldr	s15, [r3]
 80034fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003500:	4b3c      	ldr	r3, [pc, #240]	; (80035f4 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x92c>)
 8003502:	edd3 6a00 	vldr	s13, [r3]
 8003506:	4b3b      	ldr	r3, [pc, #236]	; (80035f4 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x92c>)
 8003508:	edd3 7a00 	vldr	s15, [r3]
 800350c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003514:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003518:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800351c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003520:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	magd_y = atan2(siny, cosy);
 8003524:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 8003528:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 800352c:	f7fd ff28 	bl	8001380 <_ZSt5atan2ff>
 8003530:	eef0 7a40 	vmov.f32	s15, s0
 8003534:	4b32      	ldr	r3, [pc, #200]	; (8003600 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x938>)
 8003536:	edc3 7a00 	vstr	s15, [r3]

	angle_e.roll = magd_r*RAD2DEC;
 800353a:	4b32      	ldr	r3, [pc, #200]	; (8003604 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x93c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f7fc ffb2 	bl	80004a8 <__aeabi_f2d>
 8003544:	a326      	add	r3, pc, #152	; (adr r3, 80035e0 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x918>)
 8003546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354a:	f7fd f805 	bl	8000558 <__aeabi_dmul>
 800354e:	4603      	mov	r3, r0
 8003550:	460c      	mov	r4, r1
 8003552:	4618      	mov	r0, r3
 8003554:	4621      	mov	r1, r4
 8003556:	f7fd faf7 	bl	8000b48 <__aeabi_d2f>
 800355a:	4603      	mov	r3, r0
 800355c:	61fb      	str	r3, [r7, #28]
	angle_e.pitch = magd_p*RAD2DEC;
 800355e:	4b22      	ldr	r3, [pc, #136]	; (80035e8 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x920>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f7fc ffa0 	bl	80004a8 <__aeabi_f2d>
 8003568:	a31d      	add	r3, pc, #116	; (adr r3, 80035e0 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x918>)
 800356a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356e:	f7fc fff3 	bl	8000558 <__aeabi_dmul>
 8003572:	4603      	mov	r3, r0
 8003574:	460c      	mov	r4, r1
 8003576:	4618      	mov	r0, r3
 8003578:	4621      	mov	r1, r4
 800357a:	f7fd fae5 	bl	8000b48 <__aeabi_d2f>
 800357e:	4603      	mov	r3, r0
 8003580:	623b      	str	r3, [r7, #32]
	angle_e.yaw = magd_y*RAD2DEC;
 8003582:	4b1f      	ldr	r3, [pc, #124]	; (8003600 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x938>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f7fc ff8e 	bl	80004a8 <__aeabi_f2d>
 800358c:	a314      	add	r3, pc, #80	; (adr r3, 80035e0 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x918>)
 800358e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003592:	f7fc ffe1 	bl	8000558 <__aeabi_dmul>
 8003596:	4603      	mov	r3, r0
 8003598:	460c      	mov	r4, r1
 800359a:	4618      	mov	r0, r3
 800359c:	4621      	mov	r1, r4
 800359e:	f7fd fad3 	bl	8000b48 <__aeabi_d2f>
 80035a2:	4603      	mov	r3, r0
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
	return angle_e;
 80035a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035aa:	f107 021c 	add.w	r2, r7, #28
 80035ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80035b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80035b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ba:	ee06 1a90 	vmov	s13, r1
 80035be:	ee07 2a10 	vmov	s14, r2
 80035c2:	ee07 3a90 	vmov	s15, r3
}
 80035c6:	eeb0 0a66 	vmov.f32	s0, s13
 80035ca:	eef0 0a47 	vmov.f32	s1, s14
 80035ce:	eeb0 1a67 	vmov.f32	s2, s15
 80035d2:	37bc      	adds	r7, #188	; 0xbc
 80035d4:	46bd      	mov	sp, r7
 80035d6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80035da:	b004      	add	sp, #16
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	1a5d2372 	.word	0x1a5d2372
 80035e4:	404ca5dc 	.word	0x404ca5dc
 80035e8:	20000a24 	.word	0x20000a24
 80035ec:	bfc90fdb 	.word	0xbfc90fdb
 80035f0:	200004c4 	.word	0x200004c4
 80035f4:	20000a34 	.word	0x20000a34
 80035f8:	20000a30 	.word	0x20000a30
 80035fc:	20000a2c 	.word	0x20000a2c
 8003600:	20000a28 	.word	0x20000a28
 8003604:	20000a20 	.word	0x20000a20

08003608 <_Z9print_raw8IMU_data>:
	  u.temp_array[i] = bytes_array[i];
  }
  return   u.float_variable;
}

void print_raw(IMU_data data_raw){
 8003608:	b084      	sub	sp, #16
 800360a:	b5b0      	push	{r4, r5, r7, lr}
 800360c:	b084      	sub	sp, #16
 800360e:	af00      	add	r7, sp, #0
 8003610:	f107 0420 	add.w	r4, r7, #32
 8003614:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	        char buffer[10];
            ftoa(data_raw.Gyro_x, buffer, 2);
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	4618      	mov	r0, r3
 800361c:	f7fc ff44 	bl	80004a8 <__aeabi_f2d>
 8003620:	4604      	mov	r4, r0
 8003622:	460d      	mov	r5, r1
 8003624:	1d3b      	adds	r3, r7, #4
 8003626:	2102      	movs	r1, #2
 8003628:	4618      	mov	r0, r3
 800362a:	ec45 4b10 	vmov	d0, r4, r5
 800362e:	f7fd febb 	bl	80013a8 <_Z4ftoadPci>
            strcat(buffer," ");
 8003632:	1d3b      	adds	r3, r7, #4
 8003634:	4618      	mov	r0, r3
 8003636:	f7fc fdcb 	bl	80001d0 <strlen>
 800363a:	4603      	mov	r3, r0
 800363c:	461a      	mov	r2, r3
 800363e:	1d3b      	adds	r3, r7, #4
 8003640:	4413      	add	r3, r2
 8003642:	496b      	ldr	r1, [pc, #428]	; (80037f0 <_Z9print_raw8IMU_data+0x1e8>)
 8003644:	461a      	mov	r2, r3
 8003646:	460b      	mov	r3, r1
 8003648:	881b      	ldrh	r3, [r3, #0]
 800364a:	8013      	strh	r3, [r2, #0]
            HAL_UART_Transmit(&huart1,(uint8_t*) buffer, strlen(buffer),1000);
 800364c:	1d3b      	adds	r3, r7, #4
 800364e:	4618      	mov	r0, r3
 8003650:	f7fc fdbe 	bl	80001d0 <strlen>
 8003654:	4603      	mov	r3, r0
 8003656:	b29a      	uxth	r2, r3
 8003658:	1d39      	adds	r1, r7, #4
 800365a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800365e:	4865      	ldr	r0, [pc, #404]	; (80037f4 <_Z9print_raw8IMU_data+0x1ec>)
 8003660:	f005 f96f 	bl	8008942 <HAL_UART_Transmit>

            ftoa(data_raw.Gyro_y, buffer, 2);
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	4618      	mov	r0, r3
 8003668:	f7fc ff1e 	bl	80004a8 <__aeabi_f2d>
 800366c:	4604      	mov	r4, r0
 800366e:	460d      	mov	r5, r1
 8003670:	1d3b      	adds	r3, r7, #4
 8003672:	2102      	movs	r1, #2
 8003674:	4618      	mov	r0, r3
 8003676:	ec45 4b10 	vmov	d0, r4, r5
 800367a:	f7fd fe95 	bl	80013a8 <_Z4ftoadPci>
            strcat(buffer," ");
 800367e:	1d3b      	adds	r3, r7, #4
 8003680:	4618      	mov	r0, r3
 8003682:	f7fc fda5 	bl	80001d0 <strlen>
 8003686:	4603      	mov	r3, r0
 8003688:	461a      	mov	r2, r3
 800368a:	1d3b      	adds	r3, r7, #4
 800368c:	4413      	add	r3, r2
 800368e:	4958      	ldr	r1, [pc, #352]	; (80037f0 <_Z9print_raw8IMU_data+0x1e8>)
 8003690:	461a      	mov	r2, r3
 8003692:	460b      	mov	r3, r1
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	8013      	strh	r3, [r2, #0]
            HAL_UART_Transmit(&huart1,(uint8_t*) buffer, strlen(buffer),1000);
 8003698:	1d3b      	adds	r3, r7, #4
 800369a:	4618      	mov	r0, r3
 800369c:	f7fc fd98 	bl	80001d0 <strlen>
 80036a0:	4603      	mov	r3, r0
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	1d39      	adds	r1, r7, #4
 80036a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036aa:	4852      	ldr	r0, [pc, #328]	; (80037f4 <_Z9print_raw8IMU_data+0x1ec>)
 80036ac:	f005 f949 	bl	8008942 <HAL_UART_Transmit>

            ftoa(data_raw.Gyro_z, buffer, 2);
 80036b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fc fef8 	bl	80004a8 <__aeabi_f2d>
 80036b8:	4604      	mov	r4, r0
 80036ba:	460d      	mov	r5, r1
 80036bc:	1d3b      	adds	r3, r7, #4
 80036be:	2102      	movs	r1, #2
 80036c0:	4618      	mov	r0, r3
 80036c2:	ec45 4b10 	vmov	d0, r4, r5
 80036c6:	f7fd fe6f 	bl	80013a8 <_Z4ftoadPci>
            strcat(buffer," ");
 80036ca:	1d3b      	adds	r3, r7, #4
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fc fd7f 	bl	80001d0 <strlen>
 80036d2:	4603      	mov	r3, r0
 80036d4:	461a      	mov	r2, r3
 80036d6:	1d3b      	adds	r3, r7, #4
 80036d8:	4413      	add	r3, r2
 80036da:	4945      	ldr	r1, [pc, #276]	; (80037f0 <_Z9print_raw8IMU_data+0x1e8>)
 80036dc:	461a      	mov	r2, r3
 80036de:	460b      	mov	r3, r1
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	8013      	strh	r3, [r2, #0]
            HAL_UART_Transmit(&huart1,(uint8_t*) buffer, strlen(buffer),1000);
 80036e4:	1d3b      	adds	r3, r7, #4
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fc fd72 	bl	80001d0 <strlen>
 80036ec:	4603      	mov	r3, r0
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	1d39      	adds	r1, r7, #4
 80036f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036f6:	483f      	ldr	r0, [pc, #252]	; (80037f4 <_Z9print_raw8IMU_data+0x1ec>)
 80036f8:	f005 f923 	bl	8008942 <HAL_UART_Transmit>

            ftoa(data_raw.Acc_x, buffer, 2);
 80036fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fc fed2 	bl	80004a8 <__aeabi_f2d>
 8003704:	4604      	mov	r4, r0
 8003706:	460d      	mov	r5, r1
 8003708:	1d3b      	adds	r3, r7, #4
 800370a:	2102      	movs	r1, #2
 800370c:	4618      	mov	r0, r3
 800370e:	ec45 4b10 	vmov	d0, r4, r5
 8003712:	f7fd fe49 	bl	80013a8 <_Z4ftoadPci>
            strcat(buffer," ");
 8003716:	1d3b      	adds	r3, r7, #4
 8003718:	4618      	mov	r0, r3
 800371a:	f7fc fd59 	bl	80001d0 <strlen>
 800371e:	4603      	mov	r3, r0
 8003720:	461a      	mov	r2, r3
 8003722:	1d3b      	adds	r3, r7, #4
 8003724:	4413      	add	r3, r2
 8003726:	4932      	ldr	r1, [pc, #200]	; (80037f0 <_Z9print_raw8IMU_data+0x1e8>)
 8003728:	461a      	mov	r2, r3
 800372a:	460b      	mov	r3, r1
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	8013      	strh	r3, [r2, #0]
            HAL_UART_Transmit(&huart1,(uint8_t*) buffer, strlen(buffer),1000);
 8003730:	1d3b      	adds	r3, r7, #4
 8003732:	4618      	mov	r0, r3
 8003734:	f7fc fd4c 	bl	80001d0 <strlen>
 8003738:	4603      	mov	r3, r0
 800373a:	b29a      	uxth	r2, r3
 800373c:	1d39      	adds	r1, r7, #4
 800373e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003742:	482c      	ldr	r0, [pc, #176]	; (80037f4 <_Z9print_raw8IMU_data+0x1ec>)
 8003744:	f005 f8fd 	bl	8008942 <HAL_UART_Transmit>

            ftoa(data_raw.Acc_y, buffer, 2);
 8003748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374a:	4618      	mov	r0, r3
 800374c:	f7fc feac 	bl	80004a8 <__aeabi_f2d>
 8003750:	4604      	mov	r4, r0
 8003752:	460d      	mov	r5, r1
 8003754:	1d3b      	adds	r3, r7, #4
 8003756:	2102      	movs	r1, #2
 8003758:	4618      	mov	r0, r3
 800375a:	ec45 4b10 	vmov	d0, r4, r5
 800375e:	f7fd fe23 	bl	80013a8 <_Z4ftoadPci>
            strcat(buffer," ");
 8003762:	1d3b      	adds	r3, r7, #4
 8003764:	4618      	mov	r0, r3
 8003766:	f7fc fd33 	bl	80001d0 <strlen>
 800376a:	4603      	mov	r3, r0
 800376c:	461a      	mov	r2, r3
 800376e:	1d3b      	adds	r3, r7, #4
 8003770:	4413      	add	r3, r2
 8003772:	491f      	ldr	r1, [pc, #124]	; (80037f0 <_Z9print_raw8IMU_data+0x1e8>)
 8003774:	461a      	mov	r2, r3
 8003776:	460b      	mov	r3, r1
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	8013      	strh	r3, [r2, #0]
            HAL_UART_Transmit(&huart1,(uint8_t*) buffer, strlen(buffer),1000);
 800377c:	1d3b      	adds	r3, r7, #4
 800377e:	4618      	mov	r0, r3
 8003780:	f7fc fd26 	bl	80001d0 <strlen>
 8003784:	4603      	mov	r3, r0
 8003786:	b29a      	uxth	r2, r3
 8003788:	1d39      	adds	r1, r7, #4
 800378a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800378e:	4819      	ldr	r0, [pc, #100]	; (80037f4 <_Z9print_raw8IMU_data+0x1ec>)
 8003790:	f005 f8d7 	bl	8008942 <HAL_UART_Transmit>

            ftoa(data_raw.Acc_z, buffer, 2);
 8003794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003796:	4618      	mov	r0, r3
 8003798:	f7fc fe86 	bl	80004a8 <__aeabi_f2d>
 800379c:	4604      	mov	r4, r0
 800379e:	460d      	mov	r5, r1
 80037a0:	1d3b      	adds	r3, r7, #4
 80037a2:	2102      	movs	r1, #2
 80037a4:	4618      	mov	r0, r3
 80037a6:	ec45 4b10 	vmov	d0, r4, r5
 80037aa:	f7fd fdfd 	bl	80013a8 <_Z4ftoadPci>
            strcat(buffer,"\n");
 80037ae:	1d3b      	adds	r3, r7, #4
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fc fd0d 	bl	80001d0 <strlen>
 80037b6:	4603      	mov	r3, r0
 80037b8:	461a      	mov	r2, r3
 80037ba:	1d3b      	adds	r3, r7, #4
 80037bc:	4413      	add	r3, r2
 80037be:	490e      	ldr	r1, [pc, #56]	; (80037f8 <_Z9print_raw8IMU_data+0x1f0>)
 80037c0:	461a      	mov	r2, r3
 80037c2:	460b      	mov	r3, r1
 80037c4:	881b      	ldrh	r3, [r3, #0]
 80037c6:	8013      	strh	r3, [r2, #0]
            HAL_UART_Transmit(&huart1,(uint8_t*) buffer, strlen(buffer),1000);
 80037c8:	1d3b      	adds	r3, r7, #4
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fc fd00 	bl	80001d0 <strlen>
 80037d0:	4603      	mov	r3, r0
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	1d39      	adds	r1, r7, #4
 80037d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037da:	4806      	ldr	r0, [pc, #24]	; (80037f4 <_Z9print_raw8IMU_data+0x1ec>)
 80037dc:	f005 f8b1 	bl	8008942 <HAL_UART_Transmit>
//
//         	ftoa(data_raw.Mag_z, buffer, 2);
//         	strcat(buffer,"\n");
//         	HAL_UART_Transmit(&huart1,buffer, strlen(buffer),1000);

}
 80037e0:	bf00      	nop
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80037ea:	b004      	add	sp, #16
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	0800b8dc 	.word	0x0800b8dc
 80037f4:	20000908 	.word	0x20000908
 80037f8:	0800b8e0 	.word	0x0800b8e0

080037fc <_ZN6Matrix9get_valueEPd>:
	double data[49];
	bool inv = true;
	Matrix(int row, int col);
	virtual ~Matrix();

    int get_value(double* data){
 80037fc:	b490      	push	{r4, r7}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
    	for (int i = 0; i < row; i++)
 8003806:	2300      	movs	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	429a      	cmp	r2, r3
 8003812:	da27      	bge.n	8003864 <_ZN6Matrix9get_valueEPd+0x68>
    	    for (int j = 0; j < col; j++)
 8003814:	2300      	movs	r3, #0
 8003816:	60bb      	str	r3, [r7, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	429a      	cmp	r2, r3
 8003820:	da1c      	bge.n	800385c <_ZN6Matrix9get_valueEPd+0x60>
    	    	this->data[i*col + j] = data[i*col + j];
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	fb02 f203 	mul.w	r2, r2, r3
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	4413      	add	r3, r2
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	4413      	add	r3, r2
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6892      	ldr	r2, [r2, #8]
 800383a:	68f9      	ldr	r1, [r7, #12]
 800383c:	fb01 f102 	mul.w	r1, r1, r2
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	440a      	add	r2, r1
 8003844:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	3202      	adds	r2, #2
 800384c:	00d2      	lsls	r2, r2, #3
 800384e:	440a      	add	r2, r1
 8003850:	e9c2 3400 	strd	r3, r4, [r2]
    	    for (int j = 0; j < col; j++)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	3301      	adds	r3, #1
 8003858:	60bb      	str	r3, [r7, #8]
 800385a:	e7dd      	b.n	8003818 <_ZN6Matrix9get_valueEPd+0x1c>
    	for (int i = 0; i < row; i++)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	3301      	adds	r3, #1
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	e7d2      	b.n	800380a <_ZN6Matrix9get_valueEPd+0xe>
    	return 0;
 8003864:	2300      	movs	r3, #0
    }
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bc90      	pop	{r4, r7}
 800386e:	4770      	bx	lr

08003870 <_ZN6MatrixC1Eii>:
//    	return 0;
//    }
    double det();
};

Matrix::Matrix(int row, int col){
 8003870:	b490      	push	{r4, r7}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	4a1b      	ldr	r2, [pc, #108]	; (80038ec <_ZN6MatrixC1Eii+0x7c>)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	    this->row = row;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	605a      	str	r2, [r3, #4]
	    this->col = col;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	609a      	str	r2, [r3, #8]


	    for (int i = 0; i < row; i++)
 8003896:	2300      	movs	r3, #0
 8003898:	617b      	str	r3, [r7, #20]
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	429a      	cmp	r2, r3
 80038a0:	da1d      	bge.n	80038de <_ZN6MatrixC1Eii+0x6e>
	    	   for (int j = 0; j < col; j++){
 80038a2:	2300      	movs	r3, #0
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	da13      	bge.n	80038d6 <_ZN6MatrixC1Eii+0x66>
	    		   this->data[i*col + j] = 0;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	fb02 f203 	mul.w	r2, r2, r3
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	4413      	add	r3, r2
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	3302      	adds	r3, #2
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	441a      	add	r2, r3
 80038c2:	f04f 0300 	mov.w	r3, #0
 80038c6:	f04f 0400 	mov.w	r4, #0
 80038ca:	e9c2 3400 	strd	r3, r4, [r2]
	    	   for (int j = 0; j < col; j++){
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	3301      	adds	r3, #1
 80038d2:	613b      	str	r3, [r7, #16]
 80038d4:	e7e7      	b.n	80038a6 <_ZN6MatrixC1Eii+0x36>
	    for (int i = 0; i < row; i++)
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	3301      	adds	r3, #1
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	e7dd      	b.n	800389a <_ZN6MatrixC1Eii+0x2a>
	    	   }
//	    			  this->data[i*col + j] = 0;
	}
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4618      	mov	r0, r3
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bc90      	pop	{r4, r7}
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	0800ba10 	.word	0x0800ba10

080038f0 <_ZN6MatrixD1Ev>:

Matrix::~Matrix() {
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	4a04      	ldr	r2, [pc, #16]	; (800390c <_ZN6MatrixD1Ev+0x1c>)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub

}
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4618      	mov	r0, r3
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	0800ba10 	.word	0x0800ba10

08003910 <_ZN6MatrixD0Ev>:
Matrix::~Matrix() {
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
}
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7ff ffe9 	bl	80038f0 <_ZN6MatrixD1Ev>
 800391e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f007 fb4e 	bl	800afc4 <_ZdlPvj>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
	...

08003934 <_Z8diag_matii>:





Matrix diag_mat(int row, int col) {
 8003934:	b590      	push	{r4, r7, lr}
 8003936:	b087      	sub	sp, #28
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]

	// TODO Auto-generated constructor stub
	Matrix m = Matrix(row,col);
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	68b9      	ldr	r1, [r7, #8]
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f7ff ff93 	bl	8003870 <_ZN6MatrixC1Eii>
	for (int i = 0; i < row; i++)
 800394a:	2300      	movs	r3, #0
 800394c:	617b      	str	r3, [r7, #20]
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	429a      	cmp	r2, r3
 8003954:	da20      	bge.n	8003998 <_Z8diag_matii+0x64>
		for (int j = 0; j < col; j++)
 8003956:	2300      	movs	r3, #0
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	429a      	cmp	r2, r3
 8003960:	da16      	bge.n	8003990 <_Z8diag_matii+0x5c>
           if(i==j)
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	429a      	cmp	r2, r3
 8003968:	d10e      	bne.n	8003988 <_Z8diag_matii+0x54>
			 m.data[i*col + j] = 1;
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	fb02 f203 	mul.w	r2, r2, r3
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	4413      	add	r3, r2
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	3302      	adds	r3, #2
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	441a      	add	r2, r3
 800397e:	f04f 0300 	mov.w	r3, #0
 8003982:	4c08      	ldr	r4, [pc, #32]	; (80039a4 <_Z8diag_matii+0x70>)
 8003984:	e9c2 3400 	strd	r3, r4, [r2]
		for (int j = 0; j < col; j++)
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	3301      	adds	r3, #1
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	e7e4      	b.n	800395a <_Z8diag_matii+0x26>
	for (int i = 0; i < row; i++)
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	3301      	adds	r3, #1
 8003994:	617b      	str	r3, [r7, #20]
 8003996:	e7da      	b.n	800394e <_Z8diag_matii+0x1a>
   return m;
 8003998:	bf00      	nop
}
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	371c      	adds	r7, #28
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd90      	pop	{r4, r7, pc}
 80039a2:	bf00      	nop
 80039a4:	3ff00000 	.word	0x3ff00000

080039a8 <_ZN3EKF7loadEKFEPdS0_S0_S0_>:
	Matrix S = Matrix(6,6);
	Matrix R = Matrix(6,6);
	Matrix I = diag_mat(7, 7);
	Matrix w = Matrix(3,1);
public:
	void loadEKF(double* x_, double *P_, double* Q_, double*R_){
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
 80039b4:	603b      	str	r3, [r7, #0]
	      this->x.get_value(x_);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	3308      	adds	r3, #8
 80039ba:	68b9      	ldr	r1, [r7, #8]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff ff1d 	bl	80037fc <_ZN6Matrix9get_valueEPd>
	      this->P.get_value(P_);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 80039c8:	6879      	ldr	r1, [r7, #4]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff ff16 	bl	80037fc <_ZN6Matrix9get_valueEPd>
	      this->Q.get_value(Q_);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f603 0328 	addw	r3, r3, #2088	; 0x828
 80039d6:	6839      	ldr	r1, [r7, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff ff0f 	bl	80037fc <_ZN6Matrix9get_valueEPd>
	      this->R.get_value(R_);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f603 63a8 	addw	r3, r3, #3752	; 0xea8
 80039e4:	69b9      	ldr	r1, [r7, #24]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff ff08 	bl	80037fc <_ZN6Matrix9get_valueEPd>
	}
 80039ec:	bf00      	nop
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <_ZN3EKFC1Ev>:
			angle_e.yaw = y*RAD2DEC;
			return angle_e;
	}
	virtual ~EKF();
};
EKF::EKF(){
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	4a34      	ldr	r2, [pc, #208]	; (8003ad0 <_ZN3EKFC1Ev+0xdc>)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3308      	adds	r3, #8
 8003a06:	2201      	movs	r2, #1
 8003a08:	2107      	movs	r1, #7
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff ff30 	bl	8003870 <_ZN6MatrixC1Eii>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003a16:	2201      	movs	r2, #1
 8003a18:	2106      	movs	r1, #6
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7ff ff28 	bl	8003870 <_ZN6MatrixC1Eii>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8003a26:	2207      	movs	r2, #7
 8003a28:	2107      	movs	r1, #7
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7ff ff20 	bl	8003870 <_ZN6MatrixC1Eii>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 8003a36:	2203      	movs	r2, #3
 8003a38:	2107      	movs	r1, #7
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff ff18 	bl	8003870 <_ZN6MatrixC1Eii>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 8003a46:	2207      	movs	r2, #7
 8003a48:	2107      	movs	r1, #7
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff ff10 	bl	8003870 <_ZN6MatrixC1Eii>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f603 0328 	addw	r3, r3, #2088	; 0x828
 8003a56:	2207      	movs	r2, #7
 8003a58:	2107      	movs	r1, #7
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff ff08 	bl	8003870 <_ZN6MatrixC1Eii>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f603 13c8 	addw	r3, r3, #2504	; 0x9c8
 8003a66:	2207      	movs	r2, #7
 8003a68:	2106      	movs	r1, #6
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff ff00 	bl	8003870 <_ZN6MatrixC1Eii>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f603 3368 	addw	r3, r3, #2920	; 0xb68
 8003a76:	2206      	movs	r2, #6
 8003a78:	2107      	movs	r1, #7
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff fef8 	bl	8003870 <_ZN6MatrixC1Eii>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f603 5308 	addw	r3, r3, #3336	; 0xd08
 8003a86:	2206      	movs	r2, #6
 8003a88:	2106      	movs	r1, #6
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff fef0 	bl	8003870 <_ZN6MatrixC1Eii>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f603 63a8 	addw	r3, r3, #3752	; 0xea8
 8003a96:	2206      	movs	r2, #6
 8003a98:	2106      	movs	r1, #6
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7ff fee8 	bl	8003870 <_ZN6MatrixC1Eii>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8003aa6:	3308      	adds	r3, #8
 8003aa8:	2207      	movs	r2, #7
 8003aaa:	2107      	movs	r1, #7
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff ff41 	bl	8003934 <_Z8diag_matii>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f503 538f 	add.w	r3, r3, #4576	; 0x11e0
 8003ab8:	3308      	adds	r3, #8
 8003aba:	2201      	movs	r2, #1
 8003abc:	2103      	movs	r1, #3
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff fed6 	bl	8003870 <_ZN6MatrixC1Eii>

}
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	0800ba00 	.word	0x0800ba00

08003ad4 <_ZN3EKFD1Ev>:
EKF::~EKF() {
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	4a28      	ldr	r2, [pc, #160]	; (8003b80 <_ZN3EKFD1Ev+0xac>)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f503 538f 	add.w	r3, r3, #4576	; 0x11e0
 8003ae8:	3308      	adds	r3, #8
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff ff00 	bl	80038f0 <_ZN6MatrixD1Ev>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8003af6:	3308      	adds	r3, #8
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff fef9 	bl	80038f0 <_ZN6MatrixD1Ev>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f603 63a8 	addw	r3, r3, #3752	; 0xea8
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff fef3 	bl	80038f0 <_ZN6MatrixD1Ev>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f603 5308 	addw	r3, r3, #3336	; 0xd08
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff feed 	bl	80038f0 <_ZN6MatrixD1Ev>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f603 3368 	addw	r3, r3, #2920	; 0xb68
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff fee7 	bl	80038f0 <_ZN6MatrixD1Ev>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f603 13c8 	addw	r3, r3, #2504	; 0x9c8
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff fee1 	bl	80038f0 <_ZN6MatrixD1Ev>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f603 0328 	addw	r3, r3, #2088	; 0x828
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff fedb 	bl	80038f0 <_ZN6MatrixD1Ev>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff fed5 	bl	80038f0 <_ZN6MatrixD1Ev>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff fecf 	bl	80038f0 <_ZN6MatrixD1Ev>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff fec9 	bl	80038f0 <_ZN6MatrixD1Ev>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff fec3 	bl	80038f0 <_ZN6MatrixD1Ev>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3308      	adds	r3, #8
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff febe 	bl	80038f0 <_ZN6MatrixD1Ev>
	// TODO Auto-generated destructor stub
	 // free(this->data);
}
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4618      	mov	r0, r3
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	0800ba00 	.word	0x0800ba00

08003b84 <_ZN3EKFD0Ev>:
EKF::~EKF() {
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
}
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7ff ffa1 	bl	8003ad4 <_ZN3EKFD1Ev>
 8003b92:	f241 3188 	movw	r1, #5000	; 0x1388
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f007 fa14 	bl	800afc4 <_ZdlPvj>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
	...

08003ba8 <_Z7initBMPv>:
uint16_t AC4, AC5, AC6;

long x1, x2, x3, b3, b6, p, T;
unsigned long b4, b5, b7;
long UT,UP;
void initBMP(){
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af02      	add	r7, sp, #8
    while (HAL_I2C_IsDeviceReady(&hi2c1, (uint8_t) BMP_ADDRESS, 3, 2) != HAL_OK) {
 8003bae:	2302      	movs	r3, #2
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	21ee      	movs	r1, #238	; 0xee
 8003bb4:	488b      	ldr	r0, [pc, #556]	; (8003de4 <_Z7initBMPv+0x23c>)
 8003bb6:	f002 fe29 	bl	800680c <HAL_I2C_IsDeviceReady>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	bf14      	ite	ne
 8003bc0:	2301      	movne	r3, #1
 8003bc2:	2300      	moveq	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d012      	beq.n	8003bf0 <_Z7initBMPv+0x48>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_SET);
 8003bca:	2201      	movs	r2, #1
 8003bcc:	2104      	movs	r1, #4
 8003bce:	4886      	ldr	r0, [pc, #536]	; (8003de8 <_Z7initBMPv+0x240>)
 8003bd0:	f002 f98c 	bl	8005eec <HAL_GPIO_WritePin>
    	HAL_Delay(500);
 8003bd4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003bd8:	f001 fbf2 	bl	80053c0 <HAL_Delay>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_RESET);
 8003bdc:	2200      	movs	r2, #0
 8003bde:	2104      	movs	r1, #4
 8003be0:	4881      	ldr	r0, [pc, #516]	; (8003de8 <_Z7initBMPv+0x240>)
 8003be2:	f002 f983 	bl	8005eec <HAL_GPIO_WritePin>
    	HAL_Delay(500);
 8003be6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003bea:	f001 fbe9 	bl	80053c0 <HAL_Delay>
    while (HAL_I2C_IsDeviceReady(&hi2c1, (uint8_t) BMP_ADDRESS, 3, 2) != HAL_OK) {
 8003bee:	e7de      	b.n	8003bae <_Z7initBMPv+0x6>
      }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_SET);
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bf6:	487c      	ldr	r0, [pc, #496]	; (8003de8 <_Z7initBMPv+0x240>)
 8003bf8:	f002 f978 	bl	8005eec <HAL_GPIO_WritePin>

    uint8_t reg;
    uint8_t status;
    uint8_t d[2];
    reg = 0xD0;
 8003bfc:	23d0      	movs	r3, #208	; 0xd0
 8003bfe:	71bb      	strb	r3, [r7, #6]

	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)BMP_ADDRESS, &reg, 1, 1000) != HAL_OK);
 8003c00:	1dba      	adds	r2, r7, #6
 8003c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	2301      	movs	r3, #1
 8003c0a:	21ee      	movs	r1, #238	; 0xee
 8003c0c:	4875      	ldr	r0, [pc, #468]	; (8003de4 <_Z7initBMPv+0x23c>)
 8003c0e:	f002 fad9 	bl	80061c4 <HAL_I2C_Master_Transmit>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	bf14      	ite	ne
 8003c18:	2301      	movne	r3, #1
 8003c1a:	2300      	moveq	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d000      	beq.n	8003c24 <_Z7initBMPv+0x7c>
 8003c22:	e7ed      	b.n	8003c00 <_Z7initBMPv+0x58>
	while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)BMP_ADDRESS, &status,1, 1000) != HAL_OK);
 8003c24:	1d7a      	adds	r2, r7, #5
 8003c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	21ee      	movs	r1, #238	; 0xee
 8003c30:	486c      	ldr	r0, [pc, #432]	; (8003de4 <_Z7initBMPv+0x23c>)
 8003c32:	f002 fbc5 	bl	80063c0 <HAL_I2C_Master_Receive>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	bf14      	ite	ne
 8003c3c:	2301      	movne	r3, #1
 8003c3e:	2300      	moveq	r3, #0
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d000      	beq.n	8003c48 <_Z7initBMPv+0xa0>
 8003c46:	e7ed      	b.n	8003c24 <_Z7initBMPv+0x7c>
    if(status == 0x55){
 8003c48:	797b      	ldrb	r3, [r7, #5]
 8003c4a:	2b55      	cmp	r3, #85	; 0x55
 8003c4c:	d106      	bne.n	8003c5c <_Z7initBMPv+0xb4>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_SET);
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c54:	4864      	ldr	r0, [pc, #400]	; (8003de8 <_Z7initBMPv+0x240>)
 8003c56:	f002 f949 	bl	8005eec <HAL_GPIO_WritePin>
 8003c5a:	e00d      	b.n	8003c78 <_Z7initBMPv+0xd0>
    }
    else{
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_SET);
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	2104      	movs	r1, #4
 8003c60:	4861      	ldr	r0, [pc, #388]	; (8003de8 <_Z7initBMPv+0x240>)
 8003c62:	f002 f943 	bl	8005eec <HAL_GPIO_WritePin>
    	HAL_Delay(500);
 8003c66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003c6a:	f001 fba9 	bl	80053c0 <HAL_Delay>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_RESET);
 8003c6e:	2200      	movs	r2, #0
 8003c70:	2104      	movs	r1, #4
 8003c72:	485d      	ldr	r0, [pc, #372]	; (8003de8 <_Z7initBMPv+0x240>)
 8003c74:	f002 f93a 	bl	8005eec <HAL_GPIO_WritePin>
    }
/*Get calibration coff*/
    uint8_t count = 0;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	71fb      	strb	r3, [r7, #7]
    for(reg = 0xAA; reg<= 0xBF; reg++){
 8003c7c:	23aa      	movs	r3, #170	; 0xaa
 8003c7e:	71bb      	strb	r3, [r7, #6]
 8003c80:	79bb      	ldrb	r3, [r7, #6]
 8003c82:	2bbf      	cmp	r3, #191	; 0xbf
 8003c84:	d82d      	bhi.n	8003ce2 <_Z7initBMPv+0x13a>
    while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)BMP_ADDRESS, &reg, 1, 1000) != HAL_OK);
 8003c86:	1dba      	adds	r2, r7, #6
 8003c88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	2301      	movs	r3, #1
 8003c90:	21ee      	movs	r1, #238	; 0xee
 8003c92:	4854      	ldr	r0, [pc, #336]	; (8003de4 <_Z7initBMPv+0x23c>)
 8003c94:	f002 fa96 	bl	80061c4 <HAL_I2C_Master_Transmit>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	bf14      	ite	ne
 8003c9e:	2301      	movne	r3, #1
 8003ca0:	2300      	moveq	r3, #0
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d000      	beq.n	8003caa <_Z7initBMPv+0x102>
 8003ca8:	e7ed      	b.n	8003c86 <_Z7initBMPv+0xde>
    while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)BMP_ADDRESS,  &calib_data[count],1, 1000) != HAL_OK);
 8003caa:	79fb      	ldrb	r3, [r7, #7]
 8003cac:	4a4f      	ldr	r2, [pc, #316]	; (8003dec <_Z7initBMPv+0x244>)
 8003cae:	441a      	add	r2, r3
 8003cb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	21ee      	movs	r1, #238	; 0xee
 8003cba:	484a      	ldr	r0, [pc, #296]	; (8003de4 <_Z7initBMPv+0x23c>)
 8003cbc:	f002 fb80 	bl	80063c0 <HAL_I2C_Master_Receive>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	bf14      	ite	ne
 8003cc6:	2301      	movne	r3, #1
 8003cc8:	2300      	moveq	r3, #0
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d000      	beq.n	8003cd2 <_Z7initBMPv+0x12a>
 8003cd0:	e7eb      	b.n	8003caa <_Z7initBMPv+0x102>
    count++;
 8003cd2:	79fb      	ldrb	r3, [r7, #7]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	71fb      	strb	r3, [r7, #7]
    for(reg = 0xAA; reg<= 0xBF; reg++){
 8003cd8:	79bb      	ldrb	r3, [r7, #6]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	71bb      	strb	r3, [r7, #6]
 8003ce0:	e7ce      	b.n	8003c80 <_Z7initBMPv+0xd8>
    }

	AC1 = (int16_t)(calib_data[0] << 8 | calib_data[1]);
 8003ce2:	4b42      	ldr	r3, [pc, #264]	; (8003dec <_Z7initBMPv+0x244>)
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	021b      	lsls	r3, r3, #8
 8003ce8:	b21a      	sxth	r2, r3
 8003cea:	4b40      	ldr	r3, [pc, #256]	; (8003dec <_Z7initBMPv+0x244>)
 8003cec:	785b      	ldrb	r3, [r3, #1]
 8003cee:	b21b      	sxth	r3, r3
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	b21a      	sxth	r2, r3
 8003cf4:	4b3e      	ldr	r3, [pc, #248]	; (8003df0 <_Z7initBMPv+0x248>)
 8003cf6:	801a      	strh	r2, [r3, #0]
	AC2 = (int16_t)(calib_data[2] << 8 | calib_data[3]);
 8003cf8:	4b3c      	ldr	r3, [pc, #240]	; (8003dec <_Z7initBMPv+0x244>)
 8003cfa:	789b      	ldrb	r3, [r3, #2]
 8003cfc:	021b      	lsls	r3, r3, #8
 8003cfe:	b21a      	sxth	r2, r3
 8003d00:	4b3a      	ldr	r3, [pc, #232]	; (8003dec <_Z7initBMPv+0x244>)
 8003d02:	78db      	ldrb	r3, [r3, #3]
 8003d04:	b21b      	sxth	r3, r3
 8003d06:	4313      	orrs	r3, r2
 8003d08:	b21a      	sxth	r2, r3
 8003d0a:	4b3a      	ldr	r3, [pc, #232]	; (8003df4 <_Z7initBMPv+0x24c>)
 8003d0c:	801a      	strh	r2, [r3, #0]
	AC3 = (int16_t)(calib_data[4] << 8 | calib_data[5]);
 8003d0e:	4b37      	ldr	r3, [pc, #220]	; (8003dec <_Z7initBMPv+0x244>)
 8003d10:	791b      	ldrb	r3, [r3, #4]
 8003d12:	021b      	lsls	r3, r3, #8
 8003d14:	b21a      	sxth	r2, r3
 8003d16:	4b35      	ldr	r3, [pc, #212]	; (8003dec <_Z7initBMPv+0x244>)
 8003d18:	795b      	ldrb	r3, [r3, #5]
 8003d1a:	b21b      	sxth	r3, r3
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	b21a      	sxth	r2, r3
 8003d20:	4b35      	ldr	r3, [pc, #212]	; (8003df8 <_Z7initBMPv+0x250>)
 8003d22:	801a      	strh	r2, [r3, #0]

	AC4 = (uint16_t)(calib_data[6] << 8 | calib_data[7]);
 8003d24:	4b31      	ldr	r3, [pc, #196]	; (8003dec <_Z7initBMPv+0x244>)
 8003d26:	799b      	ldrb	r3, [r3, #6]
 8003d28:	021b      	lsls	r3, r3, #8
 8003d2a:	b21a      	sxth	r2, r3
 8003d2c:	4b2f      	ldr	r3, [pc, #188]	; (8003dec <_Z7initBMPv+0x244>)
 8003d2e:	79db      	ldrb	r3, [r3, #7]
 8003d30:	b21b      	sxth	r3, r3
 8003d32:	4313      	orrs	r3, r2
 8003d34:	b21b      	sxth	r3, r3
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	4b30      	ldr	r3, [pc, #192]	; (8003dfc <_Z7initBMPv+0x254>)
 8003d3a:	801a      	strh	r2, [r3, #0]
	AC5 = (uint16_t)(calib_data[8] << 8 | calib_data[9]);
 8003d3c:	4b2b      	ldr	r3, [pc, #172]	; (8003dec <_Z7initBMPv+0x244>)
 8003d3e:	7a1b      	ldrb	r3, [r3, #8]
 8003d40:	021b      	lsls	r3, r3, #8
 8003d42:	b21a      	sxth	r2, r3
 8003d44:	4b29      	ldr	r3, [pc, #164]	; (8003dec <_Z7initBMPv+0x244>)
 8003d46:	7a5b      	ldrb	r3, [r3, #9]
 8003d48:	b21b      	sxth	r3, r3
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	b21b      	sxth	r3, r3
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	4b2b      	ldr	r3, [pc, #172]	; (8003e00 <_Z7initBMPv+0x258>)
 8003d52:	801a      	strh	r2, [r3, #0]
	AC6 = (uint16_t)(calib_data[10] << 8 | calib_data[11]);
 8003d54:	4b25      	ldr	r3, [pc, #148]	; (8003dec <_Z7initBMPv+0x244>)
 8003d56:	7a9b      	ldrb	r3, [r3, #10]
 8003d58:	021b      	lsls	r3, r3, #8
 8003d5a:	b21a      	sxth	r2, r3
 8003d5c:	4b23      	ldr	r3, [pc, #140]	; (8003dec <_Z7initBMPv+0x244>)
 8003d5e:	7adb      	ldrb	r3, [r3, #11]
 8003d60:	b21b      	sxth	r3, r3
 8003d62:	4313      	orrs	r3, r2
 8003d64:	b21b      	sxth	r3, r3
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	4b26      	ldr	r3, [pc, #152]	; (8003e04 <_Z7initBMPv+0x25c>)
 8003d6a:	801a      	strh	r2, [r3, #0]

    B1 = (int16_t)(calib_data[12] << 8 | calib_data[13]);
 8003d6c:	4b1f      	ldr	r3, [pc, #124]	; (8003dec <_Z7initBMPv+0x244>)
 8003d6e:	7b1b      	ldrb	r3, [r3, #12]
 8003d70:	021b      	lsls	r3, r3, #8
 8003d72:	b21a      	sxth	r2, r3
 8003d74:	4b1d      	ldr	r3, [pc, #116]	; (8003dec <_Z7initBMPv+0x244>)
 8003d76:	7b5b      	ldrb	r3, [r3, #13]
 8003d78:	b21b      	sxth	r3, r3
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	b21a      	sxth	r2, r3
 8003d7e:	4b22      	ldr	r3, [pc, #136]	; (8003e08 <_Z7initBMPv+0x260>)
 8003d80:	801a      	strh	r2, [r3, #0]
    B2 = (int16_t)(calib_data[14] << 8 | calib_data[15]);
 8003d82:	4b1a      	ldr	r3, [pc, #104]	; (8003dec <_Z7initBMPv+0x244>)
 8003d84:	7b9b      	ldrb	r3, [r3, #14]
 8003d86:	021b      	lsls	r3, r3, #8
 8003d88:	b21a      	sxth	r2, r3
 8003d8a:	4b18      	ldr	r3, [pc, #96]	; (8003dec <_Z7initBMPv+0x244>)
 8003d8c:	7bdb      	ldrb	r3, [r3, #15]
 8003d8e:	b21b      	sxth	r3, r3
 8003d90:	4313      	orrs	r3, r2
 8003d92:	b21a      	sxth	r2, r3
 8003d94:	4b1d      	ldr	r3, [pc, #116]	; (8003e0c <_Z7initBMPv+0x264>)
 8003d96:	801a      	strh	r2, [r3, #0]


    MB = (int16_t)(calib_data[16] << 8 | calib_data[17]);
 8003d98:	4b14      	ldr	r3, [pc, #80]	; (8003dec <_Z7initBMPv+0x244>)
 8003d9a:	7c1b      	ldrb	r3, [r3, #16]
 8003d9c:	021b      	lsls	r3, r3, #8
 8003d9e:	b21a      	sxth	r2, r3
 8003da0:	4b12      	ldr	r3, [pc, #72]	; (8003dec <_Z7initBMPv+0x244>)
 8003da2:	7c5b      	ldrb	r3, [r3, #17]
 8003da4:	b21b      	sxth	r3, r3
 8003da6:	4313      	orrs	r3, r2
 8003da8:	b21a      	sxth	r2, r3
 8003daa:	4b19      	ldr	r3, [pc, #100]	; (8003e10 <_Z7initBMPv+0x268>)
 8003dac:	801a      	strh	r2, [r3, #0]
    MC = (int16_t)(calib_data[18] << 8 | calib_data[19]);
 8003dae:	4b0f      	ldr	r3, [pc, #60]	; (8003dec <_Z7initBMPv+0x244>)
 8003db0:	7c9b      	ldrb	r3, [r3, #18]
 8003db2:	021b      	lsls	r3, r3, #8
 8003db4:	b21a      	sxth	r2, r3
 8003db6:	4b0d      	ldr	r3, [pc, #52]	; (8003dec <_Z7initBMPv+0x244>)
 8003db8:	7cdb      	ldrb	r3, [r3, #19]
 8003dba:	b21b      	sxth	r3, r3
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	b21a      	sxth	r2, r3
 8003dc0:	4b14      	ldr	r3, [pc, #80]	; (8003e14 <_Z7initBMPv+0x26c>)
 8003dc2:	801a      	strh	r2, [r3, #0]
    MD = (int16_t)(calib_data[20] << 8 | calib_data[21]);
 8003dc4:	4b09      	ldr	r3, [pc, #36]	; (8003dec <_Z7initBMPv+0x244>)
 8003dc6:	7d1b      	ldrb	r3, [r3, #20]
 8003dc8:	021b      	lsls	r3, r3, #8
 8003dca:	b21a      	sxth	r2, r3
 8003dcc:	4b07      	ldr	r3, [pc, #28]	; (8003dec <_Z7initBMPv+0x244>)
 8003dce:	7d5b      	ldrb	r3, [r3, #21]
 8003dd0:	b21b      	sxth	r3, r3
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	b21a      	sxth	r2, r3
 8003dd6:	4b10      	ldr	r3, [pc, #64]	; (8003e18 <_Z7initBMPv+0x270>)
 8003dd8:	801a      	strh	r2, [r3, #0]
}
 8003dda:	bf00      	nop
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	200007f4 	.word	0x200007f4
 8003de8:	40020400 	.word	0x40020400
 8003dec:	20000a38 	.word	0x20000a38
 8003df0:	20000a4e 	.word	0x20000a4e
 8003df4:	20000a50 	.word	0x20000a50
 8003df8:	20000a52 	.word	0x20000a52
 8003dfc:	20000a5e 	.word	0x20000a5e
 8003e00:	20000a60 	.word	0x20000a60
 8003e04:	20000a62 	.word	0x20000a62
 8003e08:	20000a54 	.word	0x20000a54
 8003e0c:	20000a56 	.word	0x20000a56
 8003e10:	20000a58 	.word	0x20000a58
 8003e14:	20000a5a 	.word	0x20000a5a
 8003e18:	20000a5c 	.word	0x20000a5c

08003e1c <_Z10pid_decodePh>:
typedef struct{

	uint16_t data[12];
    uint8_t crc;
}PID_raw;
PID_raw pid_decode(uint8_t data[24]){
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
	PID_raw pid;

	pid.data[0] = (data[0] << 6) | ((data[1]&0xFC) >> 2);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	019b      	lsls	r3, r3, #6
 8003e2c:	b21a      	sxth	r2, r3
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	3301      	adds	r3, #1
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	089b      	lsrs	r3, r3, #2
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	b21b      	sxth	r3, r3
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	b21b      	sxth	r3, r3
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	801a      	strh	r2, [r3, #0]
	pid.data[1] = ((data[1] & 0x03) <<12 ) |(data[2] <<4)|((data[3]&0xF0 )>> 4);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	3301      	adds	r3, #1
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	031b      	lsls	r3, r3, #12
 8003e4c:	b21b      	sxth	r3, r3
 8003e4e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003e52:	b21a      	sxth	r2, r3
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	3302      	adds	r3, #2
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	b21b      	sxth	r3, r3
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	b21a      	sxth	r2, r3
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	3303      	adds	r3, #3
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	091b      	lsrs	r3, r3, #4
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	b21b      	sxth	r3, r3
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	b21b      	sxth	r3, r3
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	805a      	strh	r2, [r3, #2]
	pid.data[2] = ((data[3]&0x0F )<< 10 | (data[4] << 2) |  (data[5] &0xC0)>>6);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	3303      	adds	r3, #3
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	029b      	lsls	r3, r3, #10
 8003e80:	b21b      	sxth	r3, r3
 8003e82:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003e86:	b21a      	sxth	r2, r3
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	b21b      	sxth	r3, r3
 8003e92:	4313      	orrs	r3, r2
 8003e94:	b21a      	sxth	r2, r3
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	3305      	adds	r3, #5
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	099b      	lsrs	r3, r3, #6
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	b21b      	sxth	r3, r3
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	b21b      	sxth	r3, r3
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	809a      	strh	r2, [r3, #4]

	pid.data[3] = ((data[5] & 0x3F)<<8|data[6]);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	3305      	adds	r3, #5
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	021b      	lsls	r3, r3, #8
 8003eb4:	b21b      	sxth	r3, r3
 8003eb6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8003eba:	b21a      	sxth	r2, r3
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	3306      	adds	r3, #6
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	b21b      	sxth	r3, r3
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	b21b      	sxth	r3, r3
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	80da      	strh	r2, [r3, #6]
	pid.data[4] = ((data[7] << 6)|((data[8]&0xFC) >> 2));
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	3307      	adds	r3, #7
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	019b      	lsls	r3, r3, #6
 8003ed6:	b21a      	sxth	r2, r3
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	3308      	adds	r3, #8
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	089b      	lsrs	r3, r3, #2
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	b21b      	sxth	r3, r3
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	b21b      	sxth	r3, r3
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	811a      	strh	r2, [r3, #8]
	pid.data[5] = ((data[8] & 0x03) <<12)| (data[9] <<4) |((data[10]&0xF0 )>> 4);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	3308      	adds	r3, #8
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	031b      	lsls	r3, r3, #12
 8003ef6:	b21b      	sxth	r3, r3
 8003ef8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003efc:	b21a      	sxth	r2, r3
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	3309      	adds	r3, #9
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	b21b      	sxth	r3, r3
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	b21a      	sxth	r2, r3
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	330a      	adds	r3, #10
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	091b      	lsrs	r3, r3, #4
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	b21b      	sxth	r3, r3
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	b21b      	sxth	r3, r3
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	815a      	strh	r2, [r3, #10]

	pid.data[6] = ((data[10]&0x0F) << 10) | (data[11] << 2) |  ((data[12] &0xC0)>>6);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	330a      	adds	r3, #10
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	029b      	lsls	r3, r3, #10
 8003f2a:	b21b      	sxth	r3, r3
 8003f2c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003f30:	b21a      	sxth	r2, r3
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	330b      	adds	r3, #11
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	b21b      	sxth	r3, r3
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	b21a      	sxth	r2, r3
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	330c      	adds	r3, #12
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	099b      	lsrs	r3, r3, #6
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	b21b      	sxth	r3, r3
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	b21b      	sxth	r3, r3
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	819a      	strh	r2, [r3, #12]
	pid.data[7] = ((data[12] & 0x3F)<<8)|(data[13]);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	330c      	adds	r3, #12
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	021b      	lsls	r3, r3, #8
 8003f5e:	b21b      	sxth	r3, r3
 8003f60:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8003f64:	b21a      	sxth	r2, r3
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	330d      	adds	r3, #13
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	b21b      	sxth	r3, r3
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	b21b      	sxth	r3, r3
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	81da      	strh	r2, [r3, #14]
	pid.data[8] = ((data[14] << 6) | ((data[15]&0xFC) >> 2));
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	330e      	adds	r3, #14
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	019b      	lsls	r3, r3, #6
 8003f80:	b21a      	sxth	r2, r3
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	330f      	adds	r3, #15
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	089b      	lsrs	r3, r3, #2
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	b21b      	sxth	r3, r3
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	b21b      	sxth	r3, r3
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	821a      	strh	r2, [r3, #16]

	pid.data[9] = ((data[15] & 0x03) << 12) | (data[16] << 4) | ((data[17]&0xF0) >> 4);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	330f      	adds	r3, #15
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	031b      	lsls	r3, r3, #12
 8003fa0:	b21b      	sxth	r3, r3
 8003fa2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003fa6:	b21a      	sxth	r2, r3
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	3310      	adds	r3, #16
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	b21b      	sxth	r3, r3
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	b21a      	sxth	r2, r3
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	3311      	adds	r3, #17
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	091b      	lsrs	r3, r3, #4
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	b21b      	sxth	r3, r3
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	b21b      	sxth	r3, r3
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	825a      	strh	r2, [r3, #18]
	pid.data[10] = ((data[17]&0x0F) << 10) | (data[18]<<2)|((data[19] &0xC0)>>6);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	3311      	adds	r3, #17
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	029b      	lsls	r3, r3, #10
 8003fd4:	b21b      	sxth	r3, r3
 8003fd6:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003fda:	b21a      	sxth	r2, r3
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	3312      	adds	r3, #18
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	b21b      	sxth	r3, r3
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	b21a      	sxth	r2, r3
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	3313      	adds	r3, #19
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	099b      	lsrs	r3, r3, #6
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	b21b      	sxth	r3, r3
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	b21b      	sxth	r3, r3
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	829a      	strh	r2, [r3, #20]
	pid.data[11] = ((data[19] & 0x3F)<<8) | data[20];
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	3313      	adds	r3, #19
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	021b      	lsls	r3, r3, #8
 8004008:	b21b      	sxth	r3, r3
 800400a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800400e:	b21a      	sxth	r2, r3
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	3314      	adds	r3, #20
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	b21b      	sxth	r3, r3
 8004018:	4313      	orrs	r3, r2
 800401a:	b21b      	sxth	r3, r3
 800401c:	b29a      	uxth	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	82da      	strh	r2, [r3, #22]
    pid.crc = data[21];
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	7d5a      	ldrb	r2, [r3, #21]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	761a      	strb	r2, [r3, #24]
	return pid;
 800402a:	bf00      	nop
}
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <_Z13check_CRC_pid7PID_raw>:
uint8_t check_CRC_pid(PID_raw pid){
 8004038:	b084      	sub	sp, #16
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	f107 0c10 	add.w	ip, r7, #16
 8004044:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    uint32_t check = 0;
 8004048:	2300      	movs	r3, #0
 800404a:	607b      	str	r3, [r7, #4]
    for(uint8_t i = 0; i<12; i++)
 800404c:	2300      	movs	r3, #0
 800404e:	70fb      	strb	r3, [r7, #3]
 8004050:	78fb      	ldrb	r3, [r7, #3]
 8004052:	2b0b      	cmp	r3, #11
 8004054:	d80c      	bhi.n	8004070 <_Z13check_CRC_pid7PID_raw+0x38>
    	check += pid.data[i];
 8004056:	78fb      	ldrb	r3, [r7, #3]
 8004058:	f107 0210 	add.w	r2, r7, #16
 800405c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004060:	461a      	mov	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4413      	add	r3, r2
 8004066:	607b      	str	r3, [r7, #4]
    for(uint8_t i = 0; i<12; i++)
 8004068:	78fb      	ldrb	r3, [r7, #3]
 800406a:	3301      	adds	r3, #1
 800406c:	70fb      	strb	r3, [r7, #3]
 800406e:	e7ef      	b.n	8004050 <_Z13check_CRC_pid7PID_raw+0x18>

    if(check % 37 != pid.crc)
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	4b0d      	ldr	r3, [pc, #52]	; (80040a8 <_Z13check_CRC_pid7PID_raw+0x70>)
 8004074:	fba3 2301 	umull	r2, r3, r3, r1
 8004078:	1aca      	subs	r2, r1, r3
 800407a:	0852      	lsrs	r2, r2, #1
 800407c:	4413      	add	r3, r2
 800407e:	095a      	lsrs	r2, r3, #5
 8004080:	4613      	mov	r3, r2
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	4413      	add	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	1aca      	subs	r2, r1, r3
 800408c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004090:	429a      	cmp	r2, r3
 8004092:	d001      	beq.n	8004098 <_Z13check_CRC_pid7PID_raw+0x60>
    	return 0;
 8004094:	2300      	movs	r3, #0
 8004096:	e000      	b.n	800409a <_Z13check_CRC_pid7PID_raw+0x62>
    return 1;
 8004098:	2301      	movs	r3, #1
}
 800409a:	4618      	mov	r0, r3
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	b004      	add	sp, #16
 80040a6:	4770      	bx	lr
 80040a8:	bacf914d 	.word	0xbacf914d

080040ac <_Z10writeFlashPt>:
    	data[i] = bytes2Float(temp);
        i++;
    }
//	HAL_UART_Transmit(&huart3,(uint8_t*) buffer, strlen(buffer),1000);
}
void writeFlash(uint16_t num[12]){
 80040ac:	b590      	push	{r4, r7, lr}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
	 HAL_FLASH_Unlock();
 80040b4:	f001 fafe 	bl	80056b4 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	  /* Get the 1st sector to erase */
	  FirstSector = GetSector(FLASH_USER_START_ADDR);
 80040b8:	4848      	ldr	r0, [pc, #288]	; (80041dc <_Z10writeFlashPt+0x130>)
 80040ba:	f000 f94b 	bl	8004354 <_ZL9GetSectorm>
 80040be:	4602      	mov	r2, r0
 80040c0:	4b47      	ldr	r3, [pc, #284]	; (80041e0 <_Z10writeFlashPt+0x134>)
 80040c2:	601a      	str	r2, [r3, #0]
	  /* Get the number of sector to erase from 1st sector*/
	  NbOfSectors = GetSector(FLASH_USER_END_ADDR) - FirstSector + 1;
 80040c4:	4845      	ldr	r0, [pc, #276]	; (80041dc <_Z10writeFlashPt+0x130>)
 80040c6:	f000 f9e3 	bl	8004490 <_ZL13GetSectorSizem>
 80040ca:	4602      	mov	r2, r0
 80040cc:	4b45      	ldr	r3, [pc, #276]	; (80041e4 <_Z10writeFlashPt+0x138>)
 80040ce:	4413      	add	r3, r2
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 f93f 	bl	8004354 <_ZL9GetSectorm>
 80040d6:	4602      	mov	r2, r0
 80040d8:	4b41      	ldr	r3, [pc, #260]	; (80041e0 <_Z10writeFlashPt+0x134>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	3301      	adds	r3, #1
 80040e0:	4a41      	ldr	r2, [pc, #260]	; (80041e8 <_Z10writeFlashPt+0x13c>)
 80040e2:	6013      	str	r3, [r2, #0]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80040e4:	4b41      	ldr	r3, [pc, #260]	; (80041ec <_Z10writeFlashPt+0x140>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80040ea:	4b40      	ldr	r3, [pc, #256]	; (80041ec <_Z10writeFlashPt+0x140>)
 80040ec:	2202      	movs	r2, #2
 80040ee:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector = FirstSector;
 80040f0:	4b3b      	ldr	r3, [pc, #236]	; (80041e0 <_Z10writeFlashPt+0x134>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a3d      	ldr	r2, [pc, #244]	; (80041ec <_Z10writeFlashPt+0x140>)
 80040f6:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors = NbOfSectors;
 80040f8:	4b3b      	ldr	r3, [pc, #236]	; (80041e8 <_Z10writeFlashPt+0x13c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a3b      	ldr	r2, [pc, #236]	; (80041ec <_Z10writeFlashPt+0x140>)
 80040fe:	60d3      	str	r3, [r2, #12]
	  if(HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 8004100:	493b      	ldr	r1, [pc, #236]	; (80041f0 <_Z10writeFlashPt+0x144>)
 8004102:	483a      	ldr	r0, [pc, #232]	; (80041ec <_Z10writeFlashPt+0x140>)
 8004104:	f001 fc36 	bl	8005974 <HAL_FLASHEx_Erase>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  __HAL_FLASH_DATA_CACHE_DISABLE();
 800410c:	4b39      	ldr	r3, [pc, #228]	; (80041f4 <_Z10writeFlashPt+0x148>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a38      	ldr	r2, [pc, #224]	; (80041f4 <_Z10writeFlashPt+0x148>)
 8004112:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004116:	6013      	str	r3, [r2, #0]
	  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004118:	4b36      	ldr	r3, [pc, #216]	; (80041f4 <_Z10writeFlashPt+0x148>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a35      	ldr	r2, [pc, #212]	; (80041f4 <_Z10writeFlashPt+0x148>)
 800411e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004122:	6013      	str	r3, [r2, #0]

	  __HAL_FLASH_DATA_CACHE_RESET();
 8004124:	4b33      	ldr	r3, [pc, #204]	; (80041f4 <_Z10writeFlashPt+0x148>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a32      	ldr	r2, [pc, #200]	; (80041f4 <_Z10writeFlashPt+0x148>)
 800412a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800412e:	6013      	str	r3, [r2, #0]
 8004130:	4b30      	ldr	r3, [pc, #192]	; (80041f4 <_Z10writeFlashPt+0x148>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a2f      	ldr	r2, [pc, #188]	; (80041f4 <_Z10writeFlashPt+0x148>)
 8004136:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800413a:	6013      	str	r3, [r2, #0]
	  __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800413c:	4b2d      	ldr	r3, [pc, #180]	; (80041f4 <_Z10writeFlashPt+0x148>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a2c      	ldr	r2, [pc, #176]	; (80041f4 <_Z10writeFlashPt+0x148>)
 8004142:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004146:	6013      	str	r3, [r2, #0]
 8004148:	4b2a      	ldr	r3, [pc, #168]	; (80041f4 <_Z10writeFlashPt+0x148>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a29      	ldr	r2, [pc, #164]	; (80041f4 <_Z10writeFlashPt+0x148>)
 800414e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004152:	6013      	str	r3, [r2, #0]

	  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004154:	4b27      	ldr	r3, [pc, #156]	; (80041f4 <_Z10writeFlashPt+0x148>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a26      	ldr	r2, [pc, #152]	; (80041f4 <_Z10writeFlashPt+0x148>)
 800415a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800415e:	6013      	str	r3, [r2, #0]
	  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004160:	4b24      	ldr	r3, [pc, #144]	; (80041f4 <_Z10writeFlashPt+0x148>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a23      	ldr	r2, [pc, #140]	; (80041f4 <_Z10writeFlashPt+0x148>)
 8004166:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800416a:	6013      	str	r3, [r2, #0]
//	     		1.08,6.09,10.34,1.64325,1254.352,675.686,9.79,0.54,1.25,8.5,1.68,6.9,11.54,0.5,8.1,92};



//	  uint8_t temp[4];
	  int i = 0;
 800416c:	2300      	movs	r3, #0
 800416e:	60fb      	str	r3, [r7, #12]

	  Address = FLASH_USER_START_ADDR;
 8004170:	4b21      	ldr	r3, [pc, #132]	; (80041f8 <_Z10writeFlashPt+0x14c>)
 8004172:	4a1a      	ldr	r2, [pc, #104]	; (80041dc <_Z10writeFlashPt+0x130>)
 8004174:	601a      	str	r2, [r3, #0]

	  while (i < 12)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2b0b      	cmp	r3, #11
 800417a:	dc28      	bgt.n	80041ce <_Z10writeFlashPt+0x122>
	  {
//		float2Bytes(num[i],temp);
		uint32_t temp_val = (num[i] <<16) | (num[i + 1]);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	4413      	add	r3, r2
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	041b      	lsls	r3, r3, #16
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	3201      	adds	r2, #1
 800418c:	0052      	lsls	r2, r2, #1
 800418e:	6879      	ldr	r1, [r7, #4]
 8004190:	440a      	add	r2, r1
 8004192:	8812      	ldrh	r2, [r2, #0]
 8004194:	4313      	orrs	r3, r2
 8004196:	60bb      	str	r3, [r7, #8]
	    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, temp_val) == HAL_OK)
 8004198:	4b17      	ldr	r3, [pc, #92]	; (80041f8 <_Z10writeFlashPt+0x14c>)
 800419a:	6819      	ldr	r1, [r3, #0]
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	f04f 0400 	mov.w	r4, #0
 80041a2:	461a      	mov	r2, r3
 80041a4:	4623      	mov	r3, r4
 80041a6:	2002      	movs	r0, #2
 80041a8:	f001 fa30 	bl	800560c <HAL_FLASH_Program>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	bf0c      	ite	eq
 80041b2:	2301      	moveq	r3, #1
 80041b4:	2300      	movne	r3, #0
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d004      	beq.n	80041c6 <_Z10writeFlashPt+0x11a>
	    {
	      Address = Address + 4;
 80041bc:	4b0e      	ldr	r3, [pc, #56]	; (80041f8 <_Z10writeFlashPt+0x14c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	3304      	adds	r3, #4
 80041c2:	4a0d      	ldr	r2, [pc, #52]	; (80041f8 <_Z10writeFlashPt+0x14c>)
 80041c4:	6013      	str	r3, [r2, #0]
	      /*
	        FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError();
	      */

	    }
	    i+=2;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	3302      	adds	r3, #2
 80041ca:	60fb      	str	r3, [r7, #12]
	  while (i < 12)
 80041cc:	e7d3      	b.n	8004176 <_Z10writeFlashPt+0xca>
	  }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 80041ce:	f001 fa93 	bl	80056f8 <HAL_FLASH_Lock>
}
 80041d2:	bf00      	nop
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd90      	pop	{r4, r7, pc}
 80041da:	bf00      	nop
 80041dc:	080e0000 	.word	0x080e0000
 80041e0:	20000a64 	.word	0x20000a64
 80041e4:	080dffff 	.word	0x080dffff
 80041e8:	20000a68 	.word	0x20000a68
 80041ec:	20000a7c 	.word	0x20000a7c
 80041f0:	20000a70 	.word	0x20000a70
 80041f4:	40023c00 	.word	0x40023c00
 80041f8:	20000a6c 	.word	0x20000a6c

080041fc <_Z9readFlashv>:

PID_value readFlash(){
 80041fc:	b480      	push	{r7}
 80041fe:	b08b      	sub	sp, #44	; 0x2c
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
	  PID_value pid;
	  Address = FLASH_USER_START_ADDR;
 8004204:	4b4e      	ldr	r3, [pc, #312]	; (8004340 <_Z9readFlashv+0x144>)
 8004206:	4a4f      	ldr	r2, [pc, #316]	; (8004344 <_Z9readFlashv+0x148>)
 8004208:	601a      	str	r2, [r3, #0]
	  MemoryProgramStatus = 0x0;
 800420a:	4b4f      	ldr	r3, [pc, #316]	; (8004348 <_Z9readFlashv+0x14c>)
 800420c:	2200      	movs	r2, #0
 800420e:	601a      	str	r2, [r3, #0]
	  uint16_t temp_arr[12];
	  uint16_t result,result1;

	  uint8_t count = 0;
 8004210:	2300      	movs	r3, #0
 8004212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  while (Address < FLASH_USER_START_ADDR + 2*12)
 8004216:	4b4a      	ldr	r3, [pc, #296]	; (8004340 <_Z9readFlashv+0x144>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a4c      	ldr	r2, [pc, #304]	; (800434c <_Z9readFlashv+0x150>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d827      	bhi.n	8004270 <_Z9readFlashv+0x74>
	  {
	    data32 = *(__IO uint32_t*)Address;
 8004220:	4b47      	ldr	r3, [pc, #284]	; (8004340 <_Z9readFlashv+0x144>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a4a      	ldr	r2, [pc, #296]	; (8004350 <_Z9readFlashv+0x154>)
 8004228:	6013      	str	r3, [r2, #0]

	    temp_arr[count] = (uint16_t) ((data32 &0xFFFF0000)>>16);
 800422a:	4b49      	ldr	r3, [pc, #292]	; (8004350 <_Z9readFlashv+0x154>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	0c1a      	lsrs	r2, r3, #16
 8004230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004234:	b292      	uxth	r2, r2
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800423c:	440b      	add	r3, r1
 800423e:	f823 2c1c 	strh.w	r2, [r3, #-28]
	    temp_arr[count+1] = (uint16_t) (data32 & 0x0000FFFF);
 8004242:	4b43      	ldr	r3, [pc, #268]	; (8004350 <_Z9readFlashv+0x154>)
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800424a:	3301      	adds	r3, #1
 800424c:	b292      	uxth	r2, r2
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004254:	440b      	add	r3, r1
 8004256:	f823 2c1c 	strh.w	r2, [r3, #-28]


//	    temp_arr[2] = (uint8_t) ((data32 &0x0000FF00)>>8);
//	    temp_arr[3] = (uint8_t) data32 &0x000000FF;
//	    result = bytes2Float(temp_arr);
        count += 2;
 800425a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800425e:	3302      	adds	r3, #2
 8004260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	    Address = Address + 4;
 8004264:	4b36      	ldr	r3, [pc, #216]	; (8004340 <_Z9readFlashv+0x144>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3304      	adds	r3, #4
 800426a:	4a35      	ldr	r2, [pc, #212]	; (8004340 <_Z9readFlashv+0x144>)
 800426c:	6013      	str	r3, [r2, #0]
	  while (Address < FLASH_USER_START_ADDR + 2*12)
 800426e:	e7d2      	b.n	8004216 <_Z9readFlashv+0x1a>
	  }
      pid.Kp1 = temp_arr[0];
 8004270:	89bb      	ldrh	r3, [r7, #12]
 8004272:	ee07 3a90 	vmov	s15, r3
 8004276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	edc3 7a00 	vstr	s15, [r3]
      pid.Ki1 = temp_arr[1];
 8004280:	89fb      	ldrh	r3, [r7, #14]
 8004282:	ee07 3a90 	vmov	s15, r3
 8004286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	edc3 7a01 	vstr	s15, [r3, #4]
      pid.Kd1 = temp_arr[2];
 8004290:	8a3b      	ldrh	r3, [r7, #16]
 8004292:	ee07 3a90 	vmov	s15, r3
 8004296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	edc3 7a02 	vstr	s15, [r3, #8]

      pid.Kp2 = temp_arr[3];
 80042a0:	8a7b      	ldrh	r3, [r7, #18]
 80042a2:	ee07 3a90 	vmov	s15, r3
 80042a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	edc3 7a03 	vstr	s15, [r3, #12]
      pid.Ki2 = temp_arr[4];
 80042b0:	8abb      	ldrh	r3, [r7, #20]
 80042b2:	ee07 3a90 	vmov	s15, r3
 80042b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	edc3 7a04 	vstr	s15, [r3, #16]
      pid.Kd2 = temp_arr[5];
 80042c0:	8afb      	ldrh	r3, [r7, #22]
 80042c2:	ee07 3a90 	vmov	s15, r3
 80042c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	edc3 7a05 	vstr	s15, [r3, #20]

      pid.Kp3 = temp_arr[6];
 80042d0:	8b3b      	ldrh	r3, [r7, #24]
 80042d2:	ee07 3a90 	vmov	s15, r3
 80042d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	edc3 7a06 	vstr	s15, [r3, #24]
      pid.Ki3 = temp_arr[7];
 80042e0:	8b7b      	ldrh	r3, [r7, #26]
 80042e2:	ee07 3a90 	vmov	s15, r3
 80042e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	edc3 7a07 	vstr	s15, [r3, #28]
      pid.Kd3 = temp_arr[8];
 80042f0:	8bbb      	ldrh	r3, [r7, #28]
 80042f2:	ee07 3a90 	vmov	s15, r3
 80042f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	edc3 7a08 	vstr	s15, [r3, #32]

      pid.Kp4 = temp_arr[9];
 8004300:	8bfb      	ldrh	r3, [r7, #30]
 8004302:	ee07 3a90 	vmov	s15, r3
 8004306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
      pid.Ki4 = temp_arr[10];
 8004310:	8c3b      	ldrh	r3, [r7, #32]
 8004312:	ee07 3a90 	vmov	s15, r3
 8004316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
      pid.Kd4 = temp_arr[11];
 8004320:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004322:	ee07 3a90 	vmov	s15, r3
 8004326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
      return pid;
 8004330:	bf00      	nop
}
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	372c      	adds	r7, #44	; 0x2c
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	20000a6c 	.word	0x20000a6c
 8004344:	080e0000 	.word	0x080e0000
 8004348:	20000a78 	.word	0x20000a78
 800434c:	080e0017 	.word	0x080e0017
 8004350:	20000a74 	.word	0x20000a74

08004354 <_ZL9GetSectorm>:
  * @brief  Gets the sector of a given address
  * @param  None
  * @retval The sector of a given address
  */
static uint32_t GetSector(uint32_t Address)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 800435c:	2300      	movs	r3, #0
 800435e:	60fb      	str	r3, [r7, #12]

  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a40      	ldr	r2, [pc, #256]	; (8004464 <_ZL9GetSectorm+0x110>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d806      	bhi.n	8004376 <_ZL9GetSectorm+0x22>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800436e:	d302      	bcc.n	8004376 <_ZL9GetSectorm+0x22>
  {
    sector = FLASH_SECTOR_0;
 8004370:	2300      	movs	r3, #0
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	e06f      	b.n	8004456 <_ZL9GetSectorm+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a3b      	ldr	r2, [pc, #236]	; (8004468 <_ZL9GetSectorm+0x114>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d806      	bhi.n	800438c <_ZL9GetSectorm+0x38>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a38      	ldr	r2, [pc, #224]	; (8004464 <_ZL9GetSectorm+0x110>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d902      	bls.n	800438c <_ZL9GetSectorm+0x38>
  {
    sector = FLASH_SECTOR_1;
 8004386:	2301      	movs	r3, #1
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	e064      	b.n	8004456 <_ZL9GetSectorm+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a37      	ldr	r2, [pc, #220]	; (800446c <_ZL9GetSectorm+0x118>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d806      	bhi.n	80043a2 <_ZL9GetSectorm+0x4e>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a34      	ldr	r2, [pc, #208]	; (8004468 <_ZL9GetSectorm+0x114>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d902      	bls.n	80043a2 <_ZL9GetSectorm+0x4e>
  {
    sector = FLASH_SECTOR_2;
 800439c:	2302      	movs	r3, #2
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	e059      	b.n	8004456 <_ZL9GetSectorm+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a32      	ldr	r2, [pc, #200]	; (8004470 <_ZL9GetSectorm+0x11c>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d806      	bhi.n	80043b8 <_ZL9GetSectorm+0x64>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a2f      	ldr	r2, [pc, #188]	; (800446c <_ZL9GetSectorm+0x118>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d902      	bls.n	80043b8 <_ZL9GetSectorm+0x64>
  {
    sector = FLASH_SECTOR_3;
 80043b2:	2303      	movs	r3, #3
 80043b4:	60fb      	str	r3, [r7, #12]
 80043b6:	e04e      	b.n	8004456 <_ZL9GetSectorm+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a2e      	ldr	r2, [pc, #184]	; (8004474 <_ZL9GetSectorm+0x120>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d806      	bhi.n	80043ce <_ZL9GetSectorm+0x7a>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a2b      	ldr	r2, [pc, #172]	; (8004470 <_ZL9GetSectorm+0x11c>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d902      	bls.n	80043ce <_ZL9GetSectorm+0x7a>
  {
    sector = FLASH_SECTOR_4;
 80043c8:	2304      	movs	r3, #4
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	e043      	b.n	8004456 <_ZL9GetSectorm+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a29      	ldr	r2, [pc, #164]	; (8004478 <_ZL9GetSectorm+0x124>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d806      	bhi.n	80043e4 <_ZL9GetSectorm+0x90>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a26      	ldr	r2, [pc, #152]	; (8004474 <_ZL9GetSectorm+0x120>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d902      	bls.n	80043e4 <_ZL9GetSectorm+0x90>
  {
    sector = FLASH_SECTOR_5;
 80043de:	2305      	movs	r3, #5
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	e038      	b.n	8004456 <_ZL9GetSectorm+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a25      	ldr	r2, [pc, #148]	; (800447c <_ZL9GetSectorm+0x128>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d806      	bhi.n	80043fa <_ZL9GetSectorm+0xa6>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a22      	ldr	r2, [pc, #136]	; (8004478 <_ZL9GetSectorm+0x124>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d902      	bls.n	80043fa <_ZL9GetSectorm+0xa6>
  {
    sector = FLASH_SECTOR_6;
 80043f4:	2306      	movs	r3, #6
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	e02d      	b.n	8004456 <_ZL9GetSectorm+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a20      	ldr	r2, [pc, #128]	; (8004480 <_ZL9GetSectorm+0x12c>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d806      	bhi.n	8004410 <_ZL9GetSectorm+0xbc>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a1d      	ldr	r2, [pc, #116]	; (800447c <_ZL9GetSectorm+0x128>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d902      	bls.n	8004410 <_ZL9GetSectorm+0xbc>
  {
    sector = FLASH_SECTOR_7;
 800440a:	2307      	movs	r3, #7
 800440c:	60fb      	str	r3, [r7, #12]
 800440e:	e022      	b.n	8004456 <_ZL9GetSectorm+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a1c      	ldr	r2, [pc, #112]	; (8004484 <_ZL9GetSectorm+0x130>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d806      	bhi.n	8004426 <_ZL9GetSectorm+0xd2>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a19      	ldr	r2, [pc, #100]	; (8004480 <_ZL9GetSectorm+0x12c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d902      	bls.n	8004426 <_ZL9GetSectorm+0xd2>
  {
    sector = FLASH_SECTOR_8;
 8004420:	2308      	movs	r3, #8
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	e017      	b.n	8004456 <_ZL9GetSectorm+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a17      	ldr	r2, [pc, #92]	; (8004488 <_ZL9GetSectorm+0x134>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d806      	bhi.n	800443c <_ZL9GetSectorm+0xe8>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a14      	ldr	r2, [pc, #80]	; (8004484 <_ZL9GetSectorm+0x130>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d902      	bls.n	800443c <_ZL9GetSectorm+0xe8>
  {
    sector = FLASH_SECTOR_9;
 8004436:	2309      	movs	r3, #9
 8004438:	60fb      	str	r3, [r7, #12]
 800443a:	e00c      	b.n	8004456 <_ZL9GetSectorm+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a13      	ldr	r2, [pc, #76]	; (800448c <_ZL9GetSectorm+0x138>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d806      	bhi.n	8004452 <_ZL9GetSectorm+0xfe>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a10      	ldr	r2, [pc, #64]	; (8004488 <_ZL9GetSectorm+0x134>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d902      	bls.n	8004452 <_ZL9GetSectorm+0xfe>
  {
    sector = FLASH_SECTOR_10;
 800444c:	230a      	movs	r3, #10
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	e001      	b.n	8004456 <_ZL9GetSectorm+0x102>
  }
  else /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_11) */
  {
    sector = FLASH_SECTOR_11;
 8004452:	230b      	movs	r3, #11
 8004454:	60fb      	str	r3, [r7, #12]
  }

  return sector;
 8004456:	68fb      	ldr	r3, [r7, #12]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	08003fff 	.word	0x08003fff
 8004468:	08007fff 	.word	0x08007fff
 800446c:	0800bfff 	.word	0x0800bfff
 8004470:	0800ffff 	.word	0x0800ffff
 8004474:	0801ffff 	.word	0x0801ffff
 8004478:	0803ffff 	.word	0x0803ffff
 800447c:	0805ffff 	.word	0x0805ffff
 8004480:	0807ffff 	.word	0x0807ffff
 8004484:	0809ffff 	.word	0x0809ffff
 8004488:	080bffff 	.word	0x080bffff
 800448c:	080dffff 	.word	0x080dffff

08004490 <_ZL13GetSectorSizem>:
  * @brief  Gets sector Size
  * @param  None
  * @retval The size of a given sector
  */
static uint32_t GetSectorSize(uint32_t Sector)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t sectorsize = 0x00;
 8004498:	2300      	movs	r3, #0
 800449a:	60fb      	str	r3, [r7, #12]

  if((Sector == FLASH_SECTOR_0) || (Sector == FLASH_SECTOR_1) || (Sector == FLASH_SECTOR_2) || (Sector == FLASH_SECTOR_3))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d008      	beq.n	80044b4 <_ZL13GetSectorSizem+0x24>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d005      	beq.n	80044b4 <_ZL13GetSectorSizem+0x24>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d002      	beq.n	80044b4 <_ZL13GetSectorSizem+0x24>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b03      	cmp	r3, #3
 80044b2:	d103      	bne.n	80044bc <_ZL13GetSectorSizem+0x2c>
  {
    sectorsize = 16 * 1024;
 80044b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	e009      	b.n	80044d0 <_ZL13GetSectorSizem+0x40>
  }
  else if(Sector == FLASH_SECTOR_4)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d103      	bne.n	80044ca <_ZL13GetSectorSizem+0x3a>
  {
    sectorsize = 64 * 1024;
 80044c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	e002      	b.n	80044d0 <_ZL13GetSectorSizem+0x40>
  }
  else
  {
    sectorsize = 128 * 1024;
 80044ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044ce:	60fb      	str	r3, [r7, #12]
  }
  return sectorsize;
 80044d0:	68fb      	ldr	r3, [r7, #12]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
	...

080044e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80044e0:	b5b0      	push	{r4, r5, r7, lr}
 80044e2:	b0b2      	sub	sp, #200	; 0xc8
 80044e4:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  HAL_Init();
 80044e6:	f000 ff29 	bl	800533c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80044ea:	f000 f93d 	bl	8004768 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80044ee:	f7fc fe7b 	bl	80011e8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80044f2:	f7fc fe53 	bl	800119c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80044f6:	f7fc fd11 	bl	8000f1c <MX_I2C1_Init>
  MX_TIM1_Init();
 80044fa:	f7fc fd3b 	bl	8000f74 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80044fe:	f7fc fe27 	bl	8001150 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8004502:	f7fc fde1 	bl	80010c8 <MX_TIM4_Init>
  MX_TIM7_Init();
 8004506:	f7fc fef9 	bl	80012fc <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, (uint8_t *) Rx_data, 1);
 800450a:	2201      	movs	r2, #1
 800450c:	4976      	ldr	r1, [pc, #472]	; (80046e8 <main+0x208>)
 800450e:	4877      	ldr	r0, [pc, #476]	; (80046ec <main+0x20c>)
 8004510:	f004 fab0 	bl	8008a74 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, (uint8_t *) Rx_data, 1);
 8004514:	2201      	movs	r2, #1
 8004516:	4974      	ldr	r1, [pc, #464]	; (80046e8 <main+0x208>)
 8004518:	4875      	ldr	r0, [pc, #468]	; (80046f0 <main+0x210>)
 800451a:	f004 faab 	bl	8008a74 <HAL_UART_Receive_IT>

  check_AHRS(true);
 800451e:	2001      	movs	r0, #1
 8004520:	f7fd ffd8 	bl	80024d4 <_Z10check_AHRSb>
 8004524:	4603      	mov	r3, r0
 8004526:	461a      	mov	r2, r3
 8004528:	f887 20bc 	strb.w	r2, [r7, #188]	; 0xbc
 800452c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004530:	f887 20bd 	strb.w	r2, [r7, #189]	; 0xbd
 8004534:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004538:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe

  esc_stop.esc_value1 = 1000;
 800453c:	4b6d      	ldr	r3, [pc, #436]	; (80046f4 <main+0x214>)
 800453e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004542:	801a      	strh	r2, [r3, #0]
  esc_stop.esc_value2 = 1000;
 8004544:	4b6b      	ldr	r3, [pc, #428]	; (80046f4 <main+0x214>)
 8004546:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800454a:	805a      	strh	r2, [r3, #2]
  esc_stop.esc_value3 = 1000;
 800454c:	4b69      	ldr	r3, [pc, #420]	; (80046f4 <main+0x214>)
 800454e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004552:	809a      	strh	r2, [r3, #4]
  esc_stop.esc_value4 = 1000;
 8004554:	4b67      	ldr	r3, [pc, #412]	; (80046f4 <main+0x214>)
 8004556:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800455a:	80da      	strh	r2, [r3, #6]

  init_MPU();
 800455c:	f7fd f964 	bl	8001828 <_Z8init_MPUv>
  init_ESC();
 8004560:	f7fe fb2a 	bl	8002bb8 <_Z8init_ESCv>
  initBMP();
 8004564:	f7ff fb20 	bl	8003ba8 <_Z7initBMPv>

  pid = readFlash();
 8004568:	4c63      	ldr	r4, [pc, #396]	; (80046f8 <main+0x218>)
 800456a:	463b      	mov	r3, r7
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff fe45 	bl	80041fc <_Z9readFlashv>
 8004572:	4625      	mov	r5, r4
 8004574:	463c      	mov	r4, r7
 8004576:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004578:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800457a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800457c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800457e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004580:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	602b      	str	r3, [r5, #0]
//  MX_TIM7_Init();
  BOARD_MODE = FLY_MODE;
 8004586:	4b5d      	ldr	r3, [pc, #372]	; (80046fc <main+0x21c>)
 8004588:	2200      	movs	r2, #0
 800458a:	701a      	strb	r2, [r3, #0]

//  data_lpf.load(LPF_10HZ);

  gyro_lpf.load(LPF_50HZ);
 800458c:	495c      	ldr	r1, [pc, #368]	; (8004700 <main+0x220>)
 800458e:	485d      	ldr	r0, [pc, #372]	; (8004704 <main+0x224>)
 8004590:	f7fd f882 	bl	8001698 <_ZN3LPF4loadEPd>
  gyro_lpf1.load(LPF_50HZ);
 8004594:	495a      	ldr	r1, [pc, #360]	; (8004700 <main+0x220>)
 8004596:	485c      	ldr	r0, [pc, #368]	; (8004708 <main+0x228>)
 8004598:	f7fd f87e 	bl	8001698 <_ZN3LPF4loadEPd>
  gyro_lpf2.load(LPF_50HZ);
 800459c:	4958      	ldr	r1, [pc, #352]	; (8004700 <main+0x220>)
 800459e:	485b      	ldr	r0, [pc, #364]	; (800470c <main+0x22c>)
 80045a0:	f7fd f87a 	bl	8001698 <_ZN3LPF4loadEPd>

  acc_lpf.load(LPF_50HZ);
 80045a4:	4956      	ldr	r1, [pc, #344]	; (8004700 <main+0x220>)
 80045a6:	485a      	ldr	r0, [pc, #360]	; (8004710 <main+0x230>)
 80045a8:	f7fd f876 	bl	8001698 <_ZN3LPF4loadEPd>
  acc_lpf1.load(LPF_50HZ);
 80045ac:	4954      	ldr	r1, [pc, #336]	; (8004700 <main+0x220>)
 80045ae:	4859      	ldr	r0, [pc, #356]	; (8004714 <main+0x234>)
 80045b0:	f7fd f872 	bl	8001698 <_ZN3LPF4loadEPd>
  acc_lpf2.load(LPF_10HZ_fs100_chev2);
 80045b4:	4958      	ldr	r1, [pc, #352]	; (8004718 <main+0x238>)
 80045b6:	4859      	ldr	r0, [pc, #356]	; (800471c <main+0x23c>)
 80045b8:	f7fd f86e 	bl	8001698 <_ZN3LPF4loadEPd>

  calibration_IMU();
 80045bc:	f7fe f830 	bl	8002620 <_Z15calibration_IMUv>
  x[4] = bGx*DEC2RAD;
 80045c0:	4b57      	ldr	r3, [pc, #348]	; (8004720 <main+0x240>)
 80045c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80045c6:	a346      	add	r3, pc, #280	; (adr r3, 80046e0 <main+0x200>)
 80045c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045cc:	f7fb ffc4 	bl	8000558 <__aeabi_dmul>
 80045d0:	4603      	mov	r3, r0
 80045d2:	460c      	mov	r4, r1
 80045d4:	4a53      	ldr	r2, [pc, #332]	; (8004724 <main+0x244>)
 80045d6:	e9c2 3408 	strd	r3, r4, [r2, #32]
  x[5] = bGy*DEC2RAD;
 80045da:	4b53      	ldr	r3, [pc, #332]	; (8004728 <main+0x248>)
 80045dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80045e0:	a33f      	add	r3, pc, #252	; (adr r3, 80046e0 <main+0x200>)
 80045e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e6:	f7fb ffb7 	bl	8000558 <__aeabi_dmul>
 80045ea:	4603      	mov	r3, r0
 80045ec:	460c      	mov	r4, r1
 80045ee:	4a4d      	ldr	r2, [pc, #308]	; (8004724 <main+0x244>)
 80045f0:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
  x[6] = bGz*DEC2RAD;
 80045f4:	4b4d      	ldr	r3, [pc, #308]	; (800472c <main+0x24c>)
 80045f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80045fa:	a339      	add	r3, pc, #228	; (adr r3, 80046e0 <main+0x200>)
 80045fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004600:	f7fb ffaa 	bl	8000558 <__aeabi_dmul>
 8004604:	4603      	mov	r3, r0
 8004606:	460c      	mov	r4, r1
 8004608:	4a46      	ldr	r2, [pc, #280]	; (8004724 <main+0x244>)
 800460a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
  ekf.loadEKF(x,P,Q,R_full);
 800460e:	4b48      	ldr	r3, [pc, #288]	; (8004730 <main+0x250>)
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	4b48      	ldr	r3, [pc, #288]	; (8004734 <main+0x254>)
 8004614:	4a48      	ldr	r2, [pc, #288]	; (8004738 <main+0x258>)
 8004616:	4943      	ldr	r1, [pc, #268]	; (8004724 <main+0x244>)
 8004618:	4848      	ldr	r0, [pc, #288]	; (800473c <main+0x25c>)
 800461a:	f7ff f9c5 	bl	80039a8 <_ZN3EKF7loadEKFEPdS0_S0_S0_>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of Queue */
  osMessageQDef(Queue, 32, uint16_t);
 800461e:	4b48      	ldr	r3, [pc, #288]	; (8004740 <main+0x260>)
 8004620:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8004624:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004626:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  QueueHandle = osMessageCreate(osMessageQ(Queue), NULL);
 800462a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800462e:	2100      	movs	r1, #0
 8004630:	4618      	mov	r0, r3
 8004632:	f005 f8f0 	bl	8009816 <osMessageCreate>
 8004636:	4602      	mov	r2, r0
 8004638:	4b42      	ldr	r3, [pc, #264]	; (8004744 <main+0x264>)
 800463a:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of read_MPU */
  osThreadDef(read_MPU, StartDefaultTask, osPriorityNormal, 0, 128);
 800463c:	4b42      	ldr	r3, [pc, #264]	; (8004748 <main+0x268>)
 800463e:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8004642:	461d      	mov	r5, r3
 8004644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004648:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800464c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  read_MPUHandle = osThreadCreate(osThread(read_MPU), NULL);
 8004650:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004654:	2100      	movs	r1, #0
 8004656:	4618      	mov	r0, r3
 8004658:	f005 f87d 	bl	8009756 <osThreadCreate>
 800465c:	4602      	mov	r2, r0
 800465e:	4b3b      	ldr	r3, [pc, #236]	; (800474c <main+0x26c>)
 8004660:	601a      	str	r2, [r3, #0]

  /* definition and creation of read_BMP */
  osThreadDef(read_BMP, StartTask02, osPriorityNormal, 0, 128);
 8004662:	4b3b      	ldr	r3, [pc, #236]	; (8004750 <main+0x270>)
 8004664:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8004668:	461d      	mov	r5, r3
 800466a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800466c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800466e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004672:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  read_BMPHandle = osThreadCreate(osThread(read_BMP), NULL);
 8004676:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800467a:	2100      	movs	r1, #0
 800467c:	4618      	mov	r0, r3
 800467e:	f005 f86a 	bl	8009756 <osThreadCreate>
 8004682:	4602      	mov	r2, r0
 8004684:	4b33      	ldr	r3, [pc, #204]	; (8004754 <main+0x274>)
 8004686:	601a      	str	r2, [r3, #0]
  /* definition and creation of read_magnet */
//  osThreadDef(read_Magnet, readMagnet, osPriorityNormal, 0, 128);
//  read_MagnetHandle = osThreadCreate(osThread(read_Magnet), NULL);

  /* definition and creation of receiveTask */
  osThreadDef(receiveTask, StartTask03, osPriorityHigh, 0, 512);
 8004688:	4b33      	ldr	r3, [pc, #204]	; (8004758 <main+0x278>)
 800468a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800468e:	461d      	mov	r5, r3
 8004690:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004694:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004698:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveTaskHandle = osThreadCreate(osThread(receiveTask), NULL);
 800469c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80046a0:	2100      	movs	r1, #0
 80046a2:	4618      	mov	r0, r3
 80046a4:	f005 f857 	bl	8009756 <osThreadCreate>
 80046a8:	4602      	mov	r2, r0
 80046aa:	4b2c      	ldr	r3, [pc, #176]	; (800475c <main+0x27c>)
 80046ac:	601a      	str	r2, [r3, #0]

  /* definition and creation of filterTask */
  osThreadDef(filterTask, filterFunction, osPriorityAboveNormal , 0, 10000);
 80046ae:	4b2c      	ldr	r3, [pc, #176]	; (8004760 <main+0x280>)
 80046b0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80046b4:	461d      	mov	r5, r3
 80046b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80046be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  filterTaskHandle = osThreadCreate(osThread(filterTask), NULL);
 80046c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80046c6:	2100      	movs	r1, #0
 80046c8:	4618      	mov	r0, r3
 80046ca:	f005 f844 	bl	8009756 <osThreadCreate>
 80046ce:	4602      	mov	r2, r0
 80046d0:	4b24      	ldr	r3, [pc, #144]	; (8004764 <main+0x284>)
 80046d2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80046d4:	f005 f838 	bl	8009748 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80046d8:	e7fe      	b.n	80046d8 <main+0x1f8>
 80046da:	bf00      	nop
 80046dc:	f3af 8000 	nop.w
 80046e0:	a226e211 	.word	0xa226e211
 80046e4:	3f91df46 	.word	0x3f91df46
 80046e8:	20000aa4 	.word	0x20000aa4
 80046ec:	20000848 	.word	0x20000848
 80046f0:	20000908 	.word	0x20000908
 80046f4:	20000b3c 	.word	0x20000b3c
 80046f8:	20000d14 	.word	0x20000d14
 80046fc:	20000948 	.word	0x20000948
 8004700:	20000430 	.word	0x20000430
 8004704:	20000b48 	.word	0x20000b48
 8004708:	20000b90 	.word	0x20000b90
 800470c:	20000bd8 	.word	0x20000bd8
 8004710:	20000c20 	.word	0x20000c20
 8004714:	20000c68 	.word	0x20000c68
 8004718:	20000460 	.word	0x20000460
 800471c:	20000cb0 	.word	0x20000cb0
 8004720:	200009b8 	.word	0x200009b8
 8004724:	200004c8 	.word	0x200004c8
 8004728:	200009c0 	.word	0x200009c0
 800472c:	200009c8 	.word	0x200009c8
 8004730:	20000310 	.word	0x20000310
 8004734:	20000000 	.word	0x20000000
 8004738:	20000188 	.word	0x20000188
 800473c:	20000d48 	.word	0x20000d48
 8004740:	0800b8e4 	.word	0x0800b8e4
 8004744:	20000aa0 	.word	0x20000aa0
 8004748:	0800b900 	.word	0x0800b900
 800474c:	20000a90 	.word	0x20000a90
 8004750:	0800b928 	.word	0x0800b928
 8004754:	20000a94 	.word	0x20000a94
 8004758:	0800b950 	.word	0x0800b950
 800475c:	20000a98 	.word	0x20000a98
 8004760:	0800b978 	.word	0x0800b978
 8004764:	20000a9c 	.word	0x20000a9c

08004768 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b094      	sub	sp, #80	; 0x50
 800476c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800476e:	f107 0320 	add.w	r3, r7, #32
 8004772:	2230      	movs	r2, #48	; 0x30
 8004774:	2100      	movs	r1, #0
 8004776:	4618      	mov	r0, r3
 8004778:	f007 f840 	bl	800b7fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800477c:	f107 030c 	add.w	r3, r7, #12
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	605a      	str	r2, [r3, #4]
 8004786:	609a      	str	r2, [r3, #8]
 8004788:	60da      	str	r2, [r3, #12]
 800478a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800478c:	2300      	movs	r3, #0
 800478e:	60bb      	str	r3, [r7, #8]
 8004790:	4b25      	ldr	r3, [pc, #148]	; (8004828 <_Z18SystemClock_Configv+0xc0>)
 8004792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004794:	4a24      	ldr	r2, [pc, #144]	; (8004828 <_Z18SystemClock_Configv+0xc0>)
 8004796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800479a:	6413      	str	r3, [r2, #64]	; 0x40
 800479c:	4b22      	ldr	r3, [pc, #136]	; (8004828 <_Z18SystemClock_Configv+0xc0>)
 800479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a4:	60bb      	str	r3, [r7, #8]
 80047a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80047a8:	2300      	movs	r3, #0
 80047aa:	607b      	str	r3, [r7, #4]
 80047ac:	4b1f      	ldr	r3, [pc, #124]	; (800482c <_Z18SystemClock_Configv+0xc4>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a1e      	ldr	r2, [pc, #120]	; (800482c <_Z18SystemClock_Configv+0xc4>)
 80047b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047b6:	6013      	str	r3, [r2, #0]
 80047b8:	4b1c      	ldr	r3, [pc, #112]	; (800482c <_Z18SystemClock_Configv+0xc4>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047c0:	607b      	str	r3, [r7, #4]
 80047c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80047c4:	2301      	movs	r3, #1
 80047c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80047c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80047ce:	2302      	movs	r3, #2
 80047d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80047d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80047d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80047d8:	2306      	movs	r3, #6
 80047da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80047dc:	23a8      	movs	r3, #168	; 0xa8
 80047de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80047e0:	2302      	movs	r3, #2
 80047e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80047e4:	2304      	movs	r3, #4
 80047e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80047e8:	f107 0320 	add.w	r3, r7, #32
 80047ec:	4618      	mov	r0, r3
 80047ee:	f002 fc67 	bl	80070c0 <HAL_RCC_OscConfig>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
  {

  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80047f6:	230f      	movs	r3, #15
 80047f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80047fa:	2302      	movs	r3, #2
 80047fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80047fe:	2300      	movs	r3, #0
 8004800:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004802:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004806:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800480c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800480e:	f107 030c 	add.w	r3, r7, #12
 8004812:	2105      	movs	r1, #5
 8004814:	4618      	mov	r0, r3
 8004816:	f002 fec3 	bl	80075a0 <HAL_RCC_ClockConfig>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
  {

  }
}
 800481e:	bf00      	nop
 8004820:	3750      	adds	r7, #80	; 0x50
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40023800 	.word	0x40023800
 800482c:	40007000 	.word	0x40007000

08004830 <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8004830:	b5b0      	push	{r4, r5, r7, lr}
 8004832:	b088      	sub	sp, #32
 8004834:	af00      	add	r7, sp, #0
 8004836:	61f8      	str	r0, [r7, #28]
  for(;;)
  {

//    data = osMailAlloc(QueueHandle, osWaitForever); /* Allocate memory */

    data_imu_raw = process_MPU(true,false);
 8004838:	4c0c      	ldr	r4, [pc, #48]	; (800486c <_Z16StartDefaultTaskPKv+0x3c>)
 800483a:	463b      	mov	r3, r7
 800483c:	2200      	movs	r2, #0
 800483e:	2101      	movs	r1, #1
 8004840:	4618      	mov	r0, r3
 8004842:	f7fd faf1 	bl	8001e28 <_Z11process_MPUbb>
 8004846:	4625      	mov	r5, r4
 8004848:	463c      	mov	r4, r7
 800484a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800484c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800484e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004852:	e885 0003 	stmia.w	r5, {r0, r1}

    adding_raw();
 8004856:	f7fd fa59 	bl	8001d0c <_Z10adding_rawv>
    i++;
 800485a:	4b05      	ldr	r3, [pc, #20]	; (8004870 <_Z16StartDefaultTaskPKv+0x40>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	3301      	adds	r3, #1
 8004860:	4a03      	ldr	r2, [pc, #12]	; (8004870 <_Z16StartDefaultTaskPKv+0x40>)
 8004862:	6013      	str	r3, [r2, #0]
    osDelay(1);
 8004864:	2001      	movs	r0, #1
 8004866:	f004 ffc2 	bl	80097ee <osDelay>
    data_imu_raw = process_MPU(true,false);
 800486a:	e7e5      	b.n	8004838 <_Z16StartDefaultTaskPKv+0x8>
 800486c:	20000ad0 	.word	0x20000ad0
 8004870:	20000ac8 	.word	0x20000ac8

08004874 <_Z11StartTask03PKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask03(void const * argument)
{
 8004874:	b590      	push	{r4, r7, lr}
 8004876:	b085      	sub	sp, #20
 8004878:	af02      	add	r7, sp, #8
 800487a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
//	  advance_print(data_imu_buffer);
//	  print_euler_compare(com_state,magd_state,drone_state);
//	  print_magnet(mag_data);
	  print_raw(data_imu_buffer);
 800487c:	4b07      	ldr	r3, [pc, #28]	; (800489c <_Z11StartTask03PKv+0x28>)
 800487e:	466c      	mov	r4, sp
 8004880:	f103 0210 	add.w	r2, r3, #16
 8004884:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004888:	e884 0003 	stmia.w	r4, {r0, r1}
 800488c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800488e:	f7fe febb 	bl	8003608 <_Z9print_raw8IMU_data>
//	  print_raw_mag(data_imu_buffer, mag_data);
//	  print_euler(drone_state);
	  osDelay(50);
 8004892:	2032      	movs	r0, #50	; 0x32
 8004894:	f004 ffab 	bl	80097ee <osDelay>
	  print_raw(data_imu_buffer);
 8004898:	e7f0      	b.n	800487c <_Z11StartTask03PKv+0x8>
 800489a:	bf00      	nop
 800489c:	20000ae8 	.word	0x20000ae8

080048a0 <_Z11StartTask02PKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask02(void const * argument)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
//	i = 0;
	  mag_data = process_magnet();
 80048a8:	f7fd fca2 	bl	80021f0 <_Z14process_magnetv>
 80048ac:	eef0 6a40 	vmov.f32	s13, s0
 80048b0:	eeb0 7a60 	vmov.f32	s14, s1
 80048b4:	eef0 7a41 	vmov.f32	s15, s2
 80048b8:	4b05      	ldr	r3, [pc, #20]	; (80048d0 <_Z11StartTask02PKv+0x30>)
 80048ba:	edc3 6a00 	vstr	s13, [r3]
 80048be:	ed83 7a01 	vstr	s14, [r3, #4]
 80048c2:	edc3 7a02 	vstr	s15, [r3, #8]
//	alt =  get_alt_bmp();

    osDelay(10);
 80048c6:	200a      	movs	r0, #10
 80048c8:	f004 ff91 	bl	80097ee <osDelay>
	  mag_data = process_magnet();
 80048cc:	e7ec      	b.n	80048a8 <_Z11StartTask02PKv+0x8>
 80048ce:	bf00      	nop
 80048d0:	20000b18 	.word	0x20000b18

080048d4 <_Z14filterFunctionPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_filterFunction */
void filterFunction(void const * argument)
{
 80048d4:	b590      	push	{r4, r7, lr}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af02      	add	r7, sp, #8
 80048da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN filterFunction */
  /* Infinite loop */
  for(;;)
  {

	  if(i!=0){
 80048dc:	4ba5      	ldr	r3, [pc, #660]	; (8004b74 <_Z14filterFunctionPKv+0x2a0>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 8123 	beq.w	8004b2c <_Z14filterFunctionPKv+0x258>

	  data_imu_buffer.Gyro_x = gyro_lpf.update(Gyro_x_/i);
 80048e6:	4ba4      	ldr	r3, [pc, #656]	; (8004b78 <_Z14filterFunctionPKv+0x2a4>)
 80048e8:	ed93 7a00 	vldr	s14, [r3]
 80048ec:	4ba1      	ldr	r3, [pc, #644]	; (8004b74 <_Z14filterFunctionPKv+0x2a0>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	ee07 3a90 	vmov	s15, r3
 80048f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80048fc:	ee16 0a90 	vmov	r0, s13
 8004900:	f7fb fdd2 	bl	80004a8 <__aeabi_f2d>
 8004904:	4603      	mov	r3, r0
 8004906:	460c      	mov	r4, r1
 8004908:	ec44 3b10 	vmov	d0, r3, r4
 800490c:	489b      	ldr	r0, [pc, #620]	; (8004b7c <_Z14filterFunctionPKv+0x2a8>)
 800490e:	f7fc fef1 	bl	80016f4 <_ZN3LPF6updateEd>
 8004912:	ec54 3b10 	vmov	r3, r4, d0
 8004916:	4618      	mov	r0, r3
 8004918:	4621      	mov	r1, r4
 800491a:	f7fc f915 	bl	8000b48 <__aeabi_d2f>
 800491e:	4602      	mov	r2, r0
 8004920:	4b97      	ldr	r3, [pc, #604]	; (8004b80 <_Z14filterFunctionPKv+0x2ac>)
 8004922:	601a      	str	r2, [r3, #0]
	  data_imu_buffer.Gyro_y = gyro_lpf1.update(Gyro_y_/i);
 8004924:	4b97      	ldr	r3, [pc, #604]	; (8004b84 <_Z14filterFunctionPKv+0x2b0>)
 8004926:	ed93 7a00 	vldr	s14, [r3]
 800492a:	4b92      	ldr	r3, [pc, #584]	; (8004b74 <_Z14filterFunctionPKv+0x2a0>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	ee07 3a90 	vmov	s15, r3
 8004932:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004936:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800493a:	ee16 0a90 	vmov	r0, s13
 800493e:	f7fb fdb3 	bl	80004a8 <__aeabi_f2d>
 8004942:	4603      	mov	r3, r0
 8004944:	460c      	mov	r4, r1
 8004946:	ec44 3b10 	vmov	d0, r3, r4
 800494a:	488f      	ldr	r0, [pc, #572]	; (8004b88 <_Z14filterFunctionPKv+0x2b4>)
 800494c:	f7fc fed2 	bl	80016f4 <_ZN3LPF6updateEd>
 8004950:	ec54 3b10 	vmov	r3, r4, d0
 8004954:	4618      	mov	r0, r3
 8004956:	4621      	mov	r1, r4
 8004958:	f7fc f8f6 	bl	8000b48 <__aeabi_d2f>
 800495c:	4602      	mov	r2, r0
 800495e:	4b88      	ldr	r3, [pc, #544]	; (8004b80 <_Z14filterFunctionPKv+0x2ac>)
 8004960:	605a      	str	r2, [r3, #4]
	  data_imu_buffer.Gyro_z = gyro_lpf2.update(Gyro_z_/i);
 8004962:	4b8a      	ldr	r3, [pc, #552]	; (8004b8c <_Z14filterFunctionPKv+0x2b8>)
 8004964:	ed93 7a00 	vldr	s14, [r3]
 8004968:	4b82      	ldr	r3, [pc, #520]	; (8004b74 <_Z14filterFunctionPKv+0x2a0>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	ee07 3a90 	vmov	s15, r3
 8004970:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004974:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004978:	ee16 0a90 	vmov	r0, s13
 800497c:	f7fb fd94 	bl	80004a8 <__aeabi_f2d>
 8004980:	4603      	mov	r3, r0
 8004982:	460c      	mov	r4, r1
 8004984:	ec44 3b10 	vmov	d0, r3, r4
 8004988:	4881      	ldr	r0, [pc, #516]	; (8004b90 <_Z14filterFunctionPKv+0x2bc>)
 800498a:	f7fc feb3 	bl	80016f4 <_ZN3LPF6updateEd>
 800498e:	ec54 3b10 	vmov	r3, r4, d0
 8004992:	4618      	mov	r0, r3
 8004994:	4621      	mov	r1, r4
 8004996:	f7fc f8d7 	bl	8000b48 <__aeabi_d2f>
 800499a:	4602      	mov	r2, r0
 800499c:	4b78      	ldr	r3, [pc, #480]	; (8004b80 <_Z14filterFunctionPKv+0x2ac>)
 800499e:	609a      	str	r2, [r3, #8]

	  data_imu_com.Gyro_x = (data_imu_buffer.Gyro_x - bGx);
 80049a0:	4b77      	ldr	r3, [pc, #476]	; (8004b80 <_Z14filterFunctionPKv+0x2ac>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fb fd7f 	bl	80004a8 <__aeabi_f2d>
 80049aa:	4b7a      	ldr	r3, [pc, #488]	; (8004b94 <_Z14filterFunctionPKv+0x2c0>)
 80049ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80049b0:	461a      	mov	r2, r3
 80049b2:	4623      	mov	r3, r4
 80049b4:	f7fb fc18 	bl	80001e8 <__aeabi_dsub>
 80049b8:	4603      	mov	r3, r0
 80049ba:	460c      	mov	r4, r1
 80049bc:	4618      	mov	r0, r3
 80049be:	4621      	mov	r1, r4
 80049c0:	f7fc f8c2 	bl	8000b48 <__aeabi_d2f>
 80049c4:	4602      	mov	r2, r0
 80049c6:	4b74      	ldr	r3, [pc, #464]	; (8004b98 <_Z14filterFunctionPKv+0x2c4>)
 80049c8:	601a      	str	r2, [r3, #0]
	  data_imu_com.Gyro_y = (data_imu_buffer.Gyro_y - bGy);
 80049ca:	4b6d      	ldr	r3, [pc, #436]	; (8004b80 <_Z14filterFunctionPKv+0x2ac>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fb fd6a 	bl	80004a8 <__aeabi_f2d>
 80049d4:	4b71      	ldr	r3, [pc, #452]	; (8004b9c <_Z14filterFunctionPKv+0x2c8>)
 80049d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80049da:	461a      	mov	r2, r3
 80049dc:	4623      	mov	r3, r4
 80049de:	f7fb fc03 	bl	80001e8 <__aeabi_dsub>
 80049e2:	4603      	mov	r3, r0
 80049e4:	460c      	mov	r4, r1
 80049e6:	4618      	mov	r0, r3
 80049e8:	4621      	mov	r1, r4
 80049ea:	f7fc f8ad 	bl	8000b48 <__aeabi_d2f>
 80049ee:	4602      	mov	r2, r0
 80049f0:	4b69      	ldr	r3, [pc, #420]	; (8004b98 <_Z14filterFunctionPKv+0x2c4>)
 80049f2:	605a      	str	r2, [r3, #4]
	  data_imu_com.Gyro_z = (data_imu_buffer.Gyro_z - bGz);
 80049f4:	4b62      	ldr	r3, [pc, #392]	; (8004b80 <_Z14filterFunctionPKv+0x2ac>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7fb fd55 	bl	80004a8 <__aeabi_f2d>
 80049fe:	4b68      	ldr	r3, [pc, #416]	; (8004ba0 <_Z14filterFunctionPKv+0x2cc>)
 8004a00:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a04:	461a      	mov	r2, r3
 8004a06:	4623      	mov	r3, r4
 8004a08:	f7fb fbee 	bl	80001e8 <__aeabi_dsub>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	460c      	mov	r4, r1
 8004a10:	4618      	mov	r0, r3
 8004a12:	4621      	mov	r1, r4
 8004a14:	f7fc f898 	bl	8000b48 <__aeabi_d2f>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	4b5f      	ldr	r3, [pc, #380]	; (8004b98 <_Z14filterFunctionPKv+0x2c4>)
 8004a1c:	609a      	str	r2, [r3, #8]


	  data_imu_buffer.Acc_x =  acc_lpf.update(Acc_x_/i);
 8004a1e:	4b61      	ldr	r3, [pc, #388]	; (8004ba4 <_Z14filterFunctionPKv+0x2d0>)
 8004a20:	ed93 7a00 	vldr	s14, [r3]
 8004a24:	4b53      	ldr	r3, [pc, #332]	; (8004b74 <_Z14filterFunctionPKv+0x2a0>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	ee07 3a90 	vmov	s15, r3
 8004a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a30:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004a34:	ee16 0a90 	vmov	r0, s13
 8004a38:	f7fb fd36 	bl	80004a8 <__aeabi_f2d>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	460c      	mov	r4, r1
 8004a40:	ec44 3b10 	vmov	d0, r3, r4
 8004a44:	4858      	ldr	r0, [pc, #352]	; (8004ba8 <_Z14filterFunctionPKv+0x2d4>)
 8004a46:	f7fc fe55 	bl	80016f4 <_ZN3LPF6updateEd>
 8004a4a:	ec54 3b10 	vmov	r3, r4, d0
 8004a4e:	4618      	mov	r0, r3
 8004a50:	4621      	mov	r1, r4
 8004a52:	f7fc f879 	bl	8000b48 <__aeabi_d2f>
 8004a56:	4602      	mov	r2, r0
 8004a58:	4b49      	ldr	r3, [pc, #292]	; (8004b80 <_Z14filterFunctionPKv+0x2ac>)
 8004a5a:	60da      	str	r2, [r3, #12]
	  data_imu_buffer.Acc_y =  acc_lpf1.update(Acc_y_/i);
 8004a5c:	4b53      	ldr	r3, [pc, #332]	; (8004bac <_Z14filterFunctionPKv+0x2d8>)
 8004a5e:	ed93 7a00 	vldr	s14, [r3]
 8004a62:	4b44      	ldr	r3, [pc, #272]	; (8004b74 <_Z14filterFunctionPKv+0x2a0>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	ee07 3a90 	vmov	s15, r3
 8004a6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a6e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004a72:	ee16 0a90 	vmov	r0, s13
 8004a76:	f7fb fd17 	bl	80004a8 <__aeabi_f2d>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	460c      	mov	r4, r1
 8004a7e:	ec44 3b10 	vmov	d0, r3, r4
 8004a82:	484b      	ldr	r0, [pc, #300]	; (8004bb0 <_Z14filterFunctionPKv+0x2dc>)
 8004a84:	f7fc fe36 	bl	80016f4 <_ZN3LPF6updateEd>
 8004a88:	ec54 3b10 	vmov	r3, r4, d0
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	4621      	mov	r1, r4
 8004a90:	f7fc f85a 	bl	8000b48 <__aeabi_d2f>
 8004a94:	4602      	mov	r2, r0
 8004a96:	4b3a      	ldr	r3, [pc, #232]	; (8004b80 <_Z14filterFunctionPKv+0x2ac>)
 8004a98:	611a      	str	r2, [r3, #16]
	  data_imu_buffer.Acc_z =  acc_lpf2.update(Acc_z_/i);
 8004a9a:	4b46      	ldr	r3, [pc, #280]	; (8004bb4 <_Z14filterFunctionPKv+0x2e0>)
 8004a9c:	ed93 7a00 	vldr	s14, [r3]
 8004aa0:	4b34      	ldr	r3, [pc, #208]	; (8004b74 <_Z14filterFunctionPKv+0x2a0>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	ee07 3a90 	vmov	s15, r3
 8004aa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004aac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004ab0:	ee16 0a90 	vmov	r0, s13
 8004ab4:	f7fb fcf8 	bl	80004a8 <__aeabi_f2d>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	460c      	mov	r4, r1
 8004abc:	ec44 3b10 	vmov	d0, r3, r4
 8004ac0:	483d      	ldr	r0, [pc, #244]	; (8004bb8 <_Z14filterFunctionPKv+0x2e4>)
 8004ac2:	f7fc fe17 	bl	80016f4 <_ZN3LPF6updateEd>
 8004ac6:	ec54 3b10 	vmov	r3, r4, d0
 8004aca:	4618      	mov	r0, r3
 8004acc:	4621      	mov	r1, r4
 8004ace:	f7fc f83b 	bl	8000b48 <__aeabi_d2f>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	4b2a      	ldr	r3, [pc, #168]	; (8004b80 <_Z14filterFunctionPKv+0x2ac>)
 8004ad6:	615a      	str	r2, [r3, #20]


	  data_imu_com.Acc_x =  (float) Acc_x_/i;
 8004ad8:	4b32      	ldr	r3, [pc, #200]	; (8004ba4 <_Z14filterFunctionPKv+0x2d0>)
 8004ada:	edd3 6a00 	vldr	s13, [r3]
 8004ade:	4b25      	ldr	r3, [pc, #148]	; (8004b74 <_Z14filterFunctionPKv+0x2a0>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	ee07 3a90 	vmov	s15, r3
 8004ae6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004aea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aee:	4b2a      	ldr	r3, [pc, #168]	; (8004b98 <_Z14filterFunctionPKv+0x2c4>)
 8004af0:	edc3 7a03 	vstr	s15, [r3, #12]
	  data_imu_com.Acc_y =  (float) Acc_y_/i;
 8004af4:	4b2d      	ldr	r3, [pc, #180]	; (8004bac <_Z14filterFunctionPKv+0x2d8>)
 8004af6:	edd3 6a00 	vldr	s13, [r3]
 8004afa:	4b1e      	ldr	r3, [pc, #120]	; (8004b74 <_Z14filterFunctionPKv+0x2a0>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	ee07 3a90 	vmov	s15, r3
 8004b02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b0a:	4b23      	ldr	r3, [pc, #140]	; (8004b98 <_Z14filterFunctionPKv+0x2c4>)
 8004b0c:	edc3 7a04 	vstr	s15, [r3, #16]
	  data_imu_com.Acc_z =  (float) Acc_z_/i;
 8004b10:	4b28      	ldr	r3, [pc, #160]	; (8004bb4 <_Z14filterFunctionPKv+0x2e0>)
 8004b12:	edd3 6a00 	vldr	s13, [r3]
 8004b16:	4b17      	ldr	r3, [pc, #92]	; (8004b74 <_Z14filterFunctionPKv+0x2a0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	ee07 3a90 	vmov	s15, r3
 8004b1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b26:	4b1c      	ldr	r3, [pc, #112]	; (8004b98 <_Z14filterFunctionPKv+0x2c4>)
 8004b28:	edc3 7a05 	vstr	s15, [r3, #20]
//	  data_imu_buffer.Acc_y =  gyro_angle_p;
//	  data_imu_buffer.Acc_z =  gyro_angle_y;
//	  drone_state = ekf.getAngle();
//	  print_raw(data_imu_buffer);
	  }
	  com_state = MadgwickAHRSupdateIMU(data_imu_com,0.01);
 8004b2c:	4b1a      	ldr	r3, [pc, #104]	; (8004b98 <_Z14filterFunctionPKv+0x2c4>)
 8004b2e:	466c      	mov	r4, sp
 8004b30:	f103 0210 	add.w	r2, r3, #16
 8004b34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b38:	e884 0003 	stmia.w	r4, {r0, r1}
 8004b3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b3e:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8004bbc <_Z14filterFunctionPKv+0x2e8>
 8004b42:	f7fe f8c1 	bl	8002cc8 <_Z21MadgwickAHRSupdateIMU8IMU_dataf>
 8004b46:	eef0 6a40 	vmov.f32	s13, s0
 8004b4a:	eeb0 7a60 	vmov.f32	s14, s1
 8004b4e:	eef0 7a41 	vmov.f32	s15, s2
 8004b52:	4b1b      	ldr	r3, [pc, #108]	; (8004bc0 <_Z14filterFunctionPKv+0x2ec>)
 8004b54:	edc3 6a00 	vstr	s13, [r3]
 8004b58:	ed83 7a01 	vstr	s14, [r3, #4]
 8004b5c:	edc3 7a02 	vstr	s15, [r3, #8]
//	  com_state = complementary_filter(data_imu_com, 0.01, 0.995);
//	  com_state = cross2plus(com_state);
	  i = 0;
 8004b60:	4b04      	ldr	r3, [pc, #16]	; (8004b74 <_Z14filterFunctionPKv+0x2a0>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]
////	  drone_state.pitch = gyro_angle_p;
////	  drone_state.roll = gyro_angle_r;
////	  drone_state.yaw = gyro_angle_y;
	  delete_raw();
 8004b66:	f7fd f933 	bl	8001dd0 <_Z10delete_rawv>
      osDelay(10);
 8004b6a:	200a      	movs	r0, #10
 8004b6c:	f004 fe3f 	bl	80097ee <osDelay>
	  if(i!=0){
 8004b70:	e6b4      	b.n	80048dc <_Z14filterFunctionPKv+0x8>
 8004b72:	bf00      	nop
 8004b74:	20000ac8 	.word	0x20000ac8
 8004b78:	20000a14 	.word	0x20000a14
 8004b7c:	20000b48 	.word	0x20000b48
 8004b80:	20000ae8 	.word	0x20000ae8
 8004b84:	20000a18 	.word	0x20000a18
 8004b88:	20000b90 	.word	0x20000b90
 8004b8c:	20000a1c 	.word	0x20000a1c
 8004b90:	20000bd8 	.word	0x20000bd8
 8004b94:	200009b8 	.word	0x200009b8
 8004b98:	20000b00 	.word	0x20000b00
 8004b9c:	200009c0 	.word	0x200009c0
 8004ba0:	200009c8 	.word	0x200009c8
 8004ba4:	20000a08 	.word	0x20000a08
 8004ba8:	20000c20 	.word	0x20000c20
 8004bac:	20000a0c 	.word	0x20000a0c
 8004bb0:	20000c68 	.word	0x20000c68
 8004bb4:	20000a10 	.word	0x20000a10
 8004bb8:	20000cb0 	.word	0x20000cb0
 8004bbc:	3c23d70a 	.word	0x3c23d70a
 8004bc0:	20000b24 	.word	0x20000b24

08004bc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a09      	ldr	r2, [pc, #36]	; (8004bf8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d101      	bne.n	8004bda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004bd6:	f000 fbd3 	bl	8005380 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM7) {
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a07      	ldr	r2, [pc, #28]	; (8004bfc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d104      	bne.n	8004bee <HAL_TIM_PeriodElapsedCallback+0x2a>
	  ulHighFrequencyTimerTicks ++;
 8004be4:	4b06      	ldr	r3, [pc, #24]	; (8004c00 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	3301      	adds	r3, #1
 8004bea:	4a05      	ldr	r2, [pc, #20]	; (8004c00 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8004bec:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END Callback 1 */
}
 8004bee:	bf00      	nop
 8004bf0:	3708      	adds	r7, #8
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	40002000 	.word	0x40002000
 8004bfc:	40001400 	.word	0x40001400
 8004c00:	2000098c 	.word	0x2000098c

08004c04 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c04:	b5b0      	push	{r4, r5, r7, lr}
 8004c06:	b094      	sub	sp, #80	; 0x50
 8004c08:	af04      	add	r7, sp, #16
 8004c0a:	6378      	str	r0, [r7, #52]	; 0x34
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8004c0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c10:	485b      	ldr	r0, [pc, #364]	; (8004d80 <HAL_UART_RxCpltCallback+0x17c>)
 8004c12:	f001 f984 	bl	8005f1e <HAL_GPIO_TogglePin>

	if (huart->Instance == USART1)  //current UART
 8004c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a5a      	ldr	r2, [pc, #360]	; (8004d84 <HAL_UART_RxCpltCallback+0x180>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	f040 80a5 	bne.w	8004d6c <HAL_UART_RxCpltCallback+0x168>
	{

//		char trans_b[4];
		if(Rx_data[0] == 's'){
 8004c22:	4b59      	ldr	r3, [pc, #356]	; (8004d88 <HAL_UART_RxCpltCallback+0x184>)
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	2b73      	cmp	r3, #115	; 0x73
 8004c28:	d111      	bne.n	8004c4e <HAL_UART_RxCpltCallback+0x4a>
			j = 0;
 8004c2a:	4b58      	ldr	r3, [pc, #352]	; (8004d8c <HAL_UART_RxCpltCallback+0x188>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	601a      	str	r2, [r3, #0]
//			BOARD_MODE = FLY_MODE;
//			reading = true;
             for(int count = 0; count< 24; count++)
 8004c30:	2300      	movs	r3, #0
 8004c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c36:	2b17      	cmp	r3, #23
 8004c38:	f300 808f 	bgt.w	8004d5a <HAL_UART_RxCpltCallback+0x156>
            	 Rx_buffer[count] = 0x00;
 8004c3c:	4a54      	ldr	r2, [pc, #336]	; (8004d90 <HAL_UART_RxCpltCallback+0x18c>)
 8004c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c40:	4413      	add	r3, r2
 8004c42:	2200      	movs	r2, #0
 8004c44:	701a      	strb	r2, [r3, #0]
             for(int count = 0; count< 24; count++)
 8004c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c48:	3301      	adds	r3, #1
 8004c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c4c:	e7f2      	b.n	8004c34 <HAL_UART_RxCpltCallback+0x30>
		}
		else{
			if(Rx_data[0] != 'e'){
 8004c4e:	4b4e      	ldr	r3, [pc, #312]	; (8004d88 <HAL_UART_RxCpltCallback+0x184>)
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	2b65      	cmp	r3, #101	; 0x65
 8004c54:	d00b      	beq.n	8004c6e <HAL_UART_RxCpltCallback+0x6a>
			 Rx_buffer[j] = Rx_data[0];
 8004c56:	4b4d      	ldr	r3, [pc, #308]	; (8004d8c <HAL_UART_RxCpltCallback+0x188>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a4b      	ldr	r2, [pc, #300]	; (8004d88 <HAL_UART_RxCpltCallback+0x184>)
 8004c5c:	7811      	ldrb	r1, [r2, #0]
 8004c5e:	4a4c      	ldr	r2, [pc, #304]	; (8004d90 <HAL_UART_RxCpltCallback+0x18c>)
 8004c60:	54d1      	strb	r1, [r2, r3]
			 j++;
 8004c62:	4b4a      	ldr	r3, [pc, #296]	; (8004d8c <HAL_UART_RxCpltCallback+0x188>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	3301      	adds	r3, #1
 8004c68:	4a48      	ldr	r2, [pc, #288]	; (8004d8c <HAL_UART_RxCpltCallback+0x188>)
 8004c6a:	6013      	str	r3, [r2, #0]
 8004c6c:	e075      	b.n	8004d5a <HAL_UART_RxCpltCallback+0x156>
//			 HAL_UART_Receive_IT(&huart3, (uint8_t *) Rx_data, 1);

			}
			else{
				if(Rx_buffer[8] == 0x00){
 8004c6e:	4b48      	ldr	r3, [pc, #288]	; (8004d90 <HAL_UART_RxCpltCallback+0x18c>)
 8004c70:	7a1b      	ldrb	r3, [r3, #8]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d138      	bne.n	8004ce8 <HAL_UART_RxCpltCallback+0xe4>
					for(uint8_t k = 0; k<8; k++){
 8004c76:	2300      	movs	r3, #0
 8004c78:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c7c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004c80:	2b07      	cmp	r3, #7
 8004c82:	d80d      	bhi.n	8004ca0 <HAL_UART_RxCpltCallback+0x9c>
                        sbus_buffer[k] = Rx_buffer[k];
 8004c84:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8004c88:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004c8c:	4940      	ldr	r1, [pc, #256]	; (8004d90 <HAL_UART_RxCpltCallback+0x18c>)
 8004c8e:	5c89      	ldrb	r1, [r1, r2]
 8004c90:	4a40      	ldr	r2, [pc, #256]	; (8004d94 <HAL_UART_RxCpltCallback+0x190>)
 8004c92:	54d1      	strb	r1, [r2, r3]
					for(uint8_t k = 0; k<8; k++){
 8004c94:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004c98:	3301      	adds	r3, #1
 8004c9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c9e:	e7ed      	b.n	8004c7c <HAL_UART_RxCpltCallback+0x78>
					}
				esc_value = sbus_decode(sbus_buffer);
 8004ca0:	4c3d      	ldr	r4, [pc, #244]	; (8004d98 <HAL_UART_RxCpltCallback+0x194>)
 8004ca2:	f107 0320 	add.w	r3, r7, #32
 8004ca6:	493b      	ldr	r1, [pc, #236]	; (8004d94 <HAL_UART_RxCpltCallback+0x190>)
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fd fef7 	bl	8002a9c <_Z11sbus_decodePh>
 8004cae:	4623      	mov	r3, r4
 8004cb0:	f107 0220 	add.w	r2, r7, #32
 8004cb4:	6810      	ldr	r0, [r2, #0]
 8004cb6:	6851      	ldr	r1, [r2, #4]
 8004cb8:	c303      	stmia	r3!, {r0, r1}
 8004cba:	8912      	ldrh	r2, [r2, #8]
 8004cbc:	801a      	strh	r2, [r3, #0]
				if(check_CRC(esc_value)){
 8004cbe:	4b36      	ldr	r3, [pc, #216]	; (8004d98 <HAL_UART_RxCpltCallback+0x194>)
 8004cc0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004cc4:	f7fd ff4a 	bl	8002b5c <_Z9check_CRC9ESC_value>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d008      	beq.n	8004ce0 <HAL_UART_RxCpltCallback+0xdc>
				    set_ESC(esc_value);
 8004cce:	4b32      	ldr	r3, [pc, #200]	; (8004d98 <HAL_UART_RxCpltCallback+0x194>)
 8004cd0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004cd4:	f7fd ffda 	bl	8002c8c <_Z7set_ESC9ESC_value>
				    j = 0;
 8004cd8:	4b2c      	ldr	r3, [pc, #176]	; (8004d8c <HAL_UART_RxCpltCallback+0x188>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	e039      	b.n	8004d54 <HAL_UART_RxCpltCallback+0x150>
//				   	HAL_UART_Transmit(&huart1,(uint8_t*) ack, strlen(ack),100);
				}
				else{
					 j = 0;
 8004ce0:	4b2a      	ldr	r3, [pc, #168]	; (8004d8c <HAL_UART_RxCpltCallback+0x188>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	e035      	b.n	8004d54 <HAL_UART_RxCpltCallback+0x150>
				}
				}
				else{
					 pid_temp = pid_decode(Rx_buffer);
 8004ce8:	4c2c      	ldr	r4, [pc, #176]	; (8004d9c <HAL_UART_RxCpltCallback+0x198>)
 8004cea:	463b      	mov	r3, r7
 8004cec:	4928      	ldr	r1, [pc, #160]	; (8004d90 <HAL_UART_RxCpltCallback+0x18c>)
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7ff f894 	bl	8003e1c <_Z10pid_decodePh>
 8004cf4:	463d      	mov	r5, r7
 8004cf6:	6828      	ldr	r0, [r5, #0]
 8004cf8:	6869      	ldr	r1, [r5, #4]
 8004cfa:	68aa      	ldr	r2, [r5, #8]
 8004cfc:	68eb      	ldr	r3, [r5, #12]
 8004cfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d00:	6928      	ldr	r0, [r5, #16]
 8004d02:	6969      	ldr	r1, [r5, #20]
 8004d04:	c403      	stmia	r4!, {r0, r1}
 8004d06:	8b2b      	ldrh	r3, [r5, #24]
 8004d08:	8023      	strh	r3, [r4, #0]
					 if(check_CRC_pid(pid_temp)){
 8004d0a:	4c24      	ldr	r4, [pc, #144]	; (8004d9c <HAL_UART_RxCpltCallback+0x198>)
 8004d0c:	466b      	mov	r3, sp
 8004d0e:	f104 0210 	add.w	r2, r4, #16
 8004d12:	ca07      	ldmia	r2, {r0, r1, r2}
 8004d14:	c303      	stmia	r3!, {r0, r1}
 8004d16:	801a      	strh	r2, [r3, #0]
 8004d18:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004d1c:	f7ff f98c 	bl	8004038 <_Z13check_CRC_pid7PID_raw>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	bf14      	ite	ne
 8004d26:	2301      	movne	r3, #1
 8004d28:	2300      	moveq	r3, #0
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d011      	beq.n	8004d54 <HAL_UART_RxCpltCallback+0x150>
						 writeFlash(pid_temp.data);
 8004d30:	481a      	ldr	r0, [pc, #104]	; (8004d9c <HAL_UART_RxCpltCallback+0x198>)
 8004d32:	f7ff f9bb 	bl	80040ac <_Z10writeFlashPt>
						 pid = readFlash();
 8004d36:	4c1a      	ldr	r4, [pc, #104]	; (8004da0 <HAL_UART_RxCpltCallback+0x19c>)
 8004d38:	463b      	mov	r3, r7
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7ff fa5e 	bl	80041fc <_Z9readFlashv>
 8004d40:	4625      	mov	r5, r4
 8004d42:	463c      	mov	r4, r7
 8004d44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d50:	6823      	ldr	r3, [r4, #0]
 8004d52:	602b      	str	r3, [r5, #0]
					 }
				}
                Rx_data[0] = 0;
 8004d54:	4b0c      	ldr	r3, [pc, #48]	; (8004d88 <HAL_UART_RxCpltCallback+0x184>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	701a      	strb	r2, [r3, #0]

//				HAL_UART_Receive_IT(&huart3, (uint8_t *) Rx_data, 1);
			}
		}

		if(Rx_data[0] == 'd'){
 8004d5a:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <HAL_UART_RxCpltCallback+0x184>)
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	2b64      	cmp	r3, #100	; 0x64
 8004d60:	d104      	bne.n	8004d6c <HAL_UART_RxCpltCallback+0x168>
			set_ESC(esc_stop);
 8004d62:	4b10      	ldr	r3, [pc, #64]	; (8004da4 <HAL_UART_RxCpltCallback+0x1a0>)
 8004d64:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004d68:	f7fd ff90 	bl	8002c8c <_Z7set_ESC9ESC_value>
		}
	}
	 HAL_UART_Receive_IT(&huart1, (uint8_t *) Rx_data, 1);
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	4906      	ldr	r1, [pc, #24]	; (8004d88 <HAL_UART_RxCpltCallback+0x184>)
 8004d70:	480d      	ldr	r0, [pc, #52]	; (8004da8 <HAL_UART_RxCpltCallback+0x1a4>)
 8004d72:	f003 fe7f 	bl	8008a74 <HAL_UART_Receive_IT>
//	 HAL_UART_Receive_IT(&huart3, (uint8_t *) Rx_data, 1);
}
 8004d76:	bf00      	nop
 8004d78:	3740      	adds	r7, #64	; 0x40
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	40020800 	.word	0x40020800
 8004d84:	40011000 	.word	0x40011000
 8004d88:	20000aa4 	.word	0x20000aa4
 8004d8c:	20000acc 	.word	0x20000acc
 8004d90:	20000aa8 	.word	0x20000aa8
 8004d94:	20000ac0 	.word	0x20000ac0
 8004d98:	20000b30 	.word	0x20000b30
 8004d9c:	20000cf8 	.word	0x20000cf8
 8004da0:	20000d14 	.word	0x20000d14
 8004da4:	20000b3c 	.word	0x20000b3c
 8004da8:	20000908 	.word	0x20000908

08004dac <_Z41__static_initialization_and_destruction_0ii>:
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d119      	bne.n	8004df0 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d114      	bne.n	8004df0 <_Z41__static_initialization_and_destruction_0ii+0x44>
LPF gyro_lpf;
 8004dc6:	4812      	ldr	r0, [pc, #72]	; (8004e10 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004dc8:	f7fc fd23 	bl	8001812 <_ZN3LPFC1Ev>
LPF gyro_lpf1;
 8004dcc:	4811      	ldr	r0, [pc, #68]	; (8004e14 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8004dce:	f7fc fd20 	bl	8001812 <_ZN3LPFC1Ev>
LPF gyro_lpf2;
 8004dd2:	4811      	ldr	r0, [pc, #68]	; (8004e18 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004dd4:	f7fc fd1d 	bl	8001812 <_ZN3LPFC1Ev>
LPF acc_lpf;
 8004dd8:	4810      	ldr	r0, [pc, #64]	; (8004e1c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004dda:	f7fc fd1a 	bl	8001812 <_ZN3LPFC1Ev>
LPF acc_lpf1;
 8004dde:	4810      	ldr	r0, [pc, #64]	; (8004e20 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004de0:	f7fc fd17 	bl	8001812 <_ZN3LPFC1Ev>
LPF acc_lpf2;
 8004de4:	480f      	ldr	r0, [pc, #60]	; (8004e24 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004de6:	f7fc fd14 	bl	8001812 <_ZN3LPFC1Ev>
EKF ekf;
 8004dea:	480f      	ldr	r0, [pc, #60]	; (8004e28 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004dec:	f7fe fe02 	bl	80039f4 <_ZN3EKFC1Ev>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d107      	bne.n	8004e06 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d102      	bne.n	8004e06 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8004e00:	4809      	ldr	r0, [pc, #36]	; (8004e28 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004e02:	f7fe fe67 	bl	8003ad4 <_ZN3EKFD1Ev>
}
 8004e06:	bf00      	nop
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	20000b48 	.word	0x20000b48
 8004e14:	20000b90 	.word	0x20000b90
 8004e18:	20000bd8 	.word	0x20000bd8
 8004e1c:	20000c20 	.word	0x20000c20
 8004e20:	20000c68 	.word	0x20000c68
 8004e24:	20000cb0 	.word	0x20000cb0
 8004e28:	20000d48 	.word	0x20000d48

08004e2c <_GLOBAL__sub_I_hi2c1>:
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004e34:	2001      	movs	r0, #1
 8004e36:	f7ff ffb9 	bl	8004dac <_Z41__static_initialization_and_destruction_0ii>
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <_GLOBAL__sub_D_hi2c1>:
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004e44:	2000      	movs	r0, #0
 8004e46:	f7ff ffb1 	bl	8004dac <_Z41__static_initialization_and_destruction_0ii>
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e52:	2300      	movs	r3, #0
 8004e54:	607b      	str	r3, [r7, #4]
 8004e56:	4b12      	ldr	r3, [pc, #72]	; (8004ea0 <HAL_MspInit+0x54>)
 8004e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5a:	4a11      	ldr	r2, [pc, #68]	; (8004ea0 <HAL_MspInit+0x54>)
 8004e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e60:	6453      	str	r3, [r2, #68]	; 0x44
 8004e62:	4b0f      	ldr	r3, [pc, #60]	; (8004ea0 <HAL_MspInit+0x54>)
 8004e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e6a:	607b      	str	r3, [r7, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e6e:	2300      	movs	r3, #0
 8004e70:	603b      	str	r3, [r7, #0]
 8004e72:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <HAL_MspInit+0x54>)
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	4a0a      	ldr	r2, [pc, #40]	; (8004ea0 <HAL_MspInit+0x54>)
 8004e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e7e:	4b08      	ldr	r3, [pc, #32]	; (8004ea0 <HAL_MspInit+0x54>)
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e86:	603b      	str	r3, [r7, #0]
 8004e88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	210f      	movs	r1, #15
 8004e8e:	f06f 0001 	mvn.w	r0, #1
 8004e92:	f000 fb6f 	bl	8005574 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e96:	bf00      	nop
 8004e98:	3708      	adds	r7, #8
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40023800 	.word	0x40023800

08004ea4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b08a      	sub	sp, #40	; 0x28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eac:	f107 0314 	add.w	r3, r7, #20
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	605a      	str	r2, [r3, #4]
 8004eb6:	609a      	str	r2, [r3, #8]
 8004eb8:	60da      	str	r2, [r3, #12]
 8004eba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a19      	ldr	r2, [pc, #100]	; (8004f28 <HAL_I2C_MspInit+0x84>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d12c      	bne.n	8004f20 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	613b      	str	r3, [r7, #16]
 8004eca:	4b18      	ldr	r3, [pc, #96]	; (8004f2c <HAL_I2C_MspInit+0x88>)
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ece:	4a17      	ldr	r2, [pc, #92]	; (8004f2c <HAL_I2C_MspInit+0x88>)
 8004ed0:	f043 0302 	orr.w	r3, r3, #2
 8004ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ed6:	4b15      	ldr	r3, [pc, #84]	; (8004f2c <HAL_I2C_MspInit+0x88>)
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	613b      	str	r3, [r7, #16]
 8004ee0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004ee2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ee8:	2312      	movs	r3, #18
 8004eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004eec:	2301      	movs	r3, #1
 8004eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004ef4:	2304      	movs	r3, #4
 8004ef6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ef8:	f107 0314 	add.w	r3, r7, #20
 8004efc:	4619      	mov	r1, r3
 8004efe:	480c      	ldr	r0, [pc, #48]	; (8004f30 <HAL_I2C_MspInit+0x8c>)
 8004f00:	f000 fe5a 	bl	8005bb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004f04:	2300      	movs	r3, #0
 8004f06:	60fb      	str	r3, [r7, #12]
 8004f08:	4b08      	ldr	r3, [pc, #32]	; (8004f2c <HAL_I2C_MspInit+0x88>)
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0c:	4a07      	ldr	r2, [pc, #28]	; (8004f2c <HAL_I2C_MspInit+0x88>)
 8004f0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f12:	6413      	str	r3, [r2, #64]	; 0x40
 8004f14:	4b05      	ldr	r3, [pc, #20]	; (8004f2c <HAL_I2C_MspInit+0x88>)
 8004f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004f20:	bf00      	nop
 8004f22:	3728      	adds	r7, #40	; 0x28
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40005400 	.word	0x40005400
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	40020400 	.word	0x40020400

08004f34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a22      	ldr	r2, [pc, #136]	; (8004fcc <HAL_TIM_Base_MspInit+0x98>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d10e      	bne.n	8004f64 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004f46:	2300      	movs	r3, #0
 8004f48:	617b      	str	r3, [r7, #20]
 8004f4a:	4b21      	ldr	r3, [pc, #132]	; (8004fd0 <HAL_TIM_Base_MspInit+0x9c>)
 8004f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4e:	4a20      	ldr	r2, [pc, #128]	; (8004fd0 <HAL_TIM_Base_MspInit+0x9c>)
 8004f50:	f043 0301 	orr.w	r3, r3, #1
 8004f54:	6453      	str	r3, [r2, #68]	; 0x44
 8004f56:	4b1e      	ldr	r3, [pc, #120]	; (8004fd0 <HAL_TIM_Base_MspInit+0x9c>)
 8004f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8004f62:	e02e      	b.n	8004fc2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a1a      	ldr	r2, [pc, #104]	; (8004fd4 <HAL_TIM_Base_MspInit+0xa0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d10e      	bne.n	8004f8c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004f6e:	2300      	movs	r3, #0
 8004f70:	613b      	str	r3, [r7, #16]
 8004f72:	4b17      	ldr	r3, [pc, #92]	; (8004fd0 <HAL_TIM_Base_MspInit+0x9c>)
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	4a16      	ldr	r2, [pc, #88]	; (8004fd0 <HAL_TIM_Base_MspInit+0x9c>)
 8004f78:	f043 0304 	orr.w	r3, r3, #4
 8004f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f7e:	4b14      	ldr	r3, [pc, #80]	; (8004fd0 <HAL_TIM_Base_MspInit+0x9c>)
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	f003 0304 	and.w	r3, r3, #4
 8004f86:	613b      	str	r3, [r7, #16]
 8004f88:	693b      	ldr	r3, [r7, #16]
}
 8004f8a:	e01a      	b.n	8004fc2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM7)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a11      	ldr	r2, [pc, #68]	; (8004fd8 <HAL_TIM_Base_MspInit+0xa4>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d115      	bne.n	8004fc2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004f96:	2300      	movs	r3, #0
 8004f98:	60fb      	str	r3, [r7, #12]
 8004f9a:	4b0d      	ldr	r3, [pc, #52]	; (8004fd0 <HAL_TIM_Base_MspInit+0x9c>)
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	4a0c      	ldr	r2, [pc, #48]	; (8004fd0 <HAL_TIM_Base_MspInit+0x9c>)
 8004fa0:	f043 0320 	orr.w	r3, r3, #32
 8004fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8004fa6:	4b0a      	ldr	r3, [pc, #40]	; (8004fd0 <HAL_TIM_Base_MspInit+0x9c>)
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	f003 0320 	and.w	r3, r3, #32
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	2105      	movs	r1, #5
 8004fb6:	2037      	movs	r0, #55	; 0x37
 8004fb8:	f000 fadc 	bl	8005574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004fbc:	2037      	movs	r0, #55	; 0x37
 8004fbe:	f000 faf5 	bl	80055ac <HAL_NVIC_EnableIRQ>
}
 8004fc2:	bf00      	nop
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	40010000 	.word	0x40010000
 8004fd0:	40023800 	.word	0x40023800
 8004fd4:	40000800 	.word	0x40000800
 8004fd8:	40001400 	.word	0x40001400

08004fdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b088      	sub	sp, #32
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fe4:	f107 030c 	add.w	r3, r7, #12
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	605a      	str	r2, [r3, #4]
 8004fee:	609a      	str	r2, [r3, #8]
 8004ff0:	60da      	str	r2, [r3, #12]
 8004ff2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a12      	ldr	r2, [pc, #72]	; (8005044 <HAL_TIM_MspPostInit+0x68>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d11e      	bne.n	800503c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ffe:	2300      	movs	r3, #0
 8005000:	60bb      	str	r3, [r7, #8]
 8005002:	4b11      	ldr	r3, [pc, #68]	; (8005048 <HAL_TIM_MspPostInit+0x6c>)
 8005004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005006:	4a10      	ldr	r2, [pc, #64]	; (8005048 <HAL_TIM_MspPostInit+0x6c>)
 8005008:	f043 0301 	orr.w	r3, r3, #1
 800500c:	6313      	str	r3, [r2, #48]	; 0x30
 800500e:	4b0e      	ldr	r3, [pc, #56]	; (8005048 <HAL_TIM_MspPostInit+0x6c>)
 8005010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	60bb      	str	r3, [r7, #8]
 8005018:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800501a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800501e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005020:	2302      	movs	r3, #2
 8005022:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005024:	2300      	movs	r3, #0
 8005026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005028:	2300      	movs	r3, #0
 800502a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800502c:	2301      	movs	r3, #1
 800502e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005030:	f107 030c 	add.w	r3, r7, #12
 8005034:	4619      	mov	r1, r3
 8005036:	4805      	ldr	r0, [pc, #20]	; (800504c <HAL_TIM_MspPostInit+0x70>)
 8005038:	f000 fdbe 	bl	8005bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800503c:	bf00      	nop
 800503e:	3720      	adds	r7, #32
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	40010000 	.word	0x40010000
 8005048:	40023800 	.word	0x40023800
 800504c:	40020000 	.word	0x40020000

08005050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b08c      	sub	sp, #48	; 0x30
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005058:	f107 031c 	add.w	r3, r7, #28
 800505c:	2200      	movs	r2, #0
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	605a      	str	r2, [r3, #4]
 8005062:	609a      	str	r2, [r3, #8]
 8005064:	60da      	str	r2, [r3, #12]
 8005066:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a36      	ldr	r2, [pc, #216]	; (8005148 <HAL_UART_MspInit+0xf8>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d134      	bne.n	80050dc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005072:	2300      	movs	r3, #0
 8005074:	61bb      	str	r3, [r7, #24]
 8005076:	4b35      	ldr	r3, [pc, #212]	; (800514c <HAL_UART_MspInit+0xfc>)
 8005078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507a:	4a34      	ldr	r2, [pc, #208]	; (800514c <HAL_UART_MspInit+0xfc>)
 800507c:	f043 0310 	orr.w	r3, r3, #16
 8005080:	6453      	str	r3, [r2, #68]	; 0x44
 8005082:	4b32      	ldr	r3, [pc, #200]	; (800514c <HAL_UART_MspInit+0xfc>)
 8005084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005086:	f003 0310 	and.w	r3, r3, #16
 800508a:	61bb      	str	r3, [r7, #24]
 800508c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800508e:	2300      	movs	r3, #0
 8005090:	617b      	str	r3, [r7, #20]
 8005092:	4b2e      	ldr	r3, [pc, #184]	; (800514c <HAL_UART_MspInit+0xfc>)
 8005094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005096:	4a2d      	ldr	r2, [pc, #180]	; (800514c <HAL_UART_MspInit+0xfc>)
 8005098:	f043 0302 	orr.w	r3, r3, #2
 800509c:	6313      	str	r3, [r2, #48]	; 0x30
 800509e:	4b2b      	ldr	r3, [pc, #172]	; (800514c <HAL_UART_MspInit+0xfc>)
 80050a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	617b      	str	r3, [r7, #20]
 80050a8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80050aa:	23c0      	movs	r3, #192	; 0xc0
 80050ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ae:	2302      	movs	r3, #2
 80050b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b2:	2300      	movs	r3, #0
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050b6:	2303      	movs	r3, #3
 80050b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80050ba:	2307      	movs	r3, #7
 80050bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050be:	f107 031c 	add.w	r3, r7, #28
 80050c2:	4619      	mov	r1, r3
 80050c4:	4822      	ldr	r0, [pc, #136]	; (8005150 <HAL_UART_MspInit+0x100>)
 80050c6:	f000 fd77 	bl	8005bb8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 8, 0);
 80050ca:	2200      	movs	r2, #0
 80050cc:	2108      	movs	r1, #8
 80050ce:	2025      	movs	r0, #37	; 0x25
 80050d0:	f000 fa50 	bl	8005574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80050d4:	2025      	movs	r0, #37	; 0x25
 80050d6:	f000 fa69 	bl	80055ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80050da:	e031      	b.n	8005140 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a1c      	ldr	r2, [pc, #112]	; (8005154 <HAL_UART_MspInit+0x104>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d12c      	bne.n	8005140 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80050e6:	2300      	movs	r3, #0
 80050e8:	613b      	str	r3, [r7, #16]
 80050ea:	4b18      	ldr	r3, [pc, #96]	; (800514c <HAL_UART_MspInit+0xfc>)
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	4a17      	ldr	r2, [pc, #92]	; (800514c <HAL_UART_MspInit+0xfc>)
 80050f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050f4:	6413      	str	r3, [r2, #64]	; 0x40
 80050f6:	4b15      	ldr	r3, [pc, #84]	; (800514c <HAL_UART_MspInit+0xfc>)
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050fe:	613b      	str	r3, [r7, #16]
 8005100:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005102:	2300      	movs	r3, #0
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	4b11      	ldr	r3, [pc, #68]	; (800514c <HAL_UART_MspInit+0xfc>)
 8005108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510a:	4a10      	ldr	r2, [pc, #64]	; (800514c <HAL_UART_MspInit+0xfc>)
 800510c:	f043 0302 	orr.w	r3, r3, #2
 8005110:	6313      	str	r3, [r2, #48]	; 0x30
 8005112:	4b0e      	ldr	r3, [pc, #56]	; (800514c <HAL_UART_MspInit+0xfc>)
 8005114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	60fb      	str	r3, [r7, #12]
 800511c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800511e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005124:	2302      	movs	r3, #2
 8005126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005128:	2300      	movs	r3, #0
 800512a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800512c:	2303      	movs	r3, #3
 800512e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005130:	2307      	movs	r3, #7
 8005132:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005134:	f107 031c 	add.w	r3, r7, #28
 8005138:	4619      	mov	r1, r3
 800513a:	4805      	ldr	r0, [pc, #20]	; (8005150 <HAL_UART_MspInit+0x100>)
 800513c:	f000 fd3c 	bl	8005bb8 <HAL_GPIO_Init>
}
 8005140:	bf00      	nop
 8005142:	3730      	adds	r7, #48	; 0x30
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	40011000 	.word	0x40011000
 800514c:	40023800 	.word	0x40023800
 8005150:	40020400 	.word	0x40020400
 8005154:	40004800 	.word	0x40004800

08005158 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b08c      	sub	sp, #48	; 0x30
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005160:	2300      	movs	r3, #0
 8005162:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005164:	2300      	movs	r3, #0
 8005166:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 8005168:	2200      	movs	r2, #0
 800516a:	6879      	ldr	r1, [r7, #4]
 800516c:	202d      	movs	r0, #45	; 0x2d
 800516e:	f000 fa01 	bl	8005574 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 8005172:	202d      	movs	r0, #45	; 0x2d
 8005174:	f000 fa1a 	bl	80055ac <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8005178:	2300      	movs	r3, #0
 800517a:	60fb      	str	r3, [r7, #12]
 800517c:	4b1f      	ldr	r3, [pc, #124]	; (80051fc <HAL_InitTick+0xa4>)
 800517e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005180:	4a1e      	ldr	r2, [pc, #120]	; (80051fc <HAL_InitTick+0xa4>)
 8005182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005186:	6413      	str	r3, [r2, #64]	; 0x40
 8005188:	4b1c      	ldr	r3, [pc, #112]	; (80051fc <HAL_InitTick+0xa4>)
 800518a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005190:	60fb      	str	r3, [r7, #12]
 8005192:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005194:	f107 0210 	add.w	r2, r7, #16
 8005198:	f107 0314 	add.w	r3, r7, #20
 800519c:	4611      	mov	r1, r2
 800519e:	4618      	mov	r0, r3
 80051a0:	f002 fbca 	bl	8007938 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80051a4:	f002 fba0 	bl	80078e8 <HAL_RCC_GetPCLK1Freq>
 80051a8:	4603      	mov	r3, r0
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80051ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b0:	4a13      	ldr	r2, [pc, #76]	; (8005200 <HAL_InitTick+0xa8>)
 80051b2:	fba2 2303 	umull	r2, r3, r2, r3
 80051b6:	0c9b      	lsrs	r3, r3, #18
 80051b8:	3b01      	subs	r3, #1
 80051ba:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80051bc:	4b11      	ldr	r3, [pc, #68]	; (8005204 <HAL_InitTick+0xac>)
 80051be:	4a12      	ldr	r2, [pc, #72]	; (8005208 <HAL_InitTick+0xb0>)
 80051c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 80051c2:	4b10      	ldr	r3, [pc, #64]	; (8005204 <HAL_InitTick+0xac>)
 80051c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80051c8:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80051ca:	4a0e      	ldr	r2, [pc, #56]	; (8005204 <HAL_InitTick+0xac>)
 80051cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ce:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80051d0:	4b0c      	ldr	r3, [pc, #48]	; (8005204 <HAL_InitTick+0xac>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051d6:	4b0b      	ldr	r3, [pc, #44]	; (8005204 <HAL_InitTick+0xac>)
 80051d8:	2200      	movs	r2, #0
 80051da:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 80051dc:	4809      	ldr	r0, [pc, #36]	; (8005204 <HAL_InitTick+0xac>)
 80051de:	f002 fbdd 	bl	800799c <HAL_TIM_Base_Init>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d104      	bne.n	80051f2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 80051e8:	4806      	ldr	r0, [pc, #24]	; (8005204 <HAL_InitTick+0xac>)
 80051ea:	f002 fc26 	bl	8007a3a <HAL_TIM_Base_Start_IT>
 80051ee:	4603      	mov	r3, r0
 80051f0:	e000      	b.n	80051f4 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3730      	adds	r7, #48	; 0x30
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	40023800 	.word	0x40023800
 8005200:	431bde83 	.word	0x431bde83
 8005204:	2001a8c8 	.word	0x2001a8c8
 8005208:	40002000 	.word	0x40002000

0800520c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800520c:	b480      	push	{r7}
 800520e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005210:	bf00      	nop
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800521a:	b480      	push	{r7}
 800521c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800521e:	e7fe      	b.n	800521e <HardFault_Handler+0x4>

08005220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005220:	b480      	push	{r7}
 8005222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005224:	e7fe      	b.n	8005224 <MemManage_Handler+0x4>

08005226 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005226:	b480      	push	{r7}
 8005228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800522a:	e7fe      	b.n	800522a <BusFault_Handler+0x4>

0800522c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005230:	e7fe      	b.n	8005230 <UsageFault_Handler+0x4>

08005232 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005232:	b480      	push	{r7}
 8005234:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005236:	bf00      	nop
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005244:	4802      	ldr	r0, [pc, #8]	; (8005250 <USART1_IRQHandler+0x10>)
 8005246:	f003 fc6b 	bl	8008b20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800524a:	bf00      	nop
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	20000908 	.word	0x20000908

08005254 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8005258:	4802      	ldr	r0, [pc, #8]	; (8005264 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800525a:	f002 fc85 	bl	8007b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800525e:	bf00      	nop
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	2001a8c8 	.word	0x2001a8c8

08005268 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800526c:	4802      	ldr	r0, [pc, #8]	; (8005278 <TIM7_IRQHandler+0x10>)
 800526e:	f002 fc7b 	bl	8007b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005272:	bf00      	nop
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	2000094c 	.word	0x2000094c

0800527c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800527c:	b480      	push	{r7}
 800527e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005280:	4b16      	ldr	r3, [pc, #88]	; (80052dc <SystemInit+0x60>)
 8005282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005286:	4a15      	ldr	r2, [pc, #84]	; (80052dc <SystemInit+0x60>)
 8005288:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800528c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005290:	4b13      	ldr	r3, [pc, #76]	; (80052e0 <SystemInit+0x64>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a12      	ldr	r2, [pc, #72]	; (80052e0 <SystemInit+0x64>)
 8005296:	f043 0301 	orr.w	r3, r3, #1
 800529a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800529c:	4b10      	ldr	r3, [pc, #64]	; (80052e0 <SystemInit+0x64>)
 800529e:	2200      	movs	r2, #0
 80052a0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80052a2:	4b0f      	ldr	r3, [pc, #60]	; (80052e0 <SystemInit+0x64>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a0e      	ldr	r2, [pc, #56]	; (80052e0 <SystemInit+0x64>)
 80052a8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80052ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052b0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80052b2:	4b0b      	ldr	r3, [pc, #44]	; (80052e0 <SystemInit+0x64>)
 80052b4:	4a0b      	ldr	r2, [pc, #44]	; (80052e4 <SystemInit+0x68>)
 80052b6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80052b8:	4b09      	ldr	r3, [pc, #36]	; (80052e0 <SystemInit+0x64>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a08      	ldr	r2, [pc, #32]	; (80052e0 <SystemInit+0x64>)
 80052be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80052c4:	4b06      	ldr	r3, [pc, #24]	; (80052e0 <SystemInit+0x64>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80052ca:	4b04      	ldr	r3, [pc, #16]	; (80052dc <SystemInit+0x60>)
 80052cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80052d0:	609a      	str	r2, [r3, #8]
#endif
}
 80052d2:	bf00      	nop
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	e000ed00 	.word	0xe000ed00
 80052e0:	40023800 	.word	0x40023800
 80052e4:	24003010 	.word	0x24003010

080052e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80052e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005320 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80052ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80052ee:	e003      	b.n	80052f8 <LoopCopyDataInit>

080052f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80052f0:	4b0c      	ldr	r3, [pc, #48]	; (8005324 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80052f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80052f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80052f6:	3104      	adds	r1, #4

080052f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80052f8:	480b      	ldr	r0, [pc, #44]	; (8005328 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80052fa:	4b0c      	ldr	r3, [pc, #48]	; (800532c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80052fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80052fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005300:	d3f6      	bcc.n	80052f0 <CopyDataInit>
  ldr  r2, =_sbss
 8005302:	4a0b      	ldr	r2, [pc, #44]	; (8005330 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005304:	e002      	b.n	800530c <LoopFillZerobss>

08005306 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005306:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005308:	f842 3b04 	str.w	r3, [r2], #4

0800530c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800530c:	4b09      	ldr	r3, [pc, #36]	; (8005334 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800530e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005310:	d3f9      	bcc.n	8005306 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005312:	f7ff ffb3 	bl	800527c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005316:	f006 fa45 	bl	800b7a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800531a:	f7ff f8e1 	bl	80044e0 <main>
  bx  lr    
 800531e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005320:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005324:	0800ba74 	.word	0x0800ba74
  ldr  r0, =_sdata
 8005328:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800532c:	20000578 	.word	0x20000578
  ldr  r2, =_sbss
 8005330:	20000578 	.word	0x20000578
  ldr  r3, = _ebss
 8005334:	2001a92c 	.word	0x2001a92c

08005338 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005338:	e7fe      	b.n	8005338 <ADC_IRQHandler>
	...

0800533c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005340:	4b0e      	ldr	r3, [pc, #56]	; (800537c <HAL_Init+0x40>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a0d      	ldr	r2, [pc, #52]	; (800537c <HAL_Init+0x40>)
 8005346:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800534a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800534c:	4b0b      	ldr	r3, [pc, #44]	; (800537c <HAL_Init+0x40>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a0a      	ldr	r2, [pc, #40]	; (800537c <HAL_Init+0x40>)
 8005352:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005356:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005358:	4b08      	ldr	r3, [pc, #32]	; (800537c <HAL_Init+0x40>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a07      	ldr	r2, [pc, #28]	; (800537c <HAL_Init+0x40>)
 800535e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005362:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005364:	2003      	movs	r0, #3
 8005366:	f000 f8fa 	bl	800555e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800536a:	2000      	movs	r0, #0
 800536c:	f7ff fef4 	bl	8005158 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005370:	f7ff fd6c 	bl	8004e4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	40023c00 	.word	0x40023c00

08005380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005380:	b480      	push	{r7}
 8005382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005384:	4b06      	ldr	r3, [pc, #24]	; (80053a0 <HAL_IncTick+0x20>)
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	461a      	mov	r2, r3
 800538a:	4b06      	ldr	r3, [pc, #24]	; (80053a4 <HAL_IncTick+0x24>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4413      	add	r3, r2
 8005390:	4a04      	ldr	r2, [pc, #16]	; (80053a4 <HAL_IncTick+0x24>)
 8005392:	6013      	str	r3, [r2, #0]
}
 8005394:	bf00      	nop
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	20000508 	.word	0x20000508
 80053a4:	2001a908 	.word	0x2001a908

080053a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053a8:	b480      	push	{r7}
 80053aa:	af00      	add	r7, sp, #0
  return uwTick;
 80053ac:	4b03      	ldr	r3, [pc, #12]	; (80053bc <HAL_GetTick+0x14>)
 80053ae:	681b      	ldr	r3, [r3, #0]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	2001a908 	.word	0x2001a908

080053c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80053c8:	f7ff ffee 	bl	80053a8 <HAL_GetTick>
 80053cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053d8:	d005      	beq.n	80053e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80053da:	4b09      	ldr	r3, [pc, #36]	; (8005400 <HAL_Delay+0x40>)
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	461a      	mov	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	4413      	add	r3, r2
 80053e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80053e6:	bf00      	nop
 80053e8:	f7ff ffde 	bl	80053a8 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d8f7      	bhi.n	80053e8 <HAL_Delay+0x28>
  {
  }
}
 80053f8:	bf00      	nop
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	20000508 	.word	0x20000508

08005404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f003 0307 	and.w	r3, r3, #7
 8005412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005414:	4b0c      	ldr	r3, [pc, #48]	; (8005448 <__NVIC_SetPriorityGrouping+0x44>)
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005420:	4013      	ands	r3, r2
 8005422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800542c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005436:	4a04      	ldr	r2, [pc, #16]	; (8005448 <__NVIC_SetPriorityGrouping+0x44>)
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	60d3      	str	r3, [r2, #12]
}
 800543c:	bf00      	nop
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr
 8005448:	e000ed00 	.word	0xe000ed00

0800544c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005450:	4b04      	ldr	r3, [pc, #16]	; (8005464 <__NVIC_GetPriorityGrouping+0x18>)
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	0a1b      	lsrs	r3, r3, #8
 8005456:	f003 0307 	and.w	r3, r3, #7
}
 800545a:	4618      	mov	r0, r3
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	e000ed00 	.word	0xe000ed00

08005468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	4603      	mov	r3, r0
 8005470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005476:	2b00      	cmp	r3, #0
 8005478:	db0b      	blt.n	8005492 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800547a:	79fb      	ldrb	r3, [r7, #7]
 800547c:	f003 021f 	and.w	r2, r3, #31
 8005480:	4907      	ldr	r1, [pc, #28]	; (80054a0 <__NVIC_EnableIRQ+0x38>)
 8005482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005486:	095b      	lsrs	r3, r3, #5
 8005488:	2001      	movs	r0, #1
 800548a:	fa00 f202 	lsl.w	r2, r0, r2
 800548e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005492:	bf00      	nop
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	e000e100 	.word	0xe000e100

080054a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	4603      	mov	r3, r0
 80054ac:	6039      	str	r1, [r7, #0]
 80054ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	db0a      	blt.n	80054ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	490c      	ldr	r1, [pc, #48]	; (80054f0 <__NVIC_SetPriority+0x4c>)
 80054be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054c2:	0112      	lsls	r2, r2, #4
 80054c4:	b2d2      	uxtb	r2, r2
 80054c6:	440b      	add	r3, r1
 80054c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054cc:	e00a      	b.n	80054e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	4908      	ldr	r1, [pc, #32]	; (80054f4 <__NVIC_SetPriority+0x50>)
 80054d4:	79fb      	ldrb	r3, [r7, #7]
 80054d6:	f003 030f 	and.w	r3, r3, #15
 80054da:	3b04      	subs	r3, #4
 80054dc:	0112      	lsls	r2, r2, #4
 80054de:	b2d2      	uxtb	r2, r2
 80054e0:	440b      	add	r3, r1
 80054e2:	761a      	strb	r2, [r3, #24]
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr
 80054f0:	e000e100 	.word	0xe000e100
 80054f4:	e000ed00 	.word	0xe000ed00

080054f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b089      	sub	sp, #36	; 0x24
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f003 0307 	and.w	r3, r3, #7
 800550a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	f1c3 0307 	rsb	r3, r3, #7
 8005512:	2b04      	cmp	r3, #4
 8005514:	bf28      	it	cs
 8005516:	2304      	movcs	r3, #4
 8005518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	3304      	adds	r3, #4
 800551e:	2b06      	cmp	r3, #6
 8005520:	d902      	bls.n	8005528 <NVIC_EncodePriority+0x30>
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	3b03      	subs	r3, #3
 8005526:	e000      	b.n	800552a <NVIC_EncodePriority+0x32>
 8005528:	2300      	movs	r3, #0
 800552a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800552c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	fa02 f303 	lsl.w	r3, r2, r3
 8005536:	43da      	mvns	r2, r3
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	401a      	ands	r2, r3
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005540:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	fa01 f303 	lsl.w	r3, r1, r3
 800554a:	43d9      	mvns	r1, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005550:	4313      	orrs	r3, r2
         );
}
 8005552:	4618      	mov	r0, r3
 8005554:	3724      	adds	r7, #36	; 0x24
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b082      	sub	sp, #8
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7ff ff4c 	bl	8005404 <__NVIC_SetPriorityGrouping>
}
 800556c:	bf00      	nop
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af00      	add	r7, sp, #0
 800557a:	4603      	mov	r3, r0
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
 8005580:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005582:	2300      	movs	r3, #0
 8005584:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005586:	f7ff ff61 	bl	800544c <__NVIC_GetPriorityGrouping>
 800558a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	68b9      	ldr	r1, [r7, #8]
 8005590:	6978      	ldr	r0, [r7, #20]
 8005592:	f7ff ffb1 	bl	80054f8 <NVIC_EncodePriority>
 8005596:	4602      	mov	r2, r0
 8005598:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800559c:	4611      	mov	r1, r2
 800559e:	4618      	mov	r0, r3
 80055a0:	f7ff ff80 	bl	80054a4 <__NVIC_SetPriority>
}
 80055a4:	bf00      	nop
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	4603      	mov	r3, r0
 80055b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7ff ff54 	bl	8005468 <__NVIC_EnableIRQ>
}
 80055c0:	bf00      	nop
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d004      	beq.n	80055e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2280      	movs	r2, #128	; 0x80
 80055e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e00c      	b.n	8005600 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2205      	movs	r2, #5
 80055ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0201 	bic.w	r2, r2, #1
 80055fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800561e:	4b23      	ldr	r3, [pc, #140]	; (80056ac <HAL_FLASH_Program+0xa0>)
 8005620:	7e1b      	ldrb	r3, [r3, #24]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d101      	bne.n	800562a <HAL_FLASH_Program+0x1e>
 8005626:	2302      	movs	r3, #2
 8005628:	e03b      	b.n	80056a2 <HAL_FLASH_Program+0x96>
 800562a:	4b20      	ldr	r3, [pc, #128]	; (80056ac <HAL_FLASH_Program+0xa0>)
 800562c:	2201      	movs	r2, #1
 800562e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005630:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005634:	f000 f870 	bl	8005718 <FLASH_WaitForLastOperation>
 8005638:	4603      	mov	r3, r0
 800563a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800563c:	7dfb      	ldrb	r3, [r7, #23]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d12b      	bne.n	800569a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d105      	bne.n	8005654 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005648:	783b      	ldrb	r3, [r7, #0]
 800564a:	4619      	mov	r1, r3
 800564c:	68b8      	ldr	r0, [r7, #8]
 800564e:	f000 f919 	bl	8005884 <FLASH_Program_Byte>
 8005652:	e016      	b.n	8005682 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d105      	bne.n	8005666 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800565a:	883b      	ldrh	r3, [r7, #0]
 800565c:	4619      	mov	r1, r3
 800565e:	68b8      	ldr	r0, [r7, #8]
 8005660:	f000 f8ec 	bl	800583c <FLASH_Program_HalfWord>
 8005664:	e00d      	b.n	8005682 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2b02      	cmp	r3, #2
 800566a:	d105      	bne.n	8005678 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	4619      	mov	r1, r3
 8005670:	68b8      	ldr	r0, [r7, #8]
 8005672:	f000 f8c1 	bl	80057f8 <FLASH_Program_Word>
 8005676:	e004      	b.n	8005682 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800567c:	68b8      	ldr	r0, [r7, #8]
 800567e:	f000 f88b 	bl	8005798 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005682:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005686:	f000 f847 	bl	8005718 <FLASH_WaitForLastOperation>
 800568a:	4603      	mov	r3, r0
 800568c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800568e:	4b08      	ldr	r3, [pc, #32]	; (80056b0 <HAL_FLASH_Program+0xa4>)
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	4a07      	ldr	r2, [pc, #28]	; (80056b0 <HAL_FLASH_Program+0xa4>)
 8005694:	f023 0301 	bic.w	r3, r3, #1
 8005698:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800569a:	4b04      	ldr	r3, [pc, #16]	; (80056ac <HAL_FLASH_Program+0xa0>)
 800569c:	2200      	movs	r2, #0
 800569e:	761a      	strb	r2, [r3, #24]
  
  return status;
 80056a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3718      	adds	r7, #24
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	2001a90c 	.word	0x2001a90c
 80056b0:	40023c00 	.word	0x40023c00

080056b4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80056be:	4b0b      	ldr	r3, [pc, #44]	; (80056ec <HAL_FLASH_Unlock+0x38>)
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	da0b      	bge.n	80056de <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80056c6:	4b09      	ldr	r3, [pc, #36]	; (80056ec <HAL_FLASH_Unlock+0x38>)
 80056c8:	4a09      	ldr	r2, [pc, #36]	; (80056f0 <HAL_FLASH_Unlock+0x3c>)
 80056ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80056cc:	4b07      	ldr	r3, [pc, #28]	; (80056ec <HAL_FLASH_Unlock+0x38>)
 80056ce:	4a09      	ldr	r2, [pc, #36]	; (80056f4 <HAL_FLASH_Unlock+0x40>)
 80056d0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80056d2:	4b06      	ldr	r3, [pc, #24]	; (80056ec <HAL_FLASH_Unlock+0x38>)
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	da01      	bge.n	80056de <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80056de:	79fb      	ldrb	r3, [r7, #7]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	40023c00 	.word	0x40023c00
 80056f0:	45670123 	.word	0x45670123
 80056f4:	cdef89ab 	.word	0xcdef89ab

080056f8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80056f8:	b480      	push	{r7}
 80056fa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80056fc:	4b05      	ldr	r3, [pc, #20]	; (8005714 <HAL_FLASH_Lock+0x1c>)
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	4a04      	ldr	r2, [pc, #16]	; (8005714 <HAL_FLASH_Lock+0x1c>)
 8005702:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005706:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	40023c00 	.word	0x40023c00

08005718 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005720:	2300      	movs	r3, #0
 8005722:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005724:	4b1a      	ldr	r3, [pc, #104]	; (8005790 <FLASH_WaitForLastOperation+0x78>)
 8005726:	2200      	movs	r2, #0
 8005728:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800572a:	f7ff fe3d 	bl	80053a8 <HAL_GetTick>
 800572e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005730:	e010      	b.n	8005754 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005738:	d00c      	beq.n	8005754 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d007      	beq.n	8005750 <FLASH_WaitForLastOperation+0x38>
 8005740:	f7ff fe32 	bl	80053a8 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	429a      	cmp	r2, r3
 800574e:	d201      	bcs.n	8005754 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e019      	b.n	8005788 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005754:	4b0f      	ldr	r3, [pc, #60]	; (8005794 <FLASH_WaitForLastOperation+0x7c>)
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1e8      	bne.n	8005732 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005760:	4b0c      	ldr	r3, [pc, #48]	; (8005794 <FLASH_WaitForLastOperation+0x7c>)
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	2b00      	cmp	r3, #0
 800576a:	d002      	beq.n	8005772 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800576c:	4b09      	ldr	r3, [pc, #36]	; (8005794 <FLASH_WaitForLastOperation+0x7c>)
 800576e:	2201      	movs	r2, #1
 8005770:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005772:	4b08      	ldr	r3, [pc, #32]	; (8005794 <FLASH_WaitForLastOperation+0x7c>)
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800577e:	f000 f8a3 	bl	80058c8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e000      	b.n	8005788 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005786:	2300      	movs	r3, #0
  
}  
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	2001a90c 	.word	0x2001a90c
 8005794:	40023c00 	.word	0x40023c00

08005798 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005798:	b490      	push	{r4, r7}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80057a4:	4b13      	ldr	r3, [pc, #76]	; (80057f4 <FLASH_Program_DoubleWord+0x5c>)
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	4a12      	ldr	r2, [pc, #72]	; (80057f4 <FLASH_Program_DoubleWord+0x5c>)
 80057aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80057b0:	4b10      	ldr	r3, [pc, #64]	; (80057f4 <FLASH_Program_DoubleWord+0x5c>)
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	4a0f      	ldr	r2, [pc, #60]	; (80057f4 <FLASH_Program_DoubleWord+0x5c>)
 80057b6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80057ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80057bc:	4b0d      	ldr	r3, [pc, #52]	; (80057f4 <FLASH_Program_DoubleWord+0x5c>)
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	4a0c      	ldr	r2, [pc, #48]	; (80057f4 <FLASH_Program_DoubleWord+0x5c>)
 80057c2:	f043 0301 	orr.w	r3, r3, #1
 80057c6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80057ce:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80057d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80057d6:	f04f 0300 	mov.w	r3, #0
 80057da:	f04f 0400 	mov.w	r4, #0
 80057de:	0013      	movs	r3, r2
 80057e0:	2400      	movs	r4, #0
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	3204      	adds	r2, #4
 80057e6:	6013      	str	r3, [r2, #0]
}
 80057e8:	bf00      	nop
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bc90      	pop	{r4, r7}
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	40023c00 	.word	0x40023c00

080057f8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005802:	4b0d      	ldr	r3, [pc, #52]	; (8005838 <FLASH_Program_Word+0x40>)
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	4a0c      	ldr	r2, [pc, #48]	; (8005838 <FLASH_Program_Word+0x40>)
 8005808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800580c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800580e:	4b0a      	ldr	r3, [pc, #40]	; (8005838 <FLASH_Program_Word+0x40>)
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	4a09      	ldr	r2, [pc, #36]	; (8005838 <FLASH_Program_Word+0x40>)
 8005814:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005818:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800581a:	4b07      	ldr	r3, [pc, #28]	; (8005838 <FLASH_Program_Word+0x40>)
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	4a06      	ldr	r2, [pc, #24]	; (8005838 <FLASH_Program_Word+0x40>)
 8005820:	f043 0301 	orr.w	r3, r3, #1
 8005824:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	601a      	str	r2, [r3, #0]
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	40023c00 	.word	0x40023c00

0800583c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	460b      	mov	r3, r1
 8005846:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005848:	4b0d      	ldr	r3, [pc, #52]	; (8005880 <FLASH_Program_HalfWord+0x44>)
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	4a0c      	ldr	r2, [pc, #48]	; (8005880 <FLASH_Program_HalfWord+0x44>)
 800584e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005852:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005854:	4b0a      	ldr	r3, [pc, #40]	; (8005880 <FLASH_Program_HalfWord+0x44>)
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	4a09      	ldr	r2, [pc, #36]	; (8005880 <FLASH_Program_HalfWord+0x44>)
 800585a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800585e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005860:	4b07      	ldr	r3, [pc, #28]	; (8005880 <FLASH_Program_HalfWord+0x44>)
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	4a06      	ldr	r2, [pc, #24]	; (8005880 <FLASH_Program_HalfWord+0x44>)
 8005866:	f043 0301 	orr.w	r3, r3, #1
 800586a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	887a      	ldrh	r2, [r7, #2]
 8005870:	801a      	strh	r2, [r3, #0]
}
 8005872:	bf00      	nop
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	40023c00 	.word	0x40023c00

08005884 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	460b      	mov	r3, r1
 800588e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005890:	4b0c      	ldr	r3, [pc, #48]	; (80058c4 <FLASH_Program_Byte+0x40>)
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	4a0b      	ldr	r2, [pc, #44]	; (80058c4 <FLASH_Program_Byte+0x40>)
 8005896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800589a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800589c:	4b09      	ldr	r3, [pc, #36]	; (80058c4 <FLASH_Program_Byte+0x40>)
 800589e:	4a09      	ldr	r2, [pc, #36]	; (80058c4 <FLASH_Program_Byte+0x40>)
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80058a4:	4b07      	ldr	r3, [pc, #28]	; (80058c4 <FLASH_Program_Byte+0x40>)
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	4a06      	ldr	r2, [pc, #24]	; (80058c4 <FLASH_Program_Byte+0x40>)
 80058aa:	f043 0301 	orr.w	r3, r3, #1
 80058ae:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	78fa      	ldrb	r2, [r7, #3]
 80058b4:	701a      	strb	r2, [r3, #0]
}
 80058b6:	bf00      	nop
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	40023c00 	.word	0x40023c00

080058c8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80058c8:	b480      	push	{r7}
 80058ca:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80058cc:	4b27      	ldr	r3, [pc, #156]	; (800596c <FLASH_SetErrorCode+0xa4>)
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f003 0310 	and.w	r3, r3, #16
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d008      	beq.n	80058ea <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80058d8:	4b25      	ldr	r3, [pc, #148]	; (8005970 <FLASH_SetErrorCode+0xa8>)
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	f043 0310 	orr.w	r3, r3, #16
 80058e0:	4a23      	ldr	r2, [pc, #140]	; (8005970 <FLASH_SetErrorCode+0xa8>)
 80058e2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80058e4:	4b21      	ldr	r3, [pc, #132]	; (800596c <FLASH_SetErrorCode+0xa4>)
 80058e6:	2210      	movs	r2, #16
 80058e8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80058ea:	4b20      	ldr	r3, [pc, #128]	; (800596c <FLASH_SetErrorCode+0xa4>)
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	f003 0320 	and.w	r3, r3, #32
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d008      	beq.n	8005908 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80058f6:	4b1e      	ldr	r3, [pc, #120]	; (8005970 <FLASH_SetErrorCode+0xa8>)
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	f043 0308 	orr.w	r3, r3, #8
 80058fe:	4a1c      	ldr	r2, [pc, #112]	; (8005970 <FLASH_SetErrorCode+0xa8>)
 8005900:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005902:	4b1a      	ldr	r3, [pc, #104]	; (800596c <FLASH_SetErrorCode+0xa4>)
 8005904:	2220      	movs	r2, #32
 8005906:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005908:	4b18      	ldr	r3, [pc, #96]	; (800596c <FLASH_SetErrorCode+0xa4>)
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005910:	2b00      	cmp	r3, #0
 8005912:	d008      	beq.n	8005926 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005914:	4b16      	ldr	r3, [pc, #88]	; (8005970 <FLASH_SetErrorCode+0xa8>)
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	f043 0304 	orr.w	r3, r3, #4
 800591c:	4a14      	ldr	r2, [pc, #80]	; (8005970 <FLASH_SetErrorCode+0xa8>)
 800591e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005920:	4b12      	ldr	r3, [pc, #72]	; (800596c <FLASH_SetErrorCode+0xa4>)
 8005922:	2240      	movs	r2, #64	; 0x40
 8005924:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005926:	4b11      	ldr	r3, [pc, #68]	; (800596c <FLASH_SetErrorCode+0xa4>)
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592e:	2b00      	cmp	r3, #0
 8005930:	d008      	beq.n	8005944 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005932:	4b0f      	ldr	r3, [pc, #60]	; (8005970 <FLASH_SetErrorCode+0xa8>)
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	f043 0302 	orr.w	r3, r3, #2
 800593a:	4a0d      	ldr	r2, [pc, #52]	; (8005970 <FLASH_SetErrorCode+0xa8>)
 800593c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800593e:	4b0b      	ldr	r3, [pc, #44]	; (800596c <FLASH_SetErrorCode+0xa4>)
 8005940:	2280      	movs	r2, #128	; 0x80
 8005942:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005944:	4b09      	ldr	r3, [pc, #36]	; (800596c <FLASH_SetErrorCode+0xa4>)
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f003 0302 	and.w	r3, r3, #2
 800594c:	2b00      	cmp	r3, #0
 800594e:	d008      	beq.n	8005962 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005950:	4b07      	ldr	r3, [pc, #28]	; (8005970 <FLASH_SetErrorCode+0xa8>)
 8005952:	69db      	ldr	r3, [r3, #28]
 8005954:	f043 0320 	orr.w	r3, r3, #32
 8005958:	4a05      	ldr	r2, [pc, #20]	; (8005970 <FLASH_SetErrorCode+0xa8>)
 800595a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800595c:	4b03      	ldr	r3, [pc, #12]	; (800596c <FLASH_SetErrorCode+0xa4>)
 800595e:	2202      	movs	r2, #2
 8005960:	60da      	str	r2, [r3, #12]
  }
}
 8005962:	bf00      	nop
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	40023c00 	.word	0x40023c00
 8005970:	2001a90c 	.word	0x2001a90c

08005974 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005986:	4b31      	ldr	r3, [pc, #196]	; (8005a4c <HAL_FLASHEx_Erase+0xd8>)
 8005988:	7e1b      	ldrb	r3, [r3, #24]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d101      	bne.n	8005992 <HAL_FLASHEx_Erase+0x1e>
 800598e:	2302      	movs	r3, #2
 8005990:	e058      	b.n	8005a44 <HAL_FLASHEx_Erase+0xd0>
 8005992:	4b2e      	ldr	r3, [pc, #184]	; (8005a4c <HAL_FLASHEx_Erase+0xd8>)
 8005994:	2201      	movs	r2, #1
 8005996:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005998:	f24c 3050 	movw	r0, #50000	; 0xc350
 800599c:	f7ff febc 	bl	8005718 <FLASH_WaitForLastOperation>
 80059a0:	4603      	mov	r3, r0
 80059a2:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d148      	bne.n	8005a3c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059b0:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d115      	bne.n	80059e6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	4619      	mov	r1, r3
 80059c6:	4610      	mov	r0, r2
 80059c8:	f000 f844 	bl	8005a54 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80059cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80059d0:	f7ff fea2 	bl	8005718 <FLASH_WaitForLastOperation>
 80059d4:	4603      	mov	r3, r0
 80059d6:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80059d8:	4b1d      	ldr	r3, [pc, #116]	; (8005a50 <HAL_FLASHEx_Erase+0xdc>)
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	4a1c      	ldr	r2, [pc, #112]	; (8005a50 <HAL_FLASHEx_Erase+0xdc>)
 80059de:	f023 0304 	bic.w	r3, r3, #4
 80059e2:	6113      	str	r3, [r2, #16]
 80059e4:	e028      	b.n	8005a38 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	60bb      	str	r3, [r7, #8]
 80059ec:	e01c      	b.n	8005a28 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	4619      	mov	r1, r3
 80059f6:	68b8      	ldr	r0, [r7, #8]
 80059f8:	f000 f850 	bl	8005a9c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80059fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005a00:	f7ff fe8a 	bl	8005718 <FLASH_WaitForLastOperation>
 8005a04:	4603      	mov	r3, r0
 8005a06:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005a08:	4b11      	ldr	r3, [pc, #68]	; (8005a50 <HAL_FLASHEx_Erase+0xdc>)
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	4a10      	ldr	r2, [pc, #64]	; (8005a50 <HAL_FLASHEx_Erase+0xdc>)
 8005a0e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8005a12:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	601a      	str	r2, [r3, #0]
          break;
 8005a20:	e00a      	b.n	8005a38 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	3301      	adds	r3, #1
 8005a26:	60bb      	str	r3, [r7, #8]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	4413      	add	r3, r2
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d3da      	bcc.n	80059ee <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8005a38:	f000 f878 	bl	8005b2c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005a3c:	4b03      	ldr	r3, [pc, #12]	; (8005a4c <HAL_FLASHEx_Erase+0xd8>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	761a      	strb	r2, [r3, #24]

  return status;
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	2001a90c 	.word	0x2001a90c
 8005a50:	40023c00 	.word	0x40023c00

08005a54 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	6039      	str	r1, [r7, #0]
 8005a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005a60:	4b0d      	ldr	r3, [pc, #52]	; (8005a98 <FLASH_MassErase+0x44>)
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	4a0c      	ldr	r2, [pc, #48]	; (8005a98 <FLASH_MassErase+0x44>)
 8005a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005a6c:	4b0a      	ldr	r3, [pc, #40]	; (8005a98 <FLASH_MassErase+0x44>)
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	4a09      	ldr	r2, [pc, #36]	; (8005a98 <FLASH_MassErase+0x44>)
 8005a72:	f043 0304 	orr.w	r3, r3, #4
 8005a76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8005a78:	4b07      	ldr	r3, [pc, #28]	; (8005a98 <FLASH_MassErase+0x44>)
 8005a7a:	691a      	ldr	r2, [r3, #16]
 8005a7c:	79fb      	ldrb	r3, [r7, #7]
 8005a7e:	021b      	lsls	r3, r3, #8
 8005a80:	4313      	orrs	r3, r2
 8005a82:	4a05      	ldr	r2, [pc, #20]	; (8005a98 <FLASH_MassErase+0x44>)
 8005a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a88:	6113      	str	r3, [r2, #16]
}
 8005a8a:	bf00      	nop
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	40023c00 	.word	0x40023c00

08005a9c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005aac:	78fb      	ldrb	r3, [r7, #3]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d102      	bne.n	8005ab8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	60fb      	str	r3, [r7, #12]
 8005ab6:	e010      	b.n	8005ada <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005ab8:	78fb      	ldrb	r3, [r7, #3]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d103      	bne.n	8005ac6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005abe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	e009      	b.n	8005ada <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005ac6:	78fb      	ldrb	r3, [r7, #3]
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d103      	bne.n	8005ad4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005acc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ad0:	60fb      	str	r3, [r7, #12]
 8005ad2:	e002      	b.n	8005ada <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005ad4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005ad8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005ada:	4b13      	ldr	r3, [pc, #76]	; (8005b28 <FLASH_Erase_Sector+0x8c>)
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	4a12      	ldr	r2, [pc, #72]	; (8005b28 <FLASH_Erase_Sector+0x8c>)
 8005ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ae4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005ae6:	4b10      	ldr	r3, [pc, #64]	; (8005b28 <FLASH_Erase_Sector+0x8c>)
 8005ae8:	691a      	ldr	r2, [r3, #16]
 8005aea:	490f      	ldr	r1, [pc, #60]	; (8005b28 <FLASH_Erase_Sector+0x8c>)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005af2:	4b0d      	ldr	r3, [pc, #52]	; (8005b28 <FLASH_Erase_Sector+0x8c>)
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	4a0c      	ldr	r2, [pc, #48]	; (8005b28 <FLASH_Erase_Sector+0x8c>)
 8005af8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005afc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005afe:	4b0a      	ldr	r3, [pc, #40]	; (8005b28 <FLASH_Erase_Sector+0x8c>)
 8005b00:	691a      	ldr	r2, [r3, #16]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	4313      	orrs	r3, r2
 8005b08:	4a07      	ldr	r2, [pc, #28]	; (8005b28 <FLASH_Erase_Sector+0x8c>)
 8005b0a:	f043 0302 	orr.w	r3, r3, #2
 8005b0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005b10:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <FLASH_Erase_Sector+0x8c>)
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	4a04      	ldr	r2, [pc, #16]	; (8005b28 <FLASH_Erase_Sector+0x8c>)
 8005b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b1a:	6113      	str	r3, [r2, #16]
}
 8005b1c:	bf00      	nop
 8005b1e:	3714      	adds	r7, #20
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	40023c00 	.word	0x40023c00

08005b2c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8005b30:	4b20      	ldr	r3, [pc, #128]	; (8005bb4 <FLASH_FlushCaches+0x88>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d017      	beq.n	8005b6c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005b3c:	4b1d      	ldr	r3, [pc, #116]	; (8005bb4 <FLASH_FlushCaches+0x88>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a1c      	ldr	r2, [pc, #112]	; (8005bb4 <FLASH_FlushCaches+0x88>)
 8005b42:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b46:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005b48:	4b1a      	ldr	r3, [pc, #104]	; (8005bb4 <FLASH_FlushCaches+0x88>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a19      	ldr	r2, [pc, #100]	; (8005bb4 <FLASH_FlushCaches+0x88>)
 8005b4e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005b52:	6013      	str	r3, [r2, #0]
 8005b54:	4b17      	ldr	r3, [pc, #92]	; (8005bb4 <FLASH_FlushCaches+0x88>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a16      	ldr	r2, [pc, #88]	; (8005bb4 <FLASH_FlushCaches+0x88>)
 8005b5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b5e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005b60:	4b14      	ldr	r3, [pc, #80]	; (8005bb4 <FLASH_FlushCaches+0x88>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a13      	ldr	r2, [pc, #76]	; (8005bb4 <FLASH_FlushCaches+0x88>)
 8005b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b6a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005b6c:	4b11      	ldr	r3, [pc, #68]	; (8005bb4 <FLASH_FlushCaches+0x88>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d017      	beq.n	8005ba8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005b78:	4b0e      	ldr	r3, [pc, #56]	; (8005bb4 <FLASH_FlushCaches+0x88>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a0d      	ldr	r2, [pc, #52]	; (8005bb4 <FLASH_FlushCaches+0x88>)
 8005b7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b82:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005b84:	4b0b      	ldr	r3, [pc, #44]	; (8005bb4 <FLASH_FlushCaches+0x88>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a0a      	ldr	r2, [pc, #40]	; (8005bb4 <FLASH_FlushCaches+0x88>)
 8005b8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b8e:	6013      	str	r3, [r2, #0]
 8005b90:	4b08      	ldr	r3, [pc, #32]	; (8005bb4 <FLASH_FlushCaches+0x88>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a07      	ldr	r2, [pc, #28]	; (8005bb4 <FLASH_FlushCaches+0x88>)
 8005b96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b9a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005b9c:	4b05      	ldr	r3, [pc, #20]	; (8005bb4 <FLASH_FlushCaches+0x88>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a04      	ldr	r2, [pc, #16]	; (8005bb4 <FLASH_FlushCaches+0x88>)
 8005ba2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ba6:	6013      	str	r3, [r2, #0]
  }
}
 8005ba8:	bf00      	nop
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	40023c00 	.word	0x40023c00

08005bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b089      	sub	sp, #36	; 0x24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005bce:	2300      	movs	r3, #0
 8005bd0:	61fb      	str	r3, [r7, #28]
 8005bd2:	e16b      	b.n	8005eac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	4013      	ands	r3, r2
 8005be6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	f040 815a 	bne.w	8005ea6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d00b      	beq.n	8005c12 <HAL_GPIO_Init+0x5a>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d007      	beq.n	8005c12 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c06:	2b11      	cmp	r3, #17
 8005c08:	d003      	beq.n	8005c12 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	2b12      	cmp	r3, #18
 8005c10:	d130      	bne.n	8005c74 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	005b      	lsls	r3, r3, #1
 8005c1c:	2203      	movs	r2, #3
 8005c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c22:	43db      	mvns	r3, r3
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	4013      	ands	r3, r2
 8005c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	68da      	ldr	r2, [r3, #12]
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	fa02 f303 	lsl.w	r3, r2, r3
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c48:	2201      	movs	r2, #1
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c50:	43db      	mvns	r3, r3
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	4013      	ands	r3, r2
 8005c56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	091b      	lsrs	r3, r3, #4
 8005c5e:	f003 0201 	and.w	r2, r3, #1
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	fa02 f303 	lsl.w	r3, r2, r3
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	2203      	movs	r2, #3
 8005c80:	fa02 f303 	lsl.w	r3, r2, r3
 8005c84:	43db      	mvns	r3, r3
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	4013      	ands	r3, r2
 8005c8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	689a      	ldr	r2, [r3, #8]
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	005b      	lsls	r3, r3, #1
 8005c94:	fa02 f303 	lsl.w	r3, r2, r3
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d003      	beq.n	8005cb4 <HAL_GPIO_Init+0xfc>
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	2b12      	cmp	r3, #18
 8005cb2:	d123      	bne.n	8005cfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	08da      	lsrs	r2, r3, #3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	3208      	adds	r2, #8
 8005cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	f003 0307 	and.w	r3, r3, #7
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	220f      	movs	r2, #15
 8005ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd0:	43db      	mvns	r3, r3
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	691a      	ldr	r2, [r3, #16]
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	f003 0307 	and.w	r3, r3, #7
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	08da      	lsrs	r2, r3, #3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	3208      	adds	r2, #8
 8005cf6:	69b9      	ldr	r1, [r7, #24]
 8005cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	2203      	movs	r2, #3
 8005d08:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0c:	43db      	mvns	r3, r3
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	4013      	ands	r3, r2
 8005d12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f003 0203 	and.w	r2, r3, #3
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	fa02 f303 	lsl.w	r3, r2, r3
 8005d24:	69ba      	ldr	r2, [r7, #24]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 80b4 	beq.w	8005ea6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60fb      	str	r3, [r7, #12]
 8005d42:	4b5f      	ldr	r3, [pc, #380]	; (8005ec0 <HAL_GPIO_Init+0x308>)
 8005d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d46:	4a5e      	ldr	r2, [pc, #376]	; (8005ec0 <HAL_GPIO_Init+0x308>)
 8005d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8005d4e:	4b5c      	ldr	r3, [pc, #368]	; (8005ec0 <HAL_GPIO_Init+0x308>)
 8005d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d5a:	4a5a      	ldr	r2, [pc, #360]	; (8005ec4 <HAL_GPIO_Init+0x30c>)
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	089b      	lsrs	r3, r3, #2
 8005d60:	3302      	adds	r3, #2
 8005d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	f003 0303 	and.w	r3, r3, #3
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	220f      	movs	r2, #15
 8005d72:	fa02 f303 	lsl.w	r3, r2, r3
 8005d76:	43db      	mvns	r3, r3
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a51      	ldr	r2, [pc, #324]	; (8005ec8 <HAL_GPIO_Init+0x310>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d02b      	beq.n	8005dde <HAL_GPIO_Init+0x226>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a50      	ldr	r2, [pc, #320]	; (8005ecc <HAL_GPIO_Init+0x314>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d025      	beq.n	8005dda <HAL_GPIO_Init+0x222>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a4f      	ldr	r2, [pc, #316]	; (8005ed0 <HAL_GPIO_Init+0x318>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d01f      	beq.n	8005dd6 <HAL_GPIO_Init+0x21e>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a4e      	ldr	r2, [pc, #312]	; (8005ed4 <HAL_GPIO_Init+0x31c>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d019      	beq.n	8005dd2 <HAL_GPIO_Init+0x21a>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a4d      	ldr	r2, [pc, #308]	; (8005ed8 <HAL_GPIO_Init+0x320>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d013      	beq.n	8005dce <HAL_GPIO_Init+0x216>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a4c      	ldr	r2, [pc, #304]	; (8005edc <HAL_GPIO_Init+0x324>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d00d      	beq.n	8005dca <HAL_GPIO_Init+0x212>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a4b      	ldr	r2, [pc, #300]	; (8005ee0 <HAL_GPIO_Init+0x328>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d007      	beq.n	8005dc6 <HAL_GPIO_Init+0x20e>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a4a      	ldr	r2, [pc, #296]	; (8005ee4 <HAL_GPIO_Init+0x32c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d101      	bne.n	8005dc2 <HAL_GPIO_Init+0x20a>
 8005dbe:	2307      	movs	r3, #7
 8005dc0:	e00e      	b.n	8005de0 <HAL_GPIO_Init+0x228>
 8005dc2:	2308      	movs	r3, #8
 8005dc4:	e00c      	b.n	8005de0 <HAL_GPIO_Init+0x228>
 8005dc6:	2306      	movs	r3, #6
 8005dc8:	e00a      	b.n	8005de0 <HAL_GPIO_Init+0x228>
 8005dca:	2305      	movs	r3, #5
 8005dcc:	e008      	b.n	8005de0 <HAL_GPIO_Init+0x228>
 8005dce:	2304      	movs	r3, #4
 8005dd0:	e006      	b.n	8005de0 <HAL_GPIO_Init+0x228>
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e004      	b.n	8005de0 <HAL_GPIO_Init+0x228>
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	e002      	b.n	8005de0 <HAL_GPIO_Init+0x228>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e000      	b.n	8005de0 <HAL_GPIO_Init+0x228>
 8005dde:	2300      	movs	r3, #0
 8005de0:	69fa      	ldr	r2, [r7, #28]
 8005de2:	f002 0203 	and.w	r2, r2, #3
 8005de6:	0092      	lsls	r2, r2, #2
 8005de8:	4093      	lsls	r3, r2
 8005dea:	69ba      	ldr	r2, [r7, #24]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005df0:	4934      	ldr	r1, [pc, #208]	; (8005ec4 <HAL_GPIO_Init+0x30c>)
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	089b      	lsrs	r3, r3, #2
 8005df6:	3302      	adds	r3, #2
 8005df8:	69ba      	ldr	r2, [r7, #24]
 8005dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005dfe:	4b3a      	ldr	r3, [pc, #232]	; (8005ee8 <HAL_GPIO_Init+0x330>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	43db      	mvns	r3, r3
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d003      	beq.n	8005e22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005e1a:	69ba      	ldr	r2, [r7, #24]
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e22:	4a31      	ldr	r2, [pc, #196]	; (8005ee8 <HAL_GPIO_Init+0x330>)
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005e28:	4b2f      	ldr	r3, [pc, #188]	; (8005ee8 <HAL_GPIO_Init+0x330>)
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	43db      	mvns	r3, r3
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	4013      	ands	r3, r2
 8005e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d003      	beq.n	8005e4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e4c:	4a26      	ldr	r2, [pc, #152]	; (8005ee8 <HAL_GPIO_Init+0x330>)
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e52:	4b25      	ldr	r3, [pc, #148]	; (8005ee8 <HAL_GPIO_Init+0x330>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	43db      	mvns	r3, r3
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	4013      	ands	r3, r2
 8005e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d003      	beq.n	8005e76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005e6e:	69ba      	ldr	r2, [r7, #24]
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e76:	4a1c      	ldr	r2, [pc, #112]	; (8005ee8 <HAL_GPIO_Init+0x330>)
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e7c:	4b1a      	ldr	r3, [pc, #104]	; (8005ee8 <HAL_GPIO_Init+0x330>)
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	43db      	mvns	r3, r3
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	4013      	ands	r3, r2
 8005e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ea0:	4a11      	ldr	r2, [pc, #68]	; (8005ee8 <HAL_GPIO_Init+0x330>)
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	61fb      	str	r3, [r7, #28]
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	2b0f      	cmp	r3, #15
 8005eb0:	f67f ae90 	bls.w	8005bd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005eb4:	bf00      	nop
 8005eb6:	3724      	adds	r7, #36	; 0x24
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	40023800 	.word	0x40023800
 8005ec4:	40013800 	.word	0x40013800
 8005ec8:	40020000 	.word	0x40020000
 8005ecc:	40020400 	.word	0x40020400
 8005ed0:	40020800 	.word	0x40020800
 8005ed4:	40020c00 	.word	0x40020c00
 8005ed8:	40021000 	.word	0x40021000
 8005edc:	40021400 	.word	0x40021400
 8005ee0:	40021800 	.word	0x40021800
 8005ee4:	40021c00 	.word	0x40021c00
 8005ee8:	40013c00 	.word	0x40013c00

08005eec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	807b      	strh	r3, [r7, #2]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005efc:	787b      	ldrb	r3, [r7, #1]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f02:	887a      	ldrh	r2, [r7, #2]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f08:	e003      	b.n	8005f12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f0a:	887b      	ldrh	r3, [r7, #2]
 8005f0c:	041a      	lsls	r2, r3, #16
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	619a      	str	r2, [r3, #24]
}
 8005f12:	bf00      	nop
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b083      	sub	sp, #12
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
 8005f26:	460b      	mov	r3, r1
 8005f28:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	695a      	ldr	r2, [r3, #20]
 8005f2e:	887b      	ldrh	r3, [r7, #2]
 8005f30:	401a      	ands	r2, r3
 8005f32:	887b      	ldrh	r3, [r7, #2]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d104      	bne.n	8005f42 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005f38:	887b      	ldrh	r3, [r7, #2]
 8005f3a:	041a      	lsls	r2, r3, #16
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005f40:	e002      	b.n	8005f48 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005f42:	887a      	ldrh	r2, [r7, #2]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	619a      	str	r2, [r3, #24]
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e11f      	b.n	80061a6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d106      	bne.n	8005f80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7fe ff92 	bl	8004ea4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2224      	movs	r2, #36	; 0x24
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0201 	bic.w	r2, r2, #1
 8005f96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fa6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005fb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005fb8:	f001 fc96 	bl	80078e8 <HAL_RCC_GetPCLK1Freq>
 8005fbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	4a7b      	ldr	r2, [pc, #492]	; (80061b0 <HAL_I2C_Init+0x25c>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d807      	bhi.n	8005fd8 <HAL_I2C_Init+0x84>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	4a7a      	ldr	r2, [pc, #488]	; (80061b4 <HAL_I2C_Init+0x260>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	bf94      	ite	ls
 8005fd0:	2301      	movls	r3, #1
 8005fd2:	2300      	movhi	r3, #0
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	e006      	b.n	8005fe6 <HAL_I2C_Init+0x92>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4a77      	ldr	r2, [pc, #476]	; (80061b8 <HAL_I2C_Init+0x264>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	bf94      	ite	ls
 8005fe0:	2301      	movls	r3, #1
 8005fe2:	2300      	movhi	r3, #0
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d001      	beq.n	8005fee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e0db      	b.n	80061a6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	4a72      	ldr	r2, [pc, #456]	; (80061bc <HAL_I2C_Init+0x268>)
 8005ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff6:	0c9b      	lsrs	r3, r3, #18
 8005ff8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	430a      	orrs	r2, r1
 800600c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	4a64      	ldr	r2, [pc, #400]	; (80061b0 <HAL_I2C_Init+0x25c>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d802      	bhi.n	8006028 <HAL_I2C_Init+0xd4>
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	3301      	adds	r3, #1
 8006026:	e009      	b.n	800603c <HAL_I2C_Init+0xe8>
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800602e:	fb02 f303 	mul.w	r3, r2, r3
 8006032:	4a63      	ldr	r2, [pc, #396]	; (80061c0 <HAL_I2C_Init+0x26c>)
 8006034:	fba2 2303 	umull	r2, r3, r2, r3
 8006038:	099b      	lsrs	r3, r3, #6
 800603a:	3301      	adds	r3, #1
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	6812      	ldr	r2, [r2, #0]
 8006040:	430b      	orrs	r3, r1
 8006042:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800604e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	4956      	ldr	r1, [pc, #344]	; (80061b0 <HAL_I2C_Init+0x25c>)
 8006058:	428b      	cmp	r3, r1
 800605a:	d80d      	bhi.n	8006078 <HAL_I2C_Init+0x124>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	1e59      	subs	r1, r3, #1
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	fbb1 f3f3 	udiv	r3, r1, r3
 800606a:	3301      	adds	r3, #1
 800606c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006070:	2b04      	cmp	r3, #4
 8006072:	bf38      	it	cc
 8006074:	2304      	movcc	r3, #4
 8006076:	e04f      	b.n	8006118 <HAL_I2C_Init+0x1c4>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d111      	bne.n	80060a4 <HAL_I2C_Init+0x150>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	1e58      	subs	r0, r3, #1
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6859      	ldr	r1, [r3, #4]
 8006088:	460b      	mov	r3, r1
 800608a:	005b      	lsls	r3, r3, #1
 800608c:	440b      	add	r3, r1
 800608e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006092:	3301      	adds	r3, #1
 8006094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006098:	2b00      	cmp	r3, #0
 800609a:	bf0c      	ite	eq
 800609c:	2301      	moveq	r3, #1
 800609e:	2300      	movne	r3, #0
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	e012      	b.n	80060ca <HAL_I2C_Init+0x176>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	1e58      	subs	r0, r3, #1
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6859      	ldr	r1, [r3, #4]
 80060ac:	460b      	mov	r3, r1
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	440b      	add	r3, r1
 80060b2:	0099      	lsls	r1, r3, #2
 80060b4:	440b      	add	r3, r1
 80060b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80060ba:	3301      	adds	r3, #1
 80060bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	bf0c      	ite	eq
 80060c4:	2301      	moveq	r3, #1
 80060c6:	2300      	movne	r3, #0
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <HAL_I2C_Init+0x17e>
 80060ce:	2301      	movs	r3, #1
 80060d0:	e022      	b.n	8006118 <HAL_I2C_Init+0x1c4>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10e      	bne.n	80060f8 <HAL_I2C_Init+0x1a4>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	1e58      	subs	r0, r3, #1
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6859      	ldr	r1, [r3, #4]
 80060e2:	460b      	mov	r3, r1
 80060e4:	005b      	lsls	r3, r3, #1
 80060e6:	440b      	add	r3, r1
 80060e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80060ec:	3301      	adds	r3, #1
 80060ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060f6:	e00f      	b.n	8006118 <HAL_I2C_Init+0x1c4>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	1e58      	subs	r0, r3, #1
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6859      	ldr	r1, [r3, #4]
 8006100:	460b      	mov	r3, r1
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	440b      	add	r3, r1
 8006106:	0099      	lsls	r1, r3, #2
 8006108:	440b      	add	r3, r1
 800610a:	fbb0 f3f3 	udiv	r3, r0, r3
 800610e:	3301      	adds	r3, #1
 8006110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006114:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006118:	6879      	ldr	r1, [r7, #4]
 800611a:	6809      	ldr	r1, [r1, #0]
 800611c:	4313      	orrs	r3, r2
 800611e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	69da      	ldr	r2, [r3, #28]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	431a      	orrs	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	430a      	orrs	r2, r1
 800613a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006146:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	6911      	ldr	r1, [r2, #16]
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	68d2      	ldr	r2, [r2, #12]
 8006152:	4311      	orrs	r1, r2
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	6812      	ldr	r2, [r2, #0]
 8006158:	430b      	orrs	r3, r1
 800615a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	695a      	ldr	r2, [r3, #20]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	431a      	orrs	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	430a      	orrs	r2, r1
 8006176:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f042 0201 	orr.w	r2, r2, #1
 8006186:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2220      	movs	r2, #32
 8006192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	000186a0 	.word	0x000186a0
 80061b4:	001e847f 	.word	0x001e847f
 80061b8:	003d08ff 	.word	0x003d08ff
 80061bc:	431bde83 	.word	0x431bde83
 80061c0:	10624dd3 	.word	0x10624dd3

080061c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b088      	sub	sp, #32
 80061c8:	af02      	add	r7, sp, #8
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	607a      	str	r2, [r7, #4]
 80061ce:	461a      	mov	r2, r3
 80061d0:	460b      	mov	r3, r1
 80061d2:	817b      	strh	r3, [r7, #10]
 80061d4:	4613      	mov	r3, r2
 80061d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80061d8:	f7ff f8e6 	bl	80053a8 <HAL_GetTick>
 80061dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b20      	cmp	r3, #32
 80061e8:	f040 80e0 	bne.w	80063ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	2319      	movs	r3, #25
 80061f2:	2201      	movs	r2, #1
 80061f4:	4970      	ldr	r1, [pc, #448]	; (80063b8 <HAL_I2C_Master_Transmit+0x1f4>)
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f000 fd84 	bl	8006d04 <I2C_WaitOnFlagUntilTimeout>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006202:	2302      	movs	r3, #2
 8006204:	e0d3      	b.n	80063ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800620c:	2b01      	cmp	r3, #1
 800620e:	d101      	bne.n	8006214 <HAL_I2C_Master_Transmit+0x50>
 8006210:	2302      	movs	r3, #2
 8006212:	e0cc      	b.n	80063ae <HAL_I2C_Master_Transmit+0x1ea>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b01      	cmp	r3, #1
 8006228:	d007      	beq.n	800623a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f042 0201 	orr.w	r2, r2, #1
 8006238:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006248:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2221      	movs	r2, #33	; 0x21
 800624e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2210      	movs	r2, #16
 8006256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	893a      	ldrh	r2, [r7, #8]
 800626a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006270:	b29a      	uxth	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4a50      	ldr	r2, [pc, #320]	; (80063bc <HAL_I2C_Master_Transmit+0x1f8>)
 800627a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800627c:	8979      	ldrh	r1, [r7, #10]
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	6a3a      	ldr	r2, [r7, #32]
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f000 fbf0 	bl	8006a68 <I2C_MasterRequestWrite>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e08d      	b.n	80063ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006292:	2300      	movs	r3, #0
 8006294:	613b      	str	r3, [r7, #16]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	613b      	str	r3, [r7, #16]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	613b      	str	r3, [r7, #16]
 80062a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80062a8:	e066      	b.n	8006378 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	6a39      	ldr	r1, [r7, #32]
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f000 fdfe 	bl	8006eb0 <I2C_WaitOnTXEFlagUntilTimeout>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00d      	beq.n	80062d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	2b04      	cmp	r3, #4
 80062c0:	d107      	bne.n	80062d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e06b      	b.n	80063ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062da:	781a      	ldrb	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e6:	1c5a      	adds	r2, r3, #1
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	3b01      	subs	r3, #1
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062fe:	3b01      	subs	r3, #1
 8006300:	b29a      	uxth	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	f003 0304 	and.w	r3, r3, #4
 8006310:	2b04      	cmp	r3, #4
 8006312:	d11b      	bne.n	800634c <HAL_I2C_Master_Transmit+0x188>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006318:	2b00      	cmp	r3, #0
 800631a:	d017      	beq.n	800634c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	781a      	ldrb	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	1c5a      	adds	r2, r3, #1
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006336:	b29b      	uxth	r3, r3
 8006338:	3b01      	subs	r3, #1
 800633a:	b29a      	uxth	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006344:	3b01      	subs	r3, #1
 8006346:	b29a      	uxth	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	6a39      	ldr	r1, [r7, #32]
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 fdee 	bl	8006f32 <I2C_WaitOnBTFFlagUntilTimeout>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00d      	beq.n	8006378 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006360:	2b04      	cmp	r3, #4
 8006362:	d107      	bne.n	8006374 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006372:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e01a      	b.n	80063ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800637c:	2b00      	cmp	r3, #0
 800637e:	d194      	bne.n	80062aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800638e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2220      	movs	r2, #32
 8006394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80063a8:	2300      	movs	r3, #0
 80063aa:	e000      	b.n	80063ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80063ac:	2302      	movs	r3, #2
  }
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3718      	adds	r7, #24
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	00100002 	.word	0x00100002
 80063bc:	ffff0000 	.word	0xffff0000

080063c0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b08c      	sub	sp, #48	; 0x30
 80063c4:	af02      	add	r7, sp, #8
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	607a      	str	r2, [r7, #4]
 80063ca:	461a      	mov	r2, r3
 80063cc:	460b      	mov	r3, r1
 80063ce:	817b      	strh	r3, [r7, #10]
 80063d0:	4613      	mov	r3, r2
 80063d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063d4:	f7fe ffe8 	bl	80053a8 <HAL_GetTick>
 80063d8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b20      	cmp	r3, #32
 80063e4:	f040 820b 	bne.w	80067fe <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ea:	9300      	str	r3, [sp, #0]
 80063ec:	2319      	movs	r3, #25
 80063ee:	2201      	movs	r2, #1
 80063f0:	497c      	ldr	r1, [pc, #496]	; (80065e4 <HAL_I2C_Master_Receive+0x224>)
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f000 fc86 	bl	8006d04 <I2C_WaitOnFlagUntilTimeout>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d001      	beq.n	8006402 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80063fe:	2302      	movs	r3, #2
 8006400:	e1fe      	b.n	8006800 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006408:	2b01      	cmp	r3, #1
 800640a:	d101      	bne.n	8006410 <HAL_I2C_Master_Receive+0x50>
 800640c:	2302      	movs	r3, #2
 800640e:	e1f7      	b.n	8006800 <HAL_I2C_Master_Receive+0x440>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b01      	cmp	r3, #1
 8006424:	d007      	beq.n	8006436 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f042 0201 	orr.w	r2, r2, #1
 8006434:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006444:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2222      	movs	r2, #34	; 0x22
 800644a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2210      	movs	r2, #16
 8006452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	893a      	ldrh	r2, [r7, #8]
 8006466:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800646c:	b29a      	uxth	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	4a5c      	ldr	r2, [pc, #368]	; (80065e8 <HAL_I2C_Master_Receive+0x228>)
 8006476:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006478:	8979      	ldrh	r1, [r7, #10]
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f000 fb74 	bl	8006b6c <I2C_MasterRequestRead>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e1b8      	b.n	8006800 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006492:	2b00      	cmp	r3, #0
 8006494:	d113      	bne.n	80064be <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006496:	2300      	movs	r3, #0
 8006498:	623b      	str	r3, [r7, #32]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	623b      	str	r3, [r7, #32]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	623b      	str	r3, [r7, #32]
 80064aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	e18c      	b.n	80067d8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d11b      	bne.n	80064fe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064d6:	2300      	movs	r3, #0
 80064d8:	61fb      	str	r3, [r7, #28]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	61fb      	str	r3, [r7, #28]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	61fb      	str	r3, [r7, #28]
 80064ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064fa:	601a      	str	r2, [r3, #0]
 80064fc:	e16c      	b.n	80067d8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006502:	2b02      	cmp	r3, #2
 8006504:	d11b      	bne.n	800653e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006514:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006524:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006526:	2300      	movs	r3, #0
 8006528:	61bb      	str	r3, [r7, #24]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	695b      	ldr	r3, [r3, #20]
 8006530:	61bb      	str	r3, [r7, #24]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	61bb      	str	r3, [r7, #24]
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	e14c      	b.n	80067d8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800654c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800654e:	2300      	movs	r3, #0
 8006550:	617b      	str	r3, [r7, #20]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	617b      	str	r3, [r7, #20]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	617b      	str	r3, [r7, #20]
 8006562:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006564:	e138      	b.n	80067d8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800656a:	2b03      	cmp	r3, #3
 800656c:	f200 80f1 	bhi.w	8006752 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006574:	2b01      	cmp	r3, #1
 8006576:	d123      	bne.n	80065c0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800657a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 fd19 	bl	8006fb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d001      	beq.n	800658c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e139      	b.n	8006800 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	691a      	ldr	r2, [r3, #16]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006596:	b2d2      	uxtb	r2, r2
 8006598:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659e:	1c5a      	adds	r2, r3, #1
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065a8:	3b01      	subs	r3, #1
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	3b01      	subs	r3, #1
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80065be:	e10b      	b.n	80067d8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d14e      	bne.n	8006666 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80065c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ca:	9300      	str	r3, [sp, #0]
 80065cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ce:	2200      	movs	r2, #0
 80065d0:	4906      	ldr	r1, [pc, #24]	; (80065ec <HAL_I2C_Master_Receive+0x22c>)
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f000 fb96 	bl	8006d04 <I2C_WaitOnFlagUntilTimeout>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d008      	beq.n	80065f0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e10e      	b.n	8006800 <HAL_I2C_Master_Receive+0x440>
 80065e2:	bf00      	nop
 80065e4:	00100002 	.word	0x00100002
 80065e8:	ffff0000 	.word	0xffff0000
 80065ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	691a      	ldr	r2, [r3, #16]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660a:	b2d2      	uxtb	r2, r2
 800660c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006612:	1c5a      	adds	r2, r3, #1
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800661c:	3b01      	subs	r3, #1
 800661e:	b29a      	uxth	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006628:	b29b      	uxth	r3, r3
 800662a:	3b01      	subs	r3, #1
 800662c:	b29a      	uxth	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	691a      	ldr	r2, [r3, #16]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663c:	b2d2      	uxtb	r2, r2
 800663e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800664e:	3b01      	subs	r3, #1
 8006650:	b29a      	uxth	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800665a:	b29b      	uxth	r3, r3
 800665c:	3b01      	subs	r3, #1
 800665e:	b29a      	uxth	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006664:	e0b8      	b.n	80067d8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666c:	2200      	movs	r2, #0
 800666e:	4966      	ldr	r1, [pc, #408]	; (8006808 <HAL_I2C_Master_Receive+0x448>)
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 fb47 	bl	8006d04 <I2C_WaitOnFlagUntilTimeout>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e0bf      	b.n	8006800 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800668e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	691a      	ldr	r2, [r3, #16]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669a:	b2d2      	uxtb	r2, r2
 800669c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a2:	1c5a      	adds	r2, r3, #1
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ac:	3b01      	subs	r3, #1
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	3b01      	subs	r3, #1
 80066bc:	b29a      	uxth	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c8:	2200      	movs	r2, #0
 80066ca:	494f      	ldr	r1, [pc, #316]	; (8006808 <HAL_I2C_Master_Receive+0x448>)
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f000 fb19 	bl	8006d04 <I2C_WaitOnFlagUntilTimeout>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d001      	beq.n	80066dc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e091      	b.n	8006800 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	691a      	ldr	r2, [r3, #16]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f6:	b2d2      	uxtb	r2, r2
 80066f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fe:	1c5a      	adds	r2, r3, #1
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006708:	3b01      	subs	r3, #1
 800670a:	b29a      	uxth	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006714:	b29b      	uxth	r3, r3
 8006716:	3b01      	subs	r3, #1
 8006718:	b29a      	uxth	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	691a      	ldr	r2, [r3, #16]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006728:	b2d2      	uxtb	r2, r2
 800672a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006730:	1c5a      	adds	r2, r3, #1
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800673a:	3b01      	subs	r3, #1
 800673c:	b29a      	uxth	r2, r3
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006746:	b29b      	uxth	r3, r3
 8006748:	3b01      	subs	r3, #1
 800674a:	b29a      	uxth	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006750:	e042      	b.n	80067d8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006754:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f000 fc2c 	bl	8006fb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e04c      	b.n	8006800 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	691a      	ldr	r2, [r3, #16]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006770:	b2d2      	uxtb	r2, r2
 8006772:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006778:	1c5a      	adds	r2, r3, #1
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006782:	3b01      	subs	r3, #1
 8006784:	b29a      	uxth	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800678e:	b29b      	uxth	r3, r3
 8006790:	3b01      	subs	r3, #1
 8006792:	b29a      	uxth	r2, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	f003 0304 	and.w	r3, r3, #4
 80067a2:	2b04      	cmp	r3, #4
 80067a4:	d118      	bne.n	80067d8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	691a      	ldr	r2, [r3, #16]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b0:	b2d2      	uxtb	r2, r2
 80067b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b8:	1c5a      	adds	r2, r3, #1
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067c2:	3b01      	subs	r3, #1
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	3b01      	subs	r3, #1
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f47f aec2 	bne.w	8006566 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2220      	movs	r2, #32
 80067e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	e000      	b.n	8006800 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80067fe:	2302      	movs	r3, #2
  }
}
 8006800:	4618      	mov	r0, r3
 8006802:	3728      	adds	r7, #40	; 0x28
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	00010004 	.word	0x00010004

0800680c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b08a      	sub	sp, #40	; 0x28
 8006810:	af02      	add	r7, sp, #8
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	607a      	str	r2, [r7, #4]
 8006816:	603b      	str	r3, [r7, #0]
 8006818:	460b      	mov	r3, r1
 800681a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800681c:	f7fe fdc4 	bl	80053a8 <HAL_GetTick>
 8006820:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8006822:	2301      	movs	r3, #1
 8006824:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b20      	cmp	r3, #32
 8006830:	f040 8110 	bne.w	8006a54 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	2319      	movs	r3, #25
 800683a:	2201      	movs	r2, #1
 800683c:	4988      	ldr	r1, [pc, #544]	; (8006a60 <HAL_I2C_IsDeviceReady+0x254>)
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f000 fa60 	bl	8006d04 <I2C_WaitOnFlagUntilTimeout>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d001      	beq.n	800684e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800684a:	2302      	movs	r3, #2
 800684c:	e103      	b.n	8006a56 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006854:	2b01      	cmp	r3, #1
 8006856:	d101      	bne.n	800685c <HAL_I2C_IsDeviceReady+0x50>
 8006858:	2302      	movs	r3, #2
 800685a:	e0fc      	b.n	8006a56 <HAL_I2C_IsDeviceReady+0x24a>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0301 	and.w	r3, r3, #1
 800686e:	2b01      	cmp	r3, #1
 8006870:	d007      	beq.n	8006882 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f042 0201 	orr.w	r2, r2, #1
 8006880:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006890:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2224      	movs	r2, #36	; 0x24
 8006896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	4a70      	ldr	r2, [pc, #448]	; (8006a64 <HAL_I2C_IsDeviceReady+0x258>)
 80068a4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068b4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	2200      	movs	r2, #0
 80068be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f000 fa1e 	bl	8006d04 <I2C_WaitOnFlagUntilTimeout>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00c      	beq.n	80068e8 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d003      	beq.n	80068e4 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068e2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e0b6      	b.n	8006a56 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80068e8:	897b      	ldrh	r3, [r7, #10]
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	461a      	mov	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80068f6:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80068f8:	f7fe fd56 	bl	80053a8 <HAL_GetTick>
 80068fc:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	f003 0302 	and.w	r3, r3, #2
 8006908:	2b02      	cmp	r3, #2
 800690a:	bf0c      	ite	eq
 800690c:	2301      	moveq	r3, #1
 800690e:	2300      	movne	r3, #0
 8006910:	b2db      	uxtb	r3, r3
 8006912:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800691e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006922:	bf0c      	ite	eq
 8006924:	2301      	moveq	r3, #1
 8006926:	2300      	movne	r3, #0
 8006928:	b2db      	uxtb	r3, r3
 800692a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800692c:	e025      	b.n	800697a <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800692e:	f7fe fd3b 	bl	80053a8 <HAL_GetTick>
 8006932:	4602      	mov	r2, r0
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	683a      	ldr	r2, [r7, #0]
 800693a:	429a      	cmp	r2, r3
 800693c:	d302      	bcc.n	8006944 <HAL_I2C_IsDeviceReady+0x138>
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d103      	bne.n	800694c <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	22a0      	movs	r2, #160	; 0xa0
 8006948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	2b02      	cmp	r3, #2
 8006958:	bf0c      	ite	eq
 800695a:	2301      	moveq	r3, #1
 800695c:	2300      	movne	r3, #0
 800695e:	b2db      	uxtb	r3, r3
 8006960:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	695b      	ldr	r3, [r3, #20]
 8006968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800696c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006970:	bf0c      	ite	eq
 8006972:	2301      	moveq	r3, #1
 8006974:	2300      	movne	r3, #0
 8006976:	b2db      	uxtb	r3, r3
 8006978:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2ba0      	cmp	r3, #160	; 0xa0
 8006984:	d005      	beq.n	8006992 <HAL_I2C_IsDeviceReady+0x186>
 8006986:	7dfb      	ldrb	r3, [r7, #23]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d102      	bne.n	8006992 <HAL_I2C_IsDeviceReady+0x186>
 800698c:	7dbb      	ldrb	r3, [r7, #22]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d0cd      	beq.n	800692e <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2220      	movs	r2, #32
 8006996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	695b      	ldr	r3, [r3, #20]
 80069a0:	f003 0302 	and.w	r3, r3, #2
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d129      	bne.n	80069fc <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069b6:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069b8:	2300      	movs	r3, #0
 80069ba:	613b      	str	r3, [r7, #16]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	613b      	str	r3, [r7, #16]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	613b      	str	r3, [r7, #16]
 80069cc:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	9300      	str	r3, [sp, #0]
 80069d2:	2319      	movs	r3, #25
 80069d4:	2201      	movs	r2, #1
 80069d6:	4922      	ldr	r1, [pc, #136]	; (8006a60 <HAL_I2C_IsDeviceReady+0x254>)
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f000 f993 	bl	8006d04 <I2C_WaitOnFlagUntilTimeout>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e036      	b.n	8006a56 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2220      	movs	r2, #32
 80069ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	e02c      	b.n	8006a56 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a0a:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a14:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	2319      	movs	r3, #25
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	4910      	ldr	r1, [pc, #64]	; (8006a60 <HAL_I2C_IsDeviceReady+0x254>)
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f000 f96f 	bl	8006d04 <I2C_WaitOnFlagUntilTimeout>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d001      	beq.n	8006a30 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e012      	b.n	8006a56 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	3301      	adds	r3, #1
 8006a34:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006a36:	69ba      	ldr	r2, [r7, #24]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	f4ff af33 	bcc.w	80068a6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2220      	movs	r2, #32
 8006a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e000      	b.n	8006a56 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8006a54:	2302      	movs	r3, #2
  }
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3720      	adds	r7, #32
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	00100002 	.word	0x00100002
 8006a64:	ffff0000 	.word	0xffff0000

08006a68 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b088      	sub	sp, #32
 8006a6c:	af02      	add	r7, sp, #8
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	607a      	str	r2, [r7, #4]
 8006a72:	603b      	str	r3, [r7, #0]
 8006a74:	460b      	mov	r3, r1
 8006a76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	2b08      	cmp	r3, #8
 8006a82:	d006      	beq.n	8006a92 <I2C_MasterRequestWrite+0x2a>
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d003      	beq.n	8006a92 <I2C_MasterRequestWrite+0x2a>
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a90:	d108      	bne.n	8006aa4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006aa0:	601a      	str	r2, [r3, #0]
 8006aa2:	e00b      	b.n	8006abc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa8:	2b12      	cmp	r3, #18
 8006aaa:	d107      	bne.n	8006abc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006aba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	9300      	str	r3, [sp, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f000 f91b 	bl	8006d04 <I2C_WaitOnFlagUntilTimeout>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00c      	beq.n	8006aee <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d003      	beq.n	8006aea <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ae8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e035      	b.n	8006b5a <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006af6:	d108      	bne.n	8006b0a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006af8:	897b      	ldrh	r3, [r7, #10]
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	461a      	mov	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b06:	611a      	str	r2, [r3, #16]
 8006b08:	e01b      	b.n	8006b42 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006b0a:	897b      	ldrh	r3, [r7, #10]
 8006b0c:	11db      	asrs	r3, r3, #7
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	f003 0306 	and.w	r3, r3, #6
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	f063 030f 	orn	r3, r3, #15
 8006b1a:	b2da      	uxtb	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	490f      	ldr	r1, [pc, #60]	; (8006b64 <I2C_MasterRequestWrite+0xfc>)
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f000 f942 	bl	8006db2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d001      	beq.n	8006b38 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e010      	b.n	8006b5a <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006b38:	897b      	ldrh	r3, [r7, #10]
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	4908      	ldr	r1, [pc, #32]	; (8006b68 <I2C_MasterRequestWrite+0x100>)
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f000 f932 	bl	8006db2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d001      	beq.n	8006b58 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	e000      	b.n	8006b5a <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3718      	adds	r7, #24
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	00010008 	.word	0x00010008
 8006b68:	00010002 	.word	0x00010002

08006b6c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b088      	sub	sp, #32
 8006b70:	af02      	add	r7, sp, #8
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	607a      	str	r2, [r7, #4]
 8006b76:	603b      	str	r3, [r7, #0]
 8006b78:	460b      	mov	r3, r1
 8006b7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b80:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b90:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	2b08      	cmp	r3, #8
 8006b96:	d006      	beq.n	8006ba6 <I2C_MasterRequestRead+0x3a>
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d003      	beq.n	8006ba6 <I2C_MasterRequestRead+0x3a>
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ba4:	d108      	bne.n	8006bb8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bb4:	601a      	str	r2, [r3, #0]
 8006bb6:	e00b      	b.n	8006bd0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bbc:	2b11      	cmp	r3, #17
 8006bbe:	d107      	bne.n	8006bd0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	9300      	str	r3, [sp, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f000 f891 	bl	8006d04 <I2C_WaitOnFlagUntilTimeout>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00c      	beq.n	8006c02 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d003      	beq.n	8006bfe <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bfc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e078      	b.n	8006cf4 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c0a:	d108      	bne.n	8006c1e <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006c0c:	897b      	ldrh	r3, [r7, #10]
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	f043 0301 	orr.w	r3, r3, #1
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	611a      	str	r2, [r3, #16]
 8006c1c:	e05e      	b.n	8006cdc <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006c1e:	897b      	ldrh	r3, [r7, #10]
 8006c20:	11db      	asrs	r3, r3, #7
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	f003 0306 	and.w	r3, r3, #6
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	f063 030f 	orn	r3, r3, #15
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	4930      	ldr	r1, [pc, #192]	; (8006cfc <I2C_MasterRequestRead+0x190>)
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f000 f8b8 	bl	8006db2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e053      	b.n	8006cf4 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006c4c:	897b      	ldrh	r3, [r7, #10]
 8006c4e:	b2da      	uxtb	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	4929      	ldr	r1, [pc, #164]	; (8006d00 <I2C_MasterRequestRead+0x194>)
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f000 f8a8 	bl	8006db2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d001      	beq.n	8006c6c <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e043      	b.n	8006cf4 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	613b      	str	r3, [r7, #16]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	695b      	ldr	r3, [r3, #20]
 8006c76:	613b      	str	r3, [r7, #16]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	613b      	str	r3, [r7, #16]
 8006c80:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c90:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f000 f830 	bl	8006d04 <I2C_WaitOnFlagUntilTimeout>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00c      	beq.n	8006cc4 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d003      	beq.n	8006cc0 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cbe:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	e017      	b.n	8006cf4 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006cc4:	897b      	ldrh	r3, [r7, #10]
 8006cc6:	11db      	asrs	r3, r3, #7
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	f003 0306 	and.w	r3, r3, #6
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	f063 030e 	orn	r3, r3, #14
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	4907      	ldr	r1, [pc, #28]	; (8006d00 <I2C_MasterRequestRead+0x194>)
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f000 f865 	bl	8006db2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d001      	beq.n	8006cf2 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e000      	b.n	8006cf4 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3718      	adds	r7, #24
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	00010008 	.word	0x00010008
 8006d00:	00010002 	.word	0x00010002

08006d04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	603b      	str	r3, [r7, #0]
 8006d10:	4613      	mov	r3, r2
 8006d12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d14:	e025      	b.n	8006d62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d1c:	d021      	beq.n	8006d62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d1e:	f7fe fb43 	bl	80053a8 <HAL_GetTick>
 8006d22:	4602      	mov	r2, r0
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	683a      	ldr	r2, [r7, #0]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d302      	bcc.n	8006d34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d116      	bne.n	8006d62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2220      	movs	r2, #32
 8006d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4e:	f043 0220 	orr.w	r2, r3, #32
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e023      	b.n	8006daa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	0c1b      	lsrs	r3, r3, #16
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d10d      	bne.n	8006d88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	43da      	mvns	r2, r3
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	4013      	ands	r3, r2
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	bf0c      	ite	eq
 8006d7e:	2301      	moveq	r3, #1
 8006d80:	2300      	movne	r3, #0
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	461a      	mov	r2, r3
 8006d86:	e00c      	b.n	8006da2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	43da      	mvns	r2, r3
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	4013      	ands	r3, r2
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	bf0c      	ite	eq
 8006d9a:	2301      	moveq	r3, #1
 8006d9c:	2300      	movne	r3, #0
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	461a      	mov	r2, r3
 8006da2:	79fb      	ldrb	r3, [r7, #7]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d0b6      	beq.n	8006d16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b084      	sub	sp, #16
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	60f8      	str	r0, [r7, #12]
 8006dba:	60b9      	str	r1, [r7, #8]
 8006dbc:	607a      	str	r2, [r7, #4]
 8006dbe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006dc0:	e051      	b.n	8006e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	695b      	ldr	r3, [r3, #20]
 8006dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dd0:	d123      	bne.n	8006e1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006de0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006dea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2200      	movs	r2, #0
 8006df0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2220      	movs	r2, #32
 8006df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e06:	f043 0204 	orr.w	r2, r3, #4
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e046      	b.n	8006ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e20:	d021      	beq.n	8006e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e22:	f7fe fac1 	bl	80053a8 <HAL_GetTick>
 8006e26:	4602      	mov	r2, r0
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d302      	bcc.n	8006e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d116      	bne.n	8006e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2220      	movs	r2, #32
 8006e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e52:	f043 0220 	orr.w	r2, r3, #32
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e020      	b.n	8006ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	0c1b      	lsrs	r3, r3, #16
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d10c      	bne.n	8006e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	695b      	ldr	r3, [r3, #20]
 8006e76:	43da      	mvns	r2, r3
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	bf14      	ite	ne
 8006e82:	2301      	movne	r3, #1
 8006e84:	2300      	moveq	r3, #0
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	e00b      	b.n	8006ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	43da      	mvns	r2, r3
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	4013      	ands	r3, r2
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	bf14      	ite	ne
 8006e9c:	2301      	movne	r3, #1
 8006e9e:	2300      	moveq	r3, #0
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d18d      	bne.n	8006dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ebc:	e02d      	b.n	8006f1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f000 f8ce 	bl	8007060 <I2C_IsAcknowledgeFailed>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e02d      	b.n	8006f2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ed4:	d021      	beq.n	8006f1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ed6:	f7fe fa67 	bl	80053a8 <HAL_GetTick>
 8006eda:	4602      	mov	r2, r0
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d302      	bcc.n	8006eec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d116      	bne.n	8006f1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2220      	movs	r2, #32
 8006ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f06:	f043 0220 	orr.w	r2, r3, #32
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e007      	b.n	8006f2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	695b      	ldr	r3, [r3, #20]
 8006f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f24:	2b80      	cmp	r3, #128	; 0x80
 8006f26:	d1ca      	bne.n	8006ebe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b084      	sub	sp, #16
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	60f8      	str	r0, [r7, #12]
 8006f3a:	60b9      	str	r1, [r7, #8]
 8006f3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f3e:	e02d      	b.n	8006f9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f000 f88d 	bl	8007060 <I2C_IsAcknowledgeFailed>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d001      	beq.n	8006f50 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e02d      	b.n	8006fac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f56:	d021      	beq.n	8006f9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f58:	f7fe fa26 	bl	80053a8 <HAL_GetTick>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d302      	bcc.n	8006f6e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d116      	bne.n	8006f9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2220      	movs	r2, #32
 8006f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f88:	f043 0220 	orr.w	r2, r3, #32
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e007      	b.n	8006fac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	f003 0304 	and.w	r3, r3, #4
 8006fa6:	2b04      	cmp	r3, #4
 8006fa8:	d1ca      	bne.n	8006f40 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006fc0:	e042      	b.n	8007048 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	f003 0310 	and.w	r3, r3, #16
 8006fcc:	2b10      	cmp	r3, #16
 8006fce:	d119      	bne.n	8007004 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f06f 0210 	mvn.w	r2, #16
 8006fd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2220      	movs	r2, #32
 8006fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e029      	b.n	8007058 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007004:	f7fe f9d0 	bl	80053a8 <HAL_GetTick>
 8007008:	4602      	mov	r2, r0
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	429a      	cmp	r2, r3
 8007012:	d302      	bcc.n	800701a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d116      	bne.n	8007048 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2220      	movs	r2, #32
 8007024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007034:	f043 0220 	orr.w	r2, r3, #32
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e007      	b.n	8007058 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007052:	2b40      	cmp	r3, #64	; 0x40
 8007054:	d1b5      	bne.n	8006fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007076:	d11b      	bne.n	80070b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007080:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2220      	movs	r2, #32
 800708c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709c:	f043 0204 	orr.w	r2, r3, #4
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e000      	b.n	80070b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	370c      	adds	r7, #12
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
	...

080070c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d101      	bne.n	80070d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e25b      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d075      	beq.n	80071ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80070de:	4ba3      	ldr	r3, [pc, #652]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f003 030c 	and.w	r3, r3, #12
 80070e6:	2b04      	cmp	r3, #4
 80070e8:	d00c      	beq.n	8007104 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070ea:	4ba0      	ldr	r3, [pc, #640]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80070f2:	2b08      	cmp	r3, #8
 80070f4:	d112      	bne.n	800711c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070f6:	4b9d      	ldr	r3, [pc, #628]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007102:	d10b      	bne.n	800711c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007104:	4b99      	ldr	r3, [pc, #612]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d05b      	beq.n	80071c8 <HAL_RCC_OscConfig+0x108>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d157      	bne.n	80071c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e236      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007124:	d106      	bne.n	8007134 <HAL_RCC_OscConfig+0x74>
 8007126:	4b91      	ldr	r3, [pc, #580]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a90      	ldr	r2, [pc, #576]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 800712c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007130:	6013      	str	r3, [r2, #0]
 8007132:	e01d      	b.n	8007170 <HAL_RCC_OscConfig+0xb0>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800713c:	d10c      	bne.n	8007158 <HAL_RCC_OscConfig+0x98>
 800713e:	4b8b      	ldr	r3, [pc, #556]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a8a      	ldr	r2, [pc, #552]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 8007144:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007148:	6013      	str	r3, [r2, #0]
 800714a:	4b88      	ldr	r3, [pc, #544]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a87      	ldr	r2, [pc, #540]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 8007150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007154:	6013      	str	r3, [r2, #0]
 8007156:	e00b      	b.n	8007170 <HAL_RCC_OscConfig+0xb0>
 8007158:	4b84      	ldr	r3, [pc, #528]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a83      	ldr	r2, [pc, #524]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 800715e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007162:	6013      	str	r3, [r2, #0]
 8007164:	4b81      	ldr	r3, [pc, #516]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a80      	ldr	r2, [pc, #512]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 800716a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800716e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d013      	beq.n	80071a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007178:	f7fe f916 	bl	80053a8 <HAL_GetTick>
 800717c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800717e:	e008      	b.n	8007192 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007180:	f7fe f912 	bl	80053a8 <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	2b64      	cmp	r3, #100	; 0x64
 800718c:	d901      	bls.n	8007192 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e1fb      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007192:	4b76      	ldr	r3, [pc, #472]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d0f0      	beq.n	8007180 <HAL_RCC_OscConfig+0xc0>
 800719e:	e014      	b.n	80071ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071a0:	f7fe f902 	bl	80053a8 <HAL_GetTick>
 80071a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071a6:	e008      	b.n	80071ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071a8:	f7fe f8fe 	bl	80053a8 <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	2b64      	cmp	r3, #100	; 0x64
 80071b4:	d901      	bls.n	80071ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e1e7      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071ba:	4b6c      	ldr	r3, [pc, #432]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1f0      	bne.n	80071a8 <HAL_RCC_OscConfig+0xe8>
 80071c6:	e000      	b.n	80071ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0302 	and.w	r3, r3, #2
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d063      	beq.n	800729e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80071d6:	4b65      	ldr	r3, [pc, #404]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f003 030c 	and.w	r3, r3, #12
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00b      	beq.n	80071fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071e2:	4b62      	ldr	r3, [pc, #392]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80071ea:	2b08      	cmp	r3, #8
 80071ec:	d11c      	bne.n	8007228 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071ee:	4b5f      	ldr	r3, [pc, #380]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d116      	bne.n	8007228 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071fa:	4b5c      	ldr	r3, [pc, #368]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0302 	and.w	r3, r3, #2
 8007202:	2b00      	cmp	r3, #0
 8007204:	d005      	beq.n	8007212 <HAL_RCC_OscConfig+0x152>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	2b01      	cmp	r3, #1
 800720c:	d001      	beq.n	8007212 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e1bb      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007212:	4b56      	ldr	r3, [pc, #344]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	00db      	lsls	r3, r3, #3
 8007220:	4952      	ldr	r1, [pc, #328]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 8007222:	4313      	orrs	r3, r2
 8007224:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007226:	e03a      	b.n	800729e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d020      	beq.n	8007272 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007230:	4b4f      	ldr	r3, [pc, #316]	; (8007370 <HAL_RCC_OscConfig+0x2b0>)
 8007232:	2201      	movs	r2, #1
 8007234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007236:	f7fe f8b7 	bl	80053a8 <HAL_GetTick>
 800723a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800723c:	e008      	b.n	8007250 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800723e:	f7fe f8b3 	bl	80053a8 <HAL_GetTick>
 8007242:	4602      	mov	r2, r0
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	2b02      	cmp	r3, #2
 800724a:	d901      	bls.n	8007250 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800724c:	2303      	movs	r3, #3
 800724e:	e19c      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007250:	4b46      	ldr	r3, [pc, #280]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0302 	and.w	r3, r3, #2
 8007258:	2b00      	cmp	r3, #0
 800725a:	d0f0      	beq.n	800723e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800725c:	4b43      	ldr	r3, [pc, #268]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	00db      	lsls	r3, r3, #3
 800726a:	4940      	ldr	r1, [pc, #256]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 800726c:	4313      	orrs	r3, r2
 800726e:	600b      	str	r3, [r1, #0]
 8007270:	e015      	b.n	800729e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007272:	4b3f      	ldr	r3, [pc, #252]	; (8007370 <HAL_RCC_OscConfig+0x2b0>)
 8007274:	2200      	movs	r2, #0
 8007276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007278:	f7fe f896 	bl	80053a8 <HAL_GetTick>
 800727c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800727e:	e008      	b.n	8007292 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007280:	f7fe f892 	bl	80053a8 <HAL_GetTick>
 8007284:	4602      	mov	r2, r0
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	2b02      	cmp	r3, #2
 800728c:	d901      	bls.n	8007292 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e17b      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007292:	4b36      	ldr	r3, [pc, #216]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 0302 	and.w	r3, r3, #2
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1f0      	bne.n	8007280 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 0308 	and.w	r3, r3, #8
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d030      	beq.n	800730c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d016      	beq.n	80072e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072b2:	4b30      	ldr	r3, [pc, #192]	; (8007374 <HAL_RCC_OscConfig+0x2b4>)
 80072b4:	2201      	movs	r2, #1
 80072b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072b8:	f7fe f876 	bl	80053a8 <HAL_GetTick>
 80072bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072be:	e008      	b.n	80072d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072c0:	f7fe f872 	bl	80053a8 <HAL_GetTick>
 80072c4:	4602      	mov	r2, r0
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d901      	bls.n	80072d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e15b      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072d2:	4b26      	ldr	r3, [pc, #152]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 80072d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072d6:	f003 0302 	and.w	r3, r3, #2
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d0f0      	beq.n	80072c0 <HAL_RCC_OscConfig+0x200>
 80072de:	e015      	b.n	800730c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072e0:	4b24      	ldr	r3, [pc, #144]	; (8007374 <HAL_RCC_OscConfig+0x2b4>)
 80072e2:	2200      	movs	r2, #0
 80072e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072e6:	f7fe f85f 	bl	80053a8 <HAL_GetTick>
 80072ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072ec:	e008      	b.n	8007300 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072ee:	f7fe f85b 	bl	80053a8 <HAL_GetTick>
 80072f2:	4602      	mov	r2, r0
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d901      	bls.n	8007300 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e144      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007300:	4b1a      	ldr	r3, [pc, #104]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 8007302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007304:	f003 0302 	and.w	r3, r3, #2
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1f0      	bne.n	80072ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 0304 	and.w	r3, r3, #4
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 80a0 	beq.w	800745a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800731a:	2300      	movs	r3, #0
 800731c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800731e:	4b13      	ldr	r3, [pc, #76]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 8007320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10f      	bne.n	800734a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800732a:	2300      	movs	r3, #0
 800732c:	60bb      	str	r3, [r7, #8]
 800732e:	4b0f      	ldr	r3, [pc, #60]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 8007330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007332:	4a0e      	ldr	r2, [pc, #56]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 8007334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007338:	6413      	str	r3, [r2, #64]	; 0x40
 800733a:	4b0c      	ldr	r3, [pc, #48]	; (800736c <HAL_RCC_OscConfig+0x2ac>)
 800733c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007342:	60bb      	str	r3, [r7, #8]
 8007344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007346:	2301      	movs	r3, #1
 8007348:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800734a:	4b0b      	ldr	r3, [pc, #44]	; (8007378 <HAL_RCC_OscConfig+0x2b8>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007352:	2b00      	cmp	r3, #0
 8007354:	d121      	bne.n	800739a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007356:	4b08      	ldr	r3, [pc, #32]	; (8007378 <HAL_RCC_OscConfig+0x2b8>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a07      	ldr	r2, [pc, #28]	; (8007378 <HAL_RCC_OscConfig+0x2b8>)
 800735c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007362:	f7fe f821 	bl	80053a8 <HAL_GetTick>
 8007366:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007368:	e011      	b.n	800738e <HAL_RCC_OscConfig+0x2ce>
 800736a:	bf00      	nop
 800736c:	40023800 	.word	0x40023800
 8007370:	42470000 	.word	0x42470000
 8007374:	42470e80 	.word	0x42470e80
 8007378:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800737c:	f7fe f814 	bl	80053a8 <HAL_GetTick>
 8007380:	4602      	mov	r2, r0
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	2b02      	cmp	r3, #2
 8007388:	d901      	bls.n	800738e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e0fd      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800738e:	4b81      	ldr	r3, [pc, #516]	; (8007594 <HAL_RCC_OscConfig+0x4d4>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007396:	2b00      	cmp	r3, #0
 8007398:	d0f0      	beq.n	800737c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d106      	bne.n	80073b0 <HAL_RCC_OscConfig+0x2f0>
 80073a2:	4b7d      	ldr	r3, [pc, #500]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 80073a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a6:	4a7c      	ldr	r2, [pc, #496]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 80073a8:	f043 0301 	orr.w	r3, r3, #1
 80073ac:	6713      	str	r3, [r2, #112]	; 0x70
 80073ae:	e01c      	b.n	80073ea <HAL_RCC_OscConfig+0x32a>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	2b05      	cmp	r3, #5
 80073b6:	d10c      	bne.n	80073d2 <HAL_RCC_OscConfig+0x312>
 80073b8:	4b77      	ldr	r3, [pc, #476]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 80073ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073bc:	4a76      	ldr	r2, [pc, #472]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 80073be:	f043 0304 	orr.w	r3, r3, #4
 80073c2:	6713      	str	r3, [r2, #112]	; 0x70
 80073c4:	4b74      	ldr	r3, [pc, #464]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 80073c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c8:	4a73      	ldr	r2, [pc, #460]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 80073ca:	f043 0301 	orr.w	r3, r3, #1
 80073ce:	6713      	str	r3, [r2, #112]	; 0x70
 80073d0:	e00b      	b.n	80073ea <HAL_RCC_OscConfig+0x32a>
 80073d2:	4b71      	ldr	r3, [pc, #452]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 80073d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d6:	4a70      	ldr	r2, [pc, #448]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 80073d8:	f023 0301 	bic.w	r3, r3, #1
 80073dc:	6713      	str	r3, [r2, #112]	; 0x70
 80073de:	4b6e      	ldr	r3, [pc, #440]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 80073e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e2:	4a6d      	ldr	r2, [pc, #436]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 80073e4:	f023 0304 	bic.w	r3, r3, #4
 80073e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d015      	beq.n	800741e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073f2:	f7fd ffd9 	bl	80053a8 <HAL_GetTick>
 80073f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073f8:	e00a      	b.n	8007410 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073fa:	f7fd ffd5 	bl	80053a8 <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	f241 3288 	movw	r2, #5000	; 0x1388
 8007408:	4293      	cmp	r3, r2
 800740a:	d901      	bls.n	8007410 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e0bc      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007410:	4b61      	ldr	r3, [pc, #388]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 8007412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007414:	f003 0302 	and.w	r3, r3, #2
 8007418:	2b00      	cmp	r3, #0
 800741a:	d0ee      	beq.n	80073fa <HAL_RCC_OscConfig+0x33a>
 800741c:	e014      	b.n	8007448 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800741e:	f7fd ffc3 	bl	80053a8 <HAL_GetTick>
 8007422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007424:	e00a      	b.n	800743c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007426:	f7fd ffbf 	bl	80053a8 <HAL_GetTick>
 800742a:	4602      	mov	r2, r0
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	f241 3288 	movw	r2, #5000	; 0x1388
 8007434:	4293      	cmp	r3, r2
 8007436:	d901      	bls.n	800743c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e0a6      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800743c:	4b56      	ldr	r3, [pc, #344]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 800743e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007440:	f003 0302 	and.w	r3, r3, #2
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1ee      	bne.n	8007426 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007448:	7dfb      	ldrb	r3, [r7, #23]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d105      	bne.n	800745a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800744e:	4b52      	ldr	r3, [pc, #328]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 8007450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007452:	4a51      	ldr	r2, [pc, #324]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 8007454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007458:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	2b00      	cmp	r3, #0
 8007460:	f000 8092 	beq.w	8007588 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007464:	4b4c      	ldr	r3, [pc, #304]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f003 030c 	and.w	r3, r3, #12
 800746c:	2b08      	cmp	r3, #8
 800746e:	d05c      	beq.n	800752a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	2b02      	cmp	r3, #2
 8007476:	d141      	bne.n	80074fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007478:	4b48      	ldr	r3, [pc, #288]	; (800759c <HAL_RCC_OscConfig+0x4dc>)
 800747a:	2200      	movs	r2, #0
 800747c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800747e:	f7fd ff93 	bl	80053a8 <HAL_GetTick>
 8007482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007484:	e008      	b.n	8007498 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007486:	f7fd ff8f 	bl	80053a8 <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	2b02      	cmp	r3, #2
 8007492:	d901      	bls.n	8007498 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007494:	2303      	movs	r3, #3
 8007496:	e078      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007498:	4b3f      	ldr	r3, [pc, #252]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d1f0      	bne.n	8007486 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	69da      	ldr	r2, [r3, #28]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a1b      	ldr	r3, [r3, #32]
 80074ac:	431a      	orrs	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b2:	019b      	lsls	r3, r3, #6
 80074b4:	431a      	orrs	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ba:	085b      	lsrs	r3, r3, #1
 80074bc:	3b01      	subs	r3, #1
 80074be:	041b      	lsls	r3, r3, #16
 80074c0:	431a      	orrs	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c6:	061b      	lsls	r3, r3, #24
 80074c8:	4933      	ldr	r1, [pc, #204]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074ce:	4b33      	ldr	r3, [pc, #204]	; (800759c <HAL_RCC_OscConfig+0x4dc>)
 80074d0:	2201      	movs	r2, #1
 80074d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074d4:	f7fd ff68 	bl	80053a8 <HAL_GetTick>
 80074d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074da:	e008      	b.n	80074ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074dc:	f7fd ff64 	bl	80053a8 <HAL_GetTick>
 80074e0:	4602      	mov	r2, r0
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d901      	bls.n	80074ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	e04d      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074ee:	4b2a      	ldr	r3, [pc, #168]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d0f0      	beq.n	80074dc <HAL_RCC_OscConfig+0x41c>
 80074fa:	e045      	b.n	8007588 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074fc:	4b27      	ldr	r3, [pc, #156]	; (800759c <HAL_RCC_OscConfig+0x4dc>)
 80074fe:	2200      	movs	r2, #0
 8007500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007502:	f7fd ff51 	bl	80053a8 <HAL_GetTick>
 8007506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007508:	e008      	b.n	800751c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800750a:	f7fd ff4d 	bl	80053a8 <HAL_GetTick>
 800750e:	4602      	mov	r2, r0
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	2b02      	cmp	r3, #2
 8007516:	d901      	bls.n	800751c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007518:	2303      	movs	r3, #3
 800751a:	e036      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800751c:	4b1e      	ldr	r3, [pc, #120]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1f0      	bne.n	800750a <HAL_RCC_OscConfig+0x44a>
 8007528:	e02e      	b.n	8007588 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	699b      	ldr	r3, [r3, #24]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d101      	bne.n	8007536 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e029      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007536:	4b18      	ldr	r3, [pc, #96]	; (8007598 <HAL_RCC_OscConfig+0x4d8>)
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	429a      	cmp	r2, r3
 8007548:	d11c      	bne.n	8007584 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007554:	429a      	cmp	r2, r3
 8007556:	d115      	bne.n	8007584 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800755e:	4013      	ands	r3, r2
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007564:	4293      	cmp	r3, r2
 8007566:	d10d      	bne.n	8007584 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007572:	429a      	cmp	r2, r3
 8007574:	d106      	bne.n	8007584 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007580:	429a      	cmp	r2, r3
 8007582:	d001      	beq.n	8007588 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	e000      	b.n	800758a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3718      	adds	r7, #24
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	40007000 	.word	0x40007000
 8007598:	40023800 	.word	0x40023800
 800759c:	42470060 	.word	0x42470060

080075a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d101      	bne.n	80075b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e0cc      	b.n	800774e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80075b4:	4b68      	ldr	r3, [pc, #416]	; (8007758 <HAL_RCC_ClockConfig+0x1b8>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 030f 	and.w	r3, r3, #15
 80075bc:	683a      	ldr	r2, [r7, #0]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d90c      	bls.n	80075dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075c2:	4b65      	ldr	r3, [pc, #404]	; (8007758 <HAL_RCC_ClockConfig+0x1b8>)
 80075c4:	683a      	ldr	r2, [r7, #0]
 80075c6:	b2d2      	uxtb	r2, r2
 80075c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ca:	4b63      	ldr	r3, [pc, #396]	; (8007758 <HAL_RCC_ClockConfig+0x1b8>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 030f 	and.w	r3, r3, #15
 80075d2:	683a      	ldr	r2, [r7, #0]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d001      	beq.n	80075dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e0b8      	b.n	800774e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0302 	and.w	r3, r3, #2
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d020      	beq.n	800762a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0304 	and.w	r3, r3, #4
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d005      	beq.n	8007600 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075f4:	4b59      	ldr	r3, [pc, #356]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	4a58      	ldr	r2, [pc, #352]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 80075fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80075fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 0308 	and.w	r3, r3, #8
 8007608:	2b00      	cmp	r3, #0
 800760a:	d005      	beq.n	8007618 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800760c:	4b53      	ldr	r3, [pc, #332]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	4a52      	ldr	r2, [pc, #328]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 8007612:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007616:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007618:	4b50      	ldr	r3, [pc, #320]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	494d      	ldr	r1, [pc, #308]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 8007626:	4313      	orrs	r3, r2
 8007628:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	2b00      	cmp	r3, #0
 8007634:	d044      	beq.n	80076c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	2b01      	cmp	r3, #1
 800763c:	d107      	bne.n	800764e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800763e:	4b47      	ldr	r3, [pc, #284]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d119      	bne.n	800767e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e07f      	b.n	800774e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	2b02      	cmp	r3, #2
 8007654:	d003      	beq.n	800765e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800765a:	2b03      	cmp	r3, #3
 800765c:	d107      	bne.n	800766e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800765e:	4b3f      	ldr	r3, [pc, #252]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d109      	bne.n	800767e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e06f      	b.n	800774e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800766e:	4b3b      	ldr	r3, [pc, #236]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 0302 	and.w	r3, r3, #2
 8007676:	2b00      	cmp	r3, #0
 8007678:	d101      	bne.n	800767e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e067      	b.n	800774e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800767e:	4b37      	ldr	r3, [pc, #220]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f023 0203 	bic.w	r2, r3, #3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	4934      	ldr	r1, [pc, #208]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 800768c:	4313      	orrs	r3, r2
 800768e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007690:	f7fd fe8a 	bl	80053a8 <HAL_GetTick>
 8007694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007696:	e00a      	b.n	80076ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007698:	f7fd fe86 	bl	80053a8 <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d901      	bls.n	80076ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e04f      	b.n	800774e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076ae:	4b2b      	ldr	r3, [pc, #172]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	f003 020c 	and.w	r2, r3, #12
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	429a      	cmp	r2, r3
 80076be:	d1eb      	bne.n	8007698 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80076c0:	4b25      	ldr	r3, [pc, #148]	; (8007758 <HAL_RCC_ClockConfig+0x1b8>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 030f 	and.w	r3, r3, #15
 80076c8:	683a      	ldr	r2, [r7, #0]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d20c      	bcs.n	80076e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076ce:	4b22      	ldr	r3, [pc, #136]	; (8007758 <HAL_RCC_ClockConfig+0x1b8>)
 80076d0:	683a      	ldr	r2, [r7, #0]
 80076d2:	b2d2      	uxtb	r2, r2
 80076d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076d6:	4b20      	ldr	r3, [pc, #128]	; (8007758 <HAL_RCC_ClockConfig+0x1b8>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 030f 	and.w	r3, r3, #15
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d001      	beq.n	80076e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e032      	b.n	800774e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0304 	and.w	r3, r3, #4
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d008      	beq.n	8007706 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076f4:	4b19      	ldr	r3, [pc, #100]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	4916      	ldr	r1, [pc, #88]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 8007702:	4313      	orrs	r3, r2
 8007704:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 0308 	and.w	r3, r3, #8
 800770e:	2b00      	cmp	r3, #0
 8007710:	d009      	beq.n	8007726 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007712:	4b12      	ldr	r3, [pc, #72]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	00db      	lsls	r3, r3, #3
 8007720:	490e      	ldr	r1, [pc, #56]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 8007722:	4313      	orrs	r3, r2
 8007724:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007726:	f000 f821 	bl	800776c <HAL_RCC_GetSysClockFreq>
 800772a:	4601      	mov	r1, r0
 800772c:	4b0b      	ldr	r3, [pc, #44]	; (800775c <HAL_RCC_ClockConfig+0x1bc>)
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	091b      	lsrs	r3, r3, #4
 8007732:	f003 030f 	and.w	r3, r3, #15
 8007736:	4a0a      	ldr	r2, [pc, #40]	; (8007760 <HAL_RCC_ClockConfig+0x1c0>)
 8007738:	5cd3      	ldrb	r3, [r2, r3]
 800773a:	fa21 f303 	lsr.w	r3, r1, r3
 800773e:	4a09      	ldr	r2, [pc, #36]	; (8007764 <HAL_RCC_ClockConfig+0x1c4>)
 8007740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007742:	4b09      	ldr	r3, [pc, #36]	; (8007768 <HAL_RCC_ClockConfig+0x1c8>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4618      	mov	r0, r3
 8007748:	f7fd fd06 	bl	8005158 <HAL_InitTick>

  return HAL_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	40023c00 	.word	0x40023c00
 800775c:	40023800 	.word	0x40023800
 8007760:	0800ba18 	.word	0x0800ba18
 8007764:	20000500 	.word	0x20000500
 8007768:	20000504 	.word	0x20000504

0800776c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800776c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007772:	2300      	movs	r3, #0
 8007774:	607b      	str	r3, [r7, #4]
 8007776:	2300      	movs	r3, #0
 8007778:	60fb      	str	r3, [r7, #12]
 800777a:	2300      	movs	r3, #0
 800777c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800777e:	2300      	movs	r3, #0
 8007780:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007782:	4b50      	ldr	r3, [pc, #320]	; (80078c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f003 030c 	and.w	r3, r3, #12
 800778a:	2b04      	cmp	r3, #4
 800778c:	d007      	beq.n	800779e <HAL_RCC_GetSysClockFreq+0x32>
 800778e:	2b08      	cmp	r3, #8
 8007790:	d008      	beq.n	80077a4 <HAL_RCC_GetSysClockFreq+0x38>
 8007792:	2b00      	cmp	r3, #0
 8007794:	f040 808d 	bne.w	80078b2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007798:	4b4b      	ldr	r3, [pc, #300]	; (80078c8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800779a:	60bb      	str	r3, [r7, #8]
       break;
 800779c:	e08c      	b.n	80078b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800779e:	4b4b      	ldr	r3, [pc, #300]	; (80078cc <HAL_RCC_GetSysClockFreq+0x160>)
 80077a0:	60bb      	str	r3, [r7, #8]
      break;
 80077a2:	e089      	b.n	80078b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80077a4:	4b47      	ldr	r3, [pc, #284]	; (80078c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80077ae:	4b45      	ldr	r3, [pc, #276]	; (80078c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d023      	beq.n	8007802 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077ba:	4b42      	ldr	r3, [pc, #264]	; (80078c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	099b      	lsrs	r3, r3, #6
 80077c0:	f04f 0400 	mov.w	r4, #0
 80077c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80077c8:	f04f 0200 	mov.w	r2, #0
 80077cc:	ea03 0501 	and.w	r5, r3, r1
 80077d0:	ea04 0602 	and.w	r6, r4, r2
 80077d4:	4a3d      	ldr	r2, [pc, #244]	; (80078cc <HAL_RCC_GetSysClockFreq+0x160>)
 80077d6:	fb02 f106 	mul.w	r1, r2, r6
 80077da:	2200      	movs	r2, #0
 80077dc:	fb02 f205 	mul.w	r2, r2, r5
 80077e0:	440a      	add	r2, r1
 80077e2:	493a      	ldr	r1, [pc, #232]	; (80078cc <HAL_RCC_GetSysClockFreq+0x160>)
 80077e4:	fba5 0101 	umull	r0, r1, r5, r1
 80077e8:	1853      	adds	r3, r2, r1
 80077ea:	4619      	mov	r1, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f04f 0400 	mov.w	r4, #0
 80077f2:	461a      	mov	r2, r3
 80077f4:	4623      	mov	r3, r4
 80077f6:	f7f9 f9f7 	bl	8000be8 <__aeabi_uldivmod>
 80077fa:	4603      	mov	r3, r0
 80077fc:	460c      	mov	r4, r1
 80077fe:	60fb      	str	r3, [r7, #12]
 8007800:	e049      	b.n	8007896 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007802:	4b30      	ldr	r3, [pc, #192]	; (80078c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	099b      	lsrs	r3, r3, #6
 8007808:	f04f 0400 	mov.w	r4, #0
 800780c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007810:	f04f 0200 	mov.w	r2, #0
 8007814:	ea03 0501 	and.w	r5, r3, r1
 8007818:	ea04 0602 	and.w	r6, r4, r2
 800781c:	4629      	mov	r1, r5
 800781e:	4632      	mov	r2, r6
 8007820:	f04f 0300 	mov.w	r3, #0
 8007824:	f04f 0400 	mov.w	r4, #0
 8007828:	0154      	lsls	r4, r2, #5
 800782a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800782e:	014b      	lsls	r3, r1, #5
 8007830:	4619      	mov	r1, r3
 8007832:	4622      	mov	r2, r4
 8007834:	1b49      	subs	r1, r1, r5
 8007836:	eb62 0206 	sbc.w	r2, r2, r6
 800783a:	f04f 0300 	mov.w	r3, #0
 800783e:	f04f 0400 	mov.w	r4, #0
 8007842:	0194      	lsls	r4, r2, #6
 8007844:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007848:	018b      	lsls	r3, r1, #6
 800784a:	1a5b      	subs	r3, r3, r1
 800784c:	eb64 0402 	sbc.w	r4, r4, r2
 8007850:	f04f 0100 	mov.w	r1, #0
 8007854:	f04f 0200 	mov.w	r2, #0
 8007858:	00e2      	lsls	r2, r4, #3
 800785a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800785e:	00d9      	lsls	r1, r3, #3
 8007860:	460b      	mov	r3, r1
 8007862:	4614      	mov	r4, r2
 8007864:	195b      	adds	r3, r3, r5
 8007866:	eb44 0406 	adc.w	r4, r4, r6
 800786a:	f04f 0100 	mov.w	r1, #0
 800786e:	f04f 0200 	mov.w	r2, #0
 8007872:	02a2      	lsls	r2, r4, #10
 8007874:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007878:	0299      	lsls	r1, r3, #10
 800787a:	460b      	mov	r3, r1
 800787c:	4614      	mov	r4, r2
 800787e:	4618      	mov	r0, r3
 8007880:	4621      	mov	r1, r4
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f04f 0400 	mov.w	r4, #0
 8007888:	461a      	mov	r2, r3
 800788a:	4623      	mov	r3, r4
 800788c:	f7f9 f9ac 	bl	8000be8 <__aeabi_uldivmod>
 8007890:	4603      	mov	r3, r0
 8007892:	460c      	mov	r4, r1
 8007894:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007896:	4b0b      	ldr	r3, [pc, #44]	; (80078c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	0c1b      	lsrs	r3, r3, #16
 800789c:	f003 0303 	and.w	r3, r3, #3
 80078a0:	3301      	adds	r3, #1
 80078a2:	005b      	lsls	r3, r3, #1
 80078a4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ae:	60bb      	str	r3, [r7, #8]
      break;
 80078b0:	e002      	b.n	80078b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80078b2:	4b05      	ldr	r3, [pc, #20]	; (80078c8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80078b4:	60bb      	str	r3, [r7, #8]
      break;
 80078b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80078b8:	68bb      	ldr	r3, [r7, #8]
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3714      	adds	r7, #20
 80078be:	46bd      	mov	sp, r7
 80078c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078c2:	bf00      	nop
 80078c4:	40023800 	.word	0x40023800
 80078c8:	00f42400 	.word	0x00f42400
 80078cc:	00b71b00 	.word	0x00b71b00

080078d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078d0:	b480      	push	{r7}
 80078d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078d4:	4b03      	ldr	r3, [pc, #12]	; (80078e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80078d6:	681b      	ldr	r3, [r3, #0]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	20000500 	.word	0x20000500

080078e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80078ec:	f7ff fff0 	bl	80078d0 <HAL_RCC_GetHCLKFreq>
 80078f0:	4601      	mov	r1, r0
 80078f2:	4b05      	ldr	r3, [pc, #20]	; (8007908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	0a9b      	lsrs	r3, r3, #10
 80078f8:	f003 0307 	and.w	r3, r3, #7
 80078fc:	4a03      	ldr	r2, [pc, #12]	; (800790c <HAL_RCC_GetPCLK1Freq+0x24>)
 80078fe:	5cd3      	ldrb	r3, [r2, r3]
 8007900:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007904:	4618      	mov	r0, r3
 8007906:	bd80      	pop	{r7, pc}
 8007908:	40023800 	.word	0x40023800
 800790c:	0800ba28 	.word	0x0800ba28

08007910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007914:	f7ff ffdc 	bl	80078d0 <HAL_RCC_GetHCLKFreq>
 8007918:	4601      	mov	r1, r0
 800791a:	4b05      	ldr	r3, [pc, #20]	; (8007930 <HAL_RCC_GetPCLK2Freq+0x20>)
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	0b5b      	lsrs	r3, r3, #13
 8007920:	f003 0307 	and.w	r3, r3, #7
 8007924:	4a03      	ldr	r2, [pc, #12]	; (8007934 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007926:	5cd3      	ldrb	r3, [r2, r3]
 8007928:	fa21 f303 	lsr.w	r3, r1, r3
}
 800792c:	4618      	mov	r0, r3
 800792e:	bd80      	pop	{r7, pc}
 8007930:	40023800 	.word	0x40023800
 8007934:	0800ba28 	.word	0x0800ba28

08007938 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	220f      	movs	r2, #15
 8007946:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007948:	4b12      	ldr	r3, [pc, #72]	; (8007994 <HAL_RCC_GetClockConfig+0x5c>)
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	f003 0203 	and.w	r2, r3, #3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007954:	4b0f      	ldr	r3, [pc, #60]	; (8007994 <HAL_RCC_GetClockConfig+0x5c>)
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007960:	4b0c      	ldr	r3, [pc, #48]	; (8007994 <HAL_RCC_GetClockConfig+0x5c>)
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800796c:	4b09      	ldr	r3, [pc, #36]	; (8007994 <HAL_RCC_GetClockConfig+0x5c>)
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	08db      	lsrs	r3, r3, #3
 8007972:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800797a:	4b07      	ldr	r3, [pc, #28]	; (8007998 <HAL_RCC_GetClockConfig+0x60>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 020f 	and.w	r2, r3, #15
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	601a      	str	r2, [r3, #0]
}
 8007986:	bf00      	nop
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	40023800 	.word	0x40023800
 8007998:	40023c00 	.word	0x40023c00

0800799c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d101      	bne.n	80079ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e01d      	b.n	80079ea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d106      	bne.n	80079c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7fd fab6 	bl	8004f34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2202      	movs	r2, #2
 80079cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	3304      	adds	r3, #4
 80079d8:	4619      	mov	r1, r3
 80079da:	4610      	mov	r0, r2
 80079dc:	f000 fb72 	bl	80080c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3708      	adds	r7, #8
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80079f2:	b480      	push	{r7}
 80079f4:	b085      	sub	sp, #20
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2202      	movs	r2, #2
 80079fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	f003 0307 	and.w	r3, r3, #7
 8007a0c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2b06      	cmp	r3, #6
 8007a12:	d007      	beq.n	8007a24 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f042 0201 	orr.w	r2, r2, #1
 8007a22:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	b085      	sub	sp, #20
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68da      	ldr	r2, [r3, #12]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f042 0201 	orr.w	r2, r2, #1
 8007a50:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	f003 0307 	and.w	r3, r3, #7
 8007a5c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2b06      	cmp	r3, #6
 8007a62:	d007      	beq.n	8007a74 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f042 0201 	orr.w	r2, r2, #1
 8007a72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3714      	adds	r7, #20
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b082      	sub	sp, #8
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d101      	bne.n	8007a94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	e01d      	b.n	8007ad0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d106      	bne.n	8007aae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f815 	bl	8007ad8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2202      	movs	r2, #2
 8007ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	3304      	adds	r3, #4
 8007abe:	4619      	mov	r1, r3
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	f000 faff 	bl	80080c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2201      	movs	r2, #1
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f000 fdca 	bl	8008698 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a15      	ldr	r2, [pc, #84]	; (8007b60 <HAL_TIM_PWM_Start+0x74>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d004      	beq.n	8007b18 <HAL_TIM_PWM_Start+0x2c>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a14      	ldr	r2, [pc, #80]	; (8007b64 <HAL_TIM_PWM_Start+0x78>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d101      	bne.n	8007b1c <HAL_TIM_PWM_Start+0x30>
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e000      	b.n	8007b1e <HAL_TIM_PWM_Start+0x32>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d007      	beq.n	8007b32 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	f003 0307 	and.w	r3, r3, #7
 8007b3c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2b06      	cmp	r3, #6
 8007b42:	d007      	beq.n	8007b54 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f042 0201 	orr.w	r2, r2, #1
 8007b52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	40010000 	.word	0x40010000
 8007b64:	40010400 	.word	0x40010400

08007b68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	f003 0302 	and.w	r3, r3, #2
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d122      	bne.n	8007bc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	f003 0302 	and.w	r3, r3, #2
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d11b      	bne.n	8007bc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f06f 0202 	mvn.w	r2, #2
 8007b94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	f003 0303 	and.w	r3, r3, #3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d003      	beq.n	8007bb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fa6b 	bl	8008086 <HAL_TIM_IC_CaptureCallback>
 8007bb0:	e005      	b.n	8007bbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 fa5d 	bl	8008072 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 fa6e 	bl	800809a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	f003 0304 	and.w	r3, r3, #4
 8007bce:	2b04      	cmp	r3, #4
 8007bd0:	d122      	bne.n	8007c18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	f003 0304 	and.w	r3, r3, #4
 8007bdc:	2b04      	cmp	r3, #4
 8007bde:	d11b      	bne.n	8007c18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f06f 0204 	mvn.w	r2, #4
 8007be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2202      	movs	r2, #2
 8007bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	699b      	ldr	r3, [r3, #24]
 8007bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d003      	beq.n	8007c06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 fa41 	bl	8008086 <HAL_TIM_IC_CaptureCallback>
 8007c04:	e005      	b.n	8007c12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fa33 	bl	8008072 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 fa44 	bl	800809a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	f003 0308 	and.w	r3, r3, #8
 8007c22:	2b08      	cmp	r3, #8
 8007c24:	d122      	bne.n	8007c6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	f003 0308 	and.w	r3, r3, #8
 8007c30:	2b08      	cmp	r3, #8
 8007c32:	d11b      	bne.n	8007c6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f06f 0208 	mvn.w	r2, #8
 8007c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2204      	movs	r2, #4
 8007c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	f003 0303 	and.w	r3, r3, #3
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d003      	beq.n	8007c5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fa17 	bl	8008086 <HAL_TIM_IC_CaptureCallback>
 8007c58:	e005      	b.n	8007c66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 fa09 	bl	8008072 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 fa1a 	bl	800809a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	f003 0310 	and.w	r3, r3, #16
 8007c76:	2b10      	cmp	r3, #16
 8007c78:	d122      	bne.n	8007cc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	f003 0310 	and.w	r3, r3, #16
 8007c84:	2b10      	cmp	r3, #16
 8007c86:	d11b      	bne.n	8007cc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f06f 0210 	mvn.w	r2, #16
 8007c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2208      	movs	r2, #8
 8007c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	69db      	ldr	r3, [r3, #28]
 8007c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d003      	beq.n	8007cae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f9ed 	bl	8008086 <HAL_TIM_IC_CaptureCallback>
 8007cac:	e005      	b.n	8007cba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f9df 	bl	8008072 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 f9f0 	bl	800809a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d10e      	bne.n	8007cec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	f003 0301 	and.w	r3, r3, #1
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d107      	bne.n	8007cec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f06f 0201 	mvn.w	r2, #1
 8007ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f7fc ff6c 	bl	8004bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cf6:	2b80      	cmp	r3, #128	; 0x80
 8007cf8:	d10e      	bne.n	8007d18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d04:	2b80      	cmp	r3, #128	; 0x80
 8007d06:	d107      	bne.n	8007d18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fdbe 	bl	8008894 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d22:	2b40      	cmp	r3, #64	; 0x40
 8007d24:	d10e      	bne.n	8007d44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d30:	2b40      	cmp	r3, #64	; 0x40
 8007d32:	d107      	bne.n	8007d44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f9b5 	bl	80080ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	f003 0320 	and.w	r3, r3, #32
 8007d4e:	2b20      	cmp	r3, #32
 8007d50:	d10e      	bne.n	8007d70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	f003 0320 	and.w	r3, r3, #32
 8007d5c:	2b20      	cmp	r3, #32
 8007d5e:	d107      	bne.n	8007d70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f06f 0220 	mvn.w	r2, #32
 8007d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fd88 	bl	8008880 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d70:	bf00      	nop
 8007d72:	3708      	adds	r7, #8
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d101      	bne.n	8007d92 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007d8e:	2302      	movs	r3, #2
 8007d90:	e0b4      	b.n	8007efc <HAL_TIM_PWM_ConfigChannel+0x184>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2202      	movs	r2, #2
 8007d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b0c      	cmp	r3, #12
 8007da6:	f200 809f 	bhi.w	8007ee8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007daa:	a201      	add	r2, pc, #4	; (adr r2, 8007db0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db0:	08007de5 	.word	0x08007de5
 8007db4:	08007ee9 	.word	0x08007ee9
 8007db8:	08007ee9 	.word	0x08007ee9
 8007dbc:	08007ee9 	.word	0x08007ee9
 8007dc0:	08007e25 	.word	0x08007e25
 8007dc4:	08007ee9 	.word	0x08007ee9
 8007dc8:	08007ee9 	.word	0x08007ee9
 8007dcc:	08007ee9 	.word	0x08007ee9
 8007dd0:	08007e67 	.word	0x08007e67
 8007dd4:	08007ee9 	.word	0x08007ee9
 8007dd8:	08007ee9 	.word	0x08007ee9
 8007ddc:	08007ee9 	.word	0x08007ee9
 8007de0:	08007ea7 	.word	0x08007ea7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68b9      	ldr	r1, [r7, #8]
 8007dea:	4618      	mov	r0, r3
 8007dec:	f000 fa0a 	bl	8008204 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	699a      	ldr	r2, [r3, #24]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f042 0208 	orr.w	r2, r2, #8
 8007dfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	699a      	ldr	r2, [r3, #24]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f022 0204 	bic.w	r2, r2, #4
 8007e0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	6999      	ldr	r1, [r3, #24]
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	691a      	ldr	r2, [r3, #16]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	619a      	str	r2, [r3, #24]
      break;
 8007e22:	e062      	b.n	8007eea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	68b9      	ldr	r1, [r7, #8]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f000 fa5a 	bl	80082e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	699a      	ldr	r2, [r3, #24]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	699a      	ldr	r2, [r3, #24]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	6999      	ldr	r1, [r3, #24]
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	021a      	lsls	r2, r3, #8
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	430a      	orrs	r2, r1
 8007e62:	619a      	str	r2, [r3, #24]
      break;
 8007e64:	e041      	b.n	8007eea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	68b9      	ldr	r1, [r7, #8]
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f000 faaf 	bl	80083d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	69da      	ldr	r2, [r3, #28]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f042 0208 	orr.w	r2, r2, #8
 8007e80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	69da      	ldr	r2, [r3, #28]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f022 0204 	bic.w	r2, r2, #4
 8007e90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	69d9      	ldr	r1, [r3, #28]
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	691a      	ldr	r2, [r3, #16]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	430a      	orrs	r2, r1
 8007ea2:	61da      	str	r2, [r3, #28]
      break;
 8007ea4:	e021      	b.n	8007eea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68b9      	ldr	r1, [r7, #8]
 8007eac:	4618      	mov	r0, r3
 8007eae:	f000 fb03 	bl	80084b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	69da      	ldr	r2, [r3, #28]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ec0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	69da      	ldr	r2, [r3, #28]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ed0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	69d9      	ldr	r1, [r3, #28]
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	021a      	lsls	r2, r3, #8
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	430a      	orrs	r2, r1
 8007ee4:	61da      	str	r2, [r3, #28]
      break;
 8007ee6:	e000      	b.n	8007eea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007ee8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3710      	adds	r7, #16
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d101      	bne.n	8007f1c <HAL_TIM_ConfigClockSource+0x18>
 8007f18:	2302      	movs	r3, #2
 8007f1a:	e0a6      	b.n	800806a <HAL_TIM_ConfigClockSource+0x166>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2202      	movs	r2, #2
 8007f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007f3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f42:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2b40      	cmp	r3, #64	; 0x40
 8007f52:	d067      	beq.n	8008024 <HAL_TIM_ConfigClockSource+0x120>
 8007f54:	2b40      	cmp	r3, #64	; 0x40
 8007f56:	d80b      	bhi.n	8007f70 <HAL_TIM_ConfigClockSource+0x6c>
 8007f58:	2b10      	cmp	r3, #16
 8007f5a:	d073      	beq.n	8008044 <HAL_TIM_ConfigClockSource+0x140>
 8007f5c:	2b10      	cmp	r3, #16
 8007f5e:	d802      	bhi.n	8007f66 <HAL_TIM_ConfigClockSource+0x62>
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d06f      	beq.n	8008044 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007f64:	e078      	b.n	8008058 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007f66:	2b20      	cmp	r3, #32
 8007f68:	d06c      	beq.n	8008044 <HAL_TIM_ConfigClockSource+0x140>
 8007f6a:	2b30      	cmp	r3, #48	; 0x30
 8007f6c:	d06a      	beq.n	8008044 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007f6e:	e073      	b.n	8008058 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007f70:	2b70      	cmp	r3, #112	; 0x70
 8007f72:	d00d      	beq.n	8007f90 <HAL_TIM_ConfigClockSource+0x8c>
 8007f74:	2b70      	cmp	r3, #112	; 0x70
 8007f76:	d804      	bhi.n	8007f82 <HAL_TIM_ConfigClockSource+0x7e>
 8007f78:	2b50      	cmp	r3, #80	; 0x50
 8007f7a:	d033      	beq.n	8007fe4 <HAL_TIM_ConfigClockSource+0xe0>
 8007f7c:	2b60      	cmp	r3, #96	; 0x60
 8007f7e:	d041      	beq.n	8008004 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007f80:	e06a      	b.n	8008058 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f86:	d066      	beq.n	8008056 <HAL_TIM_ConfigClockSource+0x152>
 8007f88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f8c:	d017      	beq.n	8007fbe <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007f8e:	e063      	b.n	8008058 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6818      	ldr	r0, [r3, #0]
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	6899      	ldr	r1, [r3, #8]
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	685a      	ldr	r2, [r3, #4]
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	f000 fb5a 	bl	8008658 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007fb2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	609a      	str	r2, [r3, #8]
      break;
 8007fbc:	e04c      	b.n	8008058 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6818      	ldr	r0, [r3, #0]
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	6899      	ldr	r1, [r3, #8]
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	685a      	ldr	r2, [r3, #4]
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	f000 fb43 	bl	8008658 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	689a      	ldr	r2, [r3, #8]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fe0:	609a      	str	r2, [r3, #8]
      break;
 8007fe2:	e039      	b.n	8008058 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6818      	ldr	r0, [r3, #0]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	6859      	ldr	r1, [r3, #4]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	f000 fab7 	bl	8008564 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2150      	movs	r1, #80	; 0x50
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f000 fb10 	bl	8008622 <TIM_ITRx_SetConfig>
      break;
 8008002:	e029      	b.n	8008058 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6818      	ldr	r0, [r3, #0]
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	6859      	ldr	r1, [r3, #4]
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	461a      	mov	r2, r3
 8008012:	f000 fad6 	bl	80085c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2160      	movs	r1, #96	; 0x60
 800801c:	4618      	mov	r0, r3
 800801e:	f000 fb00 	bl	8008622 <TIM_ITRx_SetConfig>
      break;
 8008022:	e019      	b.n	8008058 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6818      	ldr	r0, [r3, #0]
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	6859      	ldr	r1, [r3, #4]
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	461a      	mov	r2, r3
 8008032:	f000 fa97 	bl	8008564 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2140      	movs	r1, #64	; 0x40
 800803c:	4618      	mov	r0, r3
 800803e:	f000 faf0 	bl	8008622 <TIM_ITRx_SetConfig>
      break;
 8008042:	e009      	b.n	8008058 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4619      	mov	r1, r3
 800804e:	4610      	mov	r0, r2
 8008050:	f000 fae7 	bl	8008622 <TIM_ITRx_SetConfig>
      break;
 8008054:	e000      	b.n	8008058 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008056:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008072:	b480      	push	{r7}
 8008074:	b083      	sub	sp, #12
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800807a:	bf00      	nop
 800807c:	370c      	adds	r7, #12
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr

08008086 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008086:	b480      	push	{r7}
 8008088:	b083      	sub	sp, #12
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800808e:	bf00      	nop
 8008090:	370c      	adds	r7, #12
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr

0800809a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800809a:	b480      	push	{r7}
 800809c:	b083      	sub	sp, #12
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080a2:	bf00      	nop
 80080a4:	370c      	adds	r7, #12
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr

080080ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080ae:	b480      	push	{r7}
 80080b0:	b083      	sub	sp, #12
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080b6:	bf00      	nop
 80080b8:	370c      	adds	r7, #12
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr
	...

080080c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a40      	ldr	r2, [pc, #256]	; (80081d8 <TIM_Base_SetConfig+0x114>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d013      	beq.n	8008104 <TIM_Base_SetConfig+0x40>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080e2:	d00f      	beq.n	8008104 <TIM_Base_SetConfig+0x40>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a3d      	ldr	r2, [pc, #244]	; (80081dc <TIM_Base_SetConfig+0x118>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d00b      	beq.n	8008104 <TIM_Base_SetConfig+0x40>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4a3c      	ldr	r2, [pc, #240]	; (80081e0 <TIM_Base_SetConfig+0x11c>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d007      	beq.n	8008104 <TIM_Base_SetConfig+0x40>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a3b      	ldr	r2, [pc, #236]	; (80081e4 <TIM_Base_SetConfig+0x120>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d003      	beq.n	8008104 <TIM_Base_SetConfig+0x40>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a3a      	ldr	r2, [pc, #232]	; (80081e8 <TIM_Base_SetConfig+0x124>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d108      	bne.n	8008116 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800810a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	4313      	orrs	r3, r2
 8008114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a2f      	ldr	r2, [pc, #188]	; (80081d8 <TIM_Base_SetConfig+0x114>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d02b      	beq.n	8008176 <TIM_Base_SetConfig+0xb2>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008124:	d027      	beq.n	8008176 <TIM_Base_SetConfig+0xb2>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a2c      	ldr	r2, [pc, #176]	; (80081dc <TIM_Base_SetConfig+0x118>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d023      	beq.n	8008176 <TIM_Base_SetConfig+0xb2>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a2b      	ldr	r2, [pc, #172]	; (80081e0 <TIM_Base_SetConfig+0x11c>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d01f      	beq.n	8008176 <TIM_Base_SetConfig+0xb2>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a2a      	ldr	r2, [pc, #168]	; (80081e4 <TIM_Base_SetConfig+0x120>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d01b      	beq.n	8008176 <TIM_Base_SetConfig+0xb2>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a29      	ldr	r2, [pc, #164]	; (80081e8 <TIM_Base_SetConfig+0x124>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d017      	beq.n	8008176 <TIM_Base_SetConfig+0xb2>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a28      	ldr	r2, [pc, #160]	; (80081ec <TIM_Base_SetConfig+0x128>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d013      	beq.n	8008176 <TIM_Base_SetConfig+0xb2>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4a27      	ldr	r2, [pc, #156]	; (80081f0 <TIM_Base_SetConfig+0x12c>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d00f      	beq.n	8008176 <TIM_Base_SetConfig+0xb2>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a26      	ldr	r2, [pc, #152]	; (80081f4 <TIM_Base_SetConfig+0x130>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d00b      	beq.n	8008176 <TIM_Base_SetConfig+0xb2>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a25      	ldr	r2, [pc, #148]	; (80081f8 <TIM_Base_SetConfig+0x134>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d007      	beq.n	8008176 <TIM_Base_SetConfig+0xb2>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a24      	ldr	r2, [pc, #144]	; (80081fc <TIM_Base_SetConfig+0x138>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d003      	beq.n	8008176 <TIM_Base_SetConfig+0xb2>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a23      	ldr	r2, [pc, #140]	; (8008200 <TIM_Base_SetConfig+0x13c>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d108      	bne.n	8008188 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800817c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	4313      	orrs	r3, r2
 8008186:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	695b      	ldr	r3, [r3, #20]
 8008192:	4313      	orrs	r3, r2
 8008194:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	689a      	ldr	r2, [r3, #8]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4a0a      	ldr	r2, [pc, #40]	; (80081d8 <TIM_Base_SetConfig+0x114>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d003      	beq.n	80081bc <TIM_Base_SetConfig+0xf8>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a0c      	ldr	r2, [pc, #48]	; (80081e8 <TIM_Base_SetConfig+0x124>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d103      	bne.n	80081c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	691a      	ldr	r2, [r3, #16]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	615a      	str	r2, [r3, #20]
}
 80081ca:	bf00      	nop
 80081cc:	3714      	adds	r7, #20
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr
 80081d6:	bf00      	nop
 80081d8:	40010000 	.word	0x40010000
 80081dc:	40000400 	.word	0x40000400
 80081e0:	40000800 	.word	0x40000800
 80081e4:	40000c00 	.word	0x40000c00
 80081e8:	40010400 	.word	0x40010400
 80081ec:	40014000 	.word	0x40014000
 80081f0:	40014400 	.word	0x40014400
 80081f4:	40014800 	.word	0x40014800
 80081f8:	40001800 	.word	0x40001800
 80081fc:	40001c00 	.word	0x40001c00
 8008200:	40002000 	.word	0x40002000

08008204 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008204:	b480      	push	{r7}
 8008206:	b087      	sub	sp, #28
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a1b      	ldr	r3, [r3, #32]
 8008212:	f023 0201 	bic.w	r2, r3, #1
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6a1b      	ldr	r3, [r3, #32]
 800821e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	699b      	ldr	r3, [r3, #24]
 800822a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f023 0303 	bic.w	r3, r3, #3
 800823a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	4313      	orrs	r3, r2
 8008244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	f023 0302 	bic.w	r3, r3, #2
 800824c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	697a      	ldr	r2, [r7, #20]
 8008254:	4313      	orrs	r3, r2
 8008256:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a20      	ldr	r2, [pc, #128]	; (80082dc <TIM_OC1_SetConfig+0xd8>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d003      	beq.n	8008268 <TIM_OC1_SetConfig+0x64>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a1f      	ldr	r2, [pc, #124]	; (80082e0 <TIM_OC1_SetConfig+0xdc>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d10c      	bne.n	8008282 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	f023 0308 	bic.w	r3, r3, #8
 800826e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	697a      	ldr	r2, [r7, #20]
 8008276:	4313      	orrs	r3, r2
 8008278:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	f023 0304 	bic.w	r3, r3, #4
 8008280:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a15      	ldr	r2, [pc, #84]	; (80082dc <TIM_OC1_SetConfig+0xd8>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d003      	beq.n	8008292 <TIM_OC1_SetConfig+0x8e>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a14      	ldr	r2, [pc, #80]	; (80082e0 <TIM_OC1_SetConfig+0xdc>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d111      	bne.n	80082b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008298:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80082a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	695b      	ldr	r3, [r3, #20]
 80082a6:	693a      	ldr	r2, [r7, #16]
 80082a8:	4313      	orrs	r3, r2
 80082aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	693a      	ldr	r2, [r7, #16]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	693a      	ldr	r2, [r7, #16]
 80082ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	68fa      	ldr	r2, [r7, #12]
 80082c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	685a      	ldr	r2, [r3, #4]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	697a      	ldr	r2, [r7, #20]
 80082ce:	621a      	str	r2, [r3, #32]
}
 80082d0:	bf00      	nop
 80082d2:	371c      	adds	r7, #28
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr
 80082dc:	40010000 	.word	0x40010000
 80082e0:	40010400 	.word	0x40010400

080082e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b087      	sub	sp, #28
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a1b      	ldr	r3, [r3, #32]
 80082f2:	f023 0210 	bic.w	r2, r3, #16
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a1b      	ldr	r3, [r3, #32]
 80082fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800831a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	021b      	lsls	r3, r3, #8
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	4313      	orrs	r3, r2
 8008326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	f023 0320 	bic.w	r3, r3, #32
 800832e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	011b      	lsls	r3, r3, #4
 8008336:	697a      	ldr	r2, [r7, #20]
 8008338:	4313      	orrs	r3, r2
 800833a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a22      	ldr	r2, [pc, #136]	; (80083c8 <TIM_OC2_SetConfig+0xe4>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d003      	beq.n	800834c <TIM_OC2_SetConfig+0x68>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a21      	ldr	r2, [pc, #132]	; (80083cc <TIM_OC2_SetConfig+0xe8>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d10d      	bne.n	8008368 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008352:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	011b      	lsls	r3, r3, #4
 800835a:	697a      	ldr	r2, [r7, #20]
 800835c:	4313      	orrs	r3, r2
 800835e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008366:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a17      	ldr	r2, [pc, #92]	; (80083c8 <TIM_OC2_SetConfig+0xe4>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d003      	beq.n	8008378 <TIM_OC2_SetConfig+0x94>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a16      	ldr	r2, [pc, #88]	; (80083cc <TIM_OC2_SetConfig+0xe8>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d113      	bne.n	80083a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800837e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008386:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	695b      	ldr	r3, [r3, #20]
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	693a      	ldr	r2, [r7, #16]
 8008390:	4313      	orrs	r3, r2
 8008392:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	699b      	ldr	r3, [r3, #24]
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	693a      	ldr	r2, [r7, #16]
 800839c:	4313      	orrs	r3, r2
 800839e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	693a      	ldr	r2, [r7, #16]
 80083a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	685a      	ldr	r2, [r3, #4]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	621a      	str	r2, [r3, #32]
}
 80083ba:	bf00      	nop
 80083bc:	371c      	adds	r7, #28
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	40010000 	.word	0x40010000
 80083cc:	40010400 	.word	0x40010400

080083d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b087      	sub	sp, #28
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a1b      	ldr	r3, [r3, #32]
 80083de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a1b      	ldr	r3, [r3, #32]
 80083ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	69db      	ldr	r3, [r3, #28]
 80083f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f023 0303 	bic.w	r3, r3, #3
 8008406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	4313      	orrs	r3, r2
 8008410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	021b      	lsls	r3, r3, #8
 8008420:	697a      	ldr	r2, [r7, #20]
 8008422:	4313      	orrs	r3, r2
 8008424:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a21      	ldr	r2, [pc, #132]	; (80084b0 <TIM_OC3_SetConfig+0xe0>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d003      	beq.n	8008436 <TIM_OC3_SetConfig+0x66>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a20      	ldr	r2, [pc, #128]	; (80084b4 <TIM_OC3_SetConfig+0xe4>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d10d      	bne.n	8008452 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800843c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	021b      	lsls	r3, r3, #8
 8008444:	697a      	ldr	r2, [r7, #20]
 8008446:	4313      	orrs	r3, r2
 8008448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a16      	ldr	r2, [pc, #88]	; (80084b0 <TIM_OC3_SetConfig+0xe0>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d003      	beq.n	8008462 <TIM_OC3_SetConfig+0x92>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4a15      	ldr	r2, [pc, #84]	; (80084b4 <TIM_OC3_SetConfig+0xe4>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d113      	bne.n	800848a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008468:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008470:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	695b      	ldr	r3, [r3, #20]
 8008476:	011b      	lsls	r3, r3, #4
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	4313      	orrs	r3, r2
 800847c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	699b      	ldr	r3, [r3, #24]
 8008482:	011b      	lsls	r3, r3, #4
 8008484:	693a      	ldr	r2, [r7, #16]
 8008486:	4313      	orrs	r3, r2
 8008488:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	693a      	ldr	r2, [r7, #16]
 800848e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	685a      	ldr	r2, [r3, #4]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	697a      	ldr	r2, [r7, #20]
 80084a2:	621a      	str	r2, [r3, #32]
}
 80084a4:	bf00      	nop
 80084a6:	371c      	adds	r7, #28
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr
 80084b0:	40010000 	.word	0x40010000
 80084b4:	40010400 	.word	0x40010400

080084b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b087      	sub	sp, #28
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a1b      	ldr	r3, [r3, #32]
 80084c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a1b      	ldr	r3, [r3, #32]
 80084d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	69db      	ldr	r3, [r3, #28]
 80084de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	021b      	lsls	r3, r3, #8
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	4313      	orrs	r3, r2
 80084fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008502:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	031b      	lsls	r3, r3, #12
 800850a:	693a      	ldr	r2, [r7, #16]
 800850c:	4313      	orrs	r3, r2
 800850e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a12      	ldr	r2, [pc, #72]	; (800855c <TIM_OC4_SetConfig+0xa4>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d003      	beq.n	8008520 <TIM_OC4_SetConfig+0x68>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a11      	ldr	r2, [pc, #68]	; (8008560 <TIM_OC4_SetConfig+0xa8>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d109      	bne.n	8008534 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008526:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	695b      	ldr	r3, [r3, #20]
 800852c:	019b      	lsls	r3, r3, #6
 800852e:	697a      	ldr	r2, [r7, #20]
 8008530:	4313      	orrs	r3, r2
 8008532:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	697a      	ldr	r2, [r7, #20]
 8008538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	685a      	ldr	r2, [r3, #4]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	693a      	ldr	r2, [r7, #16]
 800854c:	621a      	str	r2, [r3, #32]
}
 800854e:	bf00      	nop
 8008550:	371c      	adds	r7, #28
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	40010000 	.word	0x40010000
 8008560:	40010400 	.word	0x40010400

08008564 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008564:	b480      	push	{r7}
 8008566:	b087      	sub	sp, #28
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6a1b      	ldr	r3, [r3, #32]
 8008574:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	f023 0201 	bic.w	r2, r3, #1
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800858e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	011b      	lsls	r3, r3, #4
 8008594:	693a      	ldr	r2, [r7, #16]
 8008596:	4313      	orrs	r3, r2
 8008598:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	f023 030a 	bic.w	r3, r3, #10
 80085a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085a2:	697a      	ldr	r2, [r7, #20]
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	4313      	orrs	r3, r2
 80085a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	693a      	ldr	r2, [r7, #16]
 80085ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	697a      	ldr	r2, [r7, #20]
 80085b4:	621a      	str	r2, [r3, #32]
}
 80085b6:	bf00      	nop
 80085b8:	371c      	adds	r7, #28
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr

080085c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085c2:	b480      	push	{r7}
 80085c4:	b087      	sub	sp, #28
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	60f8      	str	r0, [r7, #12]
 80085ca:	60b9      	str	r1, [r7, #8]
 80085cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	f023 0210 	bic.w	r2, r3, #16
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6a1b      	ldr	r3, [r3, #32]
 80085e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	031b      	lsls	r3, r3, #12
 80085f2:	697a      	ldr	r2, [r7, #20]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80085fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	011b      	lsls	r3, r3, #4
 8008604:	693a      	ldr	r2, [r7, #16]
 8008606:	4313      	orrs	r3, r2
 8008608:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	697a      	ldr	r2, [r7, #20]
 800860e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	693a      	ldr	r2, [r7, #16]
 8008614:	621a      	str	r2, [r3, #32]
}
 8008616:	bf00      	nop
 8008618:	371c      	adds	r7, #28
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008622:	b480      	push	{r7}
 8008624:	b085      	sub	sp, #20
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
 800862a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008638:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800863a:	683a      	ldr	r2, [r7, #0]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	4313      	orrs	r3, r2
 8008640:	f043 0307 	orr.w	r3, r3, #7
 8008644:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	609a      	str	r2, [r3, #8]
}
 800864c:	bf00      	nop
 800864e:	3714      	adds	r7, #20
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008658:	b480      	push	{r7}
 800865a:	b087      	sub	sp, #28
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	607a      	str	r2, [r7, #4]
 8008664:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008672:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	021a      	lsls	r2, r3, #8
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	431a      	orrs	r2, r3
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	4313      	orrs	r3, r2
 8008680:	697a      	ldr	r2, [r7, #20]
 8008682:	4313      	orrs	r3, r2
 8008684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	697a      	ldr	r2, [r7, #20]
 800868a:	609a      	str	r2, [r3, #8]
}
 800868c:	bf00      	nop
 800868e:	371c      	adds	r7, #28
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008698:	b480      	push	{r7}
 800869a:	b087      	sub	sp, #28
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	f003 031f 	and.w	r3, r3, #31
 80086aa:	2201      	movs	r2, #1
 80086ac:	fa02 f303 	lsl.w	r3, r2, r3
 80086b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6a1a      	ldr	r2, [r3, #32]
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	43db      	mvns	r3, r3
 80086ba:	401a      	ands	r2, r3
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6a1a      	ldr	r2, [r3, #32]
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	f003 031f 	and.w	r3, r3, #31
 80086ca:	6879      	ldr	r1, [r7, #4]
 80086cc:	fa01 f303 	lsl.w	r3, r1, r3
 80086d0:	431a      	orrs	r2, r3
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	621a      	str	r2, [r3, #32]
}
 80086d6:	bf00      	nop
 80086d8:	371c      	adds	r7, #28
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
	...

080086e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b085      	sub	sp, #20
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d101      	bne.n	80086fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086f8:	2302      	movs	r3, #2
 80086fa:	e05a      	b.n	80087b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2202      	movs	r2, #2
 8008708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008722:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	4313      	orrs	r3, r2
 800872c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68fa      	ldr	r2, [r7, #12]
 8008734:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a21      	ldr	r2, [pc, #132]	; (80087c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d022      	beq.n	8008786 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008748:	d01d      	beq.n	8008786 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a1d      	ldr	r2, [pc, #116]	; (80087c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d018      	beq.n	8008786 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a1b      	ldr	r2, [pc, #108]	; (80087c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d013      	beq.n	8008786 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a1a      	ldr	r2, [pc, #104]	; (80087cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d00e      	beq.n	8008786 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a18      	ldr	r2, [pc, #96]	; (80087d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d009      	beq.n	8008786 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a17      	ldr	r2, [pc, #92]	; (80087d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d004      	beq.n	8008786 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a15      	ldr	r2, [pc, #84]	; (80087d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d10c      	bne.n	80087a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800878c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	68ba      	ldr	r2, [r7, #8]
 8008794:	4313      	orrs	r3, r2
 8008796:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68ba      	ldr	r2, [r7, #8]
 800879e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	40010000 	.word	0x40010000
 80087c4:	40000400 	.word	0x40000400
 80087c8:	40000800 	.word	0x40000800
 80087cc:	40000c00 	.word	0x40000c00
 80087d0:	40010400 	.word	0x40010400
 80087d4:	40014000 	.word	0x40014000
 80087d8:	40001800 	.word	0x40001800

080087dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80087e6:	2300      	movs	r3, #0
 80087e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d101      	bne.n	80087f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80087f4:	2302      	movs	r3, #2
 80087f6:	e03d      	b.n	8008874 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	4313      	orrs	r3, r2
 800880c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	4313      	orrs	r3, r2
 800881a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	4313      	orrs	r3, r2
 8008828:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4313      	orrs	r3, r2
 8008836:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	4313      	orrs	r3, r2
 8008844:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	695b      	ldr	r3, [r3, #20]
 8008850:	4313      	orrs	r3, r2
 8008852:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	69db      	ldr	r3, [r3, #28]
 800885e:	4313      	orrs	r3, r2
 8008860:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68fa      	ldr	r2, [r7, #12]
 8008868:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	3714      	adds	r7, #20
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008888:	bf00      	nop
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800889c:	bf00      	nop
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d101      	bne.n	80088ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e03f      	b.n	800893a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d106      	bne.n	80088d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7fc fbbe 	bl	8005050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2224      	movs	r2, #36	; 0x24
 80088d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68da      	ldr	r2, [r3, #12]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80088ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 fb97 	bl	8009020 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	691a      	ldr	r2, [r3, #16]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008900:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	695a      	ldr	r2, [r3, #20]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008910:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	68da      	ldr	r2, [r3, #12]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008920:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2220      	movs	r2, #32
 800892c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2220      	movs	r2, #32
 8008934:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3708      	adds	r7, #8
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b088      	sub	sp, #32
 8008946:	af02      	add	r7, sp, #8
 8008948:	60f8      	str	r0, [r7, #12]
 800894a:	60b9      	str	r1, [r7, #8]
 800894c:	603b      	str	r3, [r7, #0]
 800894e:	4613      	mov	r3, r2
 8008950:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008952:	2300      	movs	r3, #0
 8008954:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800895c:	b2db      	uxtb	r3, r3
 800895e:	2b20      	cmp	r3, #32
 8008960:	f040 8083 	bne.w	8008a6a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d002      	beq.n	8008970 <HAL_UART_Transmit+0x2e>
 800896a:	88fb      	ldrh	r3, [r7, #6]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d101      	bne.n	8008974 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	e07b      	b.n	8008a6c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800897a:	2b01      	cmp	r3, #1
 800897c:	d101      	bne.n	8008982 <HAL_UART_Transmit+0x40>
 800897e:	2302      	movs	r3, #2
 8008980:	e074      	b.n	8008a6c <HAL_UART_Transmit+0x12a>
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2201      	movs	r2, #1
 8008986:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2200      	movs	r2, #0
 800898e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2221      	movs	r2, #33	; 0x21
 8008994:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008998:	f7fc fd06 	bl	80053a8 <HAL_GetTick>
 800899c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	88fa      	ldrh	r2, [r7, #6]
 80089a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	88fa      	ldrh	r2, [r7, #6]
 80089a8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80089b2:	e042      	b.n	8008a3a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	3b01      	subs	r3, #1
 80089bc:	b29a      	uxth	r2, r3
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089ca:	d122      	bne.n	8008a12 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	9300      	str	r3, [sp, #0]
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	2200      	movs	r2, #0
 80089d4:	2180      	movs	r1, #128	; 0x80
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	f000 f9b6 	bl	8008d48 <UART_WaitOnFlagUntilTimeout>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d001      	beq.n	80089e6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80089e2:	2303      	movs	r3, #3
 80089e4:	e042      	b.n	8008a6c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	881b      	ldrh	r3, [r3, #0]
 80089ee:	461a      	mov	r2, r3
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089f8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d103      	bne.n	8008a0a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	3302      	adds	r3, #2
 8008a06:	60bb      	str	r3, [r7, #8]
 8008a08:	e017      	b.n	8008a3a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	60bb      	str	r3, [r7, #8]
 8008a10:	e013      	b.n	8008a3a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	9300      	str	r3, [sp, #0]
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	2180      	movs	r1, #128	; 0x80
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f000 f993 	bl	8008d48 <UART_WaitOnFlagUntilTimeout>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d001      	beq.n	8008a2c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008a28:	2303      	movs	r3, #3
 8008a2a:	e01f      	b.n	8008a6c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	1c5a      	adds	r2, r3, #1
 8008a30:	60ba      	str	r2, [r7, #8]
 8008a32:	781a      	ldrb	r2, [r3, #0]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1b7      	bne.n	80089b4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	9300      	str	r3, [sp, #0]
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	2140      	movs	r1, #64	; 0x40
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f000 f97a 	bl	8008d48 <UART_WaitOnFlagUntilTimeout>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d001      	beq.n	8008a5e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	e006      	b.n	8008a6c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2220      	movs	r2, #32
 8008a62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008a66:	2300      	movs	r3, #0
 8008a68:	e000      	b.n	8008a6c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008a6a:	2302      	movs	r3, #2
  }
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3718      	adds	r7, #24
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b085      	sub	sp, #20
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	4613      	mov	r3, r2
 8008a80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	2b20      	cmp	r3, #32
 8008a8c:	d140      	bne.n	8008b10 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d002      	beq.n	8008a9a <HAL_UART_Receive_IT+0x26>
 8008a94:	88fb      	ldrh	r3, [r7, #6]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d101      	bne.n	8008a9e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e039      	b.n	8008b12 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d101      	bne.n	8008aac <HAL_UART_Receive_IT+0x38>
 8008aa8:	2302      	movs	r3, #2
 8008aaa:	e032      	b.n	8008b12 <HAL_UART_Receive_IT+0x9e>
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	68ba      	ldr	r2, [r7, #8]
 8008ab8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	88fa      	ldrh	r2, [r7, #6]
 8008abe:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	88fa      	ldrh	r2, [r7, #6]
 8008ac4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2222      	movs	r2, #34	; 0x22
 8008ad0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68da      	ldr	r2, [r3, #12]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008aea:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	695a      	ldr	r2, [r3, #20]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f042 0201 	orr.w	r2, r2, #1
 8008afa:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68da      	ldr	r2, [r3, #12]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f042 0220 	orr.w	r2, r2, #32
 8008b0a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	e000      	b.n	8008b12 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008b10:	2302      	movs	r3, #2
  }
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3714      	adds	r7, #20
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
	...

08008b20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b088      	sub	sp, #32
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	695b      	ldr	r3, [r3, #20]
 8008b3e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008b40:	2300      	movs	r3, #0
 8008b42:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008b44:	2300      	movs	r3, #0
 8008b46:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	f003 030f 	and.w	r3, r3, #15
 8008b4e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10d      	bne.n	8008b72 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	f003 0320 	and.w	r3, r3, #32
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d008      	beq.n	8008b72 <HAL_UART_IRQHandler+0x52>
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	f003 0320 	and.w	r3, r3, #32
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d003      	beq.n	8008b72 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 f9d6 	bl	8008f1c <UART_Receive_IT>
      return;
 8008b70:	e0d1      	b.n	8008d16 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	f000 80b0 	beq.w	8008cda <HAL_UART_IRQHandler+0x1ba>
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	f003 0301 	and.w	r3, r3, #1
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d105      	bne.n	8008b90 <HAL_UART_IRQHandler+0x70>
 8008b84:	69bb      	ldr	r3, [r7, #24]
 8008b86:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	f000 80a5 	beq.w	8008cda <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	f003 0301 	and.w	r3, r3, #1
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00a      	beq.n	8008bb0 <HAL_UART_IRQHandler+0x90>
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d005      	beq.n	8008bb0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ba8:	f043 0201 	orr.w	r2, r3, #1
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	f003 0304 	and.w	r3, r3, #4
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00a      	beq.n	8008bd0 <HAL_UART_IRQHandler+0xb0>
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	f003 0301 	and.w	r3, r3, #1
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d005      	beq.n	8008bd0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bc8:	f043 0202 	orr.w	r2, r3, #2
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	f003 0302 	and.w	r3, r3, #2
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d00a      	beq.n	8008bf0 <HAL_UART_IRQHandler+0xd0>
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	f003 0301 	and.w	r3, r3, #1
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d005      	beq.n	8008bf0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008be8:	f043 0204 	orr.w	r2, r3, #4
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	f003 0308 	and.w	r3, r3, #8
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00f      	beq.n	8008c1a <HAL_UART_IRQHandler+0xfa>
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	f003 0320 	and.w	r3, r3, #32
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d104      	bne.n	8008c0e <HAL_UART_IRQHandler+0xee>
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	f003 0301 	and.w	r3, r3, #1
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d005      	beq.n	8008c1a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c12:	f043 0208 	orr.w	r2, r3, #8
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d078      	beq.n	8008d14 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	f003 0320 	and.w	r3, r3, #32
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d007      	beq.n	8008c3c <HAL_UART_IRQHandler+0x11c>
 8008c2c:	69bb      	ldr	r3, [r7, #24]
 8008c2e:	f003 0320 	and.w	r3, r3, #32
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d002      	beq.n	8008c3c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 f970 	bl	8008f1c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	695b      	ldr	r3, [r3, #20]
 8008c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c46:	2b40      	cmp	r3, #64	; 0x40
 8008c48:	bf0c      	ite	eq
 8008c4a:	2301      	moveq	r3, #1
 8008c4c:	2300      	movne	r3, #0
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c56:	f003 0308 	and.w	r3, r3, #8
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d102      	bne.n	8008c64 <HAL_UART_IRQHandler+0x144>
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d031      	beq.n	8008cc8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 f8b9 	bl	8008ddc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	695b      	ldr	r3, [r3, #20]
 8008c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c74:	2b40      	cmp	r3, #64	; 0x40
 8008c76:	d123      	bne.n	8008cc0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	695a      	ldr	r2, [r3, #20]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c86:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d013      	beq.n	8008cb8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c94:	4a21      	ldr	r2, [pc, #132]	; (8008d1c <HAL_UART_IRQHandler+0x1fc>)
 8008c96:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7fc fc93 	bl	80055c8 <HAL_DMA_Abort_IT>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d016      	beq.n	8008cd6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008cb2:	4610      	mov	r0, r2
 8008cb4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cb6:	e00e      	b.n	8008cd6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 f83b 	bl	8008d34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cbe:	e00a      	b.n	8008cd6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f837 	bl	8008d34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cc6:	e006      	b.n	8008cd6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 f833 	bl	8008d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008cd4:	e01e      	b.n	8008d14 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cd6:	bf00      	nop
    return;
 8008cd8:	e01c      	b.n	8008d14 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d008      	beq.n	8008cf6 <HAL_UART_IRQHandler+0x1d6>
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d003      	beq.n	8008cf6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 f8a6 	bl	8008e40 <UART_Transmit_IT>
    return;
 8008cf4:	e00f      	b.n	8008d16 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d00a      	beq.n	8008d16 <HAL_UART_IRQHandler+0x1f6>
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d005      	beq.n	8008d16 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f8ee 	bl	8008eec <UART_EndTransmit_IT>
    return;
 8008d10:	bf00      	nop
 8008d12:	e000      	b.n	8008d16 <HAL_UART_IRQHandler+0x1f6>
    return;
 8008d14:	bf00      	nop
  }
}
 8008d16:	3720      	adds	r7, #32
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	08008e19 	.word	0x08008e19

08008d20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008d28:	bf00      	nop
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008d3c:	bf00      	nop
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	603b      	str	r3, [r7, #0]
 8008d54:	4613      	mov	r3, r2
 8008d56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d58:	e02c      	b.n	8008db4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d60:	d028      	beq.n	8008db4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d007      	beq.n	8008d78 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d68:	f7fc fb1e 	bl	80053a8 <HAL_GetTick>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	69ba      	ldr	r2, [r7, #24]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d21d      	bcs.n	8008db4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	68da      	ldr	r2, [r3, #12]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008d86:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	695a      	ldr	r2, [r3, #20]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f022 0201 	bic.w	r2, r2, #1
 8008d96:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2220      	movs	r2, #32
 8008d9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2220      	movs	r2, #32
 8008da4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008db0:	2303      	movs	r3, #3
 8008db2:	e00f      	b.n	8008dd4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	4013      	ands	r3, r2
 8008dbe:	68ba      	ldr	r2, [r7, #8]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	bf0c      	ite	eq
 8008dc4:	2301      	moveq	r3, #1
 8008dc6:	2300      	movne	r3, #0
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	461a      	mov	r2, r3
 8008dcc:	79fb      	ldrb	r3, [r7, #7]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d0c3      	beq.n	8008d5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008dd2:	2300      	movs	r3, #0
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3710      	adds	r7, #16
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	68da      	ldr	r2, [r3, #12]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008df2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	695a      	ldr	r2, [r3, #20]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f022 0201 	bic.w	r2, r2, #1
 8008e02:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2220      	movs	r2, #32
 8008e08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008e0c:	bf00      	nop
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	f7ff ff7e 	bl	8008d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e38:	bf00      	nop
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b085      	sub	sp, #20
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	2b21      	cmp	r3, #33	; 0x21
 8008e52:	d144      	bne.n	8008ede <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e5c:	d11a      	bne.n	8008e94 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a1b      	ldr	r3, [r3, #32]
 8008e62:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	881b      	ldrh	r3, [r3, #0]
 8008e68:	461a      	mov	r2, r3
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e72:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	691b      	ldr	r3, [r3, #16]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d105      	bne.n	8008e88 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6a1b      	ldr	r3, [r3, #32]
 8008e80:	1c9a      	adds	r2, r3, #2
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	621a      	str	r2, [r3, #32]
 8008e86:	e00e      	b.n	8008ea6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6a1b      	ldr	r3, [r3, #32]
 8008e8c:	1c5a      	adds	r2, r3, #1
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	621a      	str	r2, [r3, #32]
 8008e92:	e008      	b.n	8008ea6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6a1b      	ldr	r3, [r3, #32]
 8008e98:	1c59      	adds	r1, r3, #1
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	6211      	str	r1, [r2, #32]
 8008e9e:	781a      	ldrb	r2, [r3, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	3b01      	subs	r3, #1
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d10f      	bne.n	8008eda <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	68da      	ldr	r2, [r3, #12]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ec8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	68da      	ldr	r2, [r3, #12]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ed8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008eda:	2300      	movs	r3, #0
 8008edc:	e000      	b.n	8008ee0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008ede:	2302      	movs	r3, #2
  }
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3714      	adds	r7, #20
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	68da      	ldr	r2, [r3, #12]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f02:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2220      	movs	r2, #32
 8008f08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f7ff ff07 	bl	8008d20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3708      	adds	r7, #8
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	2b22      	cmp	r3, #34	; 0x22
 8008f2e:	d171      	bne.n	8009014 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f38:	d123      	bne.n	8008f82 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f3e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	691b      	ldr	r3, [r3, #16]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d10e      	bne.n	8008f66 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f54:	b29a      	uxth	r2, r3
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f5e:	1c9a      	adds	r2, r3, #2
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	629a      	str	r2, [r3, #40]	; 0x28
 8008f64:	e029      	b.n	8008fba <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	b29a      	uxth	r2, r3
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f7a:	1c5a      	adds	r2, r3, #1
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	629a      	str	r2, [r3, #40]	; 0x28
 8008f80:	e01b      	b.n	8008fba <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d10a      	bne.n	8008fa0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	6858      	ldr	r0, [r3, #4]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f94:	1c59      	adds	r1, r3, #1
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	6291      	str	r1, [r2, #40]	; 0x28
 8008f9a:	b2c2      	uxtb	r2, r0
 8008f9c:	701a      	strb	r2, [r3, #0]
 8008f9e:	e00c      	b.n	8008fba <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	b2da      	uxtb	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fac:	1c58      	adds	r0, r3, #1
 8008fae:	6879      	ldr	r1, [r7, #4]
 8008fb0:	6288      	str	r0, [r1, #40]	; 0x28
 8008fb2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008fb6:	b2d2      	uxtb	r2, r2
 8008fb8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d120      	bne.n	8009010 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	68da      	ldr	r2, [r3, #12]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f022 0220 	bic.w	r2, r2, #32
 8008fdc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	68da      	ldr	r2, [r3, #12]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008fec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	695a      	ldr	r2, [r3, #20]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f022 0201 	bic.w	r2, r2, #1
 8008ffc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2220      	movs	r2, #32
 8009002:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f7fb fdfc 	bl	8004c04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800900c:	2300      	movs	r3, #0
 800900e:	e002      	b.n	8009016 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009010:	2300      	movs	r3, #0
 8009012:	e000      	b.n	8009016 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8009014:	2302      	movs	r3, #2
  }
}
 8009016:	4618      	mov	r0, r3
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
	...

08009020 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009024:	b085      	sub	sp, #20
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	691b      	ldr	r3, [r3, #16]
 8009030:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	68da      	ldr	r2, [r3, #12]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	430a      	orrs	r2, r1
 800903e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	689a      	ldr	r2, [r3, #8]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	691b      	ldr	r3, [r3, #16]
 8009048:	431a      	orrs	r2, r3
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	695b      	ldr	r3, [r3, #20]
 800904e:	431a      	orrs	r2, r3
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	69db      	ldr	r3, [r3, #28]
 8009054:	4313      	orrs	r3, r2
 8009056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009062:	f023 030c 	bic.w	r3, r3, #12
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	6812      	ldr	r2, [r2, #0]
 800906a:	68f9      	ldr	r1, [r7, #12]
 800906c:	430b      	orrs	r3, r1
 800906e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	695b      	ldr	r3, [r3, #20]
 8009076:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	699a      	ldr	r2, [r3, #24]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	430a      	orrs	r2, r1
 8009084:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	69db      	ldr	r3, [r3, #28]
 800908a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800908e:	f040 818b 	bne.w	80093a8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4ac1      	ldr	r2, [pc, #772]	; (800939c <UART_SetConfig+0x37c>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d005      	beq.n	80090a8 <UART_SetConfig+0x88>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4abf      	ldr	r2, [pc, #764]	; (80093a0 <UART_SetConfig+0x380>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	f040 80bd 	bne.w	8009222 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80090a8:	f7fe fc32 	bl	8007910 <HAL_RCC_GetPCLK2Freq>
 80090ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	461d      	mov	r5, r3
 80090b2:	f04f 0600 	mov.w	r6, #0
 80090b6:	46a8      	mov	r8, r5
 80090b8:	46b1      	mov	r9, r6
 80090ba:	eb18 0308 	adds.w	r3, r8, r8
 80090be:	eb49 0409 	adc.w	r4, r9, r9
 80090c2:	4698      	mov	r8, r3
 80090c4:	46a1      	mov	r9, r4
 80090c6:	eb18 0805 	adds.w	r8, r8, r5
 80090ca:	eb49 0906 	adc.w	r9, r9, r6
 80090ce:	f04f 0100 	mov.w	r1, #0
 80090d2:	f04f 0200 	mov.w	r2, #0
 80090d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80090da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80090de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80090e2:	4688      	mov	r8, r1
 80090e4:	4691      	mov	r9, r2
 80090e6:	eb18 0005 	adds.w	r0, r8, r5
 80090ea:	eb49 0106 	adc.w	r1, r9, r6
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	461d      	mov	r5, r3
 80090f4:	f04f 0600 	mov.w	r6, #0
 80090f8:	196b      	adds	r3, r5, r5
 80090fa:	eb46 0406 	adc.w	r4, r6, r6
 80090fe:	461a      	mov	r2, r3
 8009100:	4623      	mov	r3, r4
 8009102:	f7f7 fd71 	bl	8000be8 <__aeabi_uldivmod>
 8009106:	4603      	mov	r3, r0
 8009108:	460c      	mov	r4, r1
 800910a:	461a      	mov	r2, r3
 800910c:	4ba5      	ldr	r3, [pc, #660]	; (80093a4 <UART_SetConfig+0x384>)
 800910e:	fba3 2302 	umull	r2, r3, r3, r2
 8009112:	095b      	lsrs	r3, r3, #5
 8009114:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	461d      	mov	r5, r3
 800911c:	f04f 0600 	mov.w	r6, #0
 8009120:	46a9      	mov	r9, r5
 8009122:	46b2      	mov	sl, r6
 8009124:	eb19 0309 	adds.w	r3, r9, r9
 8009128:	eb4a 040a 	adc.w	r4, sl, sl
 800912c:	4699      	mov	r9, r3
 800912e:	46a2      	mov	sl, r4
 8009130:	eb19 0905 	adds.w	r9, r9, r5
 8009134:	eb4a 0a06 	adc.w	sl, sl, r6
 8009138:	f04f 0100 	mov.w	r1, #0
 800913c:	f04f 0200 	mov.w	r2, #0
 8009140:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009144:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009148:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800914c:	4689      	mov	r9, r1
 800914e:	4692      	mov	sl, r2
 8009150:	eb19 0005 	adds.w	r0, r9, r5
 8009154:	eb4a 0106 	adc.w	r1, sl, r6
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	461d      	mov	r5, r3
 800915e:	f04f 0600 	mov.w	r6, #0
 8009162:	196b      	adds	r3, r5, r5
 8009164:	eb46 0406 	adc.w	r4, r6, r6
 8009168:	461a      	mov	r2, r3
 800916a:	4623      	mov	r3, r4
 800916c:	f7f7 fd3c 	bl	8000be8 <__aeabi_uldivmod>
 8009170:	4603      	mov	r3, r0
 8009172:	460c      	mov	r4, r1
 8009174:	461a      	mov	r2, r3
 8009176:	4b8b      	ldr	r3, [pc, #556]	; (80093a4 <UART_SetConfig+0x384>)
 8009178:	fba3 1302 	umull	r1, r3, r3, r2
 800917c:	095b      	lsrs	r3, r3, #5
 800917e:	2164      	movs	r1, #100	; 0x64
 8009180:	fb01 f303 	mul.w	r3, r1, r3
 8009184:	1ad3      	subs	r3, r2, r3
 8009186:	00db      	lsls	r3, r3, #3
 8009188:	3332      	adds	r3, #50	; 0x32
 800918a:	4a86      	ldr	r2, [pc, #536]	; (80093a4 <UART_SetConfig+0x384>)
 800918c:	fba2 2303 	umull	r2, r3, r2, r3
 8009190:	095b      	lsrs	r3, r3, #5
 8009192:	005b      	lsls	r3, r3, #1
 8009194:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009198:	4498      	add	r8, r3
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	461d      	mov	r5, r3
 800919e:	f04f 0600 	mov.w	r6, #0
 80091a2:	46a9      	mov	r9, r5
 80091a4:	46b2      	mov	sl, r6
 80091a6:	eb19 0309 	adds.w	r3, r9, r9
 80091aa:	eb4a 040a 	adc.w	r4, sl, sl
 80091ae:	4699      	mov	r9, r3
 80091b0:	46a2      	mov	sl, r4
 80091b2:	eb19 0905 	adds.w	r9, r9, r5
 80091b6:	eb4a 0a06 	adc.w	sl, sl, r6
 80091ba:	f04f 0100 	mov.w	r1, #0
 80091be:	f04f 0200 	mov.w	r2, #0
 80091c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80091c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80091ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80091ce:	4689      	mov	r9, r1
 80091d0:	4692      	mov	sl, r2
 80091d2:	eb19 0005 	adds.w	r0, r9, r5
 80091d6:	eb4a 0106 	adc.w	r1, sl, r6
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	461d      	mov	r5, r3
 80091e0:	f04f 0600 	mov.w	r6, #0
 80091e4:	196b      	adds	r3, r5, r5
 80091e6:	eb46 0406 	adc.w	r4, r6, r6
 80091ea:	461a      	mov	r2, r3
 80091ec:	4623      	mov	r3, r4
 80091ee:	f7f7 fcfb 	bl	8000be8 <__aeabi_uldivmod>
 80091f2:	4603      	mov	r3, r0
 80091f4:	460c      	mov	r4, r1
 80091f6:	461a      	mov	r2, r3
 80091f8:	4b6a      	ldr	r3, [pc, #424]	; (80093a4 <UART_SetConfig+0x384>)
 80091fa:	fba3 1302 	umull	r1, r3, r3, r2
 80091fe:	095b      	lsrs	r3, r3, #5
 8009200:	2164      	movs	r1, #100	; 0x64
 8009202:	fb01 f303 	mul.w	r3, r1, r3
 8009206:	1ad3      	subs	r3, r2, r3
 8009208:	00db      	lsls	r3, r3, #3
 800920a:	3332      	adds	r3, #50	; 0x32
 800920c:	4a65      	ldr	r2, [pc, #404]	; (80093a4 <UART_SetConfig+0x384>)
 800920e:	fba2 2303 	umull	r2, r3, r2, r3
 8009212:	095b      	lsrs	r3, r3, #5
 8009214:	f003 0207 	and.w	r2, r3, #7
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4442      	add	r2, r8
 800921e:	609a      	str	r2, [r3, #8]
 8009220:	e26f      	b.n	8009702 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009222:	f7fe fb61 	bl	80078e8 <HAL_RCC_GetPCLK1Freq>
 8009226:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	461d      	mov	r5, r3
 800922c:	f04f 0600 	mov.w	r6, #0
 8009230:	46a8      	mov	r8, r5
 8009232:	46b1      	mov	r9, r6
 8009234:	eb18 0308 	adds.w	r3, r8, r8
 8009238:	eb49 0409 	adc.w	r4, r9, r9
 800923c:	4698      	mov	r8, r3
 800923e:	46a1      	mov	r9, r4
 8009240:	eb18 0805 	adds.w	r8, r8, r5
 8009244:	eb49 0906 	adc.w	r9, r9, r6
 8009248:	f04f 0100 	mov.w	r1, #0
 800924c:	f04f 0200 	mov.w	r2, #0
 8009250:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009254:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009258:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800925c:	4688      	mov	r8, r1
 800925e:	4691      	mov	r9, r2
 8009260:	eb18 0005 	adds.w	r0, r8, r5
 8009264:	eb49 0106 	adc.w	r1, r9, r6
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	461d      	mov	r5, r3
 800926e:	f04f 0600 	mov.w	r6, #0
 8009272:	196b      	adds	r3, r5, r5
 8009274:	eb46 0406 	adc.w	r4, r6, r6
 8009278:	461a      	mov	r2, r3
 800927a:	4623      	mov	r3, r4
 800927c:	f7f7 fcb4 	bl	8000be8 <__aeabi_uldivmod>
 8009280:	4603      	mov	r3, r0
 8009282:	460c      	mov	r4, r1
 8009284:	461a      	mov	r2, r3
 8009286:	4b47      	ldr	r3, [pc, #284]	; (80093a4 <UART_SetConfig+0x384>)
 8009288:	fba3 2302 	umull	r2, r3, r3, r2
 800928c:	095b      	lsrs	r3, r3, #5
 800928e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	461d      	mov	r5, r3
 8009296:	f04f 0600 	mov.w	r6, #0
 800929a:	46a9      	mov	r9, r5
 800929c:	46b2      	mov	sl, r6
 800929e:	eb19 0309 	adds.w	r3, r9, r9
 80092a2:	eb4a 040a 	adc.w	r4, sl, sl
 80092a6:	4699      	mov	r9, r3
 80092a8:	46a2      	mov	sl, r4
 80092aa:	eb19 0905 	adds.w	r9, r9, r5
 80092ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80092b2:	f04f 0100 	mov.w	r1, #0
 80092b6:	f04f 0200 	mov.w	r2, #0
 80092ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80092be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80092c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80092c6:	4689      	mov	r9, r1
 80092c8:	4692      	mov	sl, r2
 80092ca:	eb19 0005 	adds.w	r0, r9, r5
 80092ce:	eb4a 0106 	adc.w	r1, sl, r6
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	461d      	mov	r5, r3
 80092d8:	f04f 0600 	mov.w	r6, #0
 80092dc:	196b      	adds	r3, r5, r5
 80092de:	eb46 0406 	adc.w	r4, r6, r6
 80092e2:	461a      	mov	r2, r3
 80092e4:	4623      	mov	r3, r4
 80092e6:	f7f7 fc7f 	bl	8000be8 <__aeabi_uldivmod>
 80092ea:	4603      	mov	r3, r0
 80092ec:	460c      	mov	r4, r1
 80092ee:	461a      	mov	r2, r3
 80092f0:	4b2c      	ldr	r3, [pc, #176]	; (80093a4 <UART_SetConfig+0x384>)
 80092f2:	fba3 1302 	umull	r1, r3, r3, r2
 80092f6:	095b      	lsrs	r3, r3, #5
 80092f8:	2164      	movs	r1, #100	; 0x64
 80092fa:	fb01 f303 	mul.w	r3, r1, r3
 80092fe:	1ad3      	subs	r3, r2, r3
 8009300:	00db      	lsls	r3, r3, #3
 8009302:	3332      	adds	r3, #50	; 0x32
 8009304:	4a27      	ldr	r2, [pc, #156]	; (80093a4 <UART_SetConfig+0x384>)
 8009306:	fba2 2303 	umull	r2, r3, r2, r3
 800930a:	095b      	lsrs	r3, r3, #5
 800930c:	005b      	lsls	r3, r3, #1
 800930e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009312:	4498      	add	r8, r3
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	461d      	mov	r5, r3
 8009318:	f04f 0600 	mov.w	r6, #0
 800931c:	46a9      	mov	r9, r5
 800931e:	46b2      	mov	sl, r6
 8009320:	eb19 0309 	adds.w	r3, r9, r9
 8009324:	eb4a 040a 	adc.w	r4, sl, sl
 8009328:	4699      	mov	r9, r3
 800932a:	46a2      	mov	sl, r4
 800932c:	eb19 0905 	adds.w	r9, r9, r5
 8009330:	eb4a 0a06 	adc.w	sl, sl, r6
 8009334:	f04f 0100 	mov.w	r1, #0
 8009338:	f04f 0200 	mov.w	r2, #0
 800933c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009340:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009344:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009348:	4689      	mov	r9, r1
 800934a:	4692      	mov	sl, r2
 800934c:	eb19 0005 	adds.w	r0, r9, r5
 8009350:	eb4a 0106 	adc.w	r1, sl, r6
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	461d      	mov	r5, r3
 800935a:	f04f 0600 	mov.w	r6, #0
 800935e:	196b      	adds	r3, r5, r5
 8009360:	eb46 0406 	adc.w	r4, r6, r6
 8009364:	461a      	mov	r2, r3
 8009366:	4623      	mov	r3, r4
 8009368:	f7f7 fc3e 	bl	8000be8 <__aeabi_uldivmod>
 800936c:	4603      	mov	r3, r0
 800936e:	460c      	mov	r4, r1
 8009370:	461a      	mov	r2, r3
 8009372:	4b0c      	ldr	r3, [pc, #48]	; (80093a4 <UART_SetConfig+0x384>)
 8009374:	fba3 1302 	umull	r1, r3, r3, r2
 8009378:	095b      	lsrs	r3, r3, #5
 800937a:	2164      	movs	r1, #100	; 0x64
 800937c:	fb01 f303 	mul.w	r3, r1, r3
 8009380:	1ad3      	subs	r3, r2, r3
 8009382:	00db      	lsls	r3, r3, #3
 8009384:	3332      	adds	r3, #50	; 0x32
 8009386:	4a07      	ldr	r2, [pc, #28]	; (80093a4 <UART_SetConfig+0x384>)
 8009388:	fba2 2303 	umull	r2, r3, r2, r3
 800938c:	095b      	lsrs	r3, r3, #5
 800938e:	f003 0207 	and.w	r2, r3, #7
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4442      	add	r2, r8
 8009398:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800939a:	e1b2      	b.n	8009702 <UART_SetConfig+0x6e2>
 800939c:	40011000 	.word	0x40011000
 80093a0:	40011400 	.word	0x40011400
 80093a4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4ad7      	ldr	r2, [pc, #860]	; (800970c <UART_SetConfig+0x6ec>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d005      	beq.n	80093be <UART_SetConfig+0x39e>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4ad6      	ldr	r2, [pc, #856]	; (8009710 <UART_SetConfig+0x6f0>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	f040 80d1 	bne.w	8009560 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80093be:	f7fe faa7 	bl	8007910 <HAL_RCC_GetPCLK2Freq>
 80093c2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	469a      	mov	sl, r3
 80093c8:	f04f 0b00 	mov.w	fp, #0
 80093cc:	46d0      	mov	r8, sl
 80093ce:	46d9      	mov	r9, fp
 80093d0:	eb18 0308 	adds.w	r3, r8, r8
 80093d4:	eb49 0409 	adc.w	r4, r9, r9
 80093d8:	4698      	mov	r8, r3
 80093da:	46a1      	mov	r9, r4
 80093dc:	eb18 080a 	adds.w	r8, r8, sl
 80093e0:	eb49 090b 	adc.w	r9, r9, fp
 80093e4:	f04f 0100 	mov.w	r1, #0
 80093e8:	f04f 0200 	mov.w	r2, #0
 80093ec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80093f0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80093f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80093f8:	4688      	mov	r8, r1
 80093fa:	4691      	mov	r9, r2
 80093fc:	eb1a 0508 	adds.w	r5, sl, r8
 8009400:	eb4b 0609 	adc.w	r6, fp, r9
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	4619      	mov	r1, r3
 800940a:	f04f 0200 	mov.w	r2, #0
 800940e:	f04f 0300 	mov.w	r3, #0
 8009412:	f04f 0400 	mov.w	r4, #0
 8009416:	0094      	lsls	r4, r2, #2
 8009418:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800941c:	008b      	lsls	r3, r1, #2
 800941e:	461a      	mov	r2, r3
 8009420:	4623      	mov	r3, r4
 8009422:	4628      	mov	r0, r5
 8009424:	4631      	mov	r1, r6
 8009426:	f7f7 fbdf 	bl	8000be8 <__aeabi_uldivmod>
 800942a:	4603      	mov	r3, r0
 800942c:	460c      	mov	r4, r1
 800942e:	461a      	mov	r2, r3
 8009430:	4bb8      	ldr	r3, [pc, #736]	; (8009714 <UART_SetConfig+0x6f4>)
 8009432:	fba3 2302 	umull	r2, r3, r3, r2
 8009436:	095b      	lsrs	r3, r3, #5
 8009438:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	469b      	mov	fp, r3
 8009440:	f04f 0c00 	mov.w	ip, #0
 8009444:	46d9      	mov	r9, fp
 8009446:	46e2      	mov	sl, ip
 8009448:	eb19 0309 	adds.w	r3, r9, r9
 800944c:	eb4a 040a 	adc.w	r4, sl, sl
 8009450:	4699      	mov	r9, r3
 8009452:	46a2      	mov	sl, r4
 8009454:	eb19 090b 	adds.w	r9, r9, fp
 8009458:	eb4a 0a0c 	adc.w	sl, sl, ip
 800945c:	f04f 0100 	mov.w	r1, #0
 8009460:	f04f 0200 	mov.w	r2, #0
 8009464:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009468:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800946c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009470:	4689      	mov	r9, r1
 8009472:	4692      	mov	sl, r2
 8009474:	eb1b 0509 	adds.w	r5, fp, r9
 8009478:	eb4c 060a 	adc.w	r6, ip, sl
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	4619      	mov	r1, r3
 8009482:	f04f 0200 	mov.w	r2, #0
 8009486:	f04f 0300 	mov.w	r3, #0
 800948a:	f04f 0400 	mov.w	r4, #0
 800948e:	0094      	lsls	r4, r2, #2
 8009490:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009494:	008b      	lsls	r3, r1, #2
 8009496:	461a      	mov	r2, r3
 8009498:	4623      	mov	r3, r4
 800949a:	4628      	mov	r0, r5
 800949c:	4631      	mov	r1, r6
 800949e:	f7f7 fba3 	bl	8000be8 <__aeabi_uldivmod>
 80094a2:	4603      	mov	r3, r0
 80094a4:	460c      	mov	r4, r1
 80094a6:	461a      	mov	r2, r3
 80094a8:	4b9a      	ldr	r3, [pc, #616]	; (8009714 <UART_SetConfig+0x6f4>)
 80094aa:	fba3 1302 	umull	r1, r3, r3, r2
 80094ae:	095b      	lsrs	r3, r3, #5
 80094b0:	2164      	movs	r1, #100	; 0x64
 80094b2:	fb01 f303 	mul.w	r3, r1, r3
 80094b6:	1ad3      	subs	r3, r2, r3
 80094b8:	011b      	lsls	r3, r3, #4
 80094ba:	3332      	adds	r3, #50	; 0x32
 80094bc:	4a95      	ldr	r2, [pc, #596]	; (8009714 <UART_SetConfig+0x6f4>)
 80094be:	fba2 2303 	umull	r2, r3, r2, r3
 80094c2:	095b      	lsrs	r3, r3, #5
 80094c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094c8:	4498      	add	r8, r3
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	469b      	mov	fp, r3
 80094ce:	f04f 0c00 	mov.w	ip, #0
 80094d2:	46d9      	mov	r9, fp
 80094d4:	46e2      	mov	sl, ip
 80094d6:	eb19 0309 	adds.w	r3, r9, r9
 80094da:	eb4a 040a 	adc.w	r4, sl, sl
 80094de:	4699      	mov	r9, r3
 80094e0:	46a2      	mov	sl, r4
 80094e2:	eb19 090b 	adds.w	r9, r9, fp
 80094e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80094ea:	f04f 0100 	mov.w	r1, #0
 80094ee:	f04f 0200 	mov.w	r2, #0
 80094f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80094f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80094fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80094fe:	4689      	mov	r9, r1
 8009500:	4692      	mov	sl, r2
 8009502:	eb1b 0509 	adds.w	r5, fp, r9
 8009506:	eb4c 060a 	adc.w	r6, ip, sl
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	4619      	mov	r1, r3
 8009510:	f04f 0200 	mov.w	r2, #0
 8009514:	f04f 0300 	mov.w	r3, #0
 8009518:	f04f 0400 	mov.w	r4, #0
 800951c:	0094      	lsls	r4, r2, #2
 800951e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009522:	008b      	lsls	r3, r1, #2
 8009524:	461a      	mov	r2, r3
 8009526:	4623      	mov	r3, r4
 8009528:	4628      	mov	r0, r5
 800952a:	4631      	mov	r1, r6
 800952c:	f7f7 fb5c 	bl	8000be8 <__aeabi_uldivmod>
 8009530:	4603      	mov	r3, r0
 8009532:	460c      	mov	r4, r1
 8009534:	461a      	mov	r2, r3
 8009536:	4b77      	ldr	r3, [pc, #476]	; (8009714 <UART_SetConfig+0x6f4>)
 8009538:	fba3 1302 	umull	r1, r3, r3, r2
 800953c:	095b      	lsrs	r3, r3, #5
 800953e:	2164      	movs	r1, #100	; 0x64
 8009540:	fb01 f303 	mul.w	r3, r1, r3
 8009544:	1ad3      	subs	r3, r2, r3
 8009546:	011b      	lsls	r3, r3, #4
 8009548:	3332      	adds	r3, #50	; 0x32
 800954a:	4a72      	ldr	r2, [pc, #456]	; (8009714 <UART_SetConfig+0x6f4>)
 800954c:	fba2 2303 	umull	r2, r3, r2, r3
 8009550:	095b      	lsrs	r3, r3, #5
 8009552:	f003 020f 	and.w	r2, r3, #15
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4442      	add	r2, r8
 800955c:	609a      	str	r2, [r3, #8]
 800955e:	e0d0      	b.n	8009702 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009560:	f7fe f9c2 	bl	80078e8 <HAL_RCC_GetPCLK1Freq>
 8009564:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	469a      	mov	sl, r3
 800956a:	f04f 0b00 	mov.w	fp, #0
 800956e:	46d0      	mov	r8, sl
 8009570:	46d9      	mov	r9, fp
 8009572:	eb18 0308 	adds.w	r3, r8, r8
 8009576:	eb49 0409 	adc.w	r4, r9, r9
 800957a:	4698      	mov	r8, r3
 800957c:	46a1      	mov	r9, r4
 800957e:	eb18 080a 	adds.w	r8, r8, sl
 8009582:	eb49 090b 	adc.w	r9, r9, fp
 8009586:	f04f 0100 	mov.w	r1, #0
 800958a:	f04f 0200 	mov.w	r2, #0
 800958e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009592:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009596:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800959a:	4688      	mov	r8, r1
 800959c:	4691      	mov	r9, r2
 800959e:	eb1a 0508 	adds.w	r5, sl, r8
 80095a2:	eb4b 0609 	adc.w	r6, fp, r9
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	4619      	mov	r1, r3
 80095ac:	f04f 0200 	mov.w	r2, #0
 80095b0:	f04f 0300 	mov.w	r3, #0
 80095b4:	f04f 0400 	mov.w	r4, #0
 80095b8:	0094      	lsls	r4, r2, #2
 80095ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80095be:	008b      	lsls	r3, r1, #2
 80095c0:	461a      	mov	r2, r3
 80095c2:	4623      	mov	r3, r4
 80095c4:	4628      	mov	r0, r5
 80095c6:	4631      	mov	r1, r6
 80095c8:	f7f7 fb0e 	bl	8000be8 <__aeabi_uldivmod>
 80095cc:	4603      	mov	r3, r0
 80095ce:	460c      	mov	r4, r1
 80095d0:	461a      	mov	r2, r3
 80095d2:	4b50      	ldr	r3, [pc, #320]	; (8009714 <UART_SetConfig+0x6f4>)
 80095d4:	fba3 2302 	umull	r2, r3, r3, r2
 80095d8:	095b      	lsrs	r3, r3, #5
 80095da:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	469b      	mov	fp, r3
 80095e2:	f04f 0c00 	mov.w	ip, #0
 80095e6:	46d9      	mov	r9, fp
 80095e8:	46e2      	mov	sl, ip
 80095ea:	eb19 0309 	adds.w	r3, r9, r9
 80095ee:	eb4a 040a 	adc.w	r4, sl, sl
 80095f2:	4699      	mov	r9, r3
 80095f4:	46a2      	mov	sl, r4
 80095f6:	eb19 090b 	adds.w	r9, r9, fp
 80095fa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80095fe:	f04f 0100 	mov.w	r1, #0
 8009602:	f04f 0200 	mov.w	r2, #0
 8009606:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800960a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800960e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009612:	4689      	mov	r9, r1
 8009614:	4692      	mov	sl, r2
 8009616:	eb1b 0509 	adds.w	r5, fp, r9
 800961a:	eb4c 060a 	adc.w	r6, ip, sl
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	4619      	mov	r1, r3
 8009624:	f04f 0200 	mov.w	r2, #0
 8009628:	f04f 0300 	mov.w	r3, #0
 800962c:	f04f 0400 	mov.w	r4, #0
 8009630:	0094      	lsls	r4, r2, #2
 8009632:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009636:	008b      	lsls	r3, r1, #2
 8009638:	461a      	mov	r2, r3
 800963a:	4623      	mov	r3, r4
 800963c:	4628      	mov	r0, r5
 800963e:	4631      	mov	r1, r6
 8009640:	f7f7 fad2 	bl	8000be8 <__aeabi_uldivmod>
 8009644:	4603      	mov	r3, r0
 8009646:	460c      	mov	r4, r1
 8009648:	461a      	mov	r2, r3
 800964a:	4b32      	ldr	r3, [pc, #200]	; (8009714 <UART_SetConfig+0x6f4>)
 800964c:	fba3 1302 	umull	r1, r3, r3, r2
 8009650:	095b      	lsrs	r3, r3, #5
 8009652:	2164      	movs	r1, #100	; 0x64
 8009654:	fb01 f303 	mul.w	r3, r1, r3
 8009658:	1ad3      	subs	r3, r2, r3
 800965a:	011b      	lsls	r3, r3, #4
 800965c:	3332      	adds	r3, #50	; 0x32
 800965e:	4a2d      	ldr	r2, [pc, #180]	; (8009714 <UART_SetConfig+0x6f4>)
 8009660:	fba2 2303 	umull	r2, r3, r2, r3
 8009664:	095b      	lsrs	r3, r3, #5
 8009666:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800966a:	4498      	add	r8, r3
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	469b      	mov	fp, r3
 8009670:	f04f 0c00 	mov.w	ip, #0
 8009674:	46d9      	mov	r9, fp
 8009676:	46e2      	mov	sl, ip
 8009678:	eb19 0309 	adds.w	r3, r9, r9
 800967c:	eb4a 040a 	adc.w	r4, sl, sl
 8009680:	4699      	mov	r9, r3
 8009682:	46a2      	mov	sl, r4
 8009684:	eb19 090b 	adds.w	r9, r9, fp
 8009688:	eb4a 0a0c 	adc.w	sl, sl, ip
 800968c:	f04f 0100 	mov.w	r1, #0
 8009690:	f04f 0200 	mov.w	r2, #0
 8009694:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009698:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800969c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80096a0:	4689      	mov	r9, r1
 80096a2:	4692      	mov	sl, r2
 80096a4:	eb1b 0509 	adds.w	r5, fp, r9
 80096a8:	eb4c 060a 	adc.w	r6, ip, sl
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	4619      	mov	r1, r3
 80096b2:	f04f 0200 	mov.w	r2, #0
 80096b6:	f04f 0300 	mov.w	r3, #0
 80096ba:	f04f 0400 	mov.w	r4, #0
 80096be:	0094      	lsls	r4, r2, #2
 80096c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80096c4:	008b      	lsls	r3, r1, #2
 80096c6:	461a      	mov	r2, r3
 80096c8:	4623      	mov	r3, r4
 80096ca:	4628      	mov	r0, r5
 80096cc:	4631      	mov	r1, r6
 80096ce:	f7f7 fa8b 	bl	8000be8 <__aeabi_uldivmod>
 80096d2:	4603      	mov	r3, r0
 80096d4:	460c      	mov	r4, r1
 80096d6:	461a      	mov	r2, r3
 80096d8:	4b0e      	ldr	r3, [pc, #56]	; (8009714 <UART_SetConfig+0x6f4>)
 80096da:	fba3 1302 	umull	r1, r3, r3, r2
 80096de:	095b      	lsrs	r3, r3, #5
 80096e0:	2164      	movs	r1, #100	; 0x64
 80096e2:	fb01 f303 	mul.w	r3, r1, r3
 80096e6:	1ad3      	subs	r3, r2, r3
 80096e8:	011b      	lsls	r3, r3, #4
 80096ea:	3332      	adds	r3, #50	; 0x32
 80096ec:	4a09      	ldr	r2, [pc, #36]	; (8009714 <UART_SetConfig+0x6f4>)
 80096ee:	fba2 2303 	umull	r2, r3, r2, r3
 80096f2:	095b      	lsrs	r3, r3, #5
 80096f4:	f003 020f 	and.w	r2, r3, #15
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4442      	add	r2, r8
 80096fe:	609a      	str	r2, [r3, #8]
}
 8009700:	e7ff      	b.n	8009702 <UART_SetConfig+0x6e2>
 8009702:	bf00      	nop
 8009704:	3714      	adds	r7, #20
 8009706:	46bd      	mov	sp, r7
 8009708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800970c:	40011000 	.word	0x40011000
 8009710:	40011400 	.word	0x40011400
 8009714:	51eb851f 	.word	0x51eb851f

08009718 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009718:	b480      	push	{r7}
 800971a:	b085      	sub	sp, #20
 800971c:	af00      	add	r7, sp, #0
 800971e:	4603      	mov	r3, r0
 8009720:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009722:	2300      	movs	r3, #0
 8009724:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800972a:	2b84      	cmp	r3, #132	; 0x84
 800972c:	d005      	beq.n	800973a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800972e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	4413      	add	r3, r2
 8009736:	3303      	adds	r3, #3
 8009738:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800973a:	68fb      	ldr	r3, [r7, #12]
}
 800973c:	4618      	mov	r0, r3
 800973e:	3714      	adds	r7, #20
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800974c:	f000 fc72 	bl	800a034 <vTaskStartScheduler>
  
  return osOK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	bd80      	pop	{r7, pc}

08009756 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009756:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009758:	b089      	sub	sp, #36	; 0x24
 800975a:	af04      	add	r7, sp, #16
 800975c:	6078      	str	r0, [r7, #4]
 800975e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	695b      	ldr	r3, [r3, #20]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d020      	beq.n	80097aa <osThreadCreate+0x54>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	699b      	ldr	r3, [r3, #24]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d01c      	beq.n	80097aa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	685c      	ldr	r4, [r3, #4]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681d      	ldr	r5, [r3, #0]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	691e      	ldr	r6, [r3, #16]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009782:	4618      	mov	r0, r3
 8009784:	f7ff ffc8 	bl	8009718 <makeFreeRtosPriority>
 8009788:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	695b      	ldr	r3, [r3, #20]
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009792:	9202      	str	r2, [sp, #8]
 8009794:	9301      	str	r3, [sp, #4]
 8009796:	9100      	str	r1, [sp, #0]
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	4632      	mov	r2, r6
 800979c:	4629      	mov	r1, r5
 800979e:	4620      	mov	r0, r4
 80097a0:	f000 fa7e 	bl	8009ca0 <xTaskCreateStatic>
 80097a4:	4603      	mov	r3, r0
 80097a6:	60fb      	str	r3, [r7, #12]
 80097a8:	e01c      	b.n	80097e4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	685c      	ldr	r4, [r3, #4]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80097b6:	b29e      	uxth	r6, r3
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80097be:	4618      	mov	r0, r3
 80097c0:	f7ff ffaa 	bl	8009718 <makeFreeRtosPriority>
 80097c4:	4602      	mov	r2, r0
 80097c6:	f107 030c 	add.w	r3, r7, #12
 80097ca:	9301      	str	r3, [sp, #4]
 80097cc:	9200      	str	r2, [sp, #0]
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	4632      	mov	r2, r6
 80097d2:	4629      	mov	r1, r5
 80097d4:	4620      	mov	r0, r4
 80097d6:	f000 fabc 	bl	8009d52 <xTaskCreate>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d001      	beq.n	80097e4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80097e0:	2300      	movs	r3, #0
 80097e2:	e000      	b.n	80097e6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80097e4:	68fb      	ldr	r3, [r7, #12]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3714      	adds	r7, #20
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080097ee <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b084      	sub	sp, #16
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d001      	beq.n	8009804 <osDelay+0x16>
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	e000      	b.n	8009806 <osDelay+0x18>
 8009804:	2301      	movs	r3, #1
 8009806:	4618      	mov	r0, r3
 8009808:	f000 fbe0 	bl	8009fcc <vTaskDelay>
  
  return osOK;
 800980c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800980e:	4618      	mov	r0, r3
 8009810:	3710      	adds	r7, #16
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009816:	b590      	push	{r4, r7, lr}
 8009818:	b085      	sub	sp, #20
 800981a:	af02      	add	r7, sp, #8
 800981c:	6078      	str	r0, [r7, #4]
 800981e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d012      	beq.n	800984e <osMessageCreate+0x38>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d00e      	beq.n	800984e <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6818      	ldr	r0, [r3, #0]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6859      	ldr	r1, [r3, #4]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	689a      	ldr	r2, [r3, #8]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	68dc      	ldr	r4, [r3, #12]
 8009840:	2300      	movs	r3, #0
 8009842:	9300      	str	r3, [sp, #0]
 8009844:	4623      	mov	r3, r4
 8009846:	f000 f92b 	bl	8009aa0 <xQueueGenericCreateStatic>
 800984a:	4603      	mov	r3, r0
 800984c:	e008      	b.n	8009860 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6818      	ldr	r0, [r3, #0]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	4619      	mov	r1, r3
 800985a:	f000 f993 	bl	8009b84 <xQueueGenericCreate>
 800985e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009860:	4618      	mov	r0, r3
 8009862:	370c      	adds	r7, #12
 8009864:	46bd      	mov	sp, r7
 8009866:	bd90      	pop	{r4, r7, pc}

08009868 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f103 0208 	add.w	r2, r3, #8
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009880:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f103 0208 	add.w	r2, r3, #8
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f103 0208 	add.w	r2, r3, #8
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2200      	movs	r2, #0
 800989a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800989c:	bf00      	nop
 800989e:	370c      	adds	r7, #12
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr

080098a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80098a8:	b480      	push	{r7}
 80098aa:	b083      	sub	sp, #12
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80098b6:	bf00      	nop
 80098b8:	370c      	adds	r7, #12
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr

080098c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80098c2:	b480      	push	{r7}
 80098c4:	b085      	sub	sp, #20
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
 80098ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	689a      	ldr	r2, [r3, #8]
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	683a      	ldr	r2, [r7, #0]
 80098e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	683a      	ldr	r2, [r7, #0]
 80098ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	1c5a      	adds	r2, r3, #1
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	601a      	str	r2, [r3, #0]
}
 80098fe:	bf00      	nop
 8009900:	3714      	adds	r7, #20
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr

0800990a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800990a:	b480      	push	{r7}
 800990c:	b085      	sub	sp, #20
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
 8009912:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009920:	d103      	bne.n	800992a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	691b      	ldr	r3, [r3, #16]
 8009926:	60fb      	str	r3, [r7, #12]
 8009928:	e00c      	b.n	8009944 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	3308      	adds	r3, #8
 800992e:	60fb      	str	r3, [r7, #12]
 8009930:	e002      	b.n	8009938 <vListInsert+0x2e>
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	60fb      	str	r3, [r7, #12]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	68ba      	ldr	r2, [r7, #8]
 8009940:	429a      	cmp	r2, r3
 8009942:	d2f6      	bcs.n	8009932 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	685a      	ldr	r2, [r3, #4]
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	683a      	ldr	r2, [r7, #0]
 8009952:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	68fa      	ldr	r2, [r7, #12]
 8009958:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	683a      	ldr	r2, [r7, #0]
 800995e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	1c5a      	adds	r2, r3, #1
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	601a      	str	r2, [r3, #0]
}
 8009970:	bf00      	nop
 8009972:	3714      	adds	r7, #20
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	691b      	ldr	r3, [r3, #16]
 8009988:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	6892      	ldr	r2, [r2, #8]
 8009992:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	6852      	ldr	r2, [r2, #4]
 800999c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d103      	bne.n	80099b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	689a      	ldr	r2, [r3, #8]
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2200      	movs	r2, #0
 80099b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	1e5a      	subs	r2, r3, #1
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3714      	adds	r7, #20
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d109      	bne.n	80099f8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80099e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e8:	f383 8811 	msr	BASEPRI, r3
 80099ec:	f3bf 8f6f 	isb	sy
 80099f0:	f3bf 8f4f 	dsb	sy
 80099f4:	60bb      	str	r3, [r7, #8]
 80099f6:	e7fe      	b.n	80099f6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80099f8:	f001 f830 	bl	800aa5c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681a      	ldr	r2, [r3, #0]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a04:	68f9      	ldr	r1, [r7, #12]
 8009a06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009a08:	fb01 f303 	mul.w	r3, r1, r3
 8009a0c:	441a      	add	r2, r3
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2200      	movs	r2, #0
 8009a16:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	68f9      	ldr	r1, [r7, #12]
 8009a2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009a2e:	fb01 f303 	mul.w	r3, r1, r3
 8009a32:	441a      	add	r2, r3
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	22ff      	movs	r2, #255	; 0xff
 8009a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	22ff      	movs	r2, #255	; 0xff
 8009a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d114      	bne.n	8009a78 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	691b      	ldr	r3, [r3, #16]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d01a      	beq.n	8009a8c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	3310      	adds	r3, #16
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f000 fd28 	bl	800a4b0 <xTaskRemoveFromEventList>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d012      	beq.n	8009a8c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009a66:	4b0d      	ldr	r3, [pc, #52]	; (8009a9c <xQueueGenericReset+0xcc>)
 8009a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a6c:	601a      	str	r2, [r3, #0]
 8009a6e:	f3bf 8f4f 	dsb	sy
 8009a72:	f3bf 8f6f 	isb	sy
 8009a76:	e009      	b.n	8009a8c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	3310      	adds	r3, #16
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f7ff fef3 	bl	8009868 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	3324      	adds	r3, #36	; 0x24
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7ff feee 	bl	8009868 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009a8c:	f001 f814 	bl	800aab8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009a90:	2301      	movs	r3, #1
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3710      	adds	r7, #16
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	e000ed04 	.word	0xe000ed04

08009aa0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b08e      	sub	sp, #56	; 0x38
 8009aa4:	af02      	add	r7, sp, #8
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	607a      	str	r2, [r7, #4]
 8009aac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d109      	bne.n	8009ac8 <xQueueGenericCreateStatic+0x28>
 8009ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab8:	f383 8811 	msr	BASEPRI, r3
 8009abc:	f3bf 8f6f 	isb	sy
 8009ac0:	f3bf 8f4f 	dsb	sy
 8009ac4:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ac6:	e7fe      	b.n	8009ac6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d109      	bne.n	8009ae2 <xQueueGenericCreateStatic+0x42>
 8009ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad2:	f383 8811 	msr	BASEPRI, r3
 8009ad6:	f3bf 8f6f 	isb	sy
 8009ada:	f3bf 8f4f 	dsb	sy
 8009ade:	627b      	str	r3, [r7, #36]	; 0x24
 8009ae0:	e7fe      	b.n	8009ae0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d002      	beq.n	8009aee <xQueueGenericCreateStatic+0x4e>
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d001      	beq.n	8009af2 <xQueueGenericCreateStatic+0x52>
 8009aee:	2301      	movs	r3, #1
 8009af0:	e000      	b.n	8009af4 <xQueueGenericCreateStatic+0x54>
 8009af2:	2300      	movs	r3, #0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d109      	bne.n	8009b0c <xQueueGenericCreateStatic+0x6c>
 8009af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afc:	f383 8811 	msr	BASEPRI, r3
 8009b00:	f3bf 8f6f 	isb	sy
 8009b04:	f3bf 8f4f 	dsb	sy
 8009b08:	623b      	str	r3, [r7, #32]
 8009b0a:	e7fe      	b.n	8009b0a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d102      	bne.n	8009b18 <xQueueGenericCreateStatic+0x78>
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d101      	bne.n	8009b1c <xQueueGenericCreateStatic+0x7c>
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e000      	b.n	8009b1e <xQueueGenericCreateStatic+0x7e>
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d109      	bne.n	8009b36 <xQueueGenericCreateStatic+0x96>
 8009b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b26:	f383 8811 	msr	BASEPRI, r3
 8009b2a:	f3bf 8f6f 	isb	sy
 8009b2e:	f3bf 8f4f 	dsb	sy
 8009b32:	61fb      	str	r3, [r7, #28]
 8009b34:	e7fe      	b.n	8009b34 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009b36:	2350      	movs	r3, #80	; 0x50
 8009b38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	2b50      	cmp	r3, #80	; 0x50
 8009b3e:	d009      	beq.n	8009b54 <xQueueGenericCreateStatic+0xb4>
 8009b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b44:	f383 8811 	msr	BASEPRI, r3
 8009b48:	f3bf 8f6f 	isb	sy
 8009b4c:	f3bf 8f4f 	dsb	sy
 8009b50:	61bb      	str	r3, [r7, #24]
 8009b52:	e7fe      	b.n	8009b52 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00d      	beq.n	8009b7a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b60:	2201      	movs	r2, #1
 8009b62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009b66:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b6c:	9300      	str	r3, [sp, #0]
 8009b6e:	4613      	mov	r3, r2
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	68b9      	ldr	r1, [r7, #8]
 8009b74:	68f8      	ldr	r0, [r7, #12]
 8009b76:	f000 f842 	bl	8009bfe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3730      	adds	r7, #48	; 0x30
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b08a      	sub	sp, #40	; 0x28
 8009b88:	af02      	add	r7, sp, #8
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	4613      	mov	r3, r2
 8009b90:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d109      	bne.n	8009bac <xQueueGenericCreate+0x28>
 8009b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9c:	f383 8811 	msr	BASEPRI, r3
 8009ba0:	f3bf 8f6f 	isb	sy
 8009ba4:	f3bf 8f4f 	dsb	sy
 8009ba8:	613b      	str	r3, [r7, #16]
 8009baa:	e7fe      	b.n	8009baa <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d102      	bne.n	8009bb8 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	61fb      	str	r3, [r7, #28]
 8009bb6:	e004      	b.n	8009bc2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	68ba      	ldr	r2, [r7, #8]
 8009bbc:	fb02 f303 	mul.w	r3, r2, r3
 8009bc0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	3350      	adds	r3, #80	; 0x50
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f001 f824 	bl	800ac14 <pvPortMalloc>
 8009bcc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00f      	beq.n	8009bf4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	3350      	adds	r3, #80	; 0x50
 8009bd8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009bda:	69bb      	ldr	r3, [r7, #24]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009be2:	79fa      	ldrb	r2, [r7, #7]
 8009be4:	69bb      	ldr	r3, [r7, #24]
 8009be6:	9300      	str	r3, [sp, #0]
 8009be8:	4613      	mov	r3, r2
 8009bea:	697a      	ldr	r2, [r7, #20]
 8009bec:	68b9      	ldr	r1, [r7, #8]
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f000 f805 	bl	8009bfe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009bf4:	69bb      	ldr	r3, [r7, #24]
	}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3720      	adds	r7, #32
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b084      	sub	sp, #16
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	60f8      	str	r0, [r7, #12]
 8009c06:	60b9      	str	r1, [r7, #8]
 8009c08:	607a      	str	r2, [r7, #4]
 8009c0a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d103      	bne.n	8009c1a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009c12:	69bb      	ldr	r3, [r7, #24]
 8009c14:	69ba      	ldr	r2, [r7, #24]
 8009c16:	601a      	str	r2, [r3, #0]
 8009c18:	e002      	b.n	8009c20 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009c1a:	69bb      	ldr	r3, [r7, #24]
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	68fa      	ldr	r2, [r7, #12]
 8009c24:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	68ba      	ldr	r2, [r7, #8]
 8009c2a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009c2c:	2101      	movs	r1, #1
 8009c2e:	69b8      	ldr	r0, [r7, #24]
 8009c30:	f7ff fece 	bl	80099d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009c34:	69bb      	ldr	r3, [r7, #24]
 8009c36:	78fa      	ldrb	r2, [r7, #3]
 8009c38:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009c3c:	bf00      	nop
 8009c3e:	3710      	adds	r7, #16
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <MX_TIM7_Init>:
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b082      	sub	sp, #8
 8009c48:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009c4a:	463b      	mov	r3, r7
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	601a      	str	r2, [r3, #0]
 8009c50:	605a      	str	r2, [r3, #4]
  htim7.Instance = TIM7;
 8009c52:	4b11      	ldr	r3, [pc, #68]	; (8009c98 <MX_TIM7_Init+0x54>)
 8009c54:	4a11      	ldr	r2, [pc, #68]	; (8009c9c <MX_TIM7_Init+0x58>)
 8009c56:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 167;
 8009c58:	4b0f      	ldr	r3, [pc, #60]	; (8009c98 <MX_TIM7_Init+0x54>)
 8009c5a:	22a7      	movs	r2, #167	; 0xa7
 8009c5c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009c5e:	4b0e      	ldr	r3, [pc, #56]	; (8009c98 <MX_TIM7_Init+0x54>)
 8009c60:	2200      	movs	r2, #0
 8009c62:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100;
 8009c64:	4b0c      	ldr	r3, [pc, #48]	; (8009c98 <MX_TIM7_Init+0x54>)
 8009c66:	2264      	movs	r2, #100	; 0x64
 8009c68:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009c6a:	4b0b      	ldr	r3, [pc, #44]	; (8009c98 <MX_TIM7_Init+0x54>)
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8009c70:	4809      	ldr	r0, [pc, #36]	; (8009c98 <MX_TIM7_Init+0x54>)
 8009c72:	f7fd fe93 	bl	800799c <HAL_TIM_Base_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009c76:	2300      	movs	r3, #0
 8009c78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8009c7e:	463b      	mov	r3, r7
 8009c80:	4619      	mov	r1, r3
 8009c82:	4805      	ldr	r0, [pc, #20]	; (8009c98 <MX_TIM7_Init+0x54>)
 8009c84:	f7fe fd2e 	bl	80086e4 <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Base_Start_IT(&htim7);
 8009c88:	4803      	ldr	r0, [pc, #12]	; (8009c98 <MX_TIM7_Init+0x54>)
 8009c8a:	f7fd fed6 	bl	8007a3a <HAL_TIM_Base_Start_IT>
}
 8009c8e:	bf00      	nop
 8009c90:	3708      	adds	r7, #8
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	2000094c 	.word	0x2000094c
 8009c9c:	40001400 	.word	0x40001400

08009ca0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b08e      	sub	sp, #56	; 0x38
 8009ca4:	af04      	add	r7, sp, #16
 8009ca6:	60f8      	str	r0, [r7, #12]
 8009ca8:	60b9      	str	r1, [r7, #8]
 8009caa:	607a      	str	r2, [r7, #4]
 8009cac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d109      	bne.n	8009cc8 <xTaskCreateStatic+0x28>
 8009cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb8:	f383 8811 	msr	BASEPRI, r3
 8009cbc:	f3bf 8f6f 	isb	sy
 8009cc0:	f3bf 8f4f 	dsb	sy
 8009cc4:	623b      	str	r3, [r7, #32]
 8009cc6:	e7fe      	b.n	8009cc6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d109      	bne.n	8009ce2 <xTaskCreateStatic+0x42>
 8009cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd2:	f383 8811 	msr	BASEPRI, r3
 8009cd6:	f3bf 8f6f 	isb	sy
 8009cda:	f3bf 8f4f 	dsb	sy
 8009cde:	61fb      	str	r3, [r7, #28]
 8009ce0:	e7fe      	b.n	8009ce0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009ce2:	2360      	movs	r3, #96	; 0x60
 8009ce4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	2b60      	cmp	r3, #96	; 0x60
 8009cea:	d009      	beq.n	8009d00 <xTaskCreateStatic+0x60>
 8009cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf0:	f383 8811 	msr	BASEPRI, r3
 8009cf4:	f3bf 8f6f 	isb	sy
 8009cf8:	f3bf 8f4f 	dsb	sy
 8009cfc:	61bb      	str	r3, [r7, #24]
 8009cfe:	e7fe      	b.n	8009cfe <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d01e      	beq.n	8009d44 <xTaskCreateStatic+0xa4>
 8009d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d01b      	beq.n	8009d44 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d0e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d14:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d18:	2202      	movs	r2, #2
 8009d1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009d1e:	2300      	movs	r3, #0
 8009d20:	9303      	str	r3, [sp, #12]
 8009d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d24:	9302      	str	r3, [sp, #8]
 8009d26:	f107 0314 	add.w	r3, r7, #20
 8009d2a:	9301      	str	r3, [sp, #4]
 8009d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2e:	9300      	str	r3, [sp, #0]
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	68b9      	ldr	r1, [r7, #8]
 8009d36:	68f8      	ldr	r0, [r7, #12]
 8009d38:	f000 f850 	bl	8009ddc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d3e:	f000 f8d7 	bl	8009ef0 <prvAddNewTaskToReadyList>
 8009d42:	e001      	b.n	8009d48 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8009d44:	2300      	movs	r3, #0
 8009d46:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009d48:	697b      	ldr	r3, [r7, #20]
	}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3728      	adds	r7, #40	; 0x28
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}

08009d52 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b08c      	sub	sp, #48	; 0x30
 8009d56:	af04      	add	r7, sp, #16
 8009d58:	60f8      	str	r0, [r7, #12]
 8009d5a:	60b9      	str	r1, [r7, #8]
 8009d5c:	603b      	str	r3, [r7, #0]
 8009d5e:	4613      	mov	r3, r2
 8009d60:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d62:	88fb      	ldrh	r3, [r7, #6]
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	4618      	mov	r0, r3
 8009d68:	f000 ff54 	bl	800ac14 <pvPortMalloc>
 8009d6c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d00e      	beq.n	8009d92 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009d74:	2060      	movs	r0, #96	; 0x60
 8009d76:	f000 ff4d 	bl	800ac14 <pvPortMalloc>
 8009d7a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d003      	beq.n	8009d8a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	697a      	ldr	r2, [r7, #20]
 8009d86:	631a      	str	r2, [r3, #48]	; 0x30
 8009d88:	e005      	b.n	8009d96 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009d8a:	6978      	ldr	r0, [r7, #20]
 8009d8c:	f001 f804 	bl	800ad98 <vPortFree>
 8009d90:	e001      	b.n	8009d96 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009d92:	2300      	movs	r3, #0
 8009d94:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009d96:	69fb      	ldr	r3, [r7, #28]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d017      	beq.n	8009dcc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009d9c:	69fb      	ldr	r3, [r7, #28]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009da4:	88fa      	ldrh	r2, [r7, #6]
 8009da6:	2300      	movs	r3, #0
 8009da8:	9303      	str	r3, [sp, #12]
 8009daa:	69fb      	ldr	r3, [r7, #28]
 8009dac:	9302      	str	r3, [sp, #8]
 8009dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009db0:	9301      	str	r3, [sp, #4]
 8009db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db4:	9300      	str	r3, [sp, #0]
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	68b9      	ldr	r1, [r7, #8]
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f000 f80e 	bl	8009ddc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009dc0:	69f8      	ldr	r0, [r7, #28]
 8009dc2:	f000 f895 	bl	8009ef0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	61bb      	str	r3, [r7, #24]
 8009dca:	e002      	b.n	8009dd2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009dcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009dd0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009dd2:	69bb      	ldr	r3, [r7, #24]
	}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3720      	adds	r7, #32
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b088      	sub	sp, #32
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	60b9      	str	r1, [r7, #8]
 8009de6:	607a      	str	r2, [r7, #4]
 8009de8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	461a      	mov	r2, r3
 8009df4:	21a5      	movs	r1, #165	; 0xa5
 8009df6:	f001 fd01 	bl	800b7fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009e04:	3b01      	subs	r3, #1
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	4413      	add	r3, r2
 8009e0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009e0c:	69bb      	ldr	r3, [r7, #24]
 8009e0e:	f023 0307 	bic.w	r3, r3, #7
 8009e12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	f003 0307 	and.w	r3, r3, #7
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d009      	beq.n	8009e32 <prvInitialiseNewTask+0x56>
 8009e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e22:	f383 8811 	msr	BASEPRI, r3
 8009e26:	f3bf 8f6f 	isb	sy
 8009e2a:	f3bf 8f4f 	dsb	sy
 8009e2e:	617b      	str	r3, [r7, #20]
 8009e30:	e7fe      	b.n	8009e30 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e32:	2300      	movs	r3, #0
 8009e34:	61fb      	str	r3, [r7, #28]
 8009e36:	e012      	b.n	8009e5e <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e38:	68ba      	ldr	r2, [r7, #8]
 8009e3a:	69fb      	ldr	r3, [r7, #28]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	7819      	ldrb	r1, [r3, #0]
 8009e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	4413      	add	r3, r2
 8009e46:	3334      	adds	r3, #52	; 0x34
 8009e48:	460a      	mov	r2, r1
 8009e4a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009e4c:	68ba      	ldr	r2, [r7, #8]
 8009e4e:	69fb      	ldr	r3, [r7, #28]
 8009e50:	4413      	add	r3, r2
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d006      	beq.n	8009e66 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	61fb      	str	r3, [r7, #28]
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	2b0f      	cmp	r3, #15
 8009e62:	d9e9      	bls.n	8009e38 <prvInitialiseNewTask+0x5c>
 8009e64:	e000      	b.n	8009e68 <prvInitialiseNewTask+0x8c>
		{
			break;
 8009e66:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e72:	2b06      	cmp	r3, #6
 8009e74:	d901      	bls.n	8009e7a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009e76:	2306      	movs	r3, #6
 8009e78:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e7e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e84:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e88:	2200      	movs	r2, #0
 8009e8a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8e:	3304      	adds	r3, #4
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7ff fd09 	bl	80098a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e98:	3318      	adds	r3, #24
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7ff fd04 	bl	80098a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ea4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea8:	f1c3 0207 	rsb	r2, r3, #7
 8009eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eb4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8009eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb8:	2200      	movs	r2, #0
 8009eba:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009eca:	683a      	ldr	r2, [r7, #0]
 8009ecc:	68f9      	ldr	r1, [r7, #12]
 8009ece:	69b8      	ldr	r0, [r7, #24]
 8009ed0:	f000 fc8e 	bl	800a7f0 <pxPortInitialiseStack>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d002      	beq.n	8009ee6 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ee4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ee6:	bf00      	nop
 8009ee8:	3720      	adds	r7, #32
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
	...

08009ef0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009ef8:	f000 fdb0 	bl	800aa5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009efc:	4b2c      	ldr	r3, [pc, #176]	; (8009fb0 <prvAddNewTaskToReadyList+0xc0>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	3301      	adds	r3, #1
 8009f02:	4a2b      	ldr	r2, [pc, #172]	; (8009fb0 <prvAddNewTaskToReadyList+0xc0>)
 8009f04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009f06:	4b2b      	ldr	r3, [pc, #172]	; (8009fb4 <prvAddNewTaskToReadyList+0xc4>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d109      	bne.n	8009f22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009f0e:	4a29      	ldr	r2, [pc, #164]	; (8009fb4 <prvAddNewTaskToReadyList+0xc4>)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009f14:	4b26      	ldr	r3, [pc, #152]	; (8009fb0 <prvAddNewTaskToReadyList+0xc0>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d110      	bne.n	8009f3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009f1c:	f000 fb42 	bl	800a5a4 <prvInitialiseTaskLists>
 8009f20:	e00d      	b.n	8009f3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009f22:	4b25      	ldr	r3, [pc, #148]	; (8009fb8 <prvAddNewTaskToReadyList+0xc8>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d109      	bne.n	8009f3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f2a:	4b22      	ldr	r3, [pc, #136]	; (8009fb4 <prvAddNewTaskToReadyList+0xc4>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d802      	bhi.n	8009f3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009f38:	4a1e      	ldr	r2, [pc, #120]	; (8009fb4 <prvAddNewTaskToReadyList+0xc4>)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009f3e:	4b1f      	ldr	r3, [pc, #124]	; (8009fbc <prvAddNewTaskToReadyList+0xcc>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	3301      	adds	r3, #1
 8009f44:	4a1d      	ldr	r2, [pc, #116]	; (8009fbc <prvAddNewTaskToReadyList+0xcc>)
 8009f46:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009f48:	4b1c      	ldr	r3, [pc, #112]	; (8009fbc <prvAddNewTaskToReadyList+0xcc>)
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f54:	2201      	movs	r2, #1
 8009f56:	409a      	lsls	r2, r3
 8009f58:	4b19      	ldr	r3, [pc, #100]	; (8009fc0 <prvAddNewTaskToReadyList+0xd0>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	4a18      	ldr	r2, [pc, #96]	; (8009fc0 <prvAddNewTaskToReadyList+0xd0>)
 8009f60:	6013      	str	r3, [r2, #0]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f66:	4613      	mov	r3, r2
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	4413      	add	r3, r2
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	4a15      	ldr	r2, [pc, #84]	; (8009fc4 <prvAddNewTaskToReadyList+0xd4>)
 8009f70:	441a      	add	r2, r3
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	3304      	adds	r3, #4
 8009f76:	4619      	mov	r1, r3
 8009f78:	4610      	mov	r0, r2
 8009f7a:	f7ff fca2 	bl	80098c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009f7e:	f000 fd9b 	bl	800aab8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009f82:	4b0d      	ldr	r3, [pc, #52]	; (8009fb8 <prvAddNewTaskToReadyList+0xc8>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d00e      	beq.n	8009fa8 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009f8a:	4b0a      	ldr	r3, [pc, #40]	; (8009fb4 <prvAddNewTaskToReadyList+0xc4>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d207      	bcs.n	8009fa8 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009f98:	4b0b      	ldr	r3, [pc, #44]	; (8009fc8 <prvAddNewTaskToReadyList+0xd8>)
 8009f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f9e:	601a      	str	r2, [r3, #0]
 8009fa0:	f3bf 8f4f 	dsb	sy
 8009fa4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fa8:	bf00      	nop
 8009faa:	3708      	adds	r7, #8
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	200021d0 	.word	0x200021d0
 8009fb4:	200020d0 	.word	0x200020d0
 8009fb8:	200021dc 	.word	0x200021dc
 8009fbc:	200021ec 	.word	0x200021ec
 8009fc0:	200021d8 	.word	0x200021d8
 8009fc4:	200020d4 	.word	0x200020d4
 8009fc8:	e000ed04 	.word	0xe000ed04

08009fcc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d016      	beq.n	800a00c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009fde:	4b13      	ldr	r3, [pc, #76]	; (800a02c <vTaskDelay+0x60>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d009      	beq.n	8009ffa <vTaskDelay+0x2e>
 8009fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fea:	f383 8811 	msr	BASEPRI, r3
 8009fee:	f3bf 8f6f 	isb	sy
 8009ff2:	f3bf 8f4f 	dsb	sy
 8009ff6:	60bb      	str	r3, [r7, #8]
 8009ff8:	e7fe      	b.n	8009ff8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009ffa:	f000 f87b 	bl	800a0f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009ffe:	2100      	movs	r1, #0
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 fb8f 	bl	800a724 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a006:	f000 f883 	bl	800a110 <xTaskResumeAll>
 800a00a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d107      	bne.n	800a022 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a012:	4b07      	ldr	r3, [pc, #28]	; (800a030 <vTaskDelay+0x64>)
 800a014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a018:	601a      	str	r2, [r3, #0]
 800a01a:	f3bf 8f4f 	dsb	sy
 800a01e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a022:	bf00      	nop
 800a024:	3710      	adds	r7, #16
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	200021f8 	.word	0x200021f8
 800a030:	e000ed04 	.word	0xe000ed04

0800a034 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b08a      	sub	sp, #40	; 0x28
 800a038:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a03a:	2300      	movs	r3, #0
 800a03c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a03e:	2300      	movs	r3, #0
 800a040:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a042:	463a      	mov	r2, r7
 800a044:	1d39      	adds	r1, r7, #4
 800a046:	f107 0308 	add.w	r3, r7, #8
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7f6 ff4c 	bl	8000ee8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a050:	6839      	ldr	r1, [r7, #0]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	68ba      	ldr	r2, [r7, #8]
 800a056:	9202      	str	r2, [sp, #8]
 800a058:	9301      	str	r3, [sp, #4]
 800a05a:	2300      	movs	r3, #0
 800a05c:	9300      	str	r3, [sp, #0]
 800a05e:	2300      	movs	r3, #0
 800a060:	460a      	mov	r2, r1
 800a062:	491e      	ldr	r1, [pc, #120]	; (800a0dc <vTaskStartScheduler+0xa8>)
 800a064:	481e      	ldr	r0, [pc, #120]	; (800a0e0 <vTaskStartScheduler+0xac>)
 800a066:	f7ff fe1b 	bl	8009ca0 <xTaskCreateStatic>
 800a06a:	4602      	mov	r2, r0
 800a06c:	4b1d      	ldr	r3, [pc, #116]	; (800a0e4 <vTaskStartScheduler+0xb0>)
 800a06e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a070:	4b1c      	ldr	r3, [pc, #112]	; (800a0e4 <vTaskStartScheduler+0xb0>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d002      	beq.n	800a07e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a078:	2301      	movs	r3, #1
 800a07a:	617b      	str	r3, [r7, #20]
 800a07c:	e001      	b.n	800a082 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a07e:	2300      	movs	r3, #0
 800a080:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	2b01      	cmp	r3, #1
 800a086:	d117      	bne.n	800a0b8 <vTaskStartScheduler+0x84>
 800a088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08c:	f383 8811 	msr	BASEPRI, r3
 800a090:	f3bf 8f6f 	isb	sy
 800a094:	f3bf 8f4f 	dsb	sy
 800a098:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a09a:	4b13      	ldr	r3, [pc, #76]	; (800a0e8 <vTaskStartScheduler+0xb4>)
 800a09c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a0a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a0a2:	4b12      	ldr	r3, [pc, #72]	; (800a0ec <vTaskStartScheduler+0xb8>)
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a0a8:	4b11      	ldr	r3, [pc, #68]	; (800a0f0 <vTaskStartScheduler+0xbc>)
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800a0ae:	f7ff fdc9 	bl	8009c44 <MX_TIM7_Init>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a0b2:	f000 fc25 	bl	800a900 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a0b6:	e00d      	b.n	800a0d4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0be:	d109      	bne.n	800a0d4 <vTaskStartScheduler+0xa0>
 800a0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c4:	f383 8811 	msr	BASEPRI, r3
 800a0c8:	f3bf 8f6f 	isb	sy
 800a0cc:	f3bf 8f4f 	dsb	sy
 800a0d0:	60fb      	str	r3, [r7, #12]
 800a0d2:	e7fe      	b.n	800a0d2 <vTaskStartScheduler+0x9e>
}
 800a0d4:	bf00      	nop
 800a0d6:	3718      	adds	r7, #24
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	0800b994 	.word	0x0800b994
 800a0e0:	0800a575 	.word	0x0800a575
 800a0e4:	200021f4 	.word	0x200021f4
 800a0e8:	200021f0 	.word	0x200021f0
 800a0ec:	200021dc 	.word	0x200021dc
 800a0f0:	200021d4 	.word	0x200021d4

0800a0f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a0f8:	4b04      	ldr	r3, [pc, #16]	; (800a10c <vTaskSuspendAll+0x18>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	4a03      	ldr	r2, [pc, #12]	; (800a10c <vTaskSuspendAll+0x18>)
 800a100:	6013      	str	r3, [r2, #0]
}
 800a102:	bf00      	nop
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr
 800a10c:	200021f8 	.word	0x200021f8

0800a110 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a116:	2300      	movs	r3, #0
 800a118:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a11a:	2300      	movs	r3, #0
 800a11c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a11e:	4b41      	ldr	r3, [pc, #260]	; (800a224 <xTaskResumeAll+0x114>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d109      	bne.n	800a13a <xTaskResumeAll+0x2a>
 800a126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12a:	f383 8811 	msr	BASEPRI, r3
 800a12e:	f3bf 8f6f 	isb	sy
 800a132:	f3bf 8f4f 	dsb	sy
 800a136:	603b      	str	r3, [r7, #0]
 800a138:	e7fe      	b.n	800a138 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a13a:	f000 fc8f 	bl	800aa5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a13e:	4b39      	ldr	r3, [pc, #228]	; (800a224 <xTaskResumeAll+0x114>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	3b01      	subs	r3, #1
 800a144:	4a37      	ldr	r2, [pc, #220]	; (800a224 <xTaskResumeAll+0x114>)
 800a146:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a148:	4b36      	ldr	r3, [pc, #216]	; (800a224 <xTaskResumeAll+0x114>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d161      	bne.n	800a214 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a150:	4b35      	ldr	r3, [pc, #212]	; (800a228 <xTaskResumeAll+0x118>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d05d      	beq.n	800a214 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a158:	e02e      	b.n	800a1b8 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a15a:	4b34      	ldr	r3, [pc, #208]	; (800a22c <xTaskResumeAll+0x11c>)
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	3318      	adds	r3, #24
 800a166:	4618      	mov	r0, r3
 800a168:	f7ff fc08 	bl	800997c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	3304      	adds	r3, #4
 800a170:	4618      	mov	r0, r3
 800a172:	f7ff fc03 	bl	800997c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17a:	2201      	movs	r2, #1
 800a17c:	409a      	lsls	r2, r3
 800a17e:	4b2c      	ldr	r3, [pc, #176]	; (800a230 <xTaskResumeAll+0x120>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4313      	orrs	r3, r2
 800a184:	4a2a      	ldr	r2, [pc, #168]	; (800a230 <xTaskResumeAll+0x120>)
 800a186:	6013      	str	r3, [r2, #0]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a18c:	4613      	mov	r3, r2
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	4413      	add	r3, r2
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	4a27      	ldr	r2, [pc, #156]	; (800a234 <xTaskResumeAll+0x124>)
 800a196:	441a      	add	r2, r3
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	3304      	adds	r3, #4
 800a19c:	4619      	mov	r1, r3
 800a19e:	4610      	mov	r0, r2
 800a1a0:	f7ff fb8f 	bl	80098c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1a8:	4b23      	ldr	r3, [pc, #140]	; (800a238 <xTaskResumeAll+0x128>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d302      	bcc.n	800a1b8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800a1b2:	4b22      	ldr	r3, [pc, #136]	; (800a23c <xTaskResumeAll+0x12c>)
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a1b8:	4b1c      	ldr	r3, [pc, #112]	; (800a22c <xTaskResumeAll+0x11c>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1cc      	bne.n	800a15a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d001      	beq.n	800a1ca <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a1c6:	f000 fa87 	bl	800a6d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a1ca:	4b1d      	ldr	r3, [pc, #116]	; (800a240 <xTaskResumeAll+0x130>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d010      	beq.n	800a1f8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a1d6:	f000 f837 	bl	800a248 <xTaskIncrementTick>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d002      	beq.n	800a1e6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800a1e0:	4b16      	ldr	r3, [pc, #88]	; (800a23c <xTaskResumeAll+0x12c>)
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	3b01      	subs	r3, #1
 800a1ea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d1f1      	bne.n	800a1d6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800a1f2:	4b13      	ldr	r3, [pc, #76]	; (800a240 <xTaskResumeAll+0x130>)
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a1f8:	4b10      	ldr	r3, [pc, #64]	; (800a23c <xTaskResumeAll+0x12c>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d009      	beq.n	800a214 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a200:	2301      	movs	r3, #1
 800a202:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a204:	4b0f      	ldr	r3, [pc, #60]	; (800a244 <xTaskResumeAll+0x134>)
 800a206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a20a:	601a      	str	r2, [r3, #0]
 800a20c:	f3bf 8f4f 	dsb	sy
 800a210:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a214:	f000 fc50 	bl	800aab8 <vPortExitCritical>

	return xAlreadyYielded;
 800a218:	68bb      	ldr	r3, [r7, #8]
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3710      	adds	r7, #16
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
 800a222:	bf00      	nop
 800a224:	200021f8 	.word	0x200021f8
 800a228:	200021d0 	.word	0x200021d0
 800a22c:	20002190 	.word	0x20002190
 800a230:	200021d8 	.word	0x200021d8
 800a234:	200020d4 	.word	0x200020d4
 800a238:	200020d0 	.word	0x200020d0
 800a23c:	200021e4 	.word	0x200021e4
 800a240:	200021e0 	.word	0x200021e0
 800a244:	e000ed04 	.word	0xe000ed04

0800a248 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b086      	sub	sp, #24
 800a24c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a24e:	2300      	movs	r3, #0
 800a250:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a252:	4b50      	ldr	r3, [pc, #320]	; (800a394 <xTaskIncrementTick+0x14c>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	f040 808c 	bne.w	800a374 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a25c:	4b4e      	ldr	r3, [pc, #312]	; (800a398 <xTaskIncrementTick+0x150>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	3301      	adds	r3, #1
 800a262:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a264:	4a4c      	ldr	r2, [pc, #304]	; (800a398 <xTaskIncrementTick+0x150>)
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d11f      	bne.n	800a2b0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a270:	4b4a      	ldr	r3, [pc, #296]	; (800a39c <xTaskIncrementTick+0x154>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d009      	beq.n	800a28e <xTaskIncrementTick+0x46>
 800a27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27e:	f383 8811 	msr	BASEPRI, r3
 800a282:	f3bf 8f6f 	isb	sy
 800a286:	f3bf 8f4f 	dsb	sy
 800a28a:	603b      	str	r3, [r7, #0]
 800a28c:	e7fe      	b.n	800a28c <xTaskIncrementTick+0x44>
 800a28e:	4b43      	ldr	r3, [pc, #268]	; (800a39c <xTaskIncrementTick+0x154>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	60fb      	str	r3, [r7, #12]
 800a294:	4b42      	ldr	r3, [pc, #264]	; (800a3a0 <xTaskIncrementTick+0x158>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a40      	ldr	r2, [pc, #256]	; (800a39c <xTaskIncrementTick+0x154>)
 800a29a:	6013      	str	r3, [r2, #0]
 800a29c:	4a40      	ldr	r2, [pc, #256]	; (800a3a0 <xTaskIncrementTick+0x158>)
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6013      	str	r3, [r2, #0]
 800a2a2:	4b40      	ldr	r3, [pc, #256]	; (800a3a4 <xTaskIncrementTick+0x15c>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	4a3e      	ldr	r2, [pc, #248]	; (800a3a4 <xTaskIncrementTick+0x15c>)
 800a2aa:	6013      	str	r3, [r2, #0]
 800a2ac:	f000 fa14 	bl	800a6d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a2b0:	4b3d      	ldr	r3, [pc, #244]	; (800a3a8 <xTaskIncrementTick+0x160>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	693a      	ldr	r2, [r7, #16]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d34d      	bcc.n	800a356 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2ba:	4b38      	ldr	r3, [pc, #224]	; (800a39c <xTaskIncrementTick+0x154>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d101      	bne.n	800a2c8 <xTaskIncrementTick+0x80>
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e000      	b.n	800a2ca <xTaskIncrementTick+0x82>
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d004      	beq.n	800a2d8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2ce:	4b36      	ldr	r3, [pc, #216]	; (800a3a8 <xTaskIncrementTick+0x160>)
 800a2d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a2d4:	601a      	str	r2, [r3, #0]
					break;
 800a2d6:	e03e      	b.n	800a356 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a2d8:	4b30      	ldr	r3, [pc, #192]	; (800a39c <xTaskIncrementTick+0x154>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a2e8:	693a      	ldr	r2, [r7, #16]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d203      	bcs.n	800a2f8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a2f0:	4a2d      	ldr	r2, [pc, #180]	; (800a3a8 <xTaskIncrementTick+0x160>)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6013      	str	r3, [r2, #0]
						break;
 800a2f6:	e02e      	b.n	800a356 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	3304      	adds	r3, #4
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7ff fb3d 	bl	800997c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a306:	2b00      	cmp	r3, #0
 800a308:	d004      	beq.n	800a314 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	3318      	adds	r3, #24
 800a30e:	4618      	mov	r0, r3
 800a310:	f7ff fb34 	bl	800997c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a318:	2201      	movs	r2, #1
 800a31a:	409a      	lsls	r2, r3
 800a31c:	4b23      	ldr	r3, [pc, #140]	; (800a3ac <xTaskIncrementTick+0x164>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4313      	orrs	r3, r2
 800a322:	4a22      	ldr	r2, [pc, #136]	; (800a3ac <xTaskIncrementTick+0x164>)
 800a324:	6013      	str	r3, [r2, #0]
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a32a:	4613      	mov	r3, r2
 800a32c:	009b      	lsls	r3, r3, #2
 800a32e:	4413      	add	r3, r2
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	4a1f      	ldr	r2, [pc, #124]	; (800a3b0 <xTaskIncrementTick+0x168>)
 800a334:	441a      	add	r2, r3
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	3304      	adds	r3, #4
 800a33a:	4619      	mov	r1, r3
 800a33c:	4610      	mov	r0, r2
 800a33e:	f7ff fac0 	bl	80098c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a346:	4b1b      	ldr	r3, [pc, #108]	; (800a3b4 <xTaskIncrementTick+0x16c>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d3b4      	bcc.n	800a2ba <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a350:	2301      	movs	r3, #1
 800a352:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a354:	e7b1      	b.n	800a2ba <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a356:	4b17      	ldr	r3, [pc, #92]	; (800a3b4 <xTaskIncrementTick+0x16c>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a35c:	4914      	ldr	r1, [pc, #80]	; (800a3b0 <xTaskIncrementTick+0x168>)
 800a35e:	4613      	mov	r3, r2
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	4413      	add	r3, r2
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	440b      	add	r3, r1
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d907      	bls.n	800a37e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800a36e:	2301      	movs	r3, #1
 800a370:	617b      	str	r3, [r7, #20]
 800a372:	e004      	b.n	800a37e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a374:	4b10      	ldr	r3, [pc, #64]	; (800a3b8 <xTaskIncrementTick+0x170>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	3301      	adds	r3, #1
 800a37a:	4a0f      	ldr	r2, [pc, #60]	; (800a3b8 <xTaskIncrementTick+0x170>)
 800a37c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a37e:	4b0f      	ldr	r3, [pc, #60]	; (800a3bc <xTaskIncrementTick+0x174>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d001      	beq.n	800a38a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800a386:	2301      	movs	r3, #1
 800a388:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a38a:	697b      	ldr	r3, [r7, #20]
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3718      	adds	r7, #24
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}
 800a394:	200021f8 	.word	0x200021f8
 800a398:	200021d4 	.word	0x200021d4
 800a39c:	20002188 	.word	0x20002188
 800a3a0:	2000218c 	.word	0x2000218c
 800a3a4:	200021e8 	.word	0x200021e8
 800a3a8:	200021f0 	.word	0x200021f0
 800a3ac:	200021d8 	.word	0x200021d8
 800a3b0:	200020d4 	.word	0x200020d4
 800a3b4:	200020d0 	.word	0x200020d0
 800a3b8:	200021e0 	.word	0x200021e0
 800a3bc:	200021e4 	.word	0x200021e4

0800a3c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b087      	sub	sp, #28
 800a3c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a3c6:	4b32      	ldr	r3, [pc, #200]	; (800a490 <vTaskSwitchContext+0xd0>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d003      	beq.n	800a3d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a3ce:	4b31      	ldr	r3, [pc, #196]	; (800a494 <vTaskSwitchContext+0xd4>)
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a3d4:	e056      	b.n	800a484 <vTaskSwitchContext+0xc4>
		xYieldPending = pdFALSE;
 800a3d6:	4b2f      	ldr	r3, [pc, #188]	; (800a494 <vTaskSwitchContext+0xd4>)
 800a3d8:	2200      	movs	r2, #0
 800a3da:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800a3dc:	4b2e      	ldr	r3, [pc, #184]	; (800a498 <vTaskSwitchContext+0xd8>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a2e      	ldr	r2, [pc, #184]	; (800a49c <vTaskSwitchContext+0xdc>)
 800a3e2:	6013      	str	r3, [r2, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800a3e4:	4b2d      	ldr	r3, [pc, #180]	; (800a49c <vTaskSwitchContext+0xdc>)
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	4b2d      	ldr	r3, [pc, #180]	; (800a4a0 <vTaskSwitchContext+0xe0>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d909      	bls.n	800a404 <vTaskSwitchContext+0x44>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800a3f0:	4b2c      	ldr	r3, [pc, #176]	; (800a4a4 <vTaskSwitchContext+0xe4>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a3f6:	4a29      	ldr	r2, [pc, #164]	; (800a49c <vTaskSwitchContext+0xdc>)
 800a3f8:	6810      	ldr	r0, [r2, #0]
 800a3fa:	4a29      	ldr	r2, [pc, #164]	; (800a4a0 <vTaskSwitchContext+0xe0>)
 800a3fc:	6812      	ldr	r2, [r2, #0]
 800a3fe:	1a82      	subs	r2, r0, r2
 800a400:	440a      	add	r2, r1
 800a402:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800a404:	4b25      	ldr	r3, [pc, #148]	; (800a49c <vTaskSwitchContext+0xdc>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a25      	ldr	r2, [pc, #148]	; (800a4a0 <vTaskSwitchContext+0xe0>)
 800a40a:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a40c:	4b26      	ldr	r3, [pc, #152]	; (800a4a8 <vTaskSwitchContext+0xe8>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	fab3 f383 	clz	r3, r3
 800a418:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a41a:	7afb      	ldrb	r3, [r7, #11]
 800a41c:	f1c3 031f 	rsb	r3, r3, #31
 800a420:	617b      	str	r3, [r7, #20]
 800a422:	4922      	ldr	r1, [pc, #136]	; (800a4ac <vTaskSwitchContext+0xec>)
 800a424:	697a      	ldr	r2, [r7, #20]
 800a426:	4613      	mov	r3, r2
 800a428:	009b      	lsls	r3, r3, #2
 800a42a:	4413      	add	r3, r2
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	440b      	add	r3, r1
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d109      	bne.n	800a44a <vTaskSwitchContext+0x8a>
	__asm volatile
 800a436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43a:	f383 8811 	msr	BASEPRI, r3
 800a43e:	f3bf 8f6f 	isb	sy
 800a442:	f3bf 8f4f 	dsb	sy
 800a446:	607b      	str	r3, [r7, #4]
 800a448:	e7fe      	b.n	800a448 <vTaskSwitchContext+0x88>
 800a44a:	697a      	ldr	r2, [r7, #20]
 800a44c:	4613      	mov	r3, r2
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	4413      	add	r3, r2
 800a452:	009b      	lsls	r3, r3, #2
 800a454:	4a15      	ldr	r2, [pc, #84]	; (800a4ac <vTaskSwitchContext+0xec>)
 800a456:	4413      	add	r3, r2
 800a458:	613b      	str	r3, [r7, #16]
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	685a      	ldr	r2, [r3, #4]
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	605a      	str	r2, [r3, #4]
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	685a      	ldr	r2, [r3, #4]
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	3308      	adds	r3, #8
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d104      	bne.n	800a47a <vTaskSwitchContext+0xba>
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	685a      	ldr	r2, [r3, #4]
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	605a      	str	r2, [r3, #4]
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	4a08      	ldr	r2, [pc, #32]	; (800a4a4 <vTaskSwitchContext+0xe4>)
 800a482:	6013      	str	r3, [r2, #0]
}
 800a484:	bf00      	nop
 800a486:	371c      	adds	r7, #28
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr
 800a490:	200021f8 	.word	0x200021f8
 800a494:	200021e4 	.word	0x200021e4
 800a498:	2000098c 	.word	0x2000098c
 800a49c:	20002200 	.word	0x20002200
 800a4a0:	200021fc 	.word	0x200021fc
 800a4a4:	200020d0 	.word	0x200020d0
 800a4a8:	200021d8 	.word	0x200021d8
 800a4ac:	200020d4 	.word	0x200020d4

0800a4b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b086      	sub	sp, #24
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d109      	bne.n	800a4da <xTaskRemoveFromEventList+0x2a>
 800a4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ca:	f383 8811 	msr	BASEPRI, r3
 800a4ce:	f3bf 8f6f 	isb	sy
 800a4d2:	f3bf 8f4f 	dsb	sy
 800a4d6:	60fb      	str	r3, [r7, #12]
 800a4d8:	e7fe      	b.n	800a4d8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	3318      	adds	r3, #24
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7ff fa4c 	bl	800997c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4e4:	4b1d      	ldr	r3, [pc, #116]	; (800a55c <xTaskRemoveFromEventList+0xac>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d11c      	bne.n	800a526 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	3304      	adds	r3, #4
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7ff fa43 	bl	800997c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	409a      	lsls	r2, r3
 800a4fe:	4b18      	ldr	r3, [pc, #96]	; (800a560 <xTaskRemoveFromEventList+0xb0>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4313      	orrs	r3, r2
 800a504:	4a16      	ldr	r2, [pc, #88]	; (800a560 <xTaskRemoveFromEventList+0xb0>)
 800a506:	6013      	str	r3, [r2, #0]
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a50c:	4613      	mov	r3, r2
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	4413      	add	r3, r2
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	4a13      	ldr	r2, [pc, #76]	; (800a564 <xTaskRemoveFromEventList+0xb4>)
 800a516:	441a      	add	r2, r3
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	3304      	adds	r3, #4
 800a51c:	4619      	mov	r1, r3
 800a51e:	4610      	mov	r0, r2
 800a520:	f7ff f9cf 	bl	80098c2 <vListInsertEnd>
 800a524:	e005      	b.n	800a532 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	3318      	adds	r3, #24
 800a52a:	4619      	mov	r1, r3
 800a52c:	480e      	ldr	r0, [pc, #56]	; (800a568 <xTaskRemoveFromEventList+0xb8>)
 800a52e:	f7ff f9c8 	bl	80098c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a536:	4b0d      	ldr	r3, [pc, #52]	; (800a56c <xTaskRemoveFromEventList+0xbc>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d905      	bls.n	800a54c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a540:	2301      	movs	r3, #1
 800a542:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a544:	4b0a      	ldr	r3, [pc, #40]	; (800a570 <xTaskRemoveFromEventList+0xc0>)
 800a546:	2201      	movs	r2, #1
 800a548:	601a      	str	r2, [r3, #0]
 800a54a:	e001      	b.n	800a550 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800a54c:	2300      	movs	r3, #0
 800a54e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a550:	697b      	ldr	r3, [r7, #20]
}
 800a552:	4618      	mov	r0, r3
 800a554:	3718      	adds	r7, #24
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	200021f8 	.word	0x200021f8
 800a560:	200021d8 	.word	0x200021d8
 800a564:	200020d4 	.word	0x200020d4
 800a568:	20002190 	.word	0x20002190
 800a56c:	200020d0 	.word	0x200020d0
 800a570:	200021e4 	.word	0x200021e4

0800a574 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a57c:	f000 f852 	bl	800a624 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a580:	4b06      	ldr	r3, [pc, #24]	; (800a59c <prvIdleTask+0x28>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2b01      	cmp	r3, #1
 800a586:	d9f9      	bls.n	800a57c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a588:	4b05      	ldr	r3, [pc, #20]	; (800a5a0 <prvIdleTask+0x2c>)
 800a58a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a58e:	601a      	str	r2, [r3, #0]
 800a590:	f3bf 8f4f 	dsb	sy
 800a594:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a598:	e7f0      	b.n	800a57c <prvIdleTask+0x8>
 800a59a:	bf00      	nop
 800a59c:	200020d4 	.word	0x200020d4
 800a5a0:	e000ed04 	.word	0xe000ed04

0800a5a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	607b      	str	r3, [r7, #4]
 800a5ae:	e00c      	b.n	800a5ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a5b0:	687a      	ldr	r2, [r7, #4]
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	4413      	add	r3, r2
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	4a12      	ldr	r2, [pc, #72]	; (800a604 <prvInitialiseTaskLists+0x60>)
 800a5bc:	4413      	add	r3, r2
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7ff f952 	bl	8009868 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	607b      	str	r3, [r7, #4]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2b06      	cmp	r3, #6
 800a5ce:	d9ef      	bls.n	800a5b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a5d0:	480d      	ldr	r0, [pc, #52]	; (800a608 <prvInitialiseTaskLists+0x64>)
 800a5d2:	f7ff f949 	bl	8009868 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a5d6:	480d      	ldr	r0, [pc, #52]	; (800a60c <prvInitialiseTaskLists+0x68>)
 800a5d8:	f7ff f946 	bl	8009868 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a5dc:	480c      	ldr	r0, [pc, #48]	; (800a610 <prvInitialiseTaskLists+0x6c>)
 800a5de:	f7ff f943 	bl	8009868 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a5e2:	480c      	ldr	r0, [pc, #48]	; (800a614 <prvInitialiseTaskLists+0x70>)
 800a5e4:	f7ff f940 	bl	8009868 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a5e8:	480b      	ldr	r0, [pc, #44]	; (800a618 <prvInitialiseTaskLists+0x74>)
 800a5ea:	f7ff f93d 	bl	8009868 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a5ee:	4b0b      	ldr	r3, [pc, #44]	; (800a61c <prvInitialiseTaskLists+0x78>)
 800a5f0:	4a05      	ldr	r2, [pc, #20]	; (800a608 <prvInitialiseTaskLists+0x64>)
 800a5f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a5f4:	4b0a      	ldr	r3, [pc, #40]	; (800a620 <prvInitialiseTaskLists+0x7c>)
 800a5f6:	4a05      	ldr	r2, [pc, #20]	; (800a60c <prvInitialiseTaskLists+0x68>)
 800a5f8:	601a      	str	r2, [r3, #0]
}
 800a5fa:	bf00      	nop
 800a5fc:	3708      	adds	r7, #8
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	200020d4 	.word	0x200020d4
 800a608:	20002160 	.word	0x20002160
 800a60c:	20002174 	.word	0x20002174
 800a610:	20002190 	.word	0x20002190
 800a614:	200021a4 	.word	0x200021a4
 800a618:	200021bc 	.word	0x200021bc
 800a61c:	20002188 	.word	0x20002188
 800a620:	2000218c 	.word	0x2000218c

0800a624 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a62a:	e019      	b.n	800a660 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a62c:	f000 fa16 	bl	800aa5c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a630:	4b0f      	ldr	r3, [pc, #60]	; (800a670 <prvCheckTasksWaitingTermination+0x4c>)
 800a632:	68db      	ldr	r3, [r3, #12]
 800a634:	68db      	ldr	r3, [r3, #12]
 800a636:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	3304      	adds	r3, #4
 800a63c:	4618      	mov	r0, r3
 800a63e:	f7ff f99d 	bl	800997c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a642:	4b0c      	ldr	r3, [pc, #48]	; (800a674 <prvCheckTasksWaitingTermination+0x50>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	3b01      	subs	r3, #1
 800a648:	4a0a      	ldr	r2, [pc, #40]	; (800a674 <prvCheckTasksWaitingTermination+0x50>)
 800a64a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a64c:	4b0a      	ldr	r3, [pc, #40]	; (800a678 <prvCheckTasksWaitingTermination+0x54>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	3b01      	subs	r3, #1
 800a652:	4a09      	ldr	r2, [pc, #36]	; (800a678 <prvCheckTasksWaitingTermination+0x54>)
 800a654:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a656:	f000 fa2f 	bl	800aab8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 f80e 	bl	800a67c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a660:	4b05      	ldr	r3, [pc, #20]	; (800a678 <prvCheckTasksWaitingTermination+0x54>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d1e1      	bne.n	800a62c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a668:	bf00      	nop
 800a66a:	3708      	adds	r7, #8
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}
 800a670:	200021a4 	.word	0x200021a4
 800a674:	200021d0 	.word	0x200021d0
 800a678:	200021b8 	.word	0x200021b8

0800a67c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d108      	bne.n	800a6a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a692:	4618      	mov	r0, r3
 800a694:	f000 fb80 	bl	800ad98 <vPortFree>
				vPortFree( pxTCB );
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 fb7d 	bl	800ad98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a69e:	e017      	b.n	800a6d0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d103      	bne.n	800a6b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 fb74 	bl	800ad98 <vPortFree>
	}
 800a6b0:	e00e      	b.n	800a6d0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a6b8:	2b02      	cmp	r3, #2
 800a6ba:	d009      	beq.n	800a6d0 <prvDeleteTCB+0x54>
 800a6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c0:	f383 8811 	msr	BASEPRI, r3
 800a6c4:	f3bf 8f6f 	isb	sy
 800a6c8:	f3bf 8f4f 	dsb	sy
 800a6cc:	60fb      	str	r3, [r7, #12]
 800a6ce:	e7fe      	b.n	800a6ce <prvDeleteTCB+0x52>
	}
 800a6d0:	bf00      	nop
 800a6d2:	3710      	adds	r7, #16
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a6de:	4b0f      	ldr	r3, [pc, #60]	; (800a71c <prvResetNextTaskUnblockTime+0x44>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d101      	bne.n	800a6ec <prvResetNextTaskUnblockTime+0x14>
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e000      	b.n	800a6ee <prvResetNextTaskUnblockTime+0x16>
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d004      	beq.n	800a6fc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a6f2:	4b0b      	ldr	r3, [pc, #44]	; (800a720 <prvResetNextTaskUnblockTime+0x48>)
 800a6f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a6f8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a6fa:	e008      	b.n	800a70e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a6fc:	4b07      	ldr	r3, [pc, #28]	; (800a71c <prvResetNextTaskUnblockTime+0x44>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	68db      	ldr	r3, [r3, #12]
 800a702:	68db      	ldr	r3, [r3, #12]
 800a704:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	4a05      	ldr	r2, [pc, #20]	; (800a720 <prvResetNextTaskUnblockTime+0x48>)
 800a70c:	6013      	str	r3, [r2, #0]
}
 800a70e:	bf00      	nop
 800a710:	370c      	adds	r7, #12
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr
 800a71a:	bf00      	nop
 800a71c:	20002188 	.word	0x20002188
 800a720:	200021f0 	.word	0x200021f0

0800a724 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a72e:	4b29      	ldr	r3, [pc, #164]	; (800a7d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a734:	4b28      	ldr	r3, [pc, #160]	; (800a7d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	3304      	adds	r3, #4
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7ff f91e 	bl	800997c <uxListRemove>
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d10b      	bne.n	800a75e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800a746:	4b24      	ldr	r3, [pc, #144]	; (800a7d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a74c:	2201      	movs	r2, #1
 800a74e:	fa02 f303 	lsl.w	r3, r2, r3
 800a752:	43da      	mvns	r2, r3
 800a754:	4b21      	ldr	r3, [pc, #132]	; (800a7dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4013      	ands	r3, r2
 800a75a:	4a20      	ldr	r2, [pc, #128]	; (800a7dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800a75c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a764:	d10a      	bne.n	800a77c <prvAddCurrentTaskToDelayedList+0x58>
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d007      	beq.n	800a77c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a76c:	4b1a      	ldr	r3, [pc, #104]	; (800a7d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	3304      	adds	r3, #4
 800a772:	4619      	mov	r1, r3
 800a774:	481a      	ldr	r0, [pc, #104]	; (800a7e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a776:	f7ff f8a4 	bl	80098c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a77a:	e026      	b.n	800a7ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a77c:	68fa      	ldr	r2, [r7, #12]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	4413      	add	r3, r2
 800a782:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a784:	4b14      	ldr	r3, [pc, #80]	; (800a7d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	68ba      	ldr	r2, [r7, #8]
 800a78a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a78c:	68ba      	ldr	r2, [r7, #8]
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	429a      	cmp	r2, r3
 800a792:	d209      	bcs.n	800a7a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a794:	4b13      	ldr	r3, [pc, #76]	; (800a7e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a796:	681a      	ldr	r2, [r3, #0]
 800a798:	4b0f      	ldr	r3, [pc, #60]	; (800a7d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	3304      	adds	r3, #4
 800a79e:	4619      	mov	r1, r3
 800a7a0:	4610      	mov	r0, r2
 800a7a2:	f7ff f8b2 	bl	800990a <vListInsert>
}
 800a7a6:	e010      	b.n	800a7ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7a8:	4b0f      	ldr	r3, [pc, #60]	; (800a7e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	4b0a      	ldr	r3, [pc, #40]	; (800a7d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	3304      	adds	r3, #4
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	4610      	mov	r0, r2
 800a7b6:	f7ff f8a8 	bl	800990a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a7ba:	4b0c      	ldr	r3, [pc, #48]	; (800a7ec <prvAddCurrentTaskToDelayedList+0xc8>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	68ba      	ldr	r2, [r7, #8]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d202      	bcs.n	800a7ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a7c4:	4a09      	ldr	r2, [pc, #36]	; (800a7ec <prvAddCurrentTaskToDelayedList+0xc8>)
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	6013      	str	r3, [r2, #0]
}
 800a7ca:	bf00      	nop
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	200021d4 	.word	0x200021d4
 800a7d8:	200020d0 	.word	0x200020d0
 800a7dc:	200021d8 	.word	0x200021d8
 800a7e0:	200021bc 	.word	0x200021bc
 800a7e4:	2000218c 	.word	0x2000218c
 800a7e8:	20002188 	.word	0x20002188
 800a7ec:	200021f0 	.word	0x200021f0

0800a7f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b085      	sub	sp, #20
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	3b04      	subs	r3, #4
 800a800:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a808:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	3b04      	subs	r3, #4
 800a80e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	f023 0201 	bic.w	r2, r3, #1
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	3b04      	subs	r3, #4
 800a81e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a820:	4a0c      	ldr	r2, [pc, #48]	; (800a854 <pxPortInitialiseStack+0x64>)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	3b14      	subs	r3, #20
 800a82a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	3b04      	subs	r3, #4
 800a836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f06f 0202 	mvn.w	r2, #2
 800a83e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	3b20      	subs	r3, #32
 800a844:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a846:	68fb      	ldr	r3, [r7, #12]
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3714      	adds	r7, #20
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr
 800a854:	0800a859 	.word	0x0800a859

0800a858 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a858:	b480      	push	{r7}
 800a85a:	b085      	sub	sp, #20
 800a85c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a85e:	2300      	movs	r3, #0
 800a860:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a862:	4b11      	ldr	r3, [pc, #68]	; (800a8a8 <prvTaskExitError+0x50>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a86a:	d009      	beq.n	800a880 <prvTaskExitError+0x28>
 800a86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a870:	f383 8811 	msr	BASEPRI, r3
 800a874:	f3bf 8f6f 	isb	sy
 800a878:	f3bf 8f4f 	dsb	sy
 800a87c:	60fb      	str	r3, [r7, #12]
 800a87e:	e7fe      	b.n	800a87e <prvTaskExitError+0x26>
 800a880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a884:	f383 8811 	msr	BASEPRI, r3
 800a888:	f3bf 8f6f 	isb	sy
 800a88c:	f3bf 8f4f 	dsb	sy
 800a890:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a892:	bf00      	nop
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d0fc      	beq.n	800a894 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a89a:	bf00      	nop
 800a89c:	3714      	adds	r7, #20
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr
 800a8a6:	bf00      	nop
 800a8a8:	2000050c 	.word	0x2000050c
 800a8ac:	00000000 	.word	0x00000000

0800a8b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a8b0:	4b07      	ldr	r3, [pc, #28]	; (800a8d0 <pxCurrentTCBConst2>)
 800a8b2:	6819      	ldr	r1, [r3, #0]
 800a8b4:	6808      	ldr	r0, [r1, #0]
 800a8b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ba:	f380 8809 	msr	PSP, r0
 800a8be:	f3bf 8f6f 	isb	sy
 800a8c2:	f04f 0000 	mov.w	r0, #0
 800a8c6:	f380 8811 	msr	BASEPRI, r0
 800a8ca:	4770      	bx	lr
 800a8cc:	f3af 8000 	nop.w

0800a8d0 <pxCurrentTCBConst2>:
 800a8d0:	200020d0 	.word	0x200020d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a8d4:	bf00      	nop
 800a8d6:	bf00      	nop

0800a8d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a8d8:	4808      	ldr	r0, [pc, #32]	; (800a8fc <prvPortStartFirstTask+0x24>)
 800a8da:	6800      	ldr	r0, [r0, #0]
 800a8dc:	6800      	ldr	r0, [r0, #0]
 800a8de:	f380 8808 	msr	MSP, r0
 800a8e2:	f04f 0000 	mov.w	r0, #0
 800a8e6:	f380 8814 	msr	CONTROL, r0
 800a8ea:	b662      	cpsie	i
 800a8ec:	b661      	cpsie	f
 800a8ee:	f3bf 8f4f 	dsb	sy
 800a8f2:	f3bf 8f6f 	isb	sy
 800a8f6:	df00      	svc	0
 800a8f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a8fa:	bf00      	nop
 800a8fc:	e000ed08 	.word	0xe000ed08

0800a900 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b088      	sub	sp, #32
 800a904:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a906:	4b4c      	ldr	r3, [pc, #304]	; (800aa38 <xPortStartScheduler+0x138>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4a4c      	ldr	r2, [pc, #304]	; (800aa3c <xPortStartScheduler+0x13c>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d109      	bne.n	800a924 <xPortStartScheduler+0x24>
 800a910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a914:	f383 8811 	msr	BASEPRI, r3
 800a918:	f3bf 8f6f 	isb	sy
 800a91c:	f3bf 8f4f 	dsb	sy
 800a920:	61bb      	str	r3, [r7, #24]
 800a922:	e7fe      	b.n	800a922 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a924:	4b44      	ldr	r3, [pc, #272]	; (800aa38 <xPortStartScheduler+0x138>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a45      	ldr	r2, [pc, #276]	; (800aa40 <xPortStartScheduler+0x140>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d109      	bne.n	800a942 <xPortStartScheduler+0x42>
 800a92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a932:	f383 8811 	msr	BASEPRI, r3
 800a936:	f3bf 8f6f 	isb	sy
 800a93a:	f3bf 8f4f 	dsb	sy
 800a93e:	617b      	str	r3, [r7, #20]
 800a940:	e7fe      	b.n	800a940 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a942:	4b40      	ldr	r3, [pc, #256]	; (800aa44 <xPortStartScheduler+0x144>)
 800a944:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a946:	69fb      	ldr	r3, [r7, #28]
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a94e:	69fb      	ldr	r3, [r7, #28]
 800a950:	22ff      	movs	r2, #255	; 0xff
 800a952:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a954:	69fb      	ldr	r3, [r7, #28]
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a95c:	79fb      	ldrb	r3, [r7, #7]
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a964:	b2da      	uxtb	r2, r3
 800a966:	4b38      	ldr	r3, [pc, #224]	; (800aa48 <xPortStartScheduler+0x148>)
 800a968:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a96a:	4b38      	ldr	r3, [pc, #224]	; (800aa4c <xPortStartScheduler+0x14c>)
 800a96c:	2207      	movs	r2, #7
 800a96e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a970:	e009      	b.n	800a986 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800a972:	4b36      	ldr	r3, [pc, #216]	; (800aa4c <xPortStartScheduler+0x14c>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	3b01      	subs	r3, #1
 800a978:	4a34      	ldr	r2, [pc, #208]	; (800aa4c <xPortStartScheduler+0x14c>)
 800a97a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a97c:	79fb      	ldrb	r3, [r7, #7]
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	005b      	lsls	r3, r3, #1
 800a982:	b2db      	uxtb	r3, r3
 800a984:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a986:	79fb      	ldrb	r3, [r7, #7]
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a98e:	2b80      	cmp	r3, #128	; 0x80
 800a990:	d0ef      	beq.n	800a972 <xPortStartScheduler+0x72>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800a992:	4b2e      	ldr	r3, [pc, #184]	; (800aa4c <xPortStartScheduler+0x14c>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f1c3 0307 	rsb	r3, r3, #7
 800a99a:	2b04      	cmp	r3, #4
 800a99c:	d009      	beq.n	800a9b2 <xPortStartScheduler+0xb2>
 800a99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a2:	f383 8811 	msr	BASEPRI, r3
 800a9a6:	f3bf 8f6f 	isb	sy
 800a9aa:	f3bf 8f4f 	dsb	sy
 800a9ae:	613b      	str	r3, [r7, #16]
 800a9b0:	e7fe      	b.n	800a9b0 <xPortStartScheduler+0xb0>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a9b2:	4b26      	ldr	r3, [pc, #152]	; (800aa4c <xPortStartScheduler+0x14c>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f1c3 0307 	rsb	r3, r3, #7
 800a9ba:	2b04      	cmp	r3, #4
 800a9bc:	d009      	beq.n	800a9d2 <xPortStartScheduler+0xd2>
 800a9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c2:	f383 8811 	msr	BASEPRI, r3
 800a9c6:	f3bf 8f6f 	isb	sy
 800a9ca:	f3bf 8f4f 	dsb	sy
 800a9ce:	60fb      	str	r3, [r7, #12]
 800a9d0:	e7fe      	b.n	800a9d0 <xPortStartScheduler+0xd0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a9d2:	4b1e      	ldr	r3, [pc, #120]	; (800aa4c <xPortStartScheduler+0x14c>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	021b      	lsls	r3, r3, #8
 800a9d8:	4a1c      	ldr	r2, [pc, #112]	; (800aa4c <xPortStartScheduler+0x14c>)
 800a9da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a9dc:	4b1b      	ldr	r3, [pc, #108]	; (800aa4c <xPortStartScheduler+0x14c>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a9e4:	4a19      	ldr	r2, [pc, #100]	; (800aa4c <xPortStartScheduler+0x14c>)
 800a9e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	b2da      	uxtb	r2, r3
 800a9ec:	69fb      	ldr	r3, [r7, #28]
 800a9ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a9f0:	4b17      	ldr	r3, [pc, #92]	; (800aa50 <xPortStartScheduler+0x150>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a16      	ldr	r2, [pc, #88]	; (800aa50 <xPortStartScheduler+0x150>)
 800a9f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a9fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a9fc:	4b14      	ldr	r3, [pc, #80]	; (800aa50 <xPortStartScheduler+0x150>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4a13      	ldr	r2, [pc, #76]	; (800aa50 <xPortStartScheduler+0x150>)
 800aa02:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aa06:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aa08:	f000 f8d6 	bl	800abb8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aa0c:	4b11      	ldr	r3, [pc, #68]	; (800aa54 <xPortStartScheduler+0x154>)
 800aa0e:	2200      	movs	r2, #0
 800aa10:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aa12:	f000 f8f5 	bl	800ac00 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aa16:	4b10      	ldr	r3, [pc, #64]	; (800aa58 <xPortStartScheduler+0x158>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4a0f      	ldr	r2, [pc, #60]	; (800aa58 <xPortStartScheduler+0x158>)
 800aa1c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aa20:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aa22:	f7ff ff59 	bl	800a8d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aa26:	f7ff fccb 	bl	800a3c0 <vTaskSwitchContext>
	prvTaskExitError();
 800aa2a:	f7ff ff15 	bl	800a858 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aa2e:	2300      	movs	r3, #0
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3720      	adds	r7, #32
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	e000ed00 	.word	0xe000ed00
 800aa3c:	410fc271 	.word	0x410fc271
 800aa40:	410fc270 	.word	0x410fc270
 800aa44:	e000e400 	.word	0xe000e400
 800aa48:	20002204 	.word	0x20002204
 800aa4c:	20002208 	.word	0x20002208
 800aa50:	e000ed20 	.word	0xe000ed20
 800aa54:	2000050c 	.word	0x2000050c
 800aa58:	e000ef34 	.word	0xe000ef34

0800aa5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa66:	f383 8811 	msr	BASEPRI, r3
 800aa6a:	f3bf 8f6f 	isb	sy
 800aa6e:	f3bf 8f4f 	dsb	sy
 800aa72:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aa74:	4b0e      	ldr	r3, [pc, #56]	; (800aab0 <vPortEnterCritical+0x54>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	3301      	adds	r3, #1
 800aa7a:	4a0d      	ldr	r2, [pc, #52]	; (800aab0 <vPortEnterCritical+0x54>)
 800aa7c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aa7e:	4b0c      	ldr	r3, [pc, #48]	; (800aab0 <vPortEnterCritical+0x54>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	d10e      	bne.n	800aaa4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aa86:	4b0b      	ldr	r3, [pc, #44]	; (800aab4 <vPortEnterCritical+0x58>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d009      	beq.n	800aaa4 <vPortEnterCritical+0x48>
 800aa90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa94:	f383 8811 	msr	BASEPRI, r3
 800aa98:	f3bf 8f6f 	isb	sy
 800aa9c:	f3bf 8f4f 	dsb	sy
 800aaa0:	603b      	str	r3, [r7, #0]
 800aaa2:	e7fe      	b.n	800aaa2 <vPortEnterCritical+0x46>
	}
}
 800aaa4:	bf00      	nop
 800aaa6:	370c      	adds	r7, #12
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr
 800aab0:	2000050c 	.word	0x2000050c
 800aab4:	e000ed04 	.word	0xe000ed04

0800aab8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aabe:	4b11      	ldr	r3, [pc, #68]	; (800ab04 <vPortExitCritical+0x4c>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d109      	bne.n	800aada <vPortExitCritical+0x22>
 800aac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaca:	f383 8811 	msr	BASEPRI, r3
 800aace:	f3bf 8f6f 	isb	sy
 800aad2:	f3bf 8f4f 	dsb	sy
 800aad6:	607b      	str	r3, [r7, #4]
 800aad8:	e7fe      	b.n	800aad8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800aada:	4b0a      	ldr	r3, [pc, #40]	; (800ab04 <vPortExitCritical+0x4c>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	3b01      	subs	r3, #1
 800aae0:	4a08      	ldr	r2, [pc, #32]	; (800ab04 <vPortExitCritical+0x4c>)
 800aae2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aae4:	4b07      	ldr	r3, [pc, #28]	; (800ab04 <vPortExitCritical+0x4c>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d104      	bne.n	800aaf6 <vPortExitCritical+0x3e>
 800aaec:	2300      	movs	r3, #0
 800aaee:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800aaf6:	bf00      	nop
 800aaf8:	370c      	adds	r7, #12
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr
 800ab02:	bf00      	nop
 800ab04:	2000050c 	.word	0x2000050c
	...

0800ab10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ab10:	f3ef 8009 	mrs	r0, PSP
 800ab14:	f3bf 8f6f 	isb	sy
 800ab18:	4b15      	ldr	r3, [pc, #84]	; (800ab70 <pxCurrentTCBConst>)
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	f01e 0f10 	tst.w	lr, #16
 800ab20:	bf08      	it	eq
 800ab22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ab26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab2a:	6010      	str	r0, [r2, #0]
 800ab2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ab30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ab34:	f380 8811 	msr	BASEPRI, r0
 800ab38:	f3bf 8f4f 	dsb	sy
 800ab3c:	f3bf 8f6f 	isb	sy
 800ab40:	f7ff fc3e 	bl	800a3c0 <vTaskSwitchContext>
 800ab44:	f04f 0000 	mov.w	r0, #0
 800ab48:	f380 8811 	msr	BASEPRI, r0
 800ab4c:	bc09      	pop	{r0, r3}
 800ab4e:	6819      	ldr	r1, [r3, #0]
 800ab50:	6808      	ldr	r0, [r1, #0]
 800ab52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab56:	f01e 0f10 	tst.w	lr, #16
 800ab5a:	bf08      	it	eq
 800ab5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ab60:	f380 8809 	msr	PSP, r0
 800ab64:	f3bf 8f6f 	isb	sy
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop
 800ab6c:	f3af 8000 	nop.w

0800ab70 <pxCurrentTCBConst>:
 800ab70:	200020d0 	.word	0x200020d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ab74:	bf00      	nop
 800ab76:	bf00      	nop

0800ab78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
	__asm volatile
 800ab7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab82:	f383 8811 	msr	BASEPRI, r3
 800ab86:	f3bf 8f6f 	isb	sy
 800ab8a:	f3bf 8f4f 	dsb	sy
 800ab8e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ab90:	f7ff fb5a 	bl	800a248 <xTaskIncrementTick>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d003      	beq.n	800aba2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ab9a:	4b06      	ldr	r3, [pc, #24]	; (800abb4 <SysTick_Handler+0x3c>)
 800ab9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aba0:	601a      	str	r2, [r3, #0]
 800aba2:	2300      	movs	r3, #0
 800aba4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800abac:	bf00      	nop
 800abae:	3708      	adds	r7, #8
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	e000ed04 	.word	0xe000ed04

0800abb8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800abb8:	b480      	push	{r7}
 800abba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800abbc:	4b0b      	ldr	r3, [pc, #44]	; (800abec <vPortSetupTimerInterrupt+0x34>)
 800abbe:	2200      	movs	r2, #0
 800abc0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800abc2:	4b0b      	ldr	r3, [pc, #44]	; (800abf0 <vPortSetupTimerInterrupt+0x38>)
 800abc4:	2200      	movs	r2, #0
 800abc6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800abc8:	4b0a      	ldr	r3, [pc, #40]	; (800abf4 <vPortSetupTimerInterrupt+0x3c>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4a0a      	ldr	r2, [pc, #40]	; (800abf8 <vPortSetupTimerInterrupt+0x40>)
 800abce:	fba2 2303 	umull	r2, r3, r2, r3
 800abd2:	099b      	lsrs	r3, r3, #6
 800abd4:	4a09      	ldr	r2, [pc, #36]	; (800abfc <vPortSetupTimerInterrupt+0x44>)
 800abd6:	3b01      	subs	r3, #1
 800abd8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800abda:	4b04      	ldr	r3, [pc, #16]	; (800abec <vPortSetupTimerInterrupt+0x34>)
 800abdc:	2207      	movs	r2, #7
 800abde:	601a      	str	r2, [r3, #0]
}
 800abe0:	bf00      	nop
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr
 800abea:	bf00      	nop
 800abec:	e000e010 	.word	0xe000e010
 800abf0:	e000e018 	.word	0xe000e018
 800abf4:	20000500 	.word	0x20000500
 800abf8:	10624dd3 	.word	0x10624dd3
 800abfc:	e000e014 	.word	0xe000e014

0800ac00 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ac00:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ac10 <vPortEnableVFP+0x10>
 800ac04:	6801      	ldr	r1, [r0, #0]
 800ac06:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ac0a:	6001      	str	r1, [r0, #0]
 800ac0c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ac0e:	bf00      	nop
 800ac10:	e000ed88 	.word	0xe000ed88

0800ac14 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b08a      	sub	sp, #40	; 0x28
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ac20:	f7ff fa68 	bl	800a0f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ac24:	4b57      	ldr	r3, [pc, #348]	; (800ad84 <pvPortMalloc+0x170>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d101      	bne.n	800ac30 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ac2c:	f000 f90c 	bl	800ae48 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ac30:	4b55      	ldr	r3, [pc, #340]	; (800ad88 <pvPortMalloc+0x174>)
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	4013      	ands	r3, r2
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	f040 808c 	bne.w	800ad56 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d01c      	beq.n	800ac7e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800ac44:	2208      	movs	r2, #8
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	4413      	add	r3, r2
 800ac4a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f003 0307 	and.w	r3, r3, #7
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d013      	beq.n	800ac7e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f023 0307 	bic.w	r3, r3, #7
 800ac5c:	3308      	adds	r3, #8
 800ac5e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f003 0307 	and.w	r3, r3, #7
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d009      	beq.n	800ac7e <pvPortMalloc+0x6a>
	__asm volatile
 800ac6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6e:	f383 8811 	msr	BASEPRI, r3
 800ac72:	f3bf 8f6f 	isb	sy
 800ac76:	f3bf 8f4f 	dsb	sy
 800ac7a:	617b      	str	r3, [r7, #20]
 800ac7c:	e7fe      	b.n	800ac7c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d068      	beq.n	800ad56 <pvPortMalloc+0x142>
 800ac84:	4b41      	ldr	r3, [pc, #260]	; (800ad8c <pvPortMalloc+0x178>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d863      	bhi.n	800ad56 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ac8e:	4b40      	ldr	r3, [pc, #256]	; (800ad90 <pvPortMalloc+0x17c>)
 800ac90:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ac92:	4b3f      	ldr	r3, [pc, #252]	; (800ad90 <pvPortMalloc+0x17c>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac98:	e004      	b.n	800aca4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800ac9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ac9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	429a      	cmp	r2, r3
 800acac:	d903      	bls.n	800acb6 <pvPortMalloc+0xa2>
 800acae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d1f1      	bne.n	800ac9a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800acb6:	4b33      	ldr	r3, [pc, #204]	; (800ad84 <pvPortMalloc+0x170>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d04a      	beq.n	800ad56 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800acc0:	6a3b      	ldr	r3, [r7, #32]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2208      	movs	r2, #8
 800acc6:	4413      	add	r3, r2
 800acc8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800acca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800accc:	681a      	ldr	r2, [r3, #0]
 800acce:	6a3b      	ldr	r3, [r7, #32]
 800acd0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800acd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd4:	685a      	ldr	r2, [r3, #4]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	1ad2      	subs	r2, r2, r3
 800acda:	2308      	movs	r3, #8
 800acdc:	005b      	lsls	r3, r3, #1
 800acde:	429a      	cmp	r2, r3
 800ace0:	d91e      	bls.n	800ad20 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ace2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	4413      	add	r3, r2
 800ace8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800acea:	69bb      	ldr	r3, [r7, #24]
 800acec:	f003 0307 	and.w	r3, r3, #7
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d009      	beq.n	800ad08 <pvPortMalloc+0xf4>
 800acf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf8:	f383 8811 	msr	BASEPRI, r3
 800acfc:	f3bf 8f6f 	isb	sy
 800ad00:	f3bf 8f4f 	dsb	sy
 800ad04:	613b      	str	r3, [r7, #16]
 800ad06:	e7fe      	b.n	800ad06 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ad08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0a:	685a      	ldr	r2, [r3, #4]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	1ad2      	subs	r2, r2, r3
 800ad10:	69bb      	ldr	r3, [r7, #24]
 800ad12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ad14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ad1a:	69b8      	ldr	r0, [r7, #24]
 800ad1c:	f000 f8f8 	bl	800af10 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ad20:	4b1a      	ldr	r3, [pc, #104]	; (800ad8c <pvPortMalloc+0x178>)
 800ad22:	681a      	ldr	r2, [r3, #0]
 800ad24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	1ad3      	subs	r3, r2, r3
 800ad2a:	4a18      	ldr	r2, [pc, #96]	; (800ad8c <pvPortMalloc+0x178>)
 800ad2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ad2e:	4b17      	ldr	r3, [pc, #92]	; (800ad8c <pvPortMalloc+0x178>)
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	4b18      	ldr	r3, [pc, #96]	; (800ad94 <pvPortMalloc+0x180>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d203      	bcs.n	800ad42 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ad3a:	4b14      	ldr	r3, [pc, #80]	; (800ad8c <pvPortMalloc+0x178>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	4a15      	ldr	r2, [pc, #84]	; (800ad94 <pvPortMalloc+0x180>)
 800ad40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ad42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad44:	685a      	ldr	r2, [r3, #4]
 800ad46:	4b10      	ldr	r3, [pc, #64]	; (800ad88 <pvPortMalloc+0x174>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	431a      	orrs	r2, r3
 800ad4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ad50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad52:	2200      	movs	r2, #0
 800ad54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ad56:	f7ff f9db 	bl	800a110 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad5a:	69fb      	ldr	r3, [r7, #28]
 800ad5c:	f003 0307 	and.w	r3, r3, #7
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d009      	beq.n	800ad78 <pvPortMalloc+0x164>
 800ad64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad68:	f383 8811 	msr	BASEPRI, r3
 800ad6c:	f3bf 8f6f 	isb	sy
 800ad70:	f3bf 8f4f 	dsb	sy
 800ad74:	60fb      	str	r3, [r7, #12]
 800ad76:	e7fe      	b.n	800ad76 <pvPortMalloc+0x162>
	return pvReturn;
 800ad78:	69fb      	ldr	r3, [r7, #28]
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3728      	adds	r7, #40	; 0x28
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	2001a8b4 	.word	0x2001a8b4
 800ad88:	2001a8c0 	.word	0x2001a8c0
 800ad8c:	2001a8b8 	.word	0x2001a8b8
 800ad90:	2001a8ac 	.word	0x2001a8ac
 800ad94:	2001a8bc 	.word	0x2001a8bc

0800ad98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b086      	sub	sp, #24
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d046      	beq.n	800ae38 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800adaa:	2308      	movs	r3, #8
 800adac:	425b      	negs	r3, r3
 800adae:	697a      	ldr	r2, [r7, #20]
 800adb0:	4413      	add	r3, r2
 800adb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	685a      	ldr	r2, [r3, #4]
 800adbc:	4b20      	ldr	r3, [pc, #128]	; (800ae40 <vPortFree+0xa8>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4013      	ands	r3, r2
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d109      	bne.n	800adda <vPortFree+0x42>
 800adc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adca:	f383 8811 	msr	BASEPRI, r3
 800adce:	f3bf 8f6f 	isb	sy
 800add2:	f3bf 8f4f 	dsb	sy
 800add6:	60fb      	str	r3, [r7, #12]
 800add8:	e7fe      	b.n	800add8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d009      	beq.n	800adf6 <vPortFree+0x5e>
 800ade2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade6:	f383 8811 	msr	BASEPRI, r3
 800adea:	f3bf 8f6f 	isb	sy
 800adee:	f3bf 8f4f 	dsb	sy
 800adf2:	60bb      	str	r3, [r7, #8]
 800adf4:	e7fe      	b.n	800adf4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	685a      	ldr	r2, [r3, #4]
 800adfa:	4b11      	ldr	r3, [pc, #68]	; (800ae40 <vPortFree+0xa8>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4013      	ands	r3, r2
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d019      	beq.n	800ae38 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d115      	bne.n	800ae38 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	685a      	ldr	r2, [r3, #4]
 800ae10:	4b0b      	ldr	r3, [pc, #44]	; (800ae40 <vPortFree+0xa8>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	43db      	mvns	r3, r3
 800ae16:	401a      	ands	r2, r3
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ae1c:	f7ff f96a 	bl	800a0f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	685a      	ldr	r2, [r3, #4]
 800ae24:	4b07      	ldr	r3, [pc, #28]	; (800ae44 <vPortFree+0xac>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4413      	add	r3, r2
 800ae2a:	4a06      	ldr	r2, [pc, #24]	; (800ae44 <vPortFree+0xac>)
 800ae2c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ae2e:	6938      	ldr	r0, [r7, #16]
 800ae30:	f000 f86e 	bl	800af10 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ae34:	f7ff f96c 	bl	800a110 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ae38:	bf00      	nop
 800ae3a:	3718      	adds	r7, #24
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	2001a8c0 	.word	0x2001a8c0
 800ae44:	2001a8b8 	.word	0x2001a8b8

0800ae48 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b085      	sub	sp, #20
 800ae4c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ae4e:	4b29      	ldr	r3, [pc, #164]	; (800aef4 <prvHeapInit+0xac>)
 800ae50:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ae52:	4b29      	ldr	r3, [pc, #164]	; (800aef8 <prvHeapInit+0xb0>)
 800ae54:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f003 0307 	and.w	r3, r3, #7
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d00c      	beq.n	800ae7a <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	3307      	adds	r3, #7
 800ae64:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f023 0307 	bic.w	r3, r3, #7
 800ae6c:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ae6e:	68ba      	ldr	r2, [r7, #8]
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	1ad3      	subs	r3, r2, r3
 800ae74:	4a20      	ldr	r2, [pc, #128]	; (800aef8 <prvHeapInit+0xb0>)
 800ae76:	4413      	add	r3, r2
 800ae78:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae7e:	4a1f      	ldr	r2, [pc, #124]	; (800aefc <prvHeapInit+0xb4>)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ae84:	4b1d      	ldr	r3, [pc, #116]	; (800aefc <prvHeapInit+0xb4>)
 800ae86:	2200      	movs	r2, #0
 800ae88:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	68ba      	ldr	r2, [r7, #8]
 800ae8e:	4413      	add	r3, r2
 800ae90:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ae92:	2208      	movs	r2, #8
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	1a9b      	subs	r3, r3, r2
 800ae98:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f023 0307 	bic.w	r3, r3, #7
 800aea0:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	4a16      	ldr	r2, [pc, #88]	; (800af00 <prvHeapInit+0xb8>)
 800aea6:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aea8:	4b15      	ldr	r3, [pc, #84]	; (800af00 <prvHeapInit+0xb8>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	2200      	movs	r2, #0
 800aeae:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aeb0:	4b13      	ldr	r3, [pc, #76]	; (800af00 <prvHeapInit+0xb8>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	68fa      	ldr	r2, [r7, #12]
 800aec0:	1ad2      	subs	r2, r2, r3
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aec6:	4b0e      	ldr	r3, [pc, #56]	; (800af00 <prvHeapInit+0xb8>)
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	4a0c      	ldr	r2, [pc, #48]	; (800af04 <prvHeapInit+0xbc>)
 800aed4:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	4a0b      	ldr	r2, [pc, #44]	; (800af08 <prvHeapInit+0xc0>)
 800aedc:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aede:	4b0b      	ldr	r3, [pc, #44]	; (800af0c <prvHeapInit+0xc4>)
 800aee0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aee4:	601a      	str	r2, [r3, #0]
}
 800aee6:	bf00      	nop
 800aee8:	3714      	adds	r7, #20
 800aeea:	46bd      	mov	sp, r7
 800aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef0:	4770      	bx	lr
 800aef2:	bf00      	nop
 800aef4:	000186a0 	.word	0x000186a0
 800aef8:	2000220c 	.word	0x2000220c
 800aefc:	2001a8ac 	.word	0x2001a8ac
 800af00:	2001a8b4 	.word	0x2001a8b4
 800af04:	2001a8bc 	.word	0x2001a8bc
 800af08:	2001a8b8 	.word	0x2001a8b8
 800af0c:	2001a8c0 	.word	0x2001a8c0

0800af10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800af10:	b480      	push	{r7}
 800af12:	b085      	sub	sp, #20
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800af18:	4b28      	ldr	r3, [pc, #160]	; (800afbc <prvInsertBlockIntoFreeList+0xac>)
 800af1a:	60fb      	str	r3, [r7, #12]
 800af1c:	e002      	b.n	800af24 <prvInsertBlockIntoFreeList+0x14>
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	60fb      	str	r3, [r7, #12]
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d8f7      	bhi.n	800af1e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	68ba      	ldr	r2, [r7, #8]
 800af38:	4413      	add	r3, r2
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d108      	bne.n	800af52 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	685a      	ldr	r2, [r3, #4]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	441a      	add	r2, r3
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	68ba      	ldr	r2, [r7, #8]
 800af5c:	441a      	add	r2, r3
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	429a      	cmp	r2, r3
 800af64:	d118      	bne.n	800af98 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	4b15      	ldr	r3, [pc, #84]	; (800afc0 <prvInsertBlockIntoFreeList+0xb0>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	429a      	cmp	r2, r3
 800af70:	d00d      	beq.n	800af8e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	685a      	ldr	r2, [r3, #4]
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	441a      	add	r2, r3
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	601a      	str	r2, [r3, #0]
 800af8c:	e008      	b.n	800afa0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af8e:	4b0c      	ldr	r3, [pc, #48]	; (800afc0 <prvInsertBlockIntoFreeList+0xb0>)
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	601a      	str	r2, [r3, #0]
 800af96:	e003      	b.n	800afa0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681a      	ldr	r2, [r3, #0]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800afa0:	68fa      	ldr	r2, [r7, #12]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d002      	beq.n	800afae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afae:	bf00      	nop
 800afb0:	3714      	adds	r7, #20
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr
 800afba:	bf00      	nop
 800afbc:	2001a8ac 	.word	0x2001a8ac
 800afc0:	2001a8b4 	.word	0x2001a8b4

0800afc4 <_ZdlPvj>:
 800afc4:	f000 b800 	b.w	800afc8 <_ZdlPv>

0800afc8 <_ZdlPv>:
 800afc8:	f000 bc10 	b.w	800b7ec <free>

0800afcc <atanf>:
 800afcc:	b538      	push	{r3, r4, r5, lr}
 800afce:	ee10 5a10 	vmov	r5, s0
 800afd2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800afd6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800afda:	eef0 7a40 	vmov.f32	s15, s0
 800afde:	db10      	blt.n	800b002 <atanf+0x36>
 800afe0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800afe4:	dd04      	ble.n	800aff0 <atanf+0x24>
 800afe6:	ee70 7a00 	vadd.f32	s15, s0, s0
 800afea:	eeb0 0a67 	vmov.f32	s0, s15
 800afee:	bd38      	pop	{r3, r4, r5, pc}
 800aff0:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800b128 <atanf+0x15c>
 800aff4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800b12c <atanf+0x160>
 800aff8:	2d00      	cmp	r5, #0
 800affa:	bfd8      	it	le
 800affc:	eef0 7a47 	vmovle.f32	s15, s14
 800b000:	e7f3      	b.n	800afea <atanf+0x1e>
 800b002:	4b4b      	ldr	r3, [pc, #300]	; (800b130 <atanf+0x164>)
 800b004:	429c      	cmp	r4, r3
 800b006:	dc10      	bgt.n	800b02a <atanf+0x5e>
 800b008:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800b00c:	da0a      	bge.n	800b024 <atanf+0x58>
 800b00e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800b134 <atanf+0x168>
 800b012:	ee30 7a07 	vadd.f32	s14, s0, s14
 800b016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b01a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800b01e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b022:	dce2      	bgt.n	800afea <atanf+0x1e>
 800b024:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b028:	e013      	b.n	800b052 <atanf+0x86>
 800b02a:	f000 f8a3 	bl	800b174 <fabsf>
 800b02e:	4b42      	ldr	r3, [pc, #264]	; (800b138 <atanf+0x16c>)
 800b030:	429c      	cmp	r4, r3
 800b032:	dc4f      	bgt.n	800b0d4 <atanf+0x108>
 800b034:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800b038:	429c      	cmp	r4, r3
 800b03a:	dc41      	bgt.n	800b0c0 <atanf+0xf4>
 800b03c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800b040:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b044:	eea0 7a27 	vfma.f32	s14, s0, s15
 800b048:	2300      	movs	r3, #0
 800b04a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b04e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b052:	1c5a      	adds	r2, r3, #1
 800b054:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800b058:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800b13c <atanf+0x170>
 800b05c:	eddf 5a38 	vldr	s11, [pc, #224]	; 800b140 <atanf+0x174>
 800b060:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800b144 <atanf+0x178>
 800b064:	ee66 6a06 	vmul.f32	s13, s12, s12
 800b068:	eee6 5a87 	vfma.f32	s11, s13, s14
 800b06c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800b148 <atanf+0x17c>
 800b070:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b074:	eddf 5a35 	vldr	s11, [pc, #212]	; 800b14c <atanf+0x180>
 800b078:	eee7 5a26 	vfma.f32	s11, s14, s13
 800b07c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800b150 <atanf+0x184>
 800b080:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b084:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b154 <atanf+0x188>
 800b088:	eee7 5a26 	vfma.f32	s11, s14, s13
 800b08c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800b158 <atanf+0x18c>
 800b090:	eea6 5a87 	vfma.f32	s10, s13, s14
 800b094:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800b15c <atanf+0x190>
 800b098:	eea5 7a26 	vfma.f32	s14, s10, s13
 800b09c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800b160 <atanf+0x194>
 800b0a0:	eea7 5a26 	vfma.f32	s10, s14, s13
 800b0a4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800b164 <atanf+0x198>
 800b0a8:	eea5 7a26 	vfma.f32	s14, s10, s13
 800b0ac:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b0b0:	eea5 7a86 	vfma.f32	s14, s11, s12
 800b0b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b0b8:	d121      	bne.n	800b0fe <atanf+0x132>
 800b0ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b0be:	e794      	b.n	800afea <atanf+0x1e>
 800b0c0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b0c4:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b0c8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b0d2:	e7be      	b.n	800b052 <atanf+0x86>
 800b0d4:	4b24      	ldr	r3, [pc, #144]	; (800b168 <atanf+0x19c>)
 800b0d6:	429c      	cmp	r4, r3
 800b0d8:	dc0b      	bgt.n	800b0f2 <atanf+0x126>
 800b0da:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800b0de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0e2:	eea0 7a27 	vfma.f32	s14, s0, s15
 800b0e6:	2302      	movs	r3, #2
 800b0e8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b0ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0f0:	e7af      	b.n	800b052 <atanf+0x86>
 800b0f2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b0f6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b0fa:	2303      	movs	r3, #3
 800b0fc:	e7a9      	b.n	800b052 <atanf+0x86>
 800b0fe:	4a1b      	ldr	r2, [pc, #108]	; (800b16c <atanf+0x1a0>)
 800b100:	491b      	ldr	r1, [pc, #108]	; (800b170 <atanf+0x1a4>)
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	441a      	add	r2, r3
 800b106:	440b      	add	r3, r1
 800b108:	edd3 6a00 	vldr	s13, [r3]
 800b10c:	ee37 7a66 	vsub.f32	s14, s14, s13
 800b110:	2d00      	cmp	r5, #0
 800b112:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b116:	ed92 7a00 	vldr	s14, [r2]
 800b11a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b11e:	bfb8      	it	lt
 800b120:	eef1 7a67 	vneglt.f32	s15, s15
 800b124:	e761      	b.n	800afea <atanf+0x1e>
 800b126:	bf00      	nop
 800b128:	bfc90fdb 	.word	0xbfc90fdb
 800b12c:	3fc90fdb 	.word	0x3fc90fdb
 800b130:	3edfffff 	.word	0x3edfffff
 800b134:	7149f2ca 	.word	0x7149f2ca
 800b138:	3f97ffff 	.word	0x3f97ffff
 800b13c:	3c8569d7 	.word	0x3c8569d7
 800b140:	3d4bda59 	.word	0x3d4bda59
 800b144:	bd6ef16b 	.word	0xbd6ef16b
 800b148:	3d886b35 	.word	0x3d886b35
 800b14c:	3dba2e6e 	.word	0x3dba2e6e
 800b150:	3e124925 	.word	0x3e124925
 800b154:	3eaaaaab 	.word	0x3eaaaaab
 800b158:	bd15a221 	.word	0xbd15a221
 800b15c:	bd9d8795 	.word	0xbd9d8795
 800b160:	bde38e38 	.word	0xbde38e38
 800b164:	be4ccccd 	.word	0xbe4ccccd
 800b168:	401bffff 	.word	0x401bffff
 800b16c:	0800ba30 	.word	0x0800ba30
 800b170:	0800ba40 	.word	0x0800ba40

0800b174 <fabsf>:
 800b174:	ee10 3a10 	vmov	r3, s0
 800b178:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b17c:	ee00 3a10 	vmov	s0, r3
 800b180:	4770      	bx	lr
	...

0800b184 <sqrt>:
 800b184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b188:	ed2d 8b02 	vpush	{d8}
 800b18c:	b08b      	sub	sp, #44	; 0x2c
 800b18e:	ec55 4b10 	vmov	r4, r5, d0
 800b192:	f000 f8ab 	bl	800b2ec <__ieee754_sqrt>
 800b196:	4b26      	ldr	r3, [pc, #152]	; (800b230 <sqrt+0xac>)
 800b198:	eeb0 8a40 	vmov.f32	s16, s0
 800b19c:	eef0 8a60 	vmov.f32	s17, s1
 800b1a0:	f993 6000 	ldrsb.w	r6, [r3]
 800b1a4:	1c73      	adds	r3, r6, #1
 800b1a6:	d02a      	beq.n	800b1fe <sqrt+0x7a>
 800b1a8:	4622      	mov	r2, r4
 800b1aa:	462b      	mov	r3, r5
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	4629      	mov	r1, r5
 800b1b0:	f7f5 fc6c 	bl	8000a8c <__aeabi_dcmpun>
 800b1b4:	4607      	mov	r7, r0
 800b1b6:	bb10      	cbnz	r0, 800b1fe <sqrt+0x7a>
 800b1b8:	f04f 0800 	mov.w	r8, #0
 800b1bc:	f04f 0900 	mov.w	r9, #0
 800b1c0:	4642      	mov	r2, r8
 800b1c2:	464b      	mov	r3, r9
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	4629      	mov	r1, r5
 800b1c8:	f7f5 fc38 	bl	8000a3c <__aeabi_dcmplt>
 800b1cc:	b1b8      	cbz	r0, 800b1fe <sqrt+0x7a>
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	9300      	str	r3, [sp, #0]
 800b1d2:	4b18      	ldr	r3, [pc, #96]	; (800b234 <sqrt+0xb0>)
 800b1d4:	9301      	str	r3, [sp, #4]
 800b1d6:	9708      	str	r7, [sp, #32]
 800b1d8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b1dc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b1e0:	b9b6      	cbnz	r6, 800b210 <sqrt+0x8c>
 800b1e2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800b1e6:	4668      	mov	r0, sp
 800b1e8:	f000 fac9 	bl	800b77e <matherr>
 800b1ec:	b1d0      	cbz	r0, 800b224 <sqrt+0xa0>
 800b1ee:	9b08      	ldr	r3, [sp, #32]
 800b1f0:	b11b      	cbz	r3, 800b1fa <sqrt+0x76>
 800b1f2:	f000 fad1 	bl	800b798 <__errno>
 800b1f6:	9b08      	ldr	r3, [sp, #32]
 800b1f8:	6003      	str	r3, [r0, #0]
 800b1fa:	ed9d 8b06 	vldr	d8, [sp, #24]
 800b1fe:	eeb0 0a48 	vmov.f32	s0, s16
 800b202:	eef0 0a68 	vmov.f32	s1, s17
 800b206:	b00b      	add	sp, #44	; 0x2c
 800b208:	ecbd 8b02 	vpop	{d8}
 800b20c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b210:	4642      	mov	r2, r8
 800b212:	464b      	mov	r3, r9
 800b214:	4640      	mov	r0, r8
 800b216:	4649      	mov	r1, r9
 800b218:	f7f5 fac8 	bl	80007ac <__aeabi_ddiv>
 800b21c:	2e02      	cmp	r6, #2
 800b21e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b222:	d1e0      	bne.n	800b1e6 <sqrt+0x62>
 800b224:	f000 fab8 	bl	800b798 <__errno>
 800b228:	2321      	movs	r3, #33	; 0x21
 800b22a:	6003      	str	r3, [r0, #0]
 800b22c:	e7df      	b.n	800b1ee <sqrt+0x6a>
 800b22e:	bf00      	nop
 800b230:	20000510 	.word	0x20000510
 800b234:	0800ba50 	.word	0x0800ba50

0800b238 <asinf>:
 800b238:	b510      	push	{r4, lr}
 800b23a:	ed2d 8b02 	vpush	{d8}
 800b23e:	4c27      	ldr	r4, [pc, #156]	; (800b2dc <asinf+0xa4>)
 800b240:	b08a      	sub	sp, #40	; 0x28
 800b242:	eeb0 8a40 	vmov.f32	s16, s0
 800b246:	f000 f901 	bl	800b44c <__ieee754_asinf>
 800b24a:	f994 3000 	ldrsb.w	r3, [r4]
 800b24e:	3301      	adds	r3, #1
 800b250:	eef0 8a40 	vmov.f32	s17, s0
 800b254:	d03c      	beq.n	800b2d0 <asinf+0x98>
 800b256:	eeb4 8a48 	vcmp.f32	s16, s16
 800b25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b25e:	d637      	bvs.n	800b2d0 <asinf+0x98>
 800b260:	eeb0 0a48 	vmov.f32	s0, s16
 800b264:	f7ff ff86 	bl	800b174 <fabsf>
 800b268:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b26c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b274:	dd2c      	ble.n	800b2d0 <asinf+0x98>
 800b276:	2301      	movs	r3, #1
 800b278:	9300      	str	r3, [sp, #0]
 800b27a:	4b19      	ldr	r3, [pc, #100]	; (800b2e0 <asinf+0xa8>)
 800b27c:	9301      	str	r3, [sp, #4]
 800b27e:	ee18 0a10 	vmov	r0, s16
 800b282:	2300      	movs	r3, #0
 800b284:	9308      	str	r3, [sp, #32]
 800b286:	f7f5 f90f 	bl	80004a8 <__aeabi_f2d>
 800b28a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b28e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b292:	4814      	ldr	r0, [pc, #80]	; (800b2e4 <asinf+0xac>)
 800b294:	f000 fa78 	bl	800b788 <nan>
 800b298:	f994 3000 	ldrsb.w	r3, [r4]
 800b29c:	2b02      	cmp	r3, #2
 800b29e:	ed8d 0b06 	vstr	d0, [sp, #24]
 800b2a2:	d104      	bne.n	800b2ae <asinf+0x76>
 800b2a4:	f000 fa78 	bl	800b798 <__errno>
 800b2a8:	2321      	movs	r3, #33	; 0x21
 800b2aa:	6003      	str	r3, [r0, #0]
 800b2ac:	e004      	b.n	800b2b8 <asinf+0x80>
 800b2ae:	4668      	mov	r0, sp
 800b2b0:	f000 fa65 	bl	800b77e <matherr>
 800b2b4:	2800      	cmp	r0, #0
 800b2b6:	d0f5      	beq.n	800b2a4 <asinf+0x6c>
 800b2b8:	9b08      	ldr	r3, [sp, #32]
 800b2ba:	b11b      	cbz	r3, 800b2c4 <asinf+0x8c>
 800b2bc:	f000 fa6c 	bl	800b798 <__errno>
 800b2c0:	9b08      	ldr	r3, [sp, #32]
 800b2c2:	6003      	str	r3, [r0, #0]
 800b2c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2c8:	f7f5 fc3e 	bl	8000b48 <__aeabi_d2f>
 800b2cc:	ee08 0a90 	vmov	s17, r0
 800b2d0:	eeb0 0a68 	vmov.f32	s0, s17
 800b2d4:	b00a      	add	sp, #40	; 0x28
 800b2d6:	ecbd 8b02 	vpop	{d8}
 800b2da:	bd10      	pop	{r4, pc}
 800b2dc:	20000510 	.word	0x20000510
 800b2e0:	0800ba55 	.word	0x0800ba55
 800b2e4:	0800ba5a 	.word	0x0800ba5a

0800b2e8 <atan2f>:
 800b2e8:	f000 b998 	b.w	800b61c <__ieee754_atan2f>

0800b2ec <__ieee754_sqrt>:
 800b2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2f0:	4955      	ldr	r1, [pc, #340]	; (800b448 <__ieee754_sqrt+0x15c>)
 800b2f2:	ec55 4b10 	vmov	r4, r5, d0
 800b2f6:	43a9      	bics	r1, r5
 800b2f8:	462b      	mov	r3, r5
 800b2fa:	462a      	mov	r2, r5
 800b2fc:	d112      	bne.n	800b324 <__ieee754_sqrt+0x38>
 800b2fe:	ee10 2a10 	vmov	r2, s0
 800b302:	ee10 0a10 	vmov	r0, s0
 800b306:	4629      	mov	r1, r5
 800b308:	f7f5 f926 	bl	8000558 <__aeabi_dmul>
 800b30c:	4602      	mov	r2, r0
 800b30e:	460b      	mov	r3, r1
 800b310:	4620      	mov	r0, r4
 800b312:	4629      	mov	r1, r5
 800b314:	f7f4 ff6a 	bl	80001ec <__adddf3>
 800b318:	4604      	mov	r4, r0
 800b31a:	460d      	mov	r5, r1
 800b31c:	ec45 4b10 	vmov	d0, r4, r5
 800b320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b324:	2d00      	cmp	r5, #0
 800b326:	ee10 0a10 	vmov	r0, s0
 800b32a:	4621      	mov	r1, r4
 800b32c:	dc0f      	bgt.n	800b34e <__ieee754_sqrt+0x62>
 800b32e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b332:	4330      	orrs	r0, r6
 800b334:	d0f2      	beq.n	800b31c <__ieee754_sqrt+0x30>
 800b336:	b155      	cbz	r5, 800b34e <__ieee754_sqrt+0x62>
 800b338:	ee10 2a10 	vmov	r2, s0
 800b33c:	4620      	mov	r0, r4
 800b33e:	4629      	mov	r1, r5
 800b340:	f7f4 ff52 	bl	80001e8 <__aeabi_dsub>
 800b344:	4602      	mov	r2, r0
 800b346:	460b      	mov	r3, r1
 800b348:	f7f5 fa30 	bl	80007ac <__aeabi_ddiv>
 800b34c:	e7e4      	b.n	800b318 <__ieee754_sqrt+0x2c>
 800b34e:	151b      	asrs	r3, r3, #20
 800b350:	d073      	beq.n	800b43a <__ieee754_sqrt+0x14e>
 800b352:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b356:	07dd      	lsls	r5, r3, #31
 800b358:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b35c:	bf48      	it	mi
 800b35e:	0fc8      	lsrmi	r0, r1, #31
 800b360:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b364:	bf44      	itt	mi
 800b366:	0049      	lslmi	r1, r1, #1
 800b368:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800b36c:	2500      	movs	r5, #0
 800b36e:	1058      	asrs	r0, r3, #1
 800b370:	0fcb      	lsrs	r3, r1, #31
 800b372:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800b376:	0049      	lsls	r1, r1, #1
 800b378:	2316      	movs	r3, #22
 800b37a:	462c      	mov	r4, r5
 800b37c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800b380:	19a7      	adds	r7, r4, r6
 800b382:	4297      	cmp	r7, r2
 800b384:	bfde      	ittt	le
 800b386:	19bc      	addle	r4, r7, r6
 800b388:	1bd2      	suble	r2, r2, r7
 800b38a:	19ad      	addle	r5, r5, r6
 800b38c:	0fcf      	lsrs	r7, r1, #31
 800b38e:	3b01      	subs	r3, #1
 800b390:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800b394:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b398:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b39c:	d1f0      	bne.n	800b380 <__ieee754_sqrt+0x94>
 800b39e:	f04f 0c20 	mov.w	ip, #32
 800b3a2:	469e      	mov	lr, r3
 800b3a4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b3a8:	42a2      	cmp	r2, r4
 800b3aa:	eb06 070e 	add.w	r7, r6, lr
 800b3ae:	dc02      	bgt.n	800b3b6 <__ieee754_sqrt+0xca>
 800b3b0:	d112      	bne.n	800b3d8 <__ieee754_sqrt+0xec>
 800b3b2:	428f      	cmp	r7, r1
 800b3b4:	d810      	bhi.n	800b3d8 <__ieee754_sqrt+0xec>
 800b3b6:	2f00      	cmp	r7, #0
 800b3b8:	eb07 0e06 	add.w	lr, r7, r6
 800b3bc:	da42      	bge.n	800b444 <__ieee754_sqrt+0x158>
 800b3be:	f1be 0f00 	cmp.w	lr, #0
 800b3c2:	db3f      	blt.n	800b444 <__ieee754_sqrt+0x158>
 800b3c4:	f104 0801 	add.w	r8, r4, #1
 800b3c8:	1b12      	subs	r2, r2, r4
 800b3ca:	428f      	cmp	r7, r1
 800b3cc:	bf88      	it	hi
 800b3ce:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800b3d2:	1bc9      	subs	r1, r1, r7
 800b3d4:	4433      	add	r3, r6
 800b3d6:	4644      	mov	r4, r8
 800b3d8:	0052      	lsls	r2, r2, #1
 800b3da:	f1bc 0c01 	subs.w	ip, ip, #1
 800b3de:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800b3e2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b3e6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b3ea:	d1dd      	bne.n	800b3a8 <__ieee754_sqrt+0xbc>
 800b3ec:	430a      	orrs	r2, r1
 800b3ee:	d006      	beq.n	800b3fe <__ieee754_sqrt+0x112>
 800b3f0:	1c5c      	adds	r4, r3, #1
 800b3f2:	bf13      	iteet	ne
 800b3f4:	3301      	addne	r3, #1
 800b3f6:	3501      	addeq	r5, #1
 800b3f8:	4663      	moveq	r3, ip
 800b3fa:	f023 0301 	bicne.w	r3, r3, #1
 800b3fe:	106a      	asrs	r2, r5, #1
 800b400:	085b      	lsrs	r3, r3, #1
 800b402:	07e9      	lsls	r1, r5, #31
 800b404:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800b408:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800b40c:	bf48      	it	mi
 800b40e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800b412:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800b416:	461c      	mov	r4, r3
 800b418:	e780      	b.n	800b31c <__ieee754_sqrt+0x30>
 800b41a:	0aca      	lsrs	r2, r1, #11
 800b41c:	3815      	subs	r0, #21
 800b41e:	0549      	lsls	r1, r1, #21
 800b420:	2a00      	cmp	r2, #0
 800b422:	d0fa      	beq.n	800b41a <__ieee754_sqrt+0x12e>
 800b424:	02d6      	lsls	r6, r2, #11
 800b426:	d50a      	bpl.n	800b43e <__ieee754_sqrt+0x152>
 800b428:	f1c3 0420 	rsb	r4, r3, #32
 800b42c:	fa21 f404 	lsr.w	r4, r1, r4
 800b430:	1e5d      	subs	r5, r3, #1
 800b432:	4099      	lsls	r1, r3
 800b434:	4322      	orrs	r2, r4
 800b436:	1b43      	subs	r3, r0, r5
 800b438:	e78b      	b.n	800b352 <__ieee754_sqrt+0x66>
 800b43a:	4618      	mov	r0, r3
 800b43c:	e7f0      	b.n	800b420 <__ieee754_sqrt+0x134>
 800b43e:	0052      	lsls	r2, r2, #1
 800b440:	3301      	adds	r3, #1
 800b442:	e7ef      	b.n	800b424 <__ieee754_sqrt+0x138>
 800b444:	46a0      	mov	r8, r4
 800b446:	e7bf      	b.n	800b3c8 <__ieee754_sqrt+0xdc>
 800b448:	7ff00000 	.word	0x7ff00000

0800b44c <__ieee754_asinf>:
 800b44c:	b538      	push	{r3, r4, r5, lr}
 800b44e:	ee10 5a10 	vmov	r5, s0
 800b452:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800b456:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800b45a:	ed2d 8b04 	vpush	{d8-d9}
 800b45e:	d10c      	bne.n	800b47a <__ieee754_asinf+0x2e>
 800b460:	eddf 7a5e 	vldr	s15, [pc, #376]	; 800b5dc <__ieee754_asinf+0x190>
 800b464:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800b5e0 <__ieee754_asinf+0x194>
 800b468:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b46c:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b470:	eeb0 0a67 	vmov.f32	s0, s15
 800b474:	ecbd 8b04 	vpop	{d8-d9}
 800b478:	bd38      	pop	{r3, r4, r5, pc}
 800b47a:	dd04      	ble.n	800b486 <__ieee754_asinf+0x3a>
 800b47c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b480:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800b484:	e7f6      	b.n	800b474 <__ieee754_asinf+0x28>
 800b486:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800b48a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800b48e:	da0b      	bge.n	800b4a8 <__ieee754_asinf+0x5c>
 800b490:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800b494:	da52      	bge.n	800b53c <__ieee754_asinf+0xf0>
 800b496:	eddf 7a53 	vldr	s15, [pc, #332]	; 800b5e4 <__ieee754_asinf+0x198>
 800b49a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800b49e:	eef4 7ae8 	vcmpe.f32	s15, s17
 800b4a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4a6:	dce5      	bgt.n	800b474 <__ieee754_asinf+0x28>
 800b4a8:	f7ff fe64 	bl	800b174 <fabsf>
 800b4ac:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800b4b0:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800b4b4:	ee20 8a08 	vmul.f32	s16, s0, s16
 800b4b8:	eddf 7a4b 	vldr	s15, [pc, #300]	; 800b5e8 <__ieee754_asinf+0x19c>
 800b4bc:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800b5ec <__ieee754_asinf+0x1a0>
 800b4c0:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 800b5f0 <__ieee754_asinf+0x1a4>
 800b4c4:	eea8 7a27 	vfma.f32	s14, s16, s15
 800b4c8:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800b5f4 <__ieee754_asinf+0x1a8>
 800b4cc:	eee7 7a08 	vfma.f32	s15, s14, s16
 800b4d0:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800b5f8 <__ieee754_asinf+0x1ac>
 800b4d4:	eea7 7a88 	vfma.f32	s14, s15, s16
 800b4d8:	eddf 7a48 	vldr	s15, [pc, #288]	; 800b5fc <__ieee754_asinf+0x1b0>
 800b4dc:	eee7 7a08 	vfma.f32	s15, s14, s16
 800b4e0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800b600 <__ieee754_asinf+0x1b4>
 800b4e4:	eea7 9a88 	vfma.f32	s18, s15, s16
 800b4e8:	eddf 7a46 	vldr	s15, [pc, #280]	; 800b604 <__ieee754_asinf+0x1b8>
 800b4ec:	eee8 7a07 	vfma.f32	s15, s16, s14
 800b4f0:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800b608 <__ieee754_asinf+0x1bc>
 800b4f4:	eea7 7a88 	vfma.f32	s14, s15, s16
 800b4f8:	eddf 7a44 	vldr	s15, [pc, #272]	; 800b60c <__ieee754_asinf+0x1c0>
 800b4fc:	eee7 7a08 	vfma.f32	s15, s14, s16
 800b500:	eeb0 0a48 	vmov.f32	s0, s16
 800b504:	eee7 8a88 	vfma.f32	s17, s15, s16
 800b508:	f000 f936 	bl	800b778 <__ieee754_sqrtf>
 800b50c:	4b40      	ldr	r3, [pc, #256]	; (800b610 <__ieee754_asinf+0x1c4>)
 800b50e:	ee29 9a08 	vmul.f32	s18, s18, s16
 800b512:	429c      	cmp	r4, r3
 800b514:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800b518:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b51c:	dd3d      	ble.n	800b59a <__ieee754_asinf+0x14e>
 800b51e:	eea0 0a06 	vfma.f32	s0, s0, s12
 800b522:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800b614 <__ieee754_asinf+0x1c8>
 800b526:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b52a:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800b5e0 <__ieee754_asinf+0x194>
 800b52e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b532:	2d00      	cmp	r5, #0
 800b534:	bfd8      	it	le
 800b536:	eeb1 0a40 	vnegle.f32	s0, s0
 800b53a:	e79b      	b.n	800b474 <__ieee754_asinf+0x28>
 800b53c:	ee60 7a00 	vmul.f32	s15, s0, s0
 800b540:	eddf 6a29 	vldr	s13, [pc, #164]	; 800b5e8 <__ieee754_asinf+0x19c>
 800b544:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800b5ec <__ieee754_asinf+0x1a0>
 800b548:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800b600 <__ieee754_asinf+0x1b4>
 800b54c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800b550:	eddf 6a28 	vldr	s13, [pc, #160]	; 800b5f4 <__ieee754_asinf+0x1a8>
 800b554:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b558:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800b5f8 <__ieee754_asinf+0x1ac>
 800b55c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b560:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b5fc <__ieee754_asinf+0x1b0>
 800b564:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b568:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800b5f0 <__ieee754_asinf+0x1a4>
 800b56c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b570:	eddf 6a24 	vldr	s13, [pc, #144]	; 800b604 <__ieee754_asinf+0x1b8>
 800b574:	eee7 6a86 	vfma.f32	s13, s15, s12
 800b578:	ed9f 6a23 	vldr	s12, [pc, #140]	; 800b608 <__ieee754_asinf+0x1bc>
 800b57c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800b580:	eddf 6a22 	vldr	s13, [pc, #136]	; 800b60c <__ieee754_asinf+0x1c0>
 800b584:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b588:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b58c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800b590:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800b594:	eea0 0a27 	vfma.f32	s0, s0, s15
 800b598:	e76c      	b.n	800b474 <__ieee754_asinf+0x28>
 800b59a:	ee10 3a10 	vmov	r3, s0
 800b59e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b5a2:	f023 030f 	bic.w	r3, r3, #15
 800b5a6:	ee07 3a90 	vmov	s15, r3
 800b5aa:	eef1 6a67 	vneg.f32	s13, s15
 800b5ae:	eea6 8aa7 	vfma.f32	s16, s13, s15
 800b5b2:	ee70 5a00 	vadd.f32	s11, s0, s0
 800b5b6:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b5ba:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b5dc <__ieee754_asinf+0x190>
 800b5be:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800b5c2:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800b618 <__ieee754_asinf+0x1cc>
 800b5c6:	eee5 7a47 	vfms.f32	s15, s10, s14
 800b5ca:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800b5ce:	eeb0 6a40 	vmov.f32	s12, s0
 800b5d2:	eea6 6a87 	vfma.f32	s12, s13, s14
 800b5d6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b5da:	e7a8      	b.n	800b52e <__ieee754_asinf+0xe2>
 800b5dc:	b33bbd2e 	.word	0xb33bbd2e
 800b5e0:	3fc90fdb 	.word	0x3fc90fdb
 800b5e4:	7149f2ca 	.word	0x7149f2ca
 800b5e8:	3811ef08 	.word	0x3811ef08
 800b5ec:	3a4f7f04 	.word	0x3a4f7f04
 800b5f0:	3e2aaaab 	.word	0x3e2aaaab
 800b5f4:	bd241146 	.word	0xbd241146
 800b5f8:	3e4e0aa8 	.word	0x3e4e0aa8
 800b5fc:	bea6b090 	.word	0xbea6b090
 800b600:	3d9dc62e 	.word	0x3d9dc62e
 800b604:	bf303361 	.word	0xbf303361
 800b608:	4001572d 	.word	0x4001572d
 800b60c:	c019d139 	.word	0xc019d139
 800b610:	3f799999 	.word	0x3f799999
 800b614:	333bbd2e 	.word	0x333bbd2e
 800b618:	3f490fdb 	.word	0x3f490fdb

0800b61c <__ieee754_atan2f>:
 800b61c:	ee10 2a90 	vmov	r2, s1
 800b620:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800b624:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b628:	b510      	push	{r4, lr}
 800b62a:	eef0 7a40 	vmov.f32	s15, s0
 800b62e:	dc06      	bgt.n	800b63e <__ieee754_atan2f+0x22>
 800b630:	ee10 0a10 	vmov	r0, s0
 800b634:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800b638:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b63c:	dd04      	ble.n	800b648 <__ieee754_atan2f+0x2c>
 800b63e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800b642:	eeb0 0a67 	vmov.f32	s0, s15
 800b646:	bd10      	pop	{r4, pc}
 800b648:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800b64c:	d103      	bne.n	800b656 <__ieee754_atan2f+0x3a>
 800b64e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b652:	f7ff bcbb 	b.w	800afcc <atanf>
 800b656:	1794      	asrs	r4, r2, #30
 800b658:	f004 0402 	and.w	r4, r4, #2
 800b65c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800b660:	b943      	cbnz	r3, 800b674 <__ieee754_atan2f+0x58>
 800b662:	2c02      	cmp	r4, #2
 800b664:	d06e      	beq.n	800b744 <__ieee754_atan2f+0x128>
 800b666:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800b74c <__ieee754_atan2f+0x130>
 800b66a:	2c03      	cmp	r4, #3
 800b66c:	bf08      	it	eq
 800b66e:	eef0 7a47 	vmoveq.f32	s15, s14
 800b672:	e7e6      	b.n	800b642 <__ieee754_atan2f+0x26>
 800b674:	b941      	cbnz	r1, 800b688 <__ieee754_atan2f+0x6c>
 800b676:	eddf 7a36 	vldr	s15, [pc, #216]	; 800b750 <__ieee754_atan2f+0x134>
 800b67a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800b754 <__ieee754_atan2f+0x138>
 800b67e:	2800      	cmp	r0, #0
 800b680:	bfb8      	it	lt
 800b682:	eef0 7a47 	vmovlt.f32	s15, s14
 800b686:	e7dc      	b.n	800b642 <__ieee754_atan2f+0x26>
 800b688:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b68c:	d122      	bne.n	800b6d4 <__ieee754_atan2f+0xb8>
 800b68e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b692:	d112      	bne.n	800b6ba <__ieee754_atan2f+0x9e>
 800b694:	2c02      	cmp	r4, #2
 800b696:	d00a      	beq.n	800b6ae <__ieee754_atan2f+0x92>
 800b698:	2c03      	cmp	r4, #3
 800b69a:	d00b      	beq.n	800b6b4 <__ieee754_atan2f+0x98>
 800b69c:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800b758 <__ieee754_atan2f+0x13c>
 800b6a0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800b75c <__ieee754_atan2f+0x140>
 800b6a4:	2c01      	cmp	r4, #1
 800b6a6:	bf18      	it	ne
 800b6a8:	eef0 7a47 	vmovne.f32	s15, s14
 800b6ac:	e7c9      	b.n	800b642 <__ieee754_atan2f+0x26>
 800b6ae:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800b760 <__ieee754_atan2f+0x144>
 800b6b2:	e7c6      	b.n	800b642 <__ieee754_atan2f+0x26>
 800b6b4:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b764 <__ieee754_atan2f+0x148>
 800b6b8:	e7c3      	b.n	800b642 <__ieee754_atan2f+0x26>
 800b6ba:	2c02      	cmp	r4, #2
 800b6bc:	d042      	beq.n	800b744 <__ieee754_atan2f+0x128>
 800b6be:	2c03      	cmp	r4, #3
 800b6c0:	d005      	beq.n	800b6ce <__ieee754_atan2f+0xb2>
 800b6c2:	2c01      	cmp	r4, #1
 800b6c4:	eddf 7a28 	vldr	s15, [pc, #160]	; 800b768 <__ieee754_atan2f+0x14c>
 800b6c8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800b76c <__ieee754_atan2f+0x150>
 800b6cc:	e7eb      	b.n	800b6a6 <__ieee754_atan2f+0x8a>
 800b6ce:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b74c <__ieee754_atan2f+0x130>
 800b6d2:	e7b6      	b.n	800b642 <__ieee754_atan2f+0x26>
 800b6d4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b6d8:	d0cd      	beq.n	800b676 <__ieee754_atan2f+0x5a>
 800b6da:	1a5b      	subs	r3, r3, r1
 800b6dc:	15db      	asrs	r3, r3, #23
 800b6de:	2b3c      	cmp	r3, #60	; 0x3c
 800b6e0:	dc1a      	bgt.n	800b718 <__ieee754_atan2f+0xfc>
 800b6e2:	2a00      	cmp	r2, #0
 800b6e4:	da01      	bge.n	800b6ea <__ieee754_atan2f+0xce>
 800b6e6:	333c      	adds	r3, #60	; 0x3c
 800b6e8:	db19      	blt.n	800b71e <__ieee754_atan2f+0x102>
 800b6ea:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800b6ee:	f7ff fd41 	bl	800b174 <fabsf>
 800b6f2:	f7ff fc6b 	bl	800afcc <atanf>
 800b6f6:	eef0 7a40 	vmov.f32	s15, s0
 800b6fa:	2c01      	cmp	r4, #1
 800b6fc:	d012      	beq.n	800b724 <__ieee754_atan2f+0x108>
 800b6fe:	2c02      	cmp	r4, #2
 800b700:	d017      	beq.n	800b732 <__ieee754_atan2f+0x116>
 800b702:	2c00      	cmp	r4, #0
 800b704:	d09d      	beq.n	800b642 <__ieee754_atan2f+0x26>
 800b706:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800b770 <__ieee754_atan2f+0x154>
 800b70a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b70e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800b774 <__ieee754_atan2f+0x158>
 800b712:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b716:	e794      	b.n	800b642 <__ieee754_atan2f+0x26>
 800b718:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800b750 <__ieee754_atan2f+0x134>
 800b71c:	e7ed      	b.n	800b6fa <__ieee754_atan2f+0xde>
 800b71e:	eddf 7a13 	vldr	s15, [pc, #76]	; 800b76c <__ieee754_atan2f+0x150>
 800b722:	e7ea      	b.n	800b6fa <__ieee754_atan2f+0xde>
 800b724:	ee17 3a90 	vmov	r3, s15
 800b728:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b72c:	ee07 3a90 	vmov	s15, r3
 800b730:	e787      	b.n	800b642 <__ieee754_atan2f+0x26>
 800b732:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800b770 <__ieee754_atan2f+0x154>
 800b736:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b73a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800b774 <__ieee754_atan2f+0x158>
 800b73e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b742:	e77e      	b.n	800b642 <__ieee754_atan2f+0x26>
 800b744:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800b774 <__ieee754_atan2f+0x158>
 800b748:	e77b      	b.n	800b642 <__ieee754_atan2f+0x26>
 800b74a:	bf00      	nop
 800b74c:	c0490fdb 	.word	0xc0490fdb
 800b750:	3fc90fdb 	.word	0x3fc90fdb
 800b754:	bfc90fdb 	.word	0xbfc90fdb
 800b758:	bf490fdb 	.word	0xbf490fdb
 800b75c:	3f490fdb 	.word	0x3f490fdb
 800b760:	4016cbe4 	.word	0x4016cbe4
 800b764:	c016cbe4 	.word	0xc016cbe4
 800b768:	80000000 	.word	0x80000000
 800b76c:	00000000 	.word	0x00000000
 800b770:	33bbbd2e 	.word	0x33bbbd2e
 800b774:	40490fdb 	.word	0x40490fdb

0800b778 <__ieee754_sqrtf>:
 800b778:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b77c:	4770      	bx	lr

0800b77e <matherr>:
 800b77e:	2000      	movs	r0, #0
 800b780:	4770      	bx	lr
 800b782:	0000      	movs	r0, r0
 800b784:	0000      	movs	r0, r0
	...

0800b788 <nan>:
 800b788:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b790 <nan+0x8>
 800b78c:	4770      	bx	lr
 800b78e:	bf00      	nop
 800b790:	00000000 	.word	0x00000000
 800b794:	7ff80000 	.word	0x7ff80000

0800b798 <__errno>:
 800b798:	4b01      	ldr	r3, [pc, #4]	; (800b7a0 <__errno+0x8>)
 800b79a:	6818      	ldr	r0, [r3, #0]
 800b79c:	4770      	bx	lr
 800b79e:	bf00      	nop
 800b7a0:	20000514 	.word	0x20000514

0800b7a4 <__libc_init_array>:
 800b7a4:	b570      	push	{r4, r5, r6, lr}
 800b7a6:	4e0d      	ldr	r6, [pc, #52]	; (800b7dc <__libc_init_array+0x38>)
 800b7a8:	4c0d      	ldr	r4, [pc, #52]	; (800b7e0 <__libc_init_array+0x3c>)
 800b7aa:	1ba4      	subs	r4, r4, r6
 800b7ac:	10a4      	asrs	r4, r4, #2
 800b7ae:	2500      	movs	r5, #0
 800b7b0:	42a5      	cmp	r5, r4
 800b7b2:	d109      	bne.n	800b7c8 <__libc_init_array+0x24>
 800b7b4:	4e0b      	ldr	r6, [pc, #44]	; (800b7e4 <__libc_init_array+0x40>)
 800b7b6:	4c0c      	ldr	r4, [pc, #48]	; (800b7e8 <__libc_init_array+0x44>)
 800b7b8:	f000 f878 	bl	800b8ac <_init>
 800b7bc:	1ba4      	subs	r4, r4, r6
 800b7be:	10a4      	asrs	r4, r4, #2
 800b7c0:	2500      	movs	r5, #0
 800b7c2:	42a5      	cmp	r5, r4
 800b7c4:	d105      	bne.n	800b7d2 <__libc_init_array+0x2e>
 800b7c6:	bd70      	pop	{r4, r5, r6, pc}
 800b7c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b7cc:	4798      	blx	r3
 800b7ce:	3501      	adds	r5, #1
 800b7d0:	e7ee      	b.n	800b7b0 <__libc_init_array+0xc>
 800b7d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b7d6:	4798      	blx	r3
 800b7d8:	3501      	adds	r5, #1
 800b7da:	e7f2      	b.n	800b7c2 <__libc_init_array+0x1e>
 800b7dc:	0800ba64 	.word	0x0800ba64
 800b7e0:	0800ba64 	.word	0x0800ba64
 800b7e4:	0800ba64 	.word	0x0800ba64
 800b7e8:	0800ba6c 	.word	0x0800ba6c

0800b7ec <free>:
 800b7ec:	4b02      	ldr	r3, [pc, #8]	; (800b7f8 <free+0xc>)
 800b7ee:	4601      	mov	r1, r0
 800b7f0:	6818      	ldr	r0, [r3, #0]
 800b7f2:	f000 b80b 	b.w	800b80c <_free_r>
 800b7f6:	bf00      	nop
 800b7f8:	20000514 	.word	0x20000514

0800b7fc <memset>:
 800b7fc:	4402      	add	r2, r0
 800b7fe:	4603      	mov	r3, r0
 800b800:	4293      	cmp	r3, r2
 800b802:	d100      	bne.n	800b806 <memset+0xa>
 800b804:	4770      	bx	lr
 800b806:	f803 1b01 	strb.w	r1, [r3], #1
 800b80a:	e7f9      	b.n	800b800 <memset+0x4>

0800b80c <_free_r>:
 800b80c:	b538      	push	{r3, r4, r5, lr}
 800b80e:	4605      	mov	r5, r0
 800b810:	2900      	cmp	r1, #0
 800b812:	d045      	beq.n	800b8a0 <_free_r+0x94>
 800b814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b818:	1f0c      	subs	r4, r1, #4
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	bfb8      	it	lt
 800b81e:	18e4      	addlt	r4, r4, r3
 800b820:	f000 f842 	bl	800b8a8 <__malloc_lock>
 800b824:	4a1f      	ldr	r2, [pc, #124]	; (800b8a4 <_free_r+0x98>)
 800b826:	6813      	ldr	r3, [r2, #0]
 800b828:	4610      	mov	r0, r2
 800b82a:	b933      	cbnz	r3, 800b83a <_free_r+0x2e>
 800b82c:	6063      	str	r3, [r4, #4]
 800b82e:	6014      	str	r4, [r2, #0]
 800b830:	4628      	mov	r0, r5
 800b832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b836:	f000 b838 	b.w	800b8aa <__malloc_unlock>
 800b83a:	42a3      	cmp	r3, r4
 800b83c:	d90c      	bls.n	800b858 <_free_r+0x4c>
 800b83e:	6821      	ldr	r1, [r4, #0]
 800b840:	1862      	adds	r2, r4, r1
 800b842:	4293      	cmp	r3, r2
 800b844:	bf04      	itt	eq
 800b846:	681a      	ldreq	r2, [r3, #0]
 800b848:	685b      	ldreq	r3, [r3, #4]
 800b84a:	6063      	str	r3, [r4, #4]
 800b84c:	bf04      	itt	eq
 800b84e:	1852      	addeq	r2, r2, r1
 800b850:	6022      	streq	r2, [r4, #0]
 800b852:	6004      	str	r4, [r0, #0]
 800b854:	e7ec      	b.n	800b830 <_free_r+0x24>
 800b856:	4613      	mov	r3, r2
 800b858:	685a      	ldr	r2, [r3, #4]
 800b85a:	b10a      	cbz	r2, 800b860 <_free_r+0x54>
 800b85c:	42a2      	cmp	r2, r4
 800b85e:	d9fa      	bls.n	800b856 <_free_r+0x4a>
 800b860:	6819      	ldr	r1, [r3, #0]
 800b862:	1858      	adds	r0, r3, r1
 800b864:	42a0      	cmp	r0, r4
 800b866:	d10b      	bne.n	800b880 <_free_r+0x74>
 800b868:	6820      	ldr	r0, [r4, #0]
 800b86a:	4401      	add	r1, r0
 800b86c:	1858      	adds	r0, r3, r1
 800b86e:	4282      	cmp	r2, r0
 800b870:	6019      	str	r1, [r3, #0]
 800b872:	d1dd      	bne.n	800b830 <_free_r+0x24>
 800b874:	6810      	ldr	r0, [r2, #0]
 800b876:	6852      	ldr	r2, [r2, #4]
 800b878:	605a      	str	r2, [r3, #4]
 800b87a:	4401      	add	r1, r0
 800b87c:	6019      	str	r1, [r3, #0]
 800b87e:	e7d7      	b.n	800b830 <_free_r+0x24>
 800b880:	d902      	bls.n	800b888 <_free_r+0x7c>
 800b882:	230c      	movs	r3, #12
 800b884:	602b      	str	r3, [r5, #0]
 800b886:	e7d3      	b.n	800b830 <_free_r+0x24>
 800b888:	6820      	ldr	r0, [r4, #0]
 800b88a:	1821      	adds	r1, r4, r0
 800b88c:	428a      	cmp	r2, r1
 800b88e:	bf04      	itt	eq
 800b890:	6811      	ldreq	r1, [r2, #0]
 800b892:	6852      	ldreq	r2, [r2, #4]
 800b894:	6062      	str	r2, [r4, #4]
 800b896:	bf04      	itt	eq
 800b898:	1809      	addeq	r1, r1, r0
 800b89a:	6021      	streq	r1, [r4, #0]
 800b89c:	605c      	str	r4, [r3, #4]
 800b89e:	e7c7      	b.n	800b830 <_free_r+0x24>
 800b8a0:	bd38      	pop	{r3, r4, r5, pc}
 800b8a2:	bf00      	nop
 800b8a4:	2001a8c4 	.word	0x2001a8c4

0800b8a8 <__malloc_lock>:
 800b8a8:	4770      	bx	lr

0800b8aa <__malloc_unlock>:
 800b8aa:	4770      	bx	lr

0800b8ac <_init>:
 800b8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ae:	bf00      	nop
 800b8b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8b2:	bc08      	pop	{r3}
 800b8b4:	469e      	mov	lr, r3
 800b8b6:	4770      	bx	lr

0800b8b8 <_fini>:
 800b8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ba:	bf00      	nop
 800b8bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8be:	bc08      	pop	{r3}
 800b8c0:	469e      	mov	lr, r3
 800b8c2:	4770      	bx	lr
