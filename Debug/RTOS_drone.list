
RTOS_drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  0800dc28  0800dc28  0001dc28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ddbc  0800ddbc  00020118  2**0
                  CONTENTS
  4 .ARM          00000008  0800ddbc  0800ddbc  0001ddbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ddc4  0800ddc4  00020118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ddc4  0800ddc4  0001ddc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800ddcc  0800ddcc  0001ddcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  0800ddd4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000195d8  20000118  0800deec  00020118  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200196f0  0800deec  000296f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024377  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004391  00000000  00000000  000444bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ce8  00000000  00000000  00048850  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b60  00000000  00000000  0004a538  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025a96  00000000  00000000  0004c098  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015ba7  00000000  00000000  00071b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1767  00000000  00000000  000876d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00158e3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000815c  00000000  00000000  00158eb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000118 	.word	0x20000118
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dc0c 	.word	0x0800dc0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000011c 	.word	0x2000011c
 80001cc:	0800dc0c 	.word	0x0800dc0c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2iz>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a94:	d215      	bcs.n	8000ac2 <__aeabi_d2iz+0x36>
 8000a96:	d511      	bpl.n	8000abc <__aeabi_d2iz+0x30>
 8000a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d912      	bls.n	8000ac8 <__aeabi_d2iz+0x3c>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ab2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	4240      	negne	r0, r0
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ac6:	d105      	bne.n	8000ad4 <__aeabi_d2iz+0x48>
 8000ac8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	bf08      	it	eq
 8000ace:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ad2:	4770      	bx	lr
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_d2uiz>:
 8000adc:	004a      	lsls	r2, r1, #1
 8000ade:	d211      	bcs.n	8000b04 <__aeabi_d2uiz+0x28>
 8000ae0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae4:	d211      	bcs.n	8000b0a <__aeabi_d2uiz+0x2e>
 8000ae6:	d50d      	bpl.n	8000b04 <__aeabi_d2uiz+0x28>
 8000ae8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af0:	d40e      	bmi.n	8000b10 <__aeabi_d2uiz+0x34>
 8000af2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afe:	fa23 f002 	lsr.w	r0, r3, r2
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d102      	bne.n	8000b16 <__aeabi_d2uiz+0x3a>
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b14:	4770      	bx	lr
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	4770      	bx	lr

08000b1c <__aeabi_d2f>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b24:	bf24      	itt	cs
 8000b26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_d2f+0x30>
 8000b30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b44:	bf08      	it	eq
 8000b46:	f020 0001 	biceq.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b50:	d121      	bne.n	8000b96 <__aeabi_d2f+0x7a>
 8000b52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b56:	bfbc      	itt	lt
 8000b58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	4770      	bxlt	lr
 8000b5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b66:	f1c2 0218 	rsb	r2, r2, #24
 8000b6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b72:	fa20 f002 	lsr.w	r0, r0, r2
 8000b76:	bf18      	it	ne
 8000b78:	f040 0001 	orrne.w	r0, r0, #1
 8000b7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b88:	ea40 000c 	orr.w	r0, r0, ip
 8000b8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b94:	e7cc      	b.n	8000b30 <__aeabi_d2f+0x14>
 8000b96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9a:	d107      	bne.n	8000bac <__aeabi_d2f+0x90>
 8000b9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba0:	bf1e      	ittt	ne
 8000ba2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ba6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000baa:	4770      	bxne	lr
 8000bac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bd0:	f000 b972 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9e08      	ldr	r6, [sp, #32]
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	4688      	mov	r8, r1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d14b      	bne.n	8000c92 <__udivmoddi4+0xa6>
 8000bfa:	428a      	cmp	r2, r1
 8000bfc:	4615      	mov	r5, r2
 8000bfe:	d967      	bls.n	8000cd0 <__udivmoddi4+0xe4>
 8000c00:	fab2 f282 	clz	r2, r2
 8000c04:	b14a      	cbz	r2, 8000c1a <__udivmoddi4+0x2e>
 8000c06:	f1c2 0720 	rsb	r7, r2, #32
 8000c0a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c12:	4095      	lsls	r5, r2
 8000c14:	ea47 0803 	orr.w	r8, r7, r3
 8000c18:	4094      	lsls	r4, r2
 8000c1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1e:	0c23      	lsrs	r3, r4, #16
 8000c20:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c24:	fa1f fc85 	uxth.w	ip, r5
 8000c28:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c2c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c30:	fb07 f10c 	mul.w	r1, r7, ip
 8000c34:	4299      	cmp	r1, r3
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x60>
 8000c38:	18eb      	adds	r3, r5, r3
 8000c3a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c3e:	f080 811b 	bcs.w	8000e78 <__udivmoddi4+0x28c>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 8118 	bls.w	8000e78 <__udivmoddi4+0x28c>
 8000c48:	3f02      	subs	r7, #2
 8000c4a:	442b      	add	r3, r5
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c60:	45a4      	cmp	ip, r4
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x8c>
 8000c64:	192c      	adds	r4, r5, r4
 8000c66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x290>
 8000c6e:	45a4      	cmp	ip, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x290>
 8000c74:	3802      	subs	r0, #2
 8000c76:	442c      	add	r4, r5
 8000c78:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c7c:	eba4 040c 	sub.w	r4, r4, ip
 8000c80:	2700      	movs	r7, #0
 8000c82:	b11e      	cbz	r6, 8000c8c <__udivmoddi4+0xa0>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8c:	4639      	mov	r1, r7
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xbe>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	f000 80eb 	beq.w	8000e72 <__udivmoddi4+0x286>
 8000c9c:	2700      	movs	r7, #0
 8000c9e:	e9c6 0100 	strd	r0, r1, [r6]
 8000ca2:	4638      	mov	r0, r7
 8000ca4:	4639      	mov	r1, r7
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f783 	clz	r7, r3
 8000cae:	2f00      	cmp	r7, #0
 8000cb0:	d147      	bne.n	8000d42 <__udivmoddi4+0x156>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd0>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80fa 	bhi.w	8000eb0 <__udivmoddi4+0x2c4>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	4698      	mov	r8, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa0>
 8000cca:	e9c6 4800 	strd	r4, r8, [r6]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xe8>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 808f 	bne.w	8000dfc <__udivmoddi4+0x210>
 8000cde:	1b49      	subs	r1, r1, r5
 8000ce0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce4:	fa1f f885 	uxth.w	r8, r5
 8000ce8:	2701      	movs	r7, #1
 8000cea:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cee:	0c23      	lsrs	r3, r4, #16
 8000cf0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf8:	fb08 f10c 	mul.w	r1, r8, ip
 8000cfc:	4299      	cmp	r1, r3
 8000cfe:	d907      	bls.n	8000d10 <__udivmoddi4+0x124>
 8000d00:	18eb      	adds	r3, r5, r3
 8000d02:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x122>
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	f200 80cd 	bhi.w	8000ea8 <__udivmoddi4+0x2bc>
 8000d0e:	4684      	mov	ip, r0
 8000d10:	1a59      	subs	r1, r3, r1
 8000d12:	b2a3      	uxth	r3, r4
 8000d14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d18:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d1c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d20:	fb08 f800 	mul.w	r8, r8, r0
 8000d24:	45a0      	cmp	r8, r4
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0x14c>
 8000d28:	192c      	adds	r4, r5, r4
 8000d2a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x14a>
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	f200 80b6 	bhi.w	8000ea2 <__udivmoddi4+0x2b6>
 8000d36:	4618      	mov	r0, r3
 8000d38:	eba4 0408 	sub.w	r4, r4, r8
 8000d3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d40:	e79f      	b.n	8000c82 <__udivmoddi4+0x96>
 8000d42:	f1c7 0c20 	rsb	ip, r7, #32
 8000d46:	40bb      	lsls	r3, r7
 8000d48:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d4c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d50:	fa01 f407 	lsl.w	r4, r1, r7
 8000d54:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d58:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d5c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d60:	4325      	orrs	r5, r4
 8000d62:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d66:	0c2c      	lsrs	r4, r5, #16
 8000d68:	fb08 3319 	mls	r3, r8, r9, r3
 8000d6c:	fa1f fa8e 	uxth.w	sl, lr
 8000d70:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d74:	fb09 f40a 	mul.w	r4, r9, sl
 8000d78:	429c      	cmp	r4, r3
 8000d7a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d82:	d90b      	bls.n	8000d9c <__udivmoddi4+0x1b0>
 8000d84:	eb1e 0303 	adds.w	r3, lr, r3
 8000d88:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d8c:	f080 8087 	bcs.w	8000e9e <__udivmoddi4+0x2b2>
 8000d90:	429c      	cmp	r4, r3
 8000d92:	f240 8084 	bls.w	8000e9e <__udivmoddi4+0x2b2>
 8000d96:	f1a9 0902 	sub.w	r9, r9, #2
 8000d9a:	4473      	add	r3, lr
 8000d9c:	1b1b      	subs	r3, r3, r4
 8000d9e:	b2ad      	uxth	r5, r5
 8000da0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da4:	fb08 3310 	mls	r3, r8, r0, r3
 8000da8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dac:	fb00 fa0a 	mul.w	sl, r0, sl
 8000db0:	45a2      	cmp	sl, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1da>
 8000db4:	eb1e 0404 	adds.w	r4, lr, r4
 8000db8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dbc:	d26b      	bcs.n	8000e96 <__udivmoddi4+0x2aa>
 8000dbe:	45a2      	cmp	sl, r4
 8000dc0:	d969      	bls.n	8000e96 <__udivmoddi4+0x2aa>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	4474      	add	r4, lr
 8000dc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dca:	fba0 8902 	umull	r8, r9, r0, r2
 8000dce:	eba4 040a 	sub.w	r4, r4, sl
 8000dd2:	454c      	cmp	r4, r9
 8000dd4:	46c2      	mov	sl, r8
 8000dd6:	464b      	mov	r3, r9
 8000dd8:	d354      	bcc.n	8000e84 <__udivmoddi4+0x298>
 8000dda:	d051      	beq.n	8000e80 <__udivmoddi4+0x294>
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d069      	beq.n	8000eb4 <__udivmoddi4+0x2c8>
 8000de0:	ebb1 050a 	subs.w	r5, r1, sl
 8000de4:	eb64 0403 	sbc.w	r4, r4, r3
 8000de8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dec:	40fd      	lsrs	r5, r7
 8000dee:	40fc      	lsrs	r4, r7
 8000df0:	ea4c 0505 	orr.w	r5, ip, r5
 8000df4:	e9c6 5400 	strd	r5, r4, [r6]
 8000df8:	2700      	movs	r7, #0
 8000dfa:	e747      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f703 	lsr.w	r7, r0, r3
 8000e04:	4095      	lsls	r5, r2
 8000e06:	fa01 f002 	lsl.w	r0, r1, r2
 8000e0a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e12:	4338      	orrs	r0, r7
 8000e14:	0c01      	lsrs	r1, r0, #16
 8000e16:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e1a:	fa1f f885 	uxth.w	r8, r5
 8000e1e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e26:	fb07 f308 	mul.w	r3, r7, r8
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x256>
 8000e32:	1869      	adds	r1, r5, r1
 8000e34:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e38:	d22f      	bcs.n	8000e9a <__udivmoddi4+0x2ae>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d92d      	bls.n	8000e9a <__udivmoddi4+0x2ae>
 8000e3e:	3f02      	subs	r7, #2
 8000e40:	4429      	add	r1, r5
 8000e42:	1acb      	subs	r3, r1, r3
 8000e44:	b281      	uxth	r1, r0
 8000e46:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e4a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb00 f308 	mul.w	r3, r0, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x27e>
 8000e5a:	1869      	adds	r1, r5, r1
 8000e5c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e60:	d217      	bcs.n	8000e92 <__udivmoddi4+0x2a6>
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d915      	bls.n	8000e92 <__udivmoddi4+0x2a6>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4429      	add	r1, r5
 8000e6a:	1ac9      	subs	r1, r1, r3
 8000e6c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e70:	e73b      	b.n	8000cea <__udivmoddi4+0xfe>
 8000e72:	4637      	mov	r7, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e709      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000e78:	4607      	mov	r7, r0
 8000e7a:	e6e7      	b.n	8000c4c <__udivmoddi4+0x60>
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x8c>
 8000e80:	4541      	cmp	r1, r8
 8000e82:	d2ab      	bcs.n	8000ddc <__udivmoddi4+0x1f0>
 8000e84:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e88:	eb69 020e 	sbc.w	r2, r9, lr
 8000e8c:	3801      	subs	r0, #1
 8000e8e:	4613      	mov	r3, r2
 8000e90:	e7a4      	b.n	8000ddc <__udivmoddi4+0x1f0>
 8000e92:	4660      	mov	r0, ip
 8000e94:	e7e9      	b.n	8000e6a <__udivmoddi4+0x27e>
 8000e96:	4618      	mov	r0, r3
 8000e98:	e795      	b.n	8000dc6 <__udivmoddi4+0x1da>
 8000e9a:	4667      	mov	r7, ip
 8000e9c:	e7d1      	b.n	8000e42 <__udivmoddi4+0x256>
 8000e9e:	4681      	mov	r9, r0
 8000ea0:	e77c      	b.n	8000d9c <__udivmoddi4+0x1b0>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	442c      	add	r4, r5
 8000ea6:	e747      	b.n	8000d38 <__udivmoddi4+0x14c>
 8000ea8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eac:	442b      	add	r3, r5
 8000eae:	e72f      	b.n	8000d10 <__udivmoddi4+0x124>
 8000eb0:	4638      	mov	r0, r7
 8000eb2:	e708      	b.n	8000cc6 <__udivmoddi4+0xda>
 8000eb4:	4637      	mov	r7, r6
 8000eb6:	e6e9      	b.n	8000c8c <__udivmoddi4+0xa0>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ecc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	4a06      	ldr	r2, [pc, #24]	; (8000eec <vApplicationGetIdleTaskMemory+0x30>)
 8000ed2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2280      	movs	r2, #128	; 0x80
 8000ed8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000eda:	bf00      	nop
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000134 	.word	0x20000134
 8000eec:	20000194 	.word	0x20000194

08000ef0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <MX_I2C1_Init+0x4c>)
 8000ef6:	4a12      	ldr	r2, [pc, #72]	; (8000f40 <MX_I2C1_Init+0x50>)
 8000ef8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000efa:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <MX_I2C1_Init+0x4c>)
 8000efc:	4a11      	ldr	r2, [pc, #68]	; (8000f44 <MX_I2C1_Init+0x54>)
 8000efe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <MX_I2C1_Init+0x4c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f06:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <MX_I2C1_Init+0x4c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <MX_I2C1_Init+0x4c>)
 8000f0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f14:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <MX_I2C1_Init+0x4c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <MX_I2C1_Init+0x4c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <MX_I2C1_Init+0x4c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f26:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <MX_I2C1_Init+0x4c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f2c:	4803      	ldr	r0, [pc, #12]	; (8000f3c <MX_I2C1_Init+0x4c>)
 8000f2e:	f006 f943 	bl	80071b8 <HAL_I2C_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000394 	.word	0x20000394
 8000f40:	40005400 	.word	0x40005400
 8000f44:	00061a80 	.word	0x00061a80

08000f48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b096      	sub	sp, #88	; 0x58
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	611a      	str	r2, [r3, #16]
 8000f76:	615a      	str	r2, [r3, #20]
 8000f78:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2220      	movs	r2, #32
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f00c fdea 	bl	800db5a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f86:	4b43      	ldr	r3, [pc, #268]	; (8001094 <MX_TIM1_Init+0x14c>)
 8000f88:	4a43      	ldr	r2, [pc, #268]	; (8001098 <MX_TIM1_Init+0x150>)
 8000f8a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8000f8c:	4b41      	ldr	r3, [pc, #260]	; (8001094 <MX_TIM1_Init+0x14c>)
 8000f8e:	22a7      	movs	r2, #167	; 0xa7
 8000f90:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f92:	4b40      	ldr	r3, [pc, #256]	; (8001094 <MX_TIM1_Init+0x14c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000f98:	4b3e      	ldr	r3, [pc, #248]	; (8001094 <MX_TIM1_Init+0x14c>)
 8000f9a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f9e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa0:	4b3c      	ldr	r3, [pc, #240]	; (8001094 <MX_TIM1_Init+0x14c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fa6:	4b3b      	ldr	r3, [pc, #236]	; (8001094 <MX_TIM1_Init+0x14c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fac:	4b39      	ldr	r3, [pc, #228]	; (8001094 <MX_TIM1_Init+0x14c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fb2:	4838      	ldr	r0, [pc, #224]	; (8001094 <MX_TIM1_Init+0x14c>)
 8000fb4:	f008 f906 	bl	80091c4 <HAL_TIM_Base_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
  {

  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4832      	ldr	r0, [pc, #200]	; (8001094 <MX_TIM1_Init+0x14c>)
 8000fca:	f008 fbaf 	bl	800972c <HAL_TIM_ConfigClockSource>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
  {

  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fd2:	4830      	ldr	r0, [pc, #192]	; (8001094 <MX_TIM1_Init+0x14c>)
 8000fd4:	f008 f969 	bl	80092aa <HAL_TIM_PWM_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
  {

  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fe4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fe8:	4619      	mov	r1, r3
 8000fea:	482a      	ldr	r0, [pc, #168]	; (8001094 <MX_TIM1_Init+0x14c>)
 8000fec:	f008 ff8e 	bl	8009f0c <HAL_TIMEx_MasterConfigSynchronization>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
  {

  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ff4:	2360      	movs	r3, #96	; 0x60
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001000:	2300      	movs	r3, #0
 8001002:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001004:	2300      	movs	r3, #0
 8001006:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001008:	2300      	movs	r3, #0
 800100a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800100c:	2300      	movs	r3, #0
 800100e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001014:	2200      	movs	r2, #0
 8001016:	4619      	mov	r1, r3
 8001018:	481e      	ldr	r0, [pc, #120]	; (8001094 <MX_TIM1_Init+0x14c>)
 800101a:	f008 fac1 	bl	80095a0 <HAL_TIM_PWM_ConfigChannel>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
  {

  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001026:	2204      	movs	r2, #4
 8001028:	4619      	mov	r1, r3
 800102a:	481a      	ldr	r0, [pc, #104]	; (8001094 <MX_TIM1_Init+0x14c>)
 800102c:	f008 fab8 	bl	80095a0 <HAL_TIM_PWM_ConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
  {

  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001038:	2208      	movs	r2, #8
 800103a:	4619      	mov	r1, r3
 800103c:	4815      	ldr	r0, [pc, #84]	; (8001094 <MX_TIM1_Init+0x14c>)
 800103e:	f008 faaf 	bl	80095a0 <HAL_TIM_PWM_ConfigChannel>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
  {

  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104a:	220c      	movs	r2, #12
 800104c:	4619      	mov	r1, r3
 800104e:	4811      	ldr	r0, [pc, #68]	; (8001094 <MX_TIM1_Init+0x14c>)
 8001050:	f008 faa6 	bl	80095a0 <HAL_TIM_PWM_ConfigChannel>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
  {

  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800106c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001070:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001072:	2300      	movs	r3, #0
 8001074:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	4619      	mov	r1, r3
 800107a:	4806      	ldr	r0, [pc, #24]	; (8001094 <MX_TIM1_Init+0x14c>)
 800107c:	f008 ffc2 	bl	800a004 <HAL_TIMEx_ConfigBreakDeadTime>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0

  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001084:	4803      	ldr	r0, [pc, #12]	; (8001094 <MX_TIM1_Init+0x14c>)
 8001086:	f004 ffc9 	bl	800601c <HAL_TIM_MspPostInit>

}
 800108a:	bf00      	nop
 800108c:	3758      	adds	r7, #88	; 0x58
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000428 	.word	0x20000428
 8001098:	40010000 	.word	0x40010000

0800109c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010a2:	f107 0308 	add.w	r3, r7, #8
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b0:	463b      	mov	r3, r7
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010b8:	4b18      	ldr	r3, [pc, #96]	; (800111c <MX_TIM4_Init+0x80>)
 80010ba:	4a19      	ldr	r2, [pc, #100]	; (8001120 <MX_TIM4_Init+0x84>)
 80010bc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 167;
 80010be:	4b17      	ldr	r3, [pc, #92]	; (800111c <MX_TIM4_Init+0x80>)
 80010c0:	22a7      	movs	r2, #167	; 0xa7
 80010c2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c4:	4b15      	ldr	r3, [pc, #84]	; (800111c <MX_TIM4_Init+0x80>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 80010ca:	4b14      	ldr	r3, [pc, #80]	; (800111c <MX_TIM4_Init+0x80>)
 80010cc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80010d0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <MX_TIM4_Init+0x80>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d8:	4b10      	ldr	r3, [pc, #64]	; (800111c <MX_TIM4_Init+0x80>)
 80010da:	2200      	movs	r2, #0
 80010dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80010de:	480f      	ldr	r0, [pc, #60]	; (800111c <MX_TIM4_Init+0x80>)
 80010e0:	f008 f870 	bl	80091c4 <HAL_TIM_Base_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
  {

  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80010ee:	f107 0308 	add.w	r3, r7, #8
 80010f2:	4619      	mov	r1, r3
 80010f4:	4809      	ldr	r0, [pc, #36]	; (800111c <MX_TIM4_Init+0x80>)
 80010f6:	f008 fb19 	bl	800972c <HAL_TIM_ConfigClockSource>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
  {

  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fe:	2300      	movs	r3, #0
 8001100:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001106:	463b      	mov	r3, r7
 8001108:	4619      	mov	r1, r3
 800110a:	4804      	ldr	r0, [pc, #16]	; (800111c <MX_TIM4_Init+0x80>)
 800110c:	f008 fefe 	bl	8009f0c <HAL_TIMEx_MasterConfigSynchronization>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000468 	.word	0x20000468
 8001120:	40000800 	.word	0x40000800

08001124 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_USART1_UART_Init+0x44>)
 800112a:	4a10      	ldr	r2, [pc, #64]	; (800116c <MX_USART1_UART_Init+0x48>)
 800112c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <MX_USART1_UART_Init+0x44>)
 8001130:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001134:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_USART1_UART_Init+0x44>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <MX_USART1_UART_Init+0x44>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_USART1_UART_Init+0x44>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001148:	4b07      	ldr	r3, [pc, #28]	; (8001168 <MX_USART1_UART_Init+0x44>)
 800114a:	220c      	movs	r2, #12
 800114c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <MX_USART1_UART_Init+0x44>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <MX_USART1_UART_Init+0x44>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800115a:	4803      	ldr	r0, [pc, #12]	; (8001168 <MX_USART1_UART_Init+0x44>)
 800115c:	f008 ffb8 	bl	800a0d0 <HAL_UART_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200004a8 	.word	0x200004a8
 800116c:	40011000 	.word	0x40011000

08001170 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <MX_USART3_UART_Init+0x44>)
 8001176:	4a10      	ldr	r2, [pc, #64]	; (80011b8 <MX_USART3_UART_Init+0x48>)
 8001178:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <MX_USART3_UART_Init+0x44>)
 800117c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001180:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <MX_USART3_UART_Init+0x44>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <MX_USART3_UART_Init+0x44>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <MX_USART3_UART_Init+0x44>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001194:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <MX_USART3_UART_Init+0x44>)
 8001196:	220c      	movs	r2, #12
 8001198:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <MX_USART3_UART_Init+0x44>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <MX_USART3_UART_Init+0x44>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011a6:	4803      	ldr	r0, [pc, #12]	; (80011b4 <MX_USART3_UART_Init+0x44>)
 80011a8:	f008 ff92 	bl	800a0d0 <HAL_UART_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200003e8 	.word	0x200003e8
 80011b8:	40004800 	.word	0x40004800

080011bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
 80011d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	4b3a      	ldr	r3, [pc, #232]	; (80012c0 <MX_GPIO_Init+0x104>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a39      	ldr	r2, [pc, #228]	; (80012c0 <MX_GPIO_Init+0x104>)
 80011dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b37      	ldr	r3, [pc, #220]	; (80012c0 <MX_GPIO_Init+0x104>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	4b33      	ldr	r3, [pc, #204]	; (80012c0 <MX_GPIO_Init+0x104>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a32      	ldr	r2, [pc, #200]	; (80012c0 <MX_GPIO_Init+0x104>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b30      	ldr	r3, [pc, #192]	; (80012c0 <MX_GPIO_Init+0x104>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	4b2c      	ldr	r3, [pc, #176]	; (80012c0 <MX_GPIO_Init+0x104>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a2b      	ldr	r2, [pc, #172]	; (80012c0 <MX_GPIO_Init+0x104>)
 8001214:	f043 0304 	orr.w	r3, r3, #4
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b29      	ldr	r3, [pc, #164]	; (80012c0 <MX_GPIO_Init+0x104>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <MX_GPIO_Init+0x104>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a24      	ldr	r2, [pc, #144]	; (80012c0 <MX_GPIO_Init+0x104>)
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <MX_GPIO_Init+0x104>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	2110      	movs	r1, #16
 8001246:	481f      	ldr	r0, [pc, #124]	; (80012c4 <MX_GPIO_Init+0x108>)
 8001248:	f005 ff82 	bl	8007150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	2130      	movs	r1, #48	; 0x30
 8001250:	481d      	ldr	r0, [pc, #116]	; (80012c8 <MX_GPIO_Init+0x10c>)
 8001252:	f005 ff7d 	bl	8007150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	f243 0104 	movw	r1, #12292	; 0x3004
 800125c:	481b      	ldr	r0, [pc, #108]	; (80012cc <MX_GPIO_Init+0x110>)
 800125e:	f005 ff77 	bl	8007150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001262:	2310      	movs	r3, #16
 8001264:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001266:	2301      	movs	r3, #1
 8001268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	4812      	ldr	r0, [pc, #72]	; (80012c4 <MX_GPIO_Init+0x108>)
 800127a:	f005 fcbd 	bl	8006bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800127e:	2330      	movs	r3, #48	; 0x30
 8001280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001282:	2301      	movs	r3, #1
 8001284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	480c      	ldr	r0, [pc, #48]	; (80012c8 <MX_GPIO_Init+0x10c>)
 8001296:	f005 fcaf 	bl	8006bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13;
 800129a:	f243 0304 	movw	r3, #12292	; 0x3004
 800129e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a0:	2301      	movs	r3, #1
 80012a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	2300      	movs	r3, #0
 80012aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4619      	mov	r1, r3
 80012b2:	4806      	ldr	r0, [pc, #24]	; (80012cc <MX_GPIO_Init+0x110>)
 80012b4:	f005 fca0 	bl	8006bf8 <HAL_GPIO_Init>

}
 80012b8:	bf00      	nop
 80012ba:	3728      	adds	r7, #40	; 0x28
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020000 	.word	0x40020000
 80012c8:	40020800 	.word	0x40020800
 80012cc:	40020400 	.word	0x40020400

080012d0 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012d4:	4b16      	ldr	r3, [pc, #88]	; (8001330 <MX_SPI1_Init+0x60>)
 80012d6:	4a17      	ldr	r2, [pc, #92]	; (8001334 <MX_SPI1_Init+0x64>)
 80012d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <MX_SPI1_Init+0x60>)
 80012dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <MX_SPI1_Init+0x60>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <MX_SPI1_Init+0x60>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <MX_SPI1_Init+0x60>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <MX_SPI1_Init+0x60>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012fa:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <MX_SPI1_Init+0x60>)
 80012fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001300:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <MX_SPI1_Init+0x60>)
 8001304:	2210      	movs	r2, #16
 8001306:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <MX_SPI1_Init+0x60>)
 800130a:	2200      	movs	r2, #0
 800130c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <MX_SPI1_Init+0x60>)
 8001310:	2200      	movs	r2, #0
 8001312:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <MX_SPI1_Init+0x60>)
 8001316:	2200      	movs	r2, #0
 8001318:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800131a:	4b05      	ldr	r3, [pc, #20]	; (8001330 <MX_SPI1_Init+0x60>)
 800131c:	220a      	movs	r2, #10
 800131e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001320:	4803      	ldr	r0, [pc, #12]	; (8001330 <MX_SPI1_Init+0x60>)
 8001322:	f007 fc9d 	bl	8008c60 <HAL_SPI_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200004e8 	.word	0x200004e8
 8001334:	40013000 	.word	0x40013000

08001338 <MX_TIM7_Init>:
  */

TIM_HandleTypeDef htim7;
volatile unsigned long ulHighFrequencyTimerTicks;
static void MX_TIM7_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133e:	463b      	mov	r3, r7
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <MX_TIM7_Init+0x5c>)
 8001348:	4a13      	ldr	r2, [pc, #76]	; (8001398 <MX_TIM7_Init+0x60>)
 800134a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 167;
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <MX_TIM7_Init+0x5c>)
 800134e:	22a7      	movs	r2, #167	; 0xa7
 8001350:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <MX_TIM7_Init+0x5c>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100;
 8001358:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <MX_TIM7_Init+0x5c>)
 800135a:	2264      	movs	r2, #100	; 0x64
 800135c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135e:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <MX_TIM7_Init+0x5c>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001364:	480b      	ldr	r0, [pc, #44]	; (8001394 <MX_TIM7_Init+0x5c>)
 8001366:	f007 ff2d 	bl	80091c4 <HAL_TIM_Base_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
  {

  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136e:	2300      	movs	r3, #0
 8001370:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001372:	2300      	movs	r3, #0
 8001374:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001376:	463b      	mov	r3, r7
 8001378:	4619      	mov	r1, r3
 800137a:	4806      	ldr	r0, [pc, #24]	; (8001394 <MX_TIM7_Init+0x5c>)
 800137c:	f008 fdc6 	bl	8009f0c <HAL_TIMEx_MasterConfigSynchronization>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
  {

  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8001384:	4803      	ldr	r0, [pc, #12]	; (8001394 <MX_TIM7_Init+0x5c>)
 8001386:	f007 ff6c 	bl	8009262 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM7_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000554 	.word	0x20000554
 8001398:	40001400 	.word	0x40001400

0800139c <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80013a6:	ed97 0a01 	vldr	s0, [r7, #4]
 80013aa:	f00c f949 	bl	800d640 <asinf>
 80013ae:	eef0 7a40 	vmov.f32	s15, s0
 80013b2:	eeb0 0a67 	vmov.f32	s0, s15
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <_ZSt4atanf>:
  using ::atan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan(float __x)
  { return __builtin_atanf(__x); }
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80013c6:	ed97 0a01 	vldr	s0, [r7, #4]
 80013ca:	f00c f85d 	bl	800d488 <atanf>
 80013ce:	eef0 7a40 	vmov.f32	s15, s0
 80013d2:	eeb0 0a67 	vmov.f32	s0, s15
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80013e6:	edc7 0a00 	vstr	s1, [r7]
 80013ea:	edd7 0a00 	vldr	s1, [r7]
 80013ee:	ed97 0a01 	vldr	s0, [r7, #4]
 80013f2:	f00c f97d 	bl	800d6f0 <atan2f>
 80013f6:	eef0 7a40 	vmov.f32	s15, s0
 80013fa:	eeb0 0a67 	vmov.f32	s0, s15
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	ed87 0a01 	vstr	s0, [r7, #4]
 800140e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001412:	f00c f96f 	bl	800d6f4 <sqrtf>
 8001416:	eef0 7a40 	vmov.f32	s15, s0
 800141a:	eeb0 0a67 	vmov.f32	s0, s15
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <_ZSt5isnanf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	ed87 0a01 	vstr	s0, [r7, #4]
 800142e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001432:	edd7 7a01 	vldr	s15, [r7, #4]
 8001436:	eeb4 7a67 	vcmp.f32	s14, s15
 800143a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143e:	d701      	bvc.n	8001444 <_ZSt5isnanf+0x20>
 8001440:	2301      	movs	r3, #1
 8001442:	e000      	b.n	8001446 <_ZSt5isnanf+0x22>
 8001444:	2300      	movs	r3, #0
 8001446:	4618      	mov	r0, r3
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	0000      	movs	r0, r0
 8001454:	0000      	movs	r0, r0
	...

08001458 <_Z4ftoadPci>:
	0.0000000005,		// 9
	0.00000000005		// 10
};

char * ftoa(double f, char * buf, int precision)
{
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b08b      	sub	sp, #44	; 0x2c
 800145c:	af00      	add	r7, sp, #0
 800145e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
	char * ptr = buf;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
	char * p = ptr;
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	623b      	str	r3, [r7, #32]
	char * p1;
	char c;
	long intPart;

	// check precision bounds
	if (precision > MAX_PRECISION)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	2b0a      	cmp	r3, #10
 8001472:	dd01      	ble.n	8001478 <_Z4ftoadPci+0x20>
		precision = MAX_PRECISION;
 8001474:	230a      	movs	r3, #10
 8001476:	603b      	str	r3, [r7, #0]

	// sign stuff
	if (f < 0)
 8001478:	f04f 0200 	mov.w	r2, #0
 800147c:	f04f 0300 	mov.w	r3, #0
 8001480:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001484:	f7ff fada 	bl	8000a3c <__aeabi_dcmplt>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00a      	beq.n	80014a4 <_Z4ftoadPci+0x4c>
	{
		f = -f;
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001498:	60fb      	str	r3, [r7, #12]
		*ptr++ = '-';
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	1c5a      	adds	r2, r3, #1
 800149e:	627a      	str	r2, [r7, #36]	; 0x24
 80014a0:	222d      	movs	r2, #45	; 0x2d
 80014a2:	701a      	strb	r2, [r3, #0]
	}

	if (precision < 0)  // negative precision == automatic precision guess
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	da4f      	bge.n	800154a <_Z4ftoadPci+0xf2>
	{
		if (f < 1.0) precision = 6;
 80014aa:	f04f 0200 	mov.w	r2, #0
 80014ae:	4b82      	ldr	r3, [pc, #520]	; (80016b8 <_Z4ftoadPci+0x260>)
 80014b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014b4:	f7ff fac2 	bl	8000a3c <__aeabi_dcmplt>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d002      	beq.n	80014c4 <_Z4ftoadPci+0x6c>
 80014be:	2306      	movs	r3, #6
 80014c0:	603b      	str	r3, [r7, #0]
 80014c2:	e042      	b.n	800154a <_Z4ftoadPci+0xf2>
		else if (f < 10.0) precision = 5;
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	4b7c      	ldr	r3, [pc, #496]	; (80016bc <_Z4ftoadPci+0x264>)
 80014ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014ce:	f7ff fab5 	bl	8000a3c <__aeabi_dcmplt>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d002      	beq.n	80014de <_Z4ftoadPci+0x86>
 80014d8:	2305      	movs	r3, #5
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	e035      	b.n	800154a <_Z4ftoadPci+0xf2>
		else if (f < 100.0) precision = 4;
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	4b77      	ldr	r3, [pc, #476]	; (80016c0 <_Z4ftoadPci+0x268>)
 80014e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014e8:	f7ff faa8 	bl	8000a3c <__aeabi_dcmplt>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d002      	beq.n	80014f8 <_Z4ftoadPci+0xa0>
 80014f2:	2304      	movs	r3, #4
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	e028      	b.n	800154a <_Z4ftoadPci+0xf2>
		else if (f < 1000.0) precision = 3;
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	4b71      	ldr	r3, [pc, #452]	; (80016c4 <_Z4ftoadPci+0x26c>)
 80014fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001502:	f7ff fa9b 	bl	8000a3c <__aeabi_dcmplt>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d002      	beq.n	8001512 <_Z4ftoadPci+0xba>
 800150c:	2303      	movs	r3, #3
 800150e:	603b      	str	r3, [r7, #0]
 8001510:	e01b      	b.n	800154a <_Z4ftoadPci+0xf2>
		else if (f < 10000.0) precision = 2;
 8001512:	a365      	add	r3, pc, #404	; (adr r3, 80016a8 <_Z4ftoadPci+0x250>)
 8001514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001518:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800151c:	f7ff fa8e 	bl	8000a3c <__aeabi_dcmplt>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d002      	beq.n	800152c <_Z4ftoadPci+0xd4>
 8001526:	2302      	movs	r3, #2
 8001528:	603b      	str	r3, [r7, #0]
 800152a:	e00e      	b.n	800154a <_Z4ftoadPci+0xf2>
		else if (f < 100000.0) precision = 1;
 800152c:	a360      	add	r3, pc, #384	; (adr r3, 80016b0 <_Z4ftoadPci+0x258>)
 800152e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001532:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001536:	f7ff fa81 	bl	8000a3c <__aeabi_dcmplt>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d002      	beq.n	8001546 <_Z4ftoadPci+0xee>
 8001540:	2301      	movs	r3, #1
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	e001      	b.n	800154a <_Z4ftoadPci+0xf2>
		else precision = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	603b      	str	r3, [r7, #0]
	}

	// round value according the precision
	if (precision)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d00f      	beq.n	8001570 <_Z4ftoadPci+0x118>
		f += rounders[precision];
 8001550:	4a5d      	ldr	r2, [pc, #372]	; (80016c8 <_Z4ftoadPci+0x270>)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	4413      	add	r3, r2
 8001558:	e9d3 3400 	ldrd	r3, r4, [r3]
 800155c:	461a      	mov	r2, r3
 800155e:	4623      	mov	r3, r4
 8001560:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001564:	f7fe fe42 	bl	80001ec <__adddf3>
 8001568:	4603      	mov	r3, r0
 800156a:	460c      	mov	r4, r1
 800156c:	e9c7 3402 	strd	r3, r4, [r7, #8]

	// integer part...
	intPart = f;
 8001570:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001574:	f7ff fa8a 	bl	8000a8c <__aeabi_d2iz>
 8001578:	4603      	mov	r3, r0
 800157a:	61fb      	str	r3, [r7, #28]
	f -= intPart;
 800157c:	69f8      	ldr	r0, [r7, #28]
 800157e:	f7fe ff81 	bl	8000484 <__aeabi_i2d>
 8001582:	4603      	mov	r3, r0
 8001584:	460c      	mov	r4, r1
 8001586:	461a      	mov	r2, r3
 8001588:	4623      	mov	r3, r4
 800158a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800158e:	f7fe fe2b 	bl	80001e8 <__aeabi_dsub>
 8001592:	4603      	mov	r3, r0
 8001594:	460c      	mov	r4, r1
 8001596:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (!intPart)
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d105      	bne.n	80015ac <_Z4ftoadPci+0x154>
		*ptr++ = '0';
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	1c5a      	adds	r2, r3, #1
 80015a4:	627a      	str	r2, [r7, #36]	; 0x24
 80015a6:	2230      	movs	r2, #48	; 0x30
 80015a8:	701a      	strb	r2, [r3, #0]
 80015aa:	e038      	b.n	800161e <_Z4ftoadPci+0x1c6>
	else
	{
		// save start pointer
		p = ptr;
 80015ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ae:	623b      	str	r3, [r7, #32]

		// convert (reverse order)
		while (intPart)
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d01b      	beq.n	80015ee <_Z4ftoadPci+0x196>
		{
			*p++ = '0' + intPart % 10;
 80015b6:	69fa      	ldr	r2, [r7, #28]
 80015b8:	4b44      	ldr	r3, [pc, #272]	; (80016cc <_Z4ftoadPci+0x274>)
 80015ba:	fb83 1302 	smull	r1, r3, r3, r2
 80015be:	1099      	asrs	r1, r3, #2
 80015c0:	17d3      	asrs	r3, r2, #31
 80015c2:	1ac9      	subs	r1, r1, r3
 80015c4:	460b      	mov	r3, r1
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	1ad1      	subs	r1, r2, r3
 80015ce:	b2ca      	uxtb	r2, r1
 80015d0:	6a3b      	ldr	r3, [r7, #32]
 80015d2:	1c59      	adds	r1, r3, #1
 80015d4:	6239      	str	r1, [r7, #32]
 80015d6:	3230      	adds	r2, #48	; 0x30
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	4a3b      	ldr	r2, [pc, #236]	; (80016cc <_Z4ftoadPci+0x274>)
 80015e0:	fb82 1203 	smull	r1, r2, r2, r3
 80015e4:	1092      	asrs	r2, r2, #2
 80015e6:	17db      	asrs	r3, r3, #31
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	61fb      	str	r3, [r7, #28]
		while (intPart)
 80015ec:	e7e0      	b.n	80015b0 <_Z4ftoadPci+0x158>
		}

		// save end pos
		p1 = p;
 80015ee:	6a3b      	ldr	r3, [r7, #32]
 80015f0:	61bb      	str	r3, [r7, #24]

		// reverse result
		while (p > ptr)
 80015f2:	6a3a      	ldr	r2, [r7, #32]
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d90f      	bls.n	800161a <_Z4ftoadPci+0x1c2>
		{
			c = *--p;
 80015fa:	6a3b      	ldr	r3, [r7, #32]
 80015fc:	3b01      	subs	r3, #1
 80015fe:	623b      	str	r3, [r7, #32]
 8001600:	6a3b      	ldr	r3, [r7, #32]
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	75fb      	strb	r3, [r7, #23]
			*p = *ptr;
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	781a      	ldrb	r2, [r3, #0]
 800160a:	6a3b      	ldr	r3, [r7, #32]
 800160c:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	1c5a      	adds	r2, r3, #1
 8001612:	627a      	str	r2, [r7, #36]	; 0x24
 8001614:	7dfa      	ldrb	r2, [r7, #23]
 8001616:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 8001618:	e7eb      	b.n	80015f2 <_Z4ftoadPci+0x19a>
		}

		// restore end pos
		ptr = p1;
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
	}

	// decimal part
	if (precision)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d037      	beq.n	8001694 <_Z4ftoadPci+0x23c>
	{
		// place decimal point
		*ptr++ = '.';
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	1c5a      	adds	r2, r3, #1
 8001628:	627a      	str	r2, [r7, #36]	; 0x24
 800162a:	222e      	movs	r2, #46	; 0x2e
 800162c:	701a      	strb	r2, [r3, #0]

		// convert
		while (precision--)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	1e5a      	subs	r2, r3, #1
 8001632:	603a      	str	r2, [r7, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	bf14      	ite	ne
 8001638:	2301      	movne	r3, #1
 800163a:	2300      	moveq	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d028      	beq.n	8001694 <_Z4ftoadPci+0x23c>
		{
			f *= 10.0;
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <_Z4ftoadPci+0x264>)
 8001648:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800164c:	f7fe ff84 	bl	8000558 <__aeabi_dmul>
 8001650:	4603      	mov	r3, r0
 8001652:	460c      	mov	r4, r1
 8001654:	e9c7 3402 	strd	r3, r4, [r7, #8]
			c = f;
 8001658:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800165c:	f7ff fa3e 	bl	8000adc <__aeabi_d2uiz>
 8001660:	4603      	mov	r3, r0
 8001662:	75fb      	strb	r3, [r7, #23]
			*ptr++ = '0' + c;
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	1c5a      	adds	r2, r3, #1
 8001668:	627a      	str	r2, [r7, #36]	; 0x24
 800166a:	7dfa      	ldrb	r2, [r7, #23]
 800166c:	3230      	adds	r2, #48	; 0x30
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	701a      	strb	r2, [r3, #0]
			f -= c;
 8001672:	7dfb      	ldrb	r3, [r7, #23]
 8001674:	4618      	mov	r0, r3
 8001676:	f7fe ff05 	bl	8000484 <__aeabi_i2d>
 800167a:	4603      	mov	r3, r0
 800167c:	460c      	mov	r4, r1
 800167e:	461a      	mov	r2, r3
 8001680:	4623      	mov	r3, r4
 8001682:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001686:	f7fe fdaf 	bl	80001e8 <__aeabi_dsub>
 800168a:	4603      	mov	r3, r0
 800168c:	460c      	mov	r4, r1
 800168e:	e9c7 3402 	strd	r3, r4, [r7, #8]
		while (precision--)
 8001692:	e7cc      	b.n	800162e <_Z4ftoadPci+0x1d6>
		}
	}

	// terminating zero
	*ptr = 0;
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]

	return buf;
 800169a:	687b      	ldr	r3, [r7, #4]
}
 800169c:	4618      	mov	r0, r3
 800169e:	372c      	adds	r7, #44	; 0x2c
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd90      	pop	{r4, r7, pc}
 80016a4:	f3af 8000 	nop.w
 80016a8:	00000000 	.word	0x00000000
 80016ac:	40c38800 	.word	0x40c38800
 80016b0:	00000000 	.word	0x00000000
 80016b4:	40f86a00 	.word	0x40f86a00
 80016b8:	3ff00000 	.word	0x3ff00000
 80016bc:	40240000 	.word	0x40240000
 80016c0:	40590000 	.word	0x40590000
 80016c4:	408f4000 	.word	0x408f4000
 80016c8:	0800dd08 	.word	0x0800dd08
 80016cc:	66666667 	.word	0x66666667

080016d0 <_Z7invSqrtf>:
	bool magnet = true;
	bool baro = true;
} AHRS_con;


float invSqrt(float x) {
 80016d0:	b480      	push	{r7}
 80016d2:	b087      	sub	sp, #28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80016da:	edd7 7a01 	vldr	s15, [r7, #4]
 80016de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80016e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016e6:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80016ee:	f107 0310 	add.w	r3, r7, #16
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	105a      	asrs	r2, r3, #1
 80016fa:	4b12      	ldr	r3, [pc, #72]	; (8001744 <_Z7invSqrtf+0x74>)
 80016fc:	1a9b      	subs	r3, r3, r2
 80016fe:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001708:	ed97 7a04 	vldr	s14, [r7, #16]
 800170c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001710:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001714:	edd7 7a04 	vldr	s15, [r7, #16]
 8001718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800171c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001720:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001724:	edd7 7a04 	vldr	s15, [r7, #16]
 8001728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800172c:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	ee07 3a90 	vmov	s15, r3
}
 8001736:	eeb0 0a67 	vmov.f32	s0, s15
 800173a:	371c      	adds	r7, #28
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	5f3759df 	.word	0x5f3759df

08001748 <_ZN3LPF4loadEPd>:
	double b0,b1,b2;
	double a1, a2, g;
	double y1;
public:
     LPF();
     void load(double coff[6]){
 8001748:	b490      	push	{r4, r7}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
    	this->b0 = coff[0];
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	e9c2 3406 	strd	r3, r4, [r2, #24]
        this->b1 = coff[1];
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	e9c2 3408 	strd	r3, r4, [r2, #32]
    	this->b2 = coff[2];
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

    	this->a1 = coff[3];
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    	this->a2 = coff[4];
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

    	this->g = coff[5];
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
     }
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc90      	pop	{r4, r7}
 80017a2:	4770      	bx	lr

080017a4 <_ZN3LPF6updateEd>:
     double update(double Input){
 80017a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	ed87 0b00 	vstr	d0, [r7]
    	 w = Input - a1*w1 - a2*w2;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80017bc:	461a      	mov	r2, r3
 80017be:	4623      	mov	r3, r4
 80017c0:	f7fe feca 	bl	8000558 <__aeabi_dmul>
 80017c4:	4603      	mov	r3, r0
 80017c6:	460c      	mov	r4, r1
 80017c8:	461a      	mov	r2, r3
 80017ca:	4623      	mov	r3, r4
 80017cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017d0:	f7fe fd0a 	bl	80001e8 <__aeabi_dsub>
 80017d4:	4603      	mov	r3, r0
 80017d6:	460c      	mov	r4, r1
 80017d8:	461d      	mov	r5, r3
 80017da:	4626      	mov	r6, r4
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4623      	mov	r3, r4
 80017ec:	f7fe feb4 	bl	8000558 <__aeabi_dmul>
 80017f0:	4603      	mov	r3, r0
 80017f2:	460c      	mov	r4, r1
 80017f4:	461a      	mov	r2, r3
 80017f6:	4623      	mov	r3, r4
 80017f8:	4628      	mov	r0, r5
 80017fa:	4631      	mov	r1, r6
 80017fc:	f7fe fcf4 	bl	80001e8 <__aeabi_dsub>
 8001800:	4603      	mov	r3, r0
 8001802:	460c      	mov	r4, r1
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	e9c2 3400 	strd	r3, r4, [r2]
    	 y1 = (w*b0 + w1*b1 + w2*b2)*g;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8001816:	461a      	mov	r2, r3
 8001818:	4623      	mov	r3, r4
 800181a:	f7fe fe9d 	bl	8000558 <__aeabi_dmul>
 800181e:	4603      	mov	r3, r0
 8001820:	460c      	mov	r4, r1
 8001822:	461d      	mov	r5, r3
 8001824:	4626      	mov	r6, r4
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8001832:	461a      	mov	r2, r3
 8001834:	4623      	mov	r3, r4
 8001836:	f7fe fe8f 	bl	8000558 <__aeabi_dmul>
 800183a:	4603      	mov	r3, r0
 800183c:	460c      	mov	r4, r1
 800183e:	461a      	mov	r2, r3
 8001840:	4623      	mov	r3, r4
 8001842:	4628      	mov	r0, r5
 8001844:	4631      	mov	r1, r6
 8001846:	f7fe fcd1 	bl	80001ec <__adddf3>
 800184a:	4603      	mov	r3, r0
 800184c:	460c      	mov	r4, r1
 800184e:	461d      	mov	r5, r3
 8001850:	4626      	mov	r6, r4
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800185e:	461a      	mov	r2, r3
 8001860:	4623      	mov	r3, r4
 8001862:	f7fe fe79 	bl	8000558 <__aeabi_dmul>
 8001866:	4603      	mov	r3, r0
 8001868:	460c      	mov	r4, r1
 800186a:	461a      	mov	r2, r3
 800186c:	4623      	mov	r3, r4
 800186e:	4628      	mov	r0, r5
 8001870:	4631      	mov	r1, r6
 8001872:	f7fe fcbb 	bl	80001ec <__adddf3>
 8001876:	4603      	mov	r3, r0
 8001878:	460c      	mov	r4, r1
 800187a:	4618      	mov	r0, r3
 800187c:	4621      	mov	r1, r4
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 8001884:	461a      	mov	r2, r3
 8001886:	4623      	mov	r3, r4
 8001888:	f7fe fe66 	bl	8000558 <__aeabi_dmul>
 800188c:	4603      	mov	r3, r0
 800188e:	460c      	mov	r4, r1
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
    	 w2 = w1;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	e9c2 3404 	strd	r3, r4, [r2, #16]
    	 w1 = w;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	e9c2 3402 	strd	r3, r4, [r2, #8]
    	 return y1;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 80018b4:	ec44 3b17 	vmov	d7, r3, r4
     }
 80018b8:	eeb0 0a47 	vmov.f32	s0, s14
 80018bc:	eef0 0a67 	vmov.f32	s1, s15
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018c6 <_ZN3LPF3getEv>:
     double get(){
 80018c6:	b490      	push	{r4, r7}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
     	 return y1;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 80018d4:	ec44 3b17 	vmov	d7, r3, r4
      }
 80018d8:	eeb0 0a47 	vmov.f32	s0, s14
 80018dc:	eef0 0a67 	vmov.f32	s1, s15
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc90      	pop	{r4, r7}
 80018e6:	4770      	bx	lr

080018e8 <_ZN3LPFC1Ev>:
};
LPF::LPF(){
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]

}
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4618      	mov	r0, r3
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem>:
} I2C_Module_t;

I2C_Module_t i2c;

static uint8_t wait_for_gpio_state_timeout(GPIO_TypeDef *port, uint16_t pin, GPIO_PinState state, uint32_t timeout)
 {
 80018fe:	b580      	push	{r7, lr}
 8001900:	b086      	sub	sp, #24
 8001902:	af00      	add	r7, sp, #0
 8001904:	60f8      	str	r0, [r7, #12]
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	817b      	strh	r3, [r7, #10]
 800190c:	4613      	mov	r3, r2
 800190e:	727b      	strb	r3, [r7, #9]
    uint32_t Tickstart = HAL_GetTick();
 8001910:	f004 fd6a 	bl	80063e8 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]
    uint8_t ret = 1;
 8001916:	2301      	movs	r3, #1
 8001918:	75fb      	strb	r3, [r7, #23]
    /* Wait until flag is set */
    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (1 == ret);)
 800191a:	897b      	ldrh	r3, [r7, #10]
 800191c:	4619      	mov	r1, r3
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f005 fbfe 	bl	8007120 <HAL_GPIO_ReadPin>
 8001924:	4603      	mov	r3, r0
 8001926:	461a      	mov	r2, r3
 8001928:	7a7b      	ldrb	r3, [r7, #9]
 800192a:	4293      	cmp	r3, r2
 800192c:	d004      	beq.n	8001938 <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem+0x3a>
 800192e:	7dfb      	ldrb	r3, [r7, #23]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d101      	bne.n	8001938 <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem+0x3a>
 8001934:	2301      	movs	r3, #1
 8001936:	e000      	b.n	800193a <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem+0x3c>
 8001938:	2300      	movs	r3, #0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d017      	beq.n	800196e <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem+0x70>
    {
        /* Check for the timeout */
        if (timeout != HAL_MAX_DELAY)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001944:	d011      	beq.n	800196a <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem+0x6c>
        {
            if ((timeout == 0U) || ((HAL_GetTick() - Tickstart) > timeout))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d007      	beq.n	800195c <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem+0x5e>
 800194c:	f004 fd4c 	bl	80063e8 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	429a      	cmp	r2, r3
 800195a:	d201      	bcs.n	8001960 <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem+0x62>
 800195c:	2301      	movs	r3, #1
 800195e:	e000      	b.n	8001962 <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem+0x64>
 8001960:	2300      	movs	r3, #0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem+0x6c>
            {
                ret = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
            }
        }
        asm("nop");
 800196a:	bf00      	nop
    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (1 == ret);)
 800196c:	e7d5      	b.n	800191a <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem+0x1c>
    }
    return ret;
 800196e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <_ZL24I2C_ClearBusyFlagErratumP12I2C_Module_tm>:

static void I2C_ClearBusyFlagErratum(I2C_Module_t* i2c, uint32_t timeout)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b088      	sub	sp, #32
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStructure;

    I2C_HandleTypeDef* handler = NULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]

    handler = i2c->instance;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	61fb      	str	r3, [r7, #28]

    // 1. Clear PE bit.
    CLEAR_BIT(handler->Instance->CR1, I2C_CR1_PE);
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0201 	bic.w	r2, r2, #1
 800199a:	601a      	str	r2, [r3, #0]

    //  2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_I2C_DeInit(handler);
 800199c:	69f8      	ldr	r0, [r7, #28]
 800199e:	f005 fd43 	bl	8007428 <HAL_I2C_DeInit>

    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 80019a2:	2311      	movs	r3, #17
 80019a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]

    GPIO_InitStructure.Pin = i2c->sclPin;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	899b      	ldrh	r3, [r3, #12]
 80019ae:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(i2c->sclPort, &GPIO_InitStructure);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	f107 0208 	add.w	r2, r7, #8
 80019b8:	4611      	mov	r1, r2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f005 f91c 	bl	8006bf8 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = i2c->sdaPin;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	889b      	ldrh	r3, [r3, #4]
 80019c4:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(i2c->sdaPort, &GPIO_InitStructure);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f107 0208 	add.w	r2, r7, #8
 80019ce:	4611      	mov	r1, r2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f005 f911 	bl	8006bf8 <HAL_GPIO_Init>

    // 3. Check SCL and SDA High level in GPIOx_IDR.
    HAL_GPIO_WritePin(i2c->sdaPort, i2c->sdaPin, GPIO_PIN_SET);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6898      	ldr	r0, [r3, #8]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	889b      	ldrh	r3, [r3, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	4619      	mov	r1, r3
 80019e2:	f005 fbb5 	bl	8007150 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(i2c->sclPort, i2c->sclPin, GPIO_PIN_SET);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6918      	ldr	r0, [r3, #16]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	899b      	ldrh	r3, [r3, #12]
 80019ee:	2201      	movs	r2, #1
 80019f0:	4619      	mov	r1, r3
 80019f2:	f005 fbad 	bl	8007150 <HAL_GPIO_WritePin>

    wait_for_gpio_state_timeout(i2c->sclPort, i2c->sclPin, GPIO_PIN_SET, timeout);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6918      	ldr	r0, [r3, #16]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	8999      	ldrh	r1, [r3, #12]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f7ff ff7c 	bl	80018fe <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem>
    wait_for_gpio_state_timeout(i2c->sdaPort, i2c->sdaPin, GPIO_PIN_SET, timeout);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6898      	ldr	r0, [r3, #8]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	8899      	ldrh	r1, [r3, #4]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f7ff ff74 	bl	80018fe <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem>

    // 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(i2c->sdaPort, i2c->sdaPin, GPIO_PIN_RESET);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6898      	ldr	r0, [r3, #8]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	889b      	ldrh	r3, [r3, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	4619      	mov	r1, r3
 8001a22:	f005 fb95 	bl	8007150 <HAL_GPIO_WritePin>

    // 5. Check SDA Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(i2c->sdaPort, i2c->sdaPin, GPIO_PIN_RESET, timeout);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6898      	ldr	r0, [r3, #8]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	8899      	ldrh	r1, [r3, #4]
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f7ff ff64 	bl	80018fe <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem>

    // 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(i2c->sclPort, i2c->sclPin, GPIO_PIN_RESET);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6918      	ldr	r0, [r3, #16]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	899b      	ldrh	r3, [r3, #12]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	4619      	mov	r1, r3
 8001a42:	f005 fb85 	bl	8007150 <HAL_GPIO_WritePin>

    // 7. Check SCL Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(i2c->sclPort, i2c->sclPin, GPIO_PIN_RESET, timeout);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6918      	ldr	r0, [r3, #16]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	8999      	ldrh	r1, [r3, #12]
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f7ff ff54 	bl	80018fe <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem>

    // 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(i2c->sclPort, i2c->sclPin, GPIO_PIN_SET);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6918      	ldr	r0, [r3, #16]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	899b      	ldrh	r3, [r3, #12]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	4619      	mov	r1, r3
 8001a62:	f005 fb75 	bl	8007150 <HAL_GPIO_WritePin>

    // 9. Check SCL High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(i2c->sclPort, i2c->sclPin, GPIO_PIN_SET, timeout);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6918      	ldr	r0, [r3, #16]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	8999      	ldrh	r1, [r3, #12]
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f7ff ff44 	bl	80018fe <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem>

    // 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(i2c->sdaPort, i2c->sdaPin, GPIO_PIN_SET);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6898      	ldr	r0, [r3, #8]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	889b      	ldrh	r3, [r3, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	4619      	mov	r1, r3
 8001a82:	f005 fb65 	bl	8007150 <HAL_GPIO_WritePin>

    // 11. Check SDA High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(i2c->sdaPort, i2c->sdaPin, GPIO_PIN_SET, timeout);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6898      	ldr	r0, [r3, #8]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	8899      	ldrh	r1, [r3, #4]
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f7ff ff34 	bl	80018fe <_ZL27wait_for_gpio_state_timeoutP12GPIO_TypeDeft13GPIO_PinStatem>

    // 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain.
    GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8001a96:	2312      	movs	r3, #18
 8001a98:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Alternate = GPIO_AF4_I2C2;
 8001a9a:	2304      	movs	r3, #4
 8001a9c:	61bb      	str	r3, [r7, #24]

    GPIO_InitStructure.Pin = i2c->sclPin;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	899b      	ldrh	r3, [r3, #12]
 8001aa2:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(i2c->sclPort, &GPIO_InitStructure);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	f107 0208 	add.w	r2, r7, #8
 8001aac:	4611      	mov	r1, r2
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f005 f8a2 	bl	8006bf8 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = i2c->sdaPin;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	889b      	ldrh	r3, [r3, #4]
 8001ab8:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(i2c->sdaPort, &GPIO_InitStructure);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f107 0208 	add.w	r2, r7, #8
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f005 f897 	bl	8006bf8 <HAL_GPIO_Init>

    // 13. Set SWRST bit in I2Cx_CR1 register.
    SET_BIT(handler->Instance->CR1, I2C_CR1_SWRST);
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ad8:	601a      	str	r2, [r3, #0]
    asm("nop");
 8001ada:	bf00      	nop

    /* 14. Clear SWRST bit in I2Cx_CR1 register. */
    CLEAR_BIT(handler->Instance->CR1, I2C_CR1_SWRST);
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001aea:	601a      	str	r2, [r3, #0]
    asm("nop");
 8001aec:	bf00      	nop

    /* 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register */
    SET_BIT(handler->Instance->CR1, I2C_CR1_PE);
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f042 0201 	orr.w	r2, r2, #1
 8001afc:	601a      	str	r2, [r3, #0]
    asm("nop");
 8001afe:	bf00      	nop

    // Call initialization function.
    HAL_I2C_Init(handler);
 8001b00:	69f8      	ldr	r0, [r7, #28]
 8001b02:	f005 fb59 	bl	80071b8 <HAL_I2C_Init>
}
 8001b06:	bf00      	nop
 8001b08:	3720      	adds	r7, #32
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <_Z8init_MPUv>:

/******************************************End HAL_BUSY************************************************************/
char init_MPU(){
 8001b10:	b590      	push	{r4, r7, lr}
 8001b12:	b08d      	sub	sp, #52	; 0x34
 8001b14:	af02      	add	r7, sp, #8
    char status = 1;
 8001b16:	2301      	movs	r3, #1
 8001b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t d[2];
    uint8_t device_address = MPU_ADDRESS;
 8001b1c:	23d0      	movs	r3, #208	; 0xd0
 8001b1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    uint8_t magnet_address = MAG_ADRRESS;
 8001b22:	2318      	movs	r3, #24
 8001b24:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25


    i2c.instance = &hi2c1;
 8001b28:	4bb2      	ldr	r3, [pc, #712]	; (8001df4 <_Z8init_MPUv+0x2e4>)
 8001b2a:	4ab3      	ldr	r2, [pc, #716]	; (8001df8 <_Z8init_MPUv+0x2e8>)
 8001b2c:	601a      	str	r2, [r3, #0]
    i2c.sdaPort =GPIOB;
 8001b2e:	4bb1      	ldr	r3, [pc, #708]	; (8001df4 <_Z8init_MPUv+0x2e4>)
 8001b30:	4ab2      	ldr	r2, [pc, #712]	; (8001dfc <_Z8init_MPUv+0x2ec>)
 8001b32:	609a      	str	r2, [r3, #8]
    i2c.sclPort = GPIOB;
 8001b34:	4baf      	ldr	r3, [pc, #700]	; (8001df4 <_Z8init_MPUv+0x2e4>)
 8001b36:	4ab1      	ldr	r2, [pc, #708]	; (8001dfc <_Z8init_MPUv+0x2ec>)
 8001b38:	611a      	str	r2, [r3, #16]
    i2c.sclPin = GPIO_PIN_8;
 8001b3a:	4bae      	ldr	r3, [pc, #696]	; (8001df4 <_Z8init_MPUv+0x2e4>)
 8001b3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b40:	819a      	strh	r2, [r3, #12]
    i2c.sdaPin = GPIO_PIN_9;
 8001b42:	4bac      	ldr	r3, [pc, #688]	; (8001df4 <_Z8init_MPUv+0x2e4>)
 8001b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b48:	809a      	strh	r2, [r3, #4]


  	char rx_data[25];
    while (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 2) != HAL_OK) {
 8001b4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b4e:	b299      	uxth	r1, r3
 8001b50:	2302      	movs	r3, #2
 8001b52:	2203      	movs	r2, #3
 8001b54:	48a8      	ldr	r0, [pc, #672]	; (8001df8 <_Z8init_MPUv+0x2e8>)
 8001b56:	f005 ffbb 	bl	8007ad0 <HAL_I2C_IsDeviceReady>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	bf14      	ite	ne
 8001b60:	2301      	movne	r3, #1
 8001b62:	2300      	moveq	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d01e      	beq.n	8001ba8 <_Z8init_MPUv+0x98>
    	if(HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 2) == HAL_BUSY){
 8001b6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b6e:	b299      	uxth	r1, r3
 8001b70:	2302      	movs	r3, #2
 8001b72:	2203      	movs	r2, #3
 8001b74:	48a0      	ldr	r0, [pc, #640]	; (8001df8 <_Z8init_MPUv+0x2e8>)
 8001b76:	f005 ffab 	bl	8007ad0 <HAL_I2C_IsDeviceReady>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	bf0c      	ite	eq
 8001b80:	2301      	moveq	r3, #1
 8001b82:	2300      	movne	r3, #0
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d008      	beq.n	8001b9c <_Z8init_MPUv+0x8c>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8001b8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b8e:	489b      	ldr	r0, [pc, #620]	; (8001dfc <_Z8init_MPUv+0x2ec>)
 8001b90:	f005 faf7 	bl	8007182 <HAL_GPIO_TogglePin>
			I2C_ClearBusyFlagErratum(&i2c, 10);
 8001b94:	210a      	movs	r1, #10
 8001b96:	4897      	ldr	r0, [pc, #604]	; (8001df4 <_Z8init_MPUv+0x2e4>)
 8001b98:	f7ff feee 	bl	8001978 <_ZL24I2C_ClearBusyFlagErratumP12I2C_Module_tm>
    	}
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8001b9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ba0:	4896      	ldr	r0, [pc, #600]	; (8001dfc <_Z8init_MPUv+0x2ec>)
 8001ba2:	f005 faee 	bl	8007182 <HAL_GPIO_TogglePin>
    while (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 2) != HAL_OK) {
 8001ba6:	e7d0      	b.n	8001b4a <_Z8init_MPUv+0x3a>
      }

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bae:	4893      	ldr	r0, [pc, #588]	; (8001dfc <_Z8init_MPUv+0x2ec>)
 8001bb0:	f005 face 	bl	8007150 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bba:	4890      	ldr	r0, [pc, #576]	; (8001dfc <_Z8init_MPUv+0x2ec>)
 8001bbc:	f005 fac8 	bl	8007150 <HAL_GPIO_WritePin>

//    HAL_UART_Transmit(&huart3,rx_data, strlen(rx_data),1000);

	/* Try to transmit via I2C */
	d[0] = PWR_MGMT_1;
 8001bc0:	236b      	movs	r3, #107	; 0x6b
 8001bc2:	f887 3020 	strb.w	r3, [r7, #32]
    d[1] = 1;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address , (uint8_t *)d, 2, 1000) != HAL_OK)
 8001bcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bd0:	b299      	uxth	r1, r3
 8001bd2:	f107 0220 	add.w	r2, r7, #32
 8001bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	2302      	movs	r3, #2
 8001bde:	4886      	ldr	r0, [pc, #536]	; (8001df8 <_Z8init_MPUv+0x2e8>)
 8001be0:	f005 fc52 	bl	8007488 <HAL_I2C_Master_Transmit>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0

	}

	/* Set data sample rate */

	d[0] = SAMPLE_RATE;
 8001be8:	2319      	movs	r3, #25
 8001bea:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = sample_1khz;
 8001bee:	2307      	movs	r3, #7
 8001bf0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001bf4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bf8:	b299      	uxth	r1, r3
 8001bfa:	f107 0220 	add.w	r2, r7, #32
 8001bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	2302      	movs	r3, #2
 8001c06:	487c      	ldr	r0, [pc, #496]	; (8001df8 <_Z8init_MPUv+0x2e8>)
 8001c08:	f005 fc3e 	bl	8007488 <HAL_I2C_Master_Transmit>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	bf14      	ite	ne
 8001c12:	2301      	movne	r3, #1
 8001c14:	2300      	moveq	r3, #0
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d000      	beq.n	8001c1e <_Z8init_MPUv+0x10e>
 8001c1c:	e7ea      	b.n	8001bf4 <_Z8init_MPUv+0xe4>

	d[0] = CONFIG;
 8001c1e:	231a      	movs	r3, #26
 8001c20:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = lpf;
 8001c24:	2301      	movs	r3, #1
 8001c26:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001c2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c2e:	b299      	uxth	r1, r3
 8001c30:	f107 0220 	add.w	r2, r7, #32
 8001c34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	486e      	ldr	r0, [pc, #440]	; (8001df8 <_Z8init_MPUv+0x2e8>)
 8001c3e:	f005 fc23 	bl	8007488 <HAL_I2C_Master_Transmit>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	bf14      	ite	ne
 8001c48:	2301      	movne	r3, #1
 8001c4a:	2300      	moveq	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d000      	beq.n	8001c54 <_Z8init_MPUv+0x144>
 8001c52:	e7ea      	b.n	8001c2a <_Z8init_MPUv+0x11a>

	d[0] = GYRO_CONFIG;
 8001c54:	231b      	movs	r3, #27
 8001c56:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = gyro_con;
 8001c5a:	2318      	movs	r3, #24
 8001c5c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001c60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c64:	b299      	uxth	r1, r3
 8001c66:	f107 0220 	add.w	r2, r7, #32
 8001c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	2302      	movs	r3, #2
 8001c72:	4861      	ldr	r0, [pc, #388]	; (8001df8 <_Z8init_MPUv+0x2e8>)
 8001c74:	f005 fc08 	bl	8007488 <HAL_I2C_Master_Transmit>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	bf14      	ite	ne
 8001c7e:	2301      	movne	r3, #1
 8001c80:	2300      	moveq	r3, #0
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d000      	beq.n	8001c8a <_Z8init_MPUv+0x17a>
 8001c88:	e7ea      	b.n	8001c60 <_Z8init_MPUv+0x150>

	d[0] = ACCEL_CONFIG;
 8001c8a:	231c      	movs	r3, #28
 8001c8c:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = 0x00;
 8001c90:	2300      	movs	r3, #0
 8001c92:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001c96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c9a:	b299      	uxth	r1, r3
 8001c9c:	f107 0220 	add.w	r2, r7, #32
 8001ca0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	4853      	ldr	r0, [pc, #332]	; (8001df8 <_Z8init_MPUv+0x2e8>)
 8001caa:	f005 fbed 	bl	8007488 <HAL_I2C_Master_Transmit>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	bf14      	ite	ne
 8001cb4:	2301      	movne	r3, #1
 8001cb6:	2300      	moveq	r3, #0
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d000      	beq.n	8001cc0 <_Z8init_MPUv+0x1b0>
 8001cbe:	e7ea      	b.n	8001c96 <_Z8init_MPUv+0x186>

	d[0] = ACCEL_CONFIG2;
 8001cc0:	231d      	movs	r3, #29
 8001cc2:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = 0x02;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001ccc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001cd0:	b299      	uxth	r1, r3
 8001cd2:	f107 0220 	add.w	r2, r7, #32
 8001cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	2302      	movs	r3, #2
 8001cde:	4846      	ldr	r0, [pc, #280]	; (8001df8 <_Z8init_MPUv+0x2e8>)
 8001ce0:	f005 fbd2 	bl	8007488 <HAL_I2C_Master_Transmit>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	bf14      	ite	ne
 8001cea:	2301      	movne	r3, #1
 8001cec:	2300      	moveq	r3, #0
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d000      	beq.n	8001cf6 <_Z8init_MPUv+0x1e6>
 8001cf4:	e7ea      	b.n	8001ccc <_Z8init_MPUv+0x1bc>


	d[0] = INIT_ENB;
 8001cf6:	2338      	movs	r3, #56	; 0x38
 8001cf8:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = inter;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001d02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d06:	b299      	uxth	r1, r3
 8001d08:	f107 0220 	add.w	r2, r7, #32
 8001d0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	2302      	movs	r3, #2
 8001d14:	4838      	ldr	r0, [pc, #224]	; (8001df8 <_Z8init_MPUv+0x2e8>)
 8001d16:	f005 fbb7 	bl	8007488 <HAL_I2C_Master_Transmit>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	bf14      	ite	ne
 8001d20:	2301      	movne	r3, #1
 8001d22:	2300      	moveq	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d000      	beq.n	8001d2c <_Z8init_MPUv+0x21c>
 8001d2a:	e7ea      	b.n	8001d02 <_Z8init_MPUv+0x1f2>

	d[0] = USER_CTRL;
 8001d2c:	236a      	movs	r3, #106	; 0x6a
 8001d2e:	f887 3020 	strb.w	r3, [r7, #32]
    d[1] = zero;
 8001d32:	2300      	movs	r3, #0
 8001d34:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001d38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d3c:	b299      	uxth	r1, r3
 8001d3e:	f107 0220 	add.w	r2, r7, #32
 8001d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	2302      	movs	r3, #2
 8001d4a:	482b      	ldr	r0, [pc, #172]	; (8001df8 <_Z8init_MPUv+0x2e8>)
 8001d4c:	f005 fb9c 	bl	8007488 <HAL_I2C_Master_Transmit>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	bf14      	ite	ne
 8001d56:	2301      	movne	r3, #1
 8001d58:	2300      	moveq	r3, #0
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d000      	beq.n	8001d62 <_Z8init_MPUv+0x252>
 8001d60:	e7ea      	b.n	8001d38 <_Z8init_MPUv+0x228>

	d[0] = INT_BYPASS;
 8001d62:	2337      	movs	r3, #55	; 0x37
 8001d64:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = stop_i2c_master;
 8001d68:	2322      	movs	r3, #34	; 0x22
 8001d6a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001d6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d72:	b299      	uxth	r1, r3
 8001d74:	f107 0220 	add.w	r2, r7, #32
 8001d78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	2302      	movs	r3, #2
 8001d80:	481d      	ldr	r0, [pc, #116]	; (8001df8 <_Z8init_MPUv+0x2e8>)
 8001d82:	f005 fb81 	bl	8007488 <HAL_I2C_Master_Transmit>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	bf14      	ite	ne
 8001d8c:	2301      	movne	r3, #1
 8001d8e:	2300      	moveq	r3, #0
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d000      	beq.n	8001d98 <_Z8init_MPUv+0x288>
 8001d96:	e7ea      	b.n	8001d6e <_Z8init_MPUv+0x25e>

	if (HAL_I2C_IsDeviceReady(&hi2c1, magnet_address, 3, 200) != HAL_OK) {
 8001d98:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001d9c:	b299      	uxth	r1, r3
 8001d9e:	23c8      	movs	r3, #200	; 0xc8
 8001da0:	2203      	movs	r2, #3
 8001da2:	4815      	ldr	r0, [pc, #84]	; (8001df8 <_Z8init_MPUv+0x2e8>)
 8001da4:	f005 fe94 	bl	8007ad0 <HAL_I2C_IsDeviceReady>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	bf14      	ite	ne
 8001dae:	2301      	movne	r3, #1
 8001db0:	2300      	moveq	r3, #0
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d025      	beq.n	8001e04 <_Z8init_MPUv+0x2f4>
	    	strcpy( rx_data, "No Device \r \n");
 8001db8:	1d3b      	adds	r3, r7, #4
 8001dba:	4a11      	ldr	r2, [pc, #68]	; (8001e00 <_Z8init_MPUv+0x2f0>)
 8001dbc:	461c      	mov	r4, r3
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dc2:	c407      	stmia	r4!, {r0, r1, r2}
 8001dc4:	8023      	strh	r3, [r4, #0]
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dcc:	480b      	ldr	r0, [pc, #44]	; (8001dfc <_Z8init_MPUv+0x2ec>)
 8001dce:	f005 f9bf 	bl	8007150 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_SET);
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dd8:	4808      	ldr	r0, [pc, #32]	; (8001dfc <_Z8init_MPUv+0x2ec>)
 8001dda:	f005 f9b9 	bl	8007150 <HAL_GPIO_WritePin>
	    	HAL_Delay(500);
 8001dde:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001de2:	f004 fb0d 	bl	8006400 <HAL_Delay>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 8001de6:	2200      	movs	r2, #0
 8001de8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dec:	4803      	ldr	r0, [pc, #12]	; (8001dfc <_Z8init_MPUv+0x2ec>)
 8001dee:	f005 f9af 	bl	8007150 <HAL_GPIO_WritePin>
 8001df2:	e0f9      	b.n	8001fe8 <_Z8init_MPUv+0x4d8>
 8001df4:	20000610 	.word	0x20000610
 8001df8:	20000394 	.word	0x20000394
 8001dfc:	40020400 	.word	0x40020400
 8001e00:	0800dc28 	.word	0x0800dc28
	      }
	      else{
	    	    d[0] = CNTL1_AD;
 8001e04:	230a      	movs	r3, #10
 8001e06:	f887 3020 	strb.w	r3, [r7, #32]
	    	  	d[1] = ROM_MODE;
 8001e0a:	231f      	movs	r3, #31
 8001e0c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	    	  	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t) magnet_address,(uint8_t *)d,2,2)!=HAL_OK);
 8001e10:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e14:	b299      	uxth	r1, r3
 8001e16:	f107 0220 	add.w	r2, r7, #32
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	2302      	movs	r3, #2
 8001e20:	4874      	ldr	r0, [pc, #464]	; (8001ff4 <_Z8init_MPUv+0x4e4>)
 8001e22:	f005 fb31 	bl	8007488 <HAL_I2C_Master_Transmit>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	bf14      	ite	ne
 8001e2c:	2301      	movne	r3, #1
 8001e2e:	2300      	moveq	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d000      	beq.n	8001e38 <_Z8init_MPUv+0x328>
 8001e36:	e7eb      	b.n	8001e10 <_Z8init_MPUv+0x300>

	    	  	HAL_Delay(100);
 8001e38:	2064      	movs	r0, #100	; 0x64
 8001e3a:	f004 fae1 	bl	8006400 <HAL_Delay>


	    	  	uint8_t sensitive = ASAX_AD;
 8001e3e:	2310      	movs	r3, #16
 8001e40:	70fb      	strb	r3, [r7, #3]
	    	  	uint8_t asa [3];
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address, &sensitive, 1, 1000) != HAL_OK);
 8001e42:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e46:	b299      	uxth	r1, r3
 8001e48:	1cfa      	adds	r2, r7, #3
 8001e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	2301      	movs	r3, #1
 8001e52:	4868      	ldr	r0, [pc, #416]	; (8001ff4 <_Z8init_MPUv+0x4e4>)
 8001e54:	f005 fb18 	bl	8007488 <HAL_I2C_Master_Transmit>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	bf14      	ite	ne
 8001e5e:	2301      	movne	r3, #1
 8001e60:	2300      	moveq	r3, #0
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d000      	beq.n	8001e6a <_Z8init_MPUv+0x35a>
 8001e68:	e7eb      	b.n	8001e42 <_Z8init_MPUv+0x332>
	    	      while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)magnet_address, (uint8_t *)asa,(uint16_t) 3, 1000) != HAL_OK);
 8001e6a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e6e:	b299      	uxth	r1, r3
 8001e70:	463a      	mov	r2, r7
 8001e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	2303      	movs	r3, #3
 8001e7a:	485e      	ldr	r0, [pc, #376]	; (8001ff4 <_Z8init_MPUv+0x4e4>)
 8001e7c:	f005 fc02 	bl	8007684 <HAL_I2C_Master_Receive>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	bf14      	ite	ne
 8001e86:	2301      	movne	r3, #1
 8001e88:	2300      	moveq	r3, #0
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d000      	beq.n	8001e92 <_Z8init_MPUv+0x382>
 8001e90:	e7eb      	b.n	8001e6a <_Z8init_MPUv+0x35a>

	    	      asax = (asa[0]-128)*0.5/128+1;
 8001e92:	783b      	ldrb	r3, [r7, #0]
 8001e94:	3b80      	subs	r3, #128	; 0x80
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe faf4 	bl	8000484 <__aeabi_i2d>
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	4b55      	ldr	r3, [pc, #340]	; (8001ff8 <_Z8init_MPUv+0x4e8>)
 8001ea2:	f7fe fb59 	bl	8000558 <__aeabi_dmul>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	460c      	mov	r4, r1
 8001eaa:	4618      	mov	r0, r3
 8001eac:	4621      	mov	r1, r4
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	4b52      	ldr	r3, [pc, #328]	; (8001ffc <_Z8init_MPUv+0x4ec>)
 8001eb4:	f7fe fc7a 	bl	80007ac <__aeabi_ddiv>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	460c      	mov	r4, r1
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	4621      	mov	r1, r4
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	4b4e      	ldr	r3, [pc, #312]	; (8002000 <_Z8init_MPUv+0x4f0>)
 8001ec6:	f7fe f991 	bl	80001ec <__adddf3>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	460c      	mov	r4, r1
 8001ece:	4618      	mov	r0, r3
 8001ed0:	4621      	mov	r1, r4
 8001ed2:	f7fe fe23 	bl	8000b1c <__aeabi_d2f>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	4b4a      	ldr	r3, [pc, #296]	; (8002004 <_Z8init_MPUv+0x4f4>)
 8001eda:	601a      	str	r2, [r3, #0]
	    	      asay = (asa[1]-128)*0.5/128+1;
 8001edc:	787b      	ldrb	r3, [r7, #1]
 8001ede:	3b80      	subs	r3, #128	; 0x80
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe facf 	bl	8000484 <__aeabi_i2d>
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	4b43      	ldr	r3, [pc, #268]	; (8001ff8 <_Z8init_MPUv+0x4e8>)
 8001eec:	f7fe fb34 	bl	8000558 <__aeabi_dmul>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	460c      	mov	r4, r1
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	4621      	mov	r1, r4
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	4b3f      	ldr	r3, [pc, #252]	; (8001ffc <_Z8init_MPUv+0x4ec>)
 8001efe:	f7fe fc55 	bl	80007ac <__aeabi_ddiv>
 8001f02:	4603      	mov	r3, r0
 8001f04:	460c      	mov	r4, r1
 8001f06:	4618      	mov	r0, r3
 8001f08:	4621      	mov	r1, r4
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	4b3c      	ldr	r3, [pc, #240]	; (8002000 <_Z8init_MPUv+0x4f0>)
 8001f10:	f7fe f96c 	bl	80001ec <__adddf3>
 8001f14:	4603      	mov	r3, r0
 8001f16:	460c      	mov	r4, r1
 8001f18:	4618      	mov	r0, r3
 8001f1a:	4621      	mov	r1, r4
 8001f1c:	f7fe fdfe 	bl	8000b1c <__aeabi_d2f>
 8001f20:	4602      	mov	r2, r0
 8001f22:	4b39      	ldr	r3, [pc, #228]	; (8002008 <_Z8init_MPUv+0x4f8>)
 8001f24:	601a      	str	r2, [r3, #0]
	    	      asaz = (asa[2]-128)*0.5/128+1;
 8001f26:	78bb      	ldrb	r3, [r7, #2]
 8001f28:	3b80      	subs	r3, #128	; 0x80
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe faaa 	bl	8000484 <__aeabi_i2d>
 8001f30:	f04f 0200 	mov.w	r2, #0
 8001f34:	4b30      	ldr	r3, [pc, #192]	; (8001ff8 <_Z8init_MPUv+0x4e8>)
 8001f36:	f7fe fb0f 	bl	8000558 <__aeabi_dmul>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	460c      	mov	r4, r1
 8001f3e:	4618      	mov	r0, r3
 8001f40:	4621      	mov	r1, r4
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	4b2d      	ldr	r3, [pc, #180]	; (8001ffc <_Z8init_MPUv+0x4ec>)
 8001f48:	f7fe fc30 	bl	80007ac <__aeabi_ddiv>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	460c      	mov	r4, r1
 8001f50:	4618      	mov	r0, r3
 8001f52:	4621      	mov	r1, r4
 8001f54:	f04f 0200 	mov.w	r2, #0
 8001f58:	4b29      	ldr	r3, [pc, #164]	; (8002000 <_Z8init_MPUv+0x4f0>)
 8001f5a:	f7fe f947 	bl	80001ec <__adddf3>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	460c      	mov	r4, r1
 8001f62:	4618      	mov	r0, r3
 8001f64:	4621      	mov	r1, r4
 8001f66:	f7fe fdd9 	bl	8000b1c <__aeabi_d2f>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	4b27      	ldr	r3, [pc, #156]	; (800200c <_Z8init_MPUv+0x4fc>)
 8001f6e:	601a      	str	r2, [r3, #0]

	    	      d[0] = CNTL1_AD;
 8001f70:	230a      	movs	r3, #10
 8001f72:	f887 3020 	strb.w	r3, [r7, #32]
	    	      d[1] = zero;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001f7c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f80:	b299      	uxth	r1, r3
 8001f82:	f107 0220 	add.w	r2, r7, #32
 8001f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	4819      	ldr	r0, [pc, #100]	; (8001ff4 <_Z8init_MPUv+0x4e4>)
 8001f90:	f005 fa7a 	bl	8007488 <HAL_I2C_Master_Transmit>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	bf14      	ite	ne
 8001f9a:	2301      	movne	r3, #1
 8001f9c:	2300      	moveq	r3, #0
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d000      	beq.n	8001fa6 <_Z8init_MPUv+0x496>
 8001fa4:	e7ea      	b.n	8001f7c <_Z8init_MPUv+0x46c>

	    	      HAL_Delay(100);
 8001fa6:	2064      	movs	r0, #100	; 0x64
 8001fa8:	f004 fa2a 	bl	8006400 <HAL_Delay>

	    	      d[0] = CNTL1_AD;
 8001fac:	230a      	movs	r3, #10
 8001fae:	f887 3020 	strb.w	r3, [r7, #32]
	    	      d[1] = 0x16;
 8001fb2:	2316      	movs	r3, #22
 8001fb4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001fb8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001fbc:	b299      	uxth	r1, r3
 8001fbe:	f107 0220 	add.w	r2, r7, #32
 8001fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	2302      	movs	r3, #2
 8001fca:	480a      	ldr	r0, [pc, #40]	; (8001ff4 <_Z8init_MPUv+0x4e4>)
 8001fcc:	f005 fa5c 	bl	8007488 <HAL_I2C_Master_Transmit>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	bf14      	ite	ne
 8001fd6:	2301      	movne	r3, #1
 8001fd8:	2300      	moveq	r3, #0
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d000      	beq.n	8001fe2 <_Z8init_MPUv+0x4d2>
 8001fe0:	e7ea      	b.n	8001fb8 <_Z8init_MPUv+0x4a8>
	    	      HAL_Delay(100);
 8001fe2:	2064      	movs	r0, #100	; 0x64
 8001fe4:	f004 fa0c 	bl	8006400 <HAL_Delay>
	      }


  return status;
 8001fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	372c      	adds	r7, #44	; 0x2c
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd90      	pop	{r4, r7, pc}
 8001ff4:	20000394 	.word	0x20000394
 8001ff8:	3fe00000 	.word	0x3fe00000
 8001ffc:	40600000 	.word	0x40600000
 8002000:	3ff00000 	.word	0x3ff00000
 8002004:	2000059c 	.word	0x2000059c
 8002008:	200005a0 	.word	0x200005a0
 800200c:	200005a4 	.word	0x200005a4

08002010 <_Z10adding_rawv>:
void adding_raw(){
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
	  Gyro_x_ += Gyro_x;
 8002014:	4b23      	ldr	r3, [pc, #140]	; (80020a4 <_Z10adding_rawv+0x94>)
 8002016:	ed93 7a00 	vldr	s14, [r3]
 800201a:	4b23      	ldr	r3, [pc, #140]	; (80020a8 <_Z10adding_rawv+0x98>)
 800201c:	edd3 7a00 	vldr	s15, [r3]
 8002020:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002024:	4b1f      	ldr	r3, [pc, #124]	; (80020a4 <_Z10adding_rawv+0x94>)
 8002026:	edc3 7a00 	vstr	s15, [r3]
	  Gyro_y_  += Gyro_y;
 800202a:	4b20      	ldr	r3, [pc, #128]	; (80020ac <_Z10adding_rawv+0x9c>)
 800202c:	ed93 7a00 	vldr	s14, [r3]
 8002030:	4b1f      	ldr	r3, [pc, #124]	; (80020b0 <_Z10adding_rawv+0xa0>)
 8002032:	edd3 7a00 	vldr	s15, [r3]
 8002036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800203a:	4b1c      	ldr	r3, [pc, #112]	; (80020ac <_Z10adding_rawv+0x9c>)
 800203c:	edc3 7a00 	vstr	s15, [r3]
	  Gyro_z_  += Gyro_z;
 8002040:	4b1c      	ldr	r3, [pc, #112]	; (80020b4 <_Z10adding_rawv+0xa4>)
 8002042:	ed93 7a00 	vldr	s14, [r3]
 8002046:	4b1c      	ldr	r3, [pc, #112]	; (80020b8 <_Z10adding_rawv+0xa8>)
 8002048:	edd3 7a00 	vldr	s15, [r3]
 800204c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002050:	4b18      	ldr	r3, [pc, #96]	; (80020b4 <_Z10adding_rawv+0xa4>)
 8002052:	edc3 7a00 	vstr	s15, [r3]
	  Acc_x_  += Acc_x;
 8002056:	4b19      	ldr	r3, [pc, #100]	; (80020bc <_Z10adding_rawv+0xac>)
 8002058:	ed93 7a00 	vldr	s14, [r3]
 800205c:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <_Z10adding_rawv+0xb0>)
 800205e:	edd3 7a00 	vldr	s15, [r3]
 8002062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002066:	4b15      	ldr	r3, [pc, #84]	; (80020bc <_Z10adding_rawv+0xac>)
 8002068:	edc3 7a00 	vstr	s15, [r3]
	  Acc_y_  += Acc_y;
 800206c:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <_Z10adding_rawv+0xb4>)
 800206e:	ed93 7a00 	vldr	s14, [r3]
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <_Z10adding_rawv+0xb8>)
 8002074:	edd3 7a00 	vldr	s15, [r3]
 8002078:	ee77 7a27 	vadd.f32	s15, s14, s15
 800207c:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <_Z10adding_rawv+0xb4>)
 800207e:	edc3 7a00 	vstr	s15, [r3]
	  Acc_z_  += Acc_z;
 8002082:	4b12      	ldr	r3, [pc, #72]	; (80020cc <_Z10adding_rawv+0xbc>)
 8002084:	ed93 7a00 	vldr	s14, [r3]
 8002088:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <_Z10adding_rawv+0xc0>)
 800208a:	edd3 7a00 	vldr	s15, [r3]
 800208e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002092:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <_Z10adding_rawv+0xbc>)
 8002094:	edc3 7a00 	vstr	s15, [r3]
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	200005fc 	.word	0x200005fc
 80020a8:	200005e4 	.word	0x200005e4
 80020ac:	20000600 	.word	0x20000600
 80020b0:	200005e8 	.word	0x200005e8
 80020b4:	20000604 	.word	0x20000604
 80020b8:	200005ec 	.word	0x200005ec
 80020bc:	200005f0 	.word	0x200005f0
 80020c0:	200005d8 	.word	0x200005d8
 80020c4:	200005f4 	.word	0x200005f4
 80020c8:	200005dc 	.word	0x200005dc
 80020cc:	200005f8 	.word	0x200005f8
 80020d0:	200005e0 	.word	0x200005e0

080020d4 <_Z10delete_rawv>:

void delete_raw(){
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
	  Gyro_x_ = 0;
 80020d8:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <_Z10delete_rawv+0x40>)
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
	  Gyro_y_ = 0;
 80020e0:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <_Z10delete_rawv+0x44>)
 80020e2:	f04f 0200 	mov.w	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
	  Gyro_z_ = 0;
 80020e8:	4b0c      	ldr	r3, [pc, #48]	; (800211c <_Z10delete_rawv+0x48>)
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
	  Acc_x_  = 0;
 80020f0:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <_Z10delete_rawv+0x4c>)
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
	  Acc_y_  = 0;
 80020f8:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <_Z10delete_rawv+0x50>)
 80020fa:	f04f 0200 	mov.w	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
	  Acc_z_  = 0;
 8002100:	4b09      	ldr	r3, [pc, #36]	; (8002128 <_Z10delete_rawv+0x54>)
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	601a      	str	r2, [r3, #0]

}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	200005fc 	.word	0x200005fc
 8002118:	20000600 	.word	0x20000600
 800211c:	20000604 	.word	0x20000604
 8002120:	200005f0 	.word	0x200005f0
 8002124:	200005f4 	.word	0x200005f4
 8002128:	200005f8 	.word	0x200005f8
 800212c:	00000000 	.word	0x00000000

08002130 <_Z11process_MPUbb>:


IMU_data process_MPU(bool EKF, bool LPF){
 8002130:	b590      	push	{r4, r7, lr}
 8002132:	b08b      	sub	sp, #44	; 0x2c
 8002134:	af02      	add	r7, sp, #8
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	70fb      	strb	r3, [r7, #3]
 800213c:	4613      	mov	r3, r2
 800213e:	70bb      	strb	r3, [r7, #2]
	IMU_data data_raw;
	uint8_t data[13];

	uint8_t reg = ACCEL_XOUT_H;
 8002140:	233b      	movs	r3, #59	; 0x3b
 8002142:	73fb      	strb	r3, [r7, #15]
	uint8_t device_address = MPU_ADDRESS;
 8002144:	23d0      	movs	r3, #208	; 0xd0
 8002146:	77fb      	strb	r3, [r7, #31]


	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address, &reg, 1, 1000) != HAL_OK){
 8002148:	7ffb      	ldrb	r3, [r7, #31]
 800214a:	b299      	uxth	r1, r3
 800214c:	f107 020f 	add.w	r2, r7, #15
 8002150:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	2301      	movs	r3, #1
 8002158:	48a1      	ldr	r0, [pc, #644]	; (80023e0 <_Z11process_MPUbb+0x2b0>)
 800215a:	f005 f995 	bl	8007488 <HAL_I2C_Master_Transmit>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	bf14      	ite	ne
 8002164:	2301      	movne	r3, #1
 8002166:	2300      	moveq	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d000      	beq.n	8002170 <_Z11process_MPUbb+0x40>
 800216e:	e7eb      	b.n	8002148 <_Z11process_MPUbb+0x18>
//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
//			I2C_ClearBusyFlagErratum(&i2c, 10);
//	    }
//	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
	}
	while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)device_address, data,14, 1000) != HAL_OK){
 8002170:	7ffb      	ldrb	r3, [r7, #31]
 8002172:	b299      	uxth	r1, r3
 8002174:	f107 0210 	add.w	r2, r7, #16
 8002178:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	230e      	movs	r3, #14
 8002180:	4897      	ldr	r0, [pc, #604]	; (80023e0 <_Z11process_MPUbb+0x2b0>)
 8002182:	f005 fa7f 	bl	8007684 <HAL_I2C_Master_Receive>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	bf14      	ite	ne
 800218c:	2301      	movne	r3, #1
 800218e:	2300      	moveq	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d000      	beq.n	8002198 <_Z11process_MPUbb+0x68>
 8002196:	e7eb      	b.n	8002170 <_Z11process_MPUbb+0x40>
//					I2C_ClearBusyFlagErratum(&i2c, 10);
//			    }
//			    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
	}

	Acc_x = (int16_t)(data[0] << 8 | data[1]);
 8002198:	7c3b      	ldrb	r3, [r7, #16]
 800219a:	021b      	lsls	r3, r3, #8
 800219c:	b21a      	sxth	r2, r3
 800219e:	7c7b      	ldrb	r3, [r7, #17]
 80021a0:	b21b      	sxth	r3, r3
 80021a2:	4313      	orrs	r3, r2
 80021a4:	b21b      	sxth	r3, r3
 80021a6:	ee07 3a90 	vmov	s15, r3
 80021aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021ae:	4b8d      	ldr	r3, [pc, #564]	; (80023e4 <_Z11process_MPUbb+0x2b4>)
 80021b0:	edc3 7a00 	vstr	s15, [r3]
	Acc_y = (int16_t)(data[2] << 8 | data[3]);
 80021b4:	7cbb      	ldrb	r3, [r7, #18]
 80021b6:	021b      	lsls	r3, r3, #8
 80021b8:	b21a      	sxth	r2, r3
 80021ba:	7cfb      	ldrb	r3, [r7, #19]
 80021bc:	b21b      	sxth	r3, r3
 80021be:	4313      	orrs	r3, r2
 80021c0:	b21b      	sxth	r3, r3
 80021c2:	ee07 3a90 	vmov	s15, r3
 80021c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021ca:	4b87      	ldr	r3, [pc, #540]	; (80023e8 <_Z11process_MPUbb+0x2b8>)
 80021cc:	edc3 7a00 	vstr	s15, [r3]
	Acc_z = (int16_t)(data[4] << 8 | data[5]);
 80021d0:	7d3b      	ldrb	r3, [r7, #20]
 80021d2:	021b      	lsls	r3, r3, #8
 80021d4:	b21a      	sxth	r2, r3
 80021d6:	7d7b      	ldrb	r3, [r7, #21]
 80021d8:	b21b      	sxth	r3, r3
 80021da:	4313      	orrs	r3, r2
 80021dc:	b21b      	sxth	r3, r3
 80021de:	ee07 3a90 	vmov	s15, r3
 80021e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021e6:	4b81      	ldr	r3, [pc, #516]	; (80023ec <_Z11process_MPUbb+0x2bc>)
 80021e8:	edc3 7a00 	vstr	s15, [r3]

    temp = (int16_t)(data[6] << 8 | data[7]);
 80021ec:	7dbb      	ldrb	r3, [r7, #22]
 80021ee:	021b      	lsls	r3, r3, #8
 80021f0:	b21a      	sxth	r2, r3
 80021f2:	7dfb      	ldrb	r3, [r7, #23]
 80021f4:	b21b      	sxth	r3, r3
 80021f6:	4313      	orrs	r3, r2
 80021f8:	b21b      	sxth	r3, r3
 80021fa:	ee07 3a90 	vmov	s15, r3
 80021fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002202:	4b7b      	ldr	r3, [pc, #492]	; (80023f0 <_Z11process_MPUbb+0x2c0>)
 8002204:	edc3 7a00 	vstr	s15, [r3]

    Gyro_x = (int16_t)(data[8] << 8 | data[9]);
 8002208:	7e3b      	ldrb	r3, [r7, #24]
 800220a:	021b      	lsls	r3, r3, #8
 800220c:	b21a      	sxth	r2, r3
 800220e:	7e7b      	ldrb	r3, [r7, #25]
 8002210:	b21b      	sxth	r3, r3
 8002212:	4313      	orrs	r3, r2
 8002214:	b21b      	sxth	r3, r3
 8002216:	ee07 3a90 	vmov	s15, r3
 800221a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800221e:	4b75      	ldr	r3, [pc, #468]	; (80023f4 <_Z11process_MPUbb+0x2c4>)
 8002220:	edc3 7a00 	vstr	s15, [r3]
    Gyro_y = (int16_t)(data[10] << 8 | data[11]);
 8002224:	7ebb      	ldrb	r3, [r7, #26]
 8002226:	021b      	lsls	r3, r3, #8
 8002228:	b21a      	sxth	r2, r3
 800222a:	7efb      	ldrb	r3, [r7, #27]
 800222c:	b21b      	sxth	r3, r3
 800222e:	4313      	orrs	r3, r2
 8002230:	b21b      	sxth	r3, r3
 8002232:	ee07 3a90 	vmov	s15, r3
 8002236:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800223a:	4b6f      	ldr	r3, [pc, #444]	; (80023f8 <_Z11process_MPUbb+0x2c8>)
 800223c:	edc3 7a00 	vstr	s15, [r3]
    Gyro_z = (int16_t)(data[12] << 8 | data[13]);
 8002240:	7f3b      	ldrb	r3, [r7, #28]
 8002242:	021b      	lsls	r3, r3, #8
 8002244:	b21a      	sxth	r2, r3
 8002246:	7f7b      	ldrb	r3, [r7, #29]
 8002248:	b21b      	sxth	r3, r3
 800224a:	4313      	orrs	r3, r2
 800224c:	b21b      	sxth	r3, r3
 800224e:	ee07 3a90 	vmov	s15, r3
 8002252:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002256:	4b69      	ldr	r3, [pc, #420]	; (80023fc <_Z11process_MPUbb+0x2cc>)
 8002258:	edc3 7a00 	vstr	s15, [r3]

	Acc_x= (Acc_x)/16384.0 - bAx ;
 800225c:	4b61      	ldr	r3, [pc, #388]	; (80023e4 <_Z11process_MPUbb+0x2b4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe f921 	bl	80004a8 <__aeabi_f2d>
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	4b65      	ldr	r3, [pc, #404]	; (8002400 <_Z11process_MPUbb+0x2d0>)
 800226c:	f7fe fa9e 	bl	80007ac <__aeabi_ddiv>
 8002270:	4603      	mov	r3, r0
 8002272:	460c      	mov	r4, r1
 8002274:	4618      	mov	r0, r3
 8002276:	4621      	mov	r1, r4
 8002278:	4b62      	ldr	r3, [pc, #392]	; (8002404 <_Z11process_MPUbb+0x2d4>)
 800227a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800227e:	461a      	mov	r2, r3
 8002280:	4623      	mov	r3, r4
 8002282:	f7fd ffb1 	bl	80001e8 <__aeabi_dsub>
 8002286:	4603      	mov	r3, r0
 8002288:	460c      	mov	r4, r1
 800228a:	4618      	mov	r0, r3
 800228c:	4621      	mov	r1, r4
 800228e:	f7fe fc45 	bl	8000b1c <__aeabi_d2f>
 8002292:	4602      	mov	r2, r0
 8002294:	4b53      	ldr	r3, [pc, #332]	; (80023e4 <_Z11process_MPUbb+0x2b4>)
 8002296:	601a      	str	r2, [r3, #0]
	Acc_y = (Acc_y)/16384.0 - bAy;
 8002298:	4b53      	ldr	r3, [pc, #332]	; (80023e8 <_Z11process_MPUbb+0x2b8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f7fe f903 	bl	80004a8 <__aeabi_f2d>
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	4b56      	ldr	r3, [pc, #344]	; (8002400 <_Z11process_MPUbb+0x2d0>)
 80022a8:	f7fe fa80 	bl	80007ac <__aeabi_ddiv>
 80022ac:	4603      	mov	r3, r0
 80022ae:	460c      	mov	r4, r1
 80022b0:	4618      	mov	r0, r3
 80022b2:	4621      	mov	r1, r4
 80022b4:	4b54      	ldr	r3, [pc, #336]	; (8002408 <_Z11process_MPUbb+0x2d8>)
 80022b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80022ba:	461a      	mov	r2, r3
 80022bc:	4623      	mov	r3, r4
 80022be:	f7fd ff93 	bl	80001e8 <__aeabi_dsub>
 80022c2:	4603      	mov	r3, r0
 80022c4:	460c      	mov	r4, r1
 80022c6:	4618      	mov	r0, r3
 80022c8:	4621      	mov	r1, r4
 80022ca:	f7fe fc27 	bl	8000b1c <__aeabi_d2f>
 80022ce:	4602      	mov	r2, r0
 80022d0:	4b45      	ldr	r3, [pc, #276]	; (80023e8 <_Z11process_MPUbb+0x2b8>)
 80022d2:	601a      	str	r2, [r3, #0]
	Acc_z = (Acc_z)/16384.0 + bAz;
 80022d4:	4b45      	ldr	r3, [pc, #276]	; (80023ec <_Z11process_MPUbb+0x2bc>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fe f8e5 	bl	80004a8 <__aeabi_f2d>
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	4b47      	ldr	r3, [pc, #284]	; (8002400 <_Z11process_MPUbb+0x2d0>)
 80022e4:	f7fe fa62 	bl	80007ac <__aeabi_ddiv>
 80022e8:	4603      	mov	r3, r0
 80022ea:	460c      	mov	r4, r1
 80022ec:	4618      	mov	r0, r3
 80022ee:	4621      	mov	r1, r4
 80022f0:	4b46      	ldr	r3, [pc, #280]	; (800240c <_Z11process_MPUbb+0x2dc>)
 80022f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80022f6:	461a      	mov	r2, r3
 80022f8:	4623      	mov	r3, r4
 80022fa:	f7fd ff77 	bl	80001ec <__adddf3>
 80022fe:	4603      	mov	r3, r0
 8002300:	460c      	mov	r4, r1
 8002302:	4618      	mov	r0, r3
 8002304:	4621      	mov	r1, r4
 8002306:	f7fe fc09 	bl	8000b1c <__aeabi_d2f>
 800230a:	4602      	mov	r2, r0
 800230c:	4b37      	ldr	r3, [pc, #220]	; (80023ec <_Z11process_MPUbb+0x2bc>)
 800230e:	601a      	str	r2, [r3, #0]
    if(!EKF){
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	f083 0301 	eor.w	r3, r3, #1
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d07f      	beq.n	800241c <_Z11process_MPUbb+0x2ec>
	Gyro_x = (Gyro_x )/16.4- bGx;
 800231c:	4b35      	ldr	r3, [pc, #212]	; (80023f4 <_Z11process_MPUbb+0x2c4>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f7fe f8c1 	bl	80004a8 <__aeabi_f2d>
 8002326:	a32c      	add	r3, pc, #176	; (adr r3, 80023d8 <_Z11process_MPUbb+0x2a8>)
 8002328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232c:	f7fe fa3e 	bl	80007ac <__aeabi_ddiv>
 8002330:	4603      	mov	r3, r0
 8002332:	460c      	mov	r4, r1
 8002334:	4618      	mov	r0, r3
 8002336:	4621      	mov	r1, r4
 8002338:	4b35      	ldr	r3, [pc, #212]	; (8002410 <_Z11process_MPUbb+0x2e0>)
 800233a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800233e:	461a      	mov	r2, r3
 8002340:	4623      	mov	r3, r4
 8002342:	f7fd ff51 	bl	80001e8 <__aeabi_dsub>
 8002346:	4603      	mov	r3, r0
 8002348:	460c      	mov	r4, r1
 800234a:	4618      	mov	r0, r3
 800234c:	4621      	mov	r1, r4
 800234e:	f7fe fbe5 	bl	8000b1c <__aeabi_d2f>
 8002352:	4602      	mov	r2, r0
 8002354:	4b27      	ldr	r3, [pc, #156]	; (80023f4 <_Z11process_MPUbb+0x2c4>)
 8002356:	601a      	str	r2, [r3, #0]
	Gyro_y = (Gyro_y )/16.4- bGy;
 8002358:	4b27      	ldr	r3, [pc, #156]	; (80023f8 <_Z11process_MPUbb+0x2c8>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe f8a3 	bl	80004a8 <__aeabi_f2d>
 8002362:	a31d      	add	r3, pc, #116	; (adr r3, 80023d8 <_Z11process_MPUbb+0x2a8>)
 8002364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002368:	f7fe fa20 	bl	80007ac <__aeabi_ddiv>
 800236c:	4603      	mov	r3, r0
 800236e:	460c      	mov	r4, r1
 8002370:	4618      	mov	r0, r3
 8002372:	4621      	mov	r1, r4
 8002374:	4b27      	ldr	r3, [pc, #156]	; (8002414 <_Z11process_MPUbb+0x2e4>)
 8002376:	e9d3 3400 	ldrd	r3, r4, [r3]
 800237a:	461a      	mov	r2, r3
 800237c:	4623      	mov	r3, r4
 800237e:	f7fd ff33 	bl	80001e8 <__aeabi_dsub>
 8002382:	4603      	mov	r3, r0
 8002384:	460c      	mov	r4, r1
 8002386:	4618      	mov	r0, r3
 8002388:	4621      	mov	r1, r4
 800238a:	f7fe fbc7 	bl	8000b1c <__aeabi_d2f>
 800238e:	4602      	mov	r2, r0
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <_Z11process_MPUbb+0x2c8>)
 8002392:	601a      	str	r2, [r3, #0]
	Gyro_z = (Gyro_z )/16.4- bGz;
 8002394:	4b19      	ldr	r3, [pc, #100]	; (80023fc <_Z11process_MPUbb+0x2cc>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe f885 	bl	80004a8 <__aeabi_f2d>
 800239e:	a30e      	add	r3, pc, #56	; (adr r3, 80023d8 <_Z11process_MPUbb+0x2a8>)
 80023a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a4:	f7fe fa02 	bl	80007ac <__aeabi_ddiv>
 80023a8:	4603      	mov	r3, r0
 80023aa:	460c      	mov	r4, r1
 80023ac:	4618      	mov	r0, r3
 80023ae:	4621      	mov	r1, r4
 80023b0:	4b19      	ldr	r3, [pc, #100]	; (8002418 <_Z11process_MPUbb+0x2e8>)
 80023b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80023b6:	461a      	mov	r2, r3
 80023b8:	4623      	mov	r3, r4
 80023ba:	f7fd ff15 	bl	80001e8 <__aeabi_dsub>
 80023be:	4603      	mov	r3, r0
 80023c0:	460c      	mov	r4, r1
 80023c2:	4618      	mov	r0, r3
 80023c4:	4621      	mov	r1, r4
 80023c6:	f7fe fba9 	bl	8000b1c <__aeabi_d2f>
 80023ca:	4602      	mov	r2, r0
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <_Z11process_MPUbb+0x2cc>)
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	e05d      	b.n	800248e <_Z11process_MPUbb+0x35e>
 80023d2:	bf00      	nop
 80023d4:	f3af 8000 	nop.w
 80023d8:	66666666 	.word	0x66666666
 80023dc:	40306666 	.word	0x40306666
 80023e0:	20000394 	.word	0x20000394
 80023e4:	200005d8 	.word	0x200005d8
 80023e8:	200005dc 	.word	0x200005dc
 80023ec:	200005e0 	.word	0x200005e0
 80023f0:	20000598 	.word	0x20000598
 80023f4:	200005e4 	.word	0x200005e4
 80023f8:	200005e8 	.word	0x200005e8
 80023fc:	200005ec 	.word	0x200005ec
 8002400:	40d00000 	.word	0x40d00000
 8002404:	200005a8 	.word	0x200005a8
 8002408:	200005b0 	.word	0x200005b0
 800240c:	200005b8 	.word	0x200005b8
 8002410:	200005c0 	.word	0x200005c0
 8002414:	200005c8 	.word	0x200005c8
 8002418:	200005d0 	.word	0x200005d0
    }
    else{
    	Gyro_x = (Gyro_x )/16.4;
 800241c:	4b30      	ldr	r3, [pc, #192]	; (80024e0 <_Z11process_MPUbb+0x3b0>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe f841 	bl	80004a8 <__aeabi_f2d>
 8002426:	a32c      	add	r3, pc, #176	; (adr r3, 80024d8 <_Z11process_MPUbb+0x3a8>)
 8002428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242c:	f7fe f9be 	bl	80007ac <__aeabi_ddiv>
 8002430:	4603      	mov	r3, r0
 8002432:	460c      	mov	r4, r1
 8002434:	4618      	mov	r0, r3
 8002436:	4621      	mov	r1, r4
 8002438:	f7fe fb70 	bl	8000b1c <__aeabi_d2f>
 800243c:	4602      	mov	r2, r0
 800243e:	4b28      	ldr	r3, [pc, #160]	; (80024e0 <_Z11process_MPUbb+0x3b0>)
 8002440:	601a      	str	r2, [r3, #0]
    	Gyro_y = (Gyro_y )/16.4;
 8002442:	4b28      	ldr	r3, [pc, #160]	; (80024e4 <_Z11process_MPUbb+0x3b4>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe f82e 	bl	80004a8 <__aeabi_f2d>
 800244c:	a322      	add	r3, pc, #136	; (adr r3, 80024d8 <_Z11process_MPUbb+0x3a8>)
 800244e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002452:	f7fe f9ab 	bl	80007ac <__aeabi_ddiv>
 8002456:	4603      	mov	r3, r0
 8002458:	460c      	mov	r4, r1
 800245a:	4618      	mov	r0, r3
 800245c:	4621      	mov	r1, r4
 800245e:	f7fe fb5d 	bl	8000b1c <__aeabi_d2f>
 8002462:	4602      	mov	r2, r0
 8002464:	4b1f      	ldr	r3, [pc, #124]	; (80024e4 <_Z11process_MPUbb+0x3b4>)
 8002466:	601a      	str	r2, [r3, #0]
    	Gyro_z = (Gyro_z )/16.4;
 8002468:	4b1f      	ldr	r3, [pc, #124]	; (80024e8 <_Z11process_MPUbb+0x3b8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe f81b 	bl	80004a8 <__aeabi_f2d>
 8002472:	a319      	add	r3, pc, #100	; (adr r3, 80024d8 <_Z11process_MPUbb+0x3a8>)
 8002474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002478:	f7fe f998 	bl	80007ac <__aeabi_ddiv>
 800247c:	4603      	mov	r3, r0
 800247e:	460c      	mov	r4, r1
 8002480:	4618      	mov	r0, r3
 8002482:	4621      	mov	r1, r4
 8002484:	f7fe fb4a 	bl	8000b1c <__aeabi_d2f>
 8002488:	4602      	mov	r2, r0
 800248a:	4b17      	ldr	r3, [pc, #92]	; (80024e8 <_Z11process_MPUbb+0x3b8>)
 800248c:	601a      	str	r2, [r3, #0]
    }

    if(!LPF){
 800248e:	78bb      	ldrb	r3, [r7, #2]
 8002490:	f083 0301 	eor.w	r3, r3, #1
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d018      	beq.n	80024cc <_Z11process_MPUbb+0x39c>
		data_raw.Gyro_x = Gyro_x;
 800249a:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <_Z11process_MPUbb+0x3b0>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	601a      	str	r2, [r3, #0]
		data_raw.Gyro_y = Gyro_y;
 80024a2:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <_Z11process_MPUbb+0x3b4>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	605a      	str	r2, [r3, #4]
		data_raw.Gyro_z = Gyro_z;
 80024aa:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <_Z11process_MPUbb+0x3b8>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	609a      	str	r2, [r3, #8]
		data_raw.Acc_x = Acc_x;
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <_Z11process_MPUbb+0x3bc>)
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	60da      	str	r2, [r3, #12]
		data_raw.Acc_y = Acc_y;
 80024ba:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <_Z11process_MPUbb+0x3c0>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	611a      	str	r2, [r3, #16]
		data_raw.Acc_z = Acc_z;
 80024c2:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <_Z11process_MPUbb+0x3c4>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	615a      	str	r2, [r3, #20]
    }

    return data_raw;
 80024ca:	bf00      	nop
 80024cc:	bf00      	nop
}
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	3724      	adds	r7, #36	; 0x24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd90      	pop	{r4, r7, pc}
 80024d6:	bf00      	nop
 80024d8:	66666666 	.word	0x66666666
 80024dc:	40306666 	.word	0x40306666
 80024e0:	200005e4 	.word	0x200005e4
 80024e4:	200005e8 	.word	0x200005e8
 80024e8:	200005ec 	.word	0x200005ec
 80024ec:	200005d8 	.word	0x200005d8
 80024f0:	200005dc 	.word	0x200005dc
 80024f4:	200005e0 	.word	0x200005e0

080024f8 <_Z20complementary_filter8IMU_dataff>:
	    temp.Mag_x = magnet_calib[0];
	    temp.Mag_y = magnet_calib[1];
	    temp.Mag_z = magnet_calib[2];
	    return temp;
}
EULER_angle complementary_filter(IMU_data data, float dt, float alpha){
 80024f8:	b084      	sub	sp, #16
 80024fa:	b590      	push	{r4, r7, lr}
 80024fc:	ed2d 8b02 	vpush	{d8}
 8002500:	b08f      	sub	sp, #60	; 0x3c
 8002502:	af00      	add	r7, sp, #0
 8002504:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8002508:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800250c:	ed87 0a05 	vstr	s0, [r7, #20]
 8002510:	edc7 0a04 	vstr	s1, [r7, #16]
	EULER_angle temp;
	float pitch_acc, roll_acc;

	if(data.Acc_x != 0 && data.Acc_y != 0 && data.Acc_z !=0){
 8002514:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002518:	eef5 7a40 	vcmp.f32	s15, #0.0
 800251c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002520:	f000 80bb 	beq.w	800269a <_Z20complementary_filter8IMU_dataff+0x1a2>
 8002524:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002528:	eef5 7a40 	vcmp.f32	s15, #0.0
 800252c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002530:	f000 80b3 	beq.w	800269a <_Z20complementary_filter8IMU_dataff+0x1a2>
 8002534:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002538:	eef5 7a40 	vcmp.f32	s15, #0.0
 800253c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002540:	f000 80ab 	beq.w	800269a <_Z20complementary_filter8IMU_dataff+0x1a2>
    roll_acc = atan2(data.Acc_y,data.Acc_z)*RAD2DEC;
 8002544:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002548:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800254c:	eef0 0a47 	vmov.f32	s1, s14
 8002550:	eeb0 0a67 	vmov.f32	s0, s15
 8002554:	f7fe ff42 	bl	80013dc <_ZSt5atan2ff>
 8002558:	ee10 3a10 	vmov	r3, s0
 800255c:	4618      	mov	r0, r3
 800255e:	f7fd ffa3 	bl	80004a8 <__aeabi_f2d>
 8002562:	a36f      	add	r3, pc, #444	; (adr r3, 8002720 <_Z20complementary_filter8IMU_dataff+0x228>)
 8002564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002568:	f7fd fff6 	bl	8000558 <__aeabi_dmul>
 800256c:	4603      	mov	r3, r0
 800256e:	460c      	mov	r4, r1
 8002570:	4618      	mov	r0, r3
 8002572:	4621      	mov	r1, r4
 8002574:	f7fe fad2 	bl	8000b1c <__aeabi_d2f>
 8002578:	4603      	mov	r3, r0
 800257a:	637b      	str	r3, [r7, #52]	; 0x34
    if(roll_acc<0){
 800257c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002580:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002588:	d508      	bpl.n	800259c <_Z20complementary_filter8IMU_dataff+0xa4>
    	roll_acc+=180;
 800258a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800258e:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8002728 <_Z20complementary_filter8IMU_dataff+0x230>
 8002592:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002596:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 800259a:	e00e      	b.n	80025ba <_Z20complementary_filter8IMU_dataff+0xc2>
    }
    else{
    	if(roll_acc!=0){
 800259c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80025a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a8:	d007      	beq.n	80025ba <_Z20complementary_filter8IMU_dataff+0xc2>
    		roll_acc-=180;
 80025aa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80025ae:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002728 <_Z20complementary_filter8IMU_dataff+0x230>
 80025b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80025b6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    	}
    }
    temp.pitch = com_angle_p;
 80025ba:	4b5c      	ldr	r3, [pc, #368]	; (800272c <_Z20complementary_filter8IMU_dataff+0x234>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	61fb      	str	r3, [r7, #28]
    temp.roll = com_angle_r;
 80025c0:	4b5b      	ldr	r3, [pc, #364]	; (8002730 <_Z20complementary_filter8IMU_dataff+0x238>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	61bb      	str	r3, [r7, #24]
    pitch_acc = atan(data.Acc_x/sqrt(data.Acc_y*data.Acc_y + data.Acc_z*data.Acc_z))*RAD2DEC;
 80025c6:	ed97 8a17 	vldr	s16, [r7, #92]	; 0x5c
 80025ca:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80025ce:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80025d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025d6:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80025da:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80025de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025e6:	eeb0 0a67 	vmov.f32	s0, s15
 80025ea:	f7fe ff0b 	bl	8001404 <_ZSt4sqrtf>
 80025ee:	eeb0 7a40 	vmov.f32	s14, s0
 80025f2:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80025f6:	eeb0 0a67 	vmov.f32	s0, s15
 80025fa:	f7fe fedf 	bl	80013bc <_ZSt4atanf>
 80025fe:	ee10 3a10 	vmov	r3, s0
 8002602:	4618      	mov	r0, r3
 8002604:	f7fd ff50 	bl	80004a8 <__aeabi_f2d>
 8002608:	a345      	add	r3, pc, #276	; (adr r3, 8002720 <_Z20complementary_filter8IMU_dataff+0x228>)
 800260a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260e:	f7fd ffa3 	bl	8000558 <__aeabi_dmul>
 8002612:	4603      	mov	r3, r0
 8002614:	460c      	mov	r4, r1
 8002616:	4618      	mov	r0, r3
 8002618:	4621      	mov	r1, r4
 800261a:	f7fe fa7f 	bl	8000b1c <__aeabi_d2f>
 800261e:	4603      	mov	r3, r0
 8002620:	633b      	str	r3, [r7, #48]	; 0x30

		com_angle_r = alpha*(com_angle_r + dt*data.Gyro_x) + (1-alpha)*roll_acc;
 8002622:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002626:	edd7 7a05 	vldr	s15, [r7, #20]
 800262a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800262e:	4b40      	ldr	r3, [pc, #256]	; (8002730 <_Z20complementary_filter8IMU_dataff+0x238>)
 8002630:	edd3 7a00 	vldr	s15, [r3]
 8002634:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002638:	edd7 7a04 	vldr	s15, [r7, #16]
 800263c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002640:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002644:	edd7 7a04 	vldr	s15, [r7, #16]
 8002648:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800264c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002650:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002658:	4b35      	ldr	r3, [pc, #212]	; (8002730 <_Z20complementary_filter8IMU_dataff+0x238>)
 800265a:	edc3 7a00 	vstr	s15, [r3]
		com_angle_p = alpha*(com_angle_p + dt*data.Gyro_y) + (1-alpha)*pitch_acc;
 800265e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002662:	edd7 7a05 	vldr	s15, [r7, #20]
 8002666:	ee27 7a27 	vmul.f32	s14, s14, s15
 800266a:	4b30      	ldr	r3, [pc, #192]	; (800272c <_Z20complementary_filter8IMU_dataff+0x234>)
 800266c:	edd3 7a00 	vldr	s15, [r3]
 8002670:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002674:	edd7 7a04 	vldr	s15, [r7, #16]
 8002678:	ee27 7a27 	vmul.f32	s14, s14, s15
 800267c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002680:	edd7 7a04 	vldr	s15, [r7, #16]
 8002684:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002688:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800268c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002694:	4b25      	ldr	r3, [pc, #148]	; (800272c <_Z20complementary_filter8IMU_dataff+0x234>)
 8002696:	edc3 7a00 	vstr	s15, [r3]
	}
	if(!isnan(com_angle_r) & !isnan(com_angle_p)){
 800269a:	4b25      	ldr	r3, [pc, #148]	; (8002730 <_Z20complementary_filter8IMU_dataff+0x238>)
 800269c:	edd3 7a00 	vldr	s15, [r3]
 80026a0:	eeb0 0a67 	vmov.f32	s0, s15
 80026a4:	f7fe febe 	bl	8001424 <_ZSt5isnanf>
 80026a8:	4603      	mov	r3, r0
 80026aa:	f083 0301 	eor.w	r3, r3, #1
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	461c      	mov	r4, r3
 80026b2:	4b1e      	ldr	r3, [pc, #120]	; (800272c <_Z20complementary_filter8IMU_dataff+0x234>)
 80026b4:	edd3 7a00 	vldr	s15, [r3]
 80026b8:	eeb0 0a67 	vmov.f32	s0, s15
 80026bc:	f7fe feb2 	bl	8001424 <_ZSt5isnanf>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f083 0301 	eor.w	r3, r3, #1
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	4023      	ands	r3, r4
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	bf14      	ite	ne
 80026ce:	2301      	movne	r3, #1
 80026d0:	2300      	moveq	r3, #0
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <_Z20complementary_filter8IMU_dataff+0x1ec>
		temp.pitch = com_angle_p;
 80026d8:	4b14      	ldr	r3, [pc, #80]	; (800272c <_Z20complementary_filter8IMU_dataff+0x234>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	61fb      	str	r3, [r7, #28]
		temp.roll = com_angle_r;
 80026de:	4b14      	ldr	r3, [pc, #80]	; (8002730 <_Z20complementary_filter8IMU_dataff+0x238>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	61bb      	str	r3, [r7, #24]
	}
    return temp;
 80026e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026e8:	f107 0218 	add.w	r2, r7, #24
 80026ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80026ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80026f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f8:	ee06 1a90 	vmov	s13, r1
 80026fc:	ee07 2a10 	vmov	s14, r2
 8002700:	ee07 3a90 	vmov	s15, r3
}
 8002704:	eeb0 0a66 	vmov.f32	s0, s13
 8002708:	eef0 0a47 	vmov.f32	s1, s14
 800270c:	eeb0 1a67 	vmov.f32	s2, s15
 8002710:	373c      	adds	r7, #60	; 0x3c
 8002712:	46bd      	mov	sp, r7
 8002714:	ecbd 8b02 	vpop	{d8}
 8002718:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800271c:	b004      	add	sp, #16
 800271e:	4770      	bx	lr
 8002720:	1a5d2372 	.word	0x1a5d2372
 8002724:	404ca5dc 	.word	0x404ca5dc
 8002728:	43340000 	.word	0x43340000
 800272c:	2000060c 	.word	0x2000060c
 8002730:	20000608 	.word	0x20000608

08002734 <_Z12notify_state8AHRS_con>:

void notify_state(AHRS_con state){
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
    if(state.IMU == true && state.magnet == true && state.magnet == true){
 800273c:	793b      	ldrb	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d01f      	beq.n	8002782 <_Z12notify_state8AHRS_con+0x4e>
 8002742:	797b      	ldrb	r3, [r7, #5]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d01c      	beq.n	8002782 <_Z12notify_state8AHRS_con+0x4e>
 8002748:	797b      	ldrb	r3, [r7, #5]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d019      	beq.n	8002782 <_Z12notify_state8AHRS_con+0x4e>
    for(uint8_t i = 0; i<4; i++){
 800274e:	2300      	movs	r3, #0
 8002750:	73fb      	strb	r3, [r7, #15]
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	2b03      	cmp	r3, #3
 8002756:	d814      	bhi.n	8002782 <_Z12notify_state8AHRS_con+0x4e>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8002758:	2104      	movs	r1, #4
 800275a:	480e      	ldr	r0, [pc, #56]	; (8002794 <_Z12notify_state8AHRS_con+0x60>)
 800275c:	f004 fd11 	bl	8007182 <HAL_GPIO_TogglePin>
 	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8002760:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002764:	480b      	ldr	r0, [pc, #44]	; (8002794 <_Z12notify_state8AHRS_con+0x60>)
 8002766:	f004 fd0c 	bl	8007182 <HAL_GPIO_TogglePin>
 	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800276a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800276e:	4809      	ldr	r0, [pc, #36]	; (8002794 <_Z12notify_state8AHRS_con+0x60>)
 8002770:	f004 fd07 	bl	8007182 <HAL_GPIO_TogglePin>
 	HAL_Delay(100);
 8002774:	2064      	movs	r0, #100	; 0x64
 8002776:	f003 fe43 	bl	8006400 <HAL_Delay>
    for(uint8_t i = 0; i<4; i++){
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	3301      	adds	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
 8002780:	e7e7      	b.n	8002752 <_Z12notify_state8AHRS_con+0x1e>
    }
    }
    HAL_Delay(1000);
 8002782:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002786:	f003 fe3b 	bl	8006400 <HAL_Delay>
}
 800278a:	bf00      	nop
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40020400 	.word	0x40020400

08002798 <_Z10check_AHRSb>:

AHRS_con check_AHRS(bool notify){
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	71fb      	strb	r3, [r7, #7]
	AHRS_con state;
 80027a2:	4a4d      	ldr	r2, [pc, #308]	; (80028d8 <_Z10check_AHRSb+0x140>)
 80027a4:	f107 030c 	add.w	r3, r7, #12
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	4611      	mov	r1, r2
 80027ac:	8019      	strh	r1, [r3, #0]
 80027ae:	3302      	adds	r3, #2
 80027b0:	0c12      	lsrs	r2, r2, #16
 80027b2:	701a      	strb	r2, [r3, #0]
	uint8_t magnet_address = MAG_ADRRESS;
 80027b4:	2318      	movs	r3, #24
 80027b6:	75fb      	strb	r3, [r7, #23]
	uint8_t device_address = MPU_ADDRESS;
 80027b8:	23d0      	movs	r3, #208	; 0xd0
 80027ba:	75bb      	strb	r3, [r7, #22]
	uint8_t  BMP_ADDRESS  = 0xEE;
 80027bc:	23ee      	movs	r3, #238	; 0xee
 80027be:	757b      	strb	r3, [r7, #21]
	 if (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 2) != HAL_OK) {
 80027c0:	7dbb      	ldrb	r3, [r7, #22]
 80027c2:	b299      	uxth	r1, r3
 80027c4:	2302      	movs	r3, #2
 80027c6:	2203      	movs	r2, #3
 80027c8:	4844      	ldr	r0, [pc, #272]	; (80028dc <_Z10check_AHRSb+0x144>)
 80027ca:	f005 f981 	bl	8007ad0 <HAL_I2C_IsDeviceReady>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	bf14      	ite	ne
 80027d4:	2301      	movne	r3, #1
 80027d6:	2300      	moveq	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d015      	beq.n	800280a <_Z10check_AHRSb+0x72>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_SET);
 80027de:	2201      	movs	r2, #1
 80027e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027e4:	483e      	ldr	r0, [pc, #248]	; (80028e0 <_Z10check_AHRSb+0x148>)
 80027e6:	f004 fcb3 	bl	8007150 <HAL_GPIO_WritePin>
	    	HAL_Delay(500);
 80027ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027ee:	f003 fe07 	bl	8006400 <HAL_Delay>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 80027f2:	2200      	movs	r2, #0
 80027f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027f8:	4839      	ldr	r0, [pc, #228]	; (80028e0 <_Z10check_AHRSb+0x148>)
 80027fa:	f004 fca9 	bl	8007150 <HAL_GPIO_WritePin>
	    	HAL_Delay(500);
 80027fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002802:	f003 fdfd 	bl	8006400 <HAL_Delay>
	    	state.IMU = false;
 8002806:	2300      	movs	r3, #0
 8002808:	733b      	strb	r3, [r7, #12]
	}
	if (HAL_I2C_IsDeviceReady(&hi2c1, magnet_address, 3, 200) != HAL_OK) {
 800280a:	7dfb      	ldrb	r3, [r7, #23]
 800280c:	b299      	uxth	r1, r3
 800280e:	23c8      	movs	r3, #200	; 0xc8
 8002810:	2203      	movs	r2, #3
 8002812:	4832      	ldr	r0, [pc, #200]	; (80028dc <_Z10check_AHRSb+0x144>)
 8002814:	f005 f95c 	bl	8007ad0 <HAL_I2C_IsDeviceReady>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	bf14      	ite	ne
 800281e:	2301      	movne	r3, #1
 8002820:	2300      	moveq	r3, #0
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	d015      	beq.n	8002854 <_Z10check_AHRSb+0xbc>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_SET);
 8002828:	2201      	movs	r2, #1
 800282a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800282e:	482c      	ldr	r0, [pc, #176]	; (80028e0 <_Z10check_AHRSb+0x148>)
 8002830:	f004 fc8e 	bl	8007150 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8002834:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002838:	f003 fde2 	bl	8006400 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 800283c:	2200      	movs	r2, #0
 800283e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002842:	4827      	ldr	r0, [pc, #156]	; (80028e0 <_Z10check_AHRSb+0x148>)
 8002844:	f004 fc84 	bl	8007150 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8002848:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800284c:	f003 fdd8 	bl	8006400 <HAL_Delay>
		state.magnet = false;
 8002850:	2300      	movs	r3, #0
 8002852:	737b      	strb	r3, [r7, #13]
	}
	 if(HAL_I2C_IsDeviceReady(&hi2c1, (uint8_t) BMP_ADDRESS, 3, 2) != HAL_OK) {
 8002854:	7d7b      	ldrb	r3, [r7, #21]
 8002856:	b299      	uxth	r1, r3
 8002858:	2302      	movs	r3, #2
 800285a:	2203      	movs	r2, #3
 800285c:	481f      	ldr	r0, [pc, #124]	; (80028dc <_Z10check_AHRSb+0x144>)
 800285e:	f005 f937 	bl	8007ad0 <HAL_I2C_IsDeviceReady>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	bf14      	ite	ne
 8002868:	2301      	movne	r3, #1
 800286a:	2300      	moveq	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d013      	beq.n	800289a <_Z10check_AHRSb+0x102>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_SET);
 8002872:	2201      	movs	r2, #1
 8002874:	2104      	movs	r1, #4
 8002876:	481a      	ldr	r0, [pc, #104]	; (80028e0 <_Z10check_AHRSb+0x148>)
 8002878:	f004 fc6a 	bl	8007150 <HAL_GPIO_WritePin>
	    	HAL_Delay(500);
 800287c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002880:	f003 fdbe 	bl	8006400 <HAL_Delay>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_RESET);
 8002884:	2200      	movs	r2, #0
 8002886:	2104      	movs	r1, #4
 8002888:	4815      	ldr	r0, [pc, #84]	; (80028e0 <_Z10check_AHRSb+0x148>)
 800288a:	f004 fc61 	bl	8007150 <HAL_GPIO_WritePin>
	    	HAL_Delay(500);
 800288e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002892:	f003 fdb5 	bl	8006400 <HAL_Delay>
	    	state.baro = false;
 8002896:	2300      	movs	r3, #0
 8002898:	73bb      	strb	r3, [r7, #14]
	      }
	 if(notify){
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d002      	beq.n	80028a6 <_Z10check_AHRSb+0x10e>
		 notify_state(state);
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f7ff ff47 	bl	8002734 <_Z12notify_state8AHRS_con>
	 }
    return state;
 80028a6:	f107 0310 	add.w	r3, r7, #16
 80028aa:	f107 020c 	add.w	r2, r7, #12
 80028ae:	6812      	ldr	r2, [r2, #0]
 80028b0:	4611      	mov	r1, r2
 80028b2:	8019      	strh	r1, [r3, #0]
 80028b4:	3302      	adds	r3, #2
 80028b6:	0c12      	lsrs	r2, r2, #16
 80028b8:	701a      	strb	r2, [r3, #0]
 80028ba:	2300      	movs	r3, #0
 80028bc:	7c3a      	ldrb	r2, [r7, #16]
 80028be:	f362 0307 	bfi	r3, r2, #0, #8
 80028c2:	7c7a      	ldrb	r2, [r7, #17]
 80028c4:	f362 230f 	bfi	r3, r2, #8, #8
 80028c8:	7cba      	ldrb	r2, [r7, #18]
 80028ca:	f362 4317 	bfi	r3, r2, #16, #8
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	0800dc38 	.word	0x0800dc38
 80028dc:	20000394 	.word	0x20000394
 80028e0:	40020400 	.word	0x40020400
 80028e4:	00000000 	.word	0x00000000

080028e8 <_Z21MadgwickAHRSupdateIMU8IMU_dataf>:
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

EULER_angle MadgwickAHRSupdateIMU(IMU_data data,float dt) {
 80028e8:	b084      	sub	sp, #16
 80028ea:	b590      	push	{r4, r7, lr}
 80028ec:	b0af      	sub	sp, #188	; 0xbc
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 80028f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80028f8:	ed87 0a05 	vstr	s0, [r7, #20]
	float s0, s1, s2, s3;
	float gx,gy,gz,ax,ay,az;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	gx =  data.Gyro_x/180*PI;
 80028fc:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8002900:	ed9f 7aeb 	vldr	s14, [pc, #940]	; 8002cb0 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3c8>
 8002904:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002908:	ee16 0a90 	vmov	r0, s13
 800290c:	f7fd fdcc 	bl	80004a8 <__aeabi_f2d>
 8002910:	a3e5      	add	r3, pc, #916	; (adr r3, 8002ca8 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3c0>)
 8002912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002916:	f7fd fe1f 	bl	8000558 <__aeabi_dmul>
 800291a:	4603      	mov	r3, r0
 800291c:	460c      	mov	r4, r1
 800291e:	4618      	mov	r0, r3
 8002920:	4621      	mov	r1, r4
 8002922:	f7fe f8fb 	bl	8000b1c <__aeabi_d2f>
 8002926:	4603      	mov	r3, r0
 8002928:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	gy =  data.Gyro_y/180*PI;
 800292c:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8002930:	ed9f 7adf 	vldr	s14, [pc, #892]	; 8002cb0 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3c8>
 8002934:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002938:	ee16 0a90 	vmov	r0, s13
 800293c:	f7fd fdb4 	bl	80004a8 <__aeabi_f2d>
 8002940:	a3d9      	add	r3, pc, #868	; (adr r3, 8002ca8 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3c0>)
 8002942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002946:	f7fd fe07 	bl	8000558 <__aeabi_dmul>
 800294a:	4603      	mov	r3, r0
 800294c:	460c      	mov	r4, r1
 800294e:	4618      	mov	r0, r3
 8002950:	4621      	mov	r1, r4
 8002952:	f7fe f8e3 	bl	8000b1c <__aeabi_d2f>
 8002956:	4603      	mov	r3, r0
 8002958:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	gz =  data.Gyro_z/180*PI;
 800295c:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8002960:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 8002cb0 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3c8>
 8002964:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002968:	ee16 0a90 	vmov	r0, s13
 800296c:	f7fd fd9c 	bl	80004a8 <__aeabi_f2d>
 8002970:	a3cd      	add	r3, pc, #820	; (adr r3, 8002ca8 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3c0>)
 8002972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002976:	f7fd fdef 	bl	8000558 <__aeabi_dmul>
 800297a:	4603      	mov	r3, r0
 800297c:	460c      	mov	r4, r1
 800297e:	4618      	mov	r0, r3
 8002980:	4621      	mov	r1, r4
 8002982:	f7fe f8cb 	bl	8000b1c <__aeabi_d2f>
 8002986:	4603      	mov	r3, r0
 8002988:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	ax =  data.Acc_x;
 800298c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002990:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	ay =  data.Acc_y;
 8002994:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002998:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	az =  data.Acc_z;
 800299c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80029a4:	4bc3      	ldr	r3, [pc, #780]	; (8002cb4 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3cc>)
 80029a6:	edd3 7a00 	vldr	s15, [r3]
 80029aa:	eeb1 7a67 	vneg.f32	s14, s15
 80029ae:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80029b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029b6:	4bc0      	ldr	r3, [pc, #768]	; (8002cb8 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d0>)
 80029b8:	edd3 6a00 	vldr	s13, [r3]
 80029bc:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80029c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029c8:	4bbc      	ldr	r3, [pc, #752]	; (8002cbc <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d4>)
 80029ca:	edd3 6a00 	vldr	s13, [r3]
 80029ce:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80029d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80029de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029e2:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80029e6:	4bb6      	ldr	r3, [pc, #728]	; (8002cc0 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d8>)
 80029e8:	ed93 7a00 	vldr	s14, [r3]
 80029ec:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80029f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029f4:	4bb0      	ldr	r3, [pc, #704]	; (8002cb8 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d0>)
 80029f6:	edd3 6a00 	vldr	s13, [r3]
 80029fa:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80029fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a06:	4bad      	ldr	r3, [pc, #692]	; (8002cbc <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d4>)
 8002a08:	edd3 6a00 	vldr	s13, [r3]
 8002a0c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002a10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a18:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a20:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8002a24:	4ba6      	ldr	r3, [pc, #664]	; (8002cc0 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d8>)
 8002a26:	ed93 7a00 	vldr	s14, [r3]
 8002a2a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002a2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a32:	4ba0      	ldr	r3, [pc, #640]	; (8002cb4 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3cc>)
 8002a34:	edd3 6a00 	vldr	s13, [r3]
 8002a38:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002a3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a44:	4b9d      	ldr	r3, [pc, #628]	; (8002cbc <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d4>)
 8002a46:	edd3 6a00 	vldr	s13, [r3]
 8002a4a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002a4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a56:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a5e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8002a62:	4b97      	ldr	r3, [pc, #604]	; (8002cc0 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d8>)
 8002a64:	ed93 7a00 	vldr	s14, [r3]
 8002a68:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002a6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a70:	4b90      	ldr	r3, [pc, #576]	; (8002cb4 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3cc>)
 8002a72:	edd3 6a00 	vldr	s13, [r3]
 8002a76:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002a7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a82:	4b8d      	ldr	r3, [pc, #564]	; (8002cb8 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d0>)
 8002a84:	edd3 6a00 	vldr	s13, [r3]
 8002a88:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002a8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a94:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a9c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8002aa0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002aa4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aac:	d10e      	bne.n	8002acc <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x1e4>
 8002aae:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002ab2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aba:	d107      	bne.n	8002acc <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x1e4>
 8002abc:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002ac0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac8:	f000 81fb 	beq.w	8002ec2 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x5da>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8002acc:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002ad0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002ad4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ad8:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8002adc:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002ae0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ae4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ae8:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8002aec:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002af0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002af4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002af8:	eeb0 0a67 	vmov.f32	s0, s15
 8002afc:	f7fe fde8 	bl	80016d0 <_Z7invSqrtf>
 8002b00:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
		ax *= recipNorm;
 8002b04:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002b08:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b10:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		ay *= recipNorm;
 8002b14:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002b18:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b20:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		az *= recipNorm;
 8002b24:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002b28:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b30:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8002b34:	4b62      	ldr	r3, [pc, #392]	; (8002cc0 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d8>)
 8002b36:	edd3 7a00 	vldr	s15, [r3]
 8002b3a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b3e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		_2q1 = 2.0f * q1;
 8002b42:	4b5c      	ldr	r3, [pc, #368]	; (8002cb4 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3cc>)
 8002b44:	edd3 7a00 	vldr	s15, [r3]
 8002b48:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b4c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		_2q2 = 2.0f * q2;
 8002b50:	4b59      	ldr	r3, [pc, #356]	; (8002cb8 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d0>)
 8002b52:	edd3 7a00 	vldr	s15, [r3]
 8002b56:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b5a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		_2q3 = 2.0f * q3;
 8002b5e:	4b57      	ldr	r3, [pc, #348]	; (8002cbc <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d4>)
 8002b60:	edd3 7a00 	vldr	s15, [r3]
 8002b64:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b68:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		_4q0 = 4.0f * q0;
 8002b6c:	4b54      	ldr	r3, [pc, #336]	; (8002cc0 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d8>)
 8002b6e:	edd3 7a00 	vldr	s15, [r3]
 8002b72:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002b76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b7a:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		_4q1 = 4.0f * q1;
 8002b7e:	4b4d      	ldr	r3, [pc, #308]	; (8002cb4 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3cc>)
 8002b80:	edd3 7a00 	vldr	s15, [r3]
 8002b84:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002b88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b8c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		_4q2 = 4.0f * q2;
 8002b90:	4b49      	ldr	r3, [pc, #292]	; (8002cb8 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d0>)
 8002b92:	edd3 7a00 	vldr	s15, [r3]
 8002b96:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002b9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b9e:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		_8q1 = 8.0f * q1;
 8002ba2:	4b44      	ldr	r3, [pc, #272]	; (8002cb4 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3cc>)
 8002ba4:	edd3 7a00 	vldr	s15, [r3]
 8002ba8:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002bac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bb0:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		_8q2 = 8.0f * q2;
 8002bb4:	4b40      	ldr	r3, [pc, #256]	; (8002cb8 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d0>)
 8002bb6:	edd3 7a00 	vldr	s15, [r3]
 8002bba:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002bbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bc2:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		q0q0 = q0 * q0;
 8002bc6:	4b3e      	ldr	r3, [pc, #248]	; (8002cc0 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d8>)
 8002bc8:	ed93 7a00 	vldr	s14, [r3]
 8002bcc:	4b3c      	ldr	r3, [pc, #240]	; (8002cc0 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d8>)
 8002bce:	edd3 7a00 	vldr	s15, [r3]
 8002bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bd6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		q1q1 = q1 * q1;
 8002bda:	4b36      	ldr	r3, [pc, #216]	; (8002cb4 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3cc>)
 8002bdc:	ed93 7a00 	vldr	s14, [r3]
 8002be0:	4b34      	ldr	r3, [pc, #208]	; (8002cb4 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3cc>)
 8002be2:	edd3 7a00 	vldr	s15, [r3]
 8002be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bea:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		q2q2 = q2 * q2;
 8002bee:	4b32      	ldr	r3, [pc, #200]	; (8002cb8 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d0>)
 8002bf0:	ed93 7a00 	vldr	s14, [r3]
 8002bf4:	4b30      	ldr	r3, [pc, #192]	; (8002cb8 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d0>)
 8002bf6:	edd3 7a00 	vldr	s15, [r3]
 8002bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bfe:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		q3q3 = q3 * q3;
 8002c02:	4b2e      	ldr	r3, [pc, #184]	; (8002cbc <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d4>)
 8002c04:	ed93 7a00 	vldr	s14, [r3]
 8002c08:	4b2c      	ldr	r3, [pc, #176]	; (8002cbc <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3d4>)
 8002c0a:	edd3 7a00 	vldr	s15, [r3]
 8002c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c12:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8002c16:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002c1a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002c1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c22:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8002c26:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002c2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c32:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8002c36:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002c3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c42:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8002c46:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002c4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c52:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8002c56:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002c5a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002c5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c62:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8002c66:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002c6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c72:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002c76:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002c7a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002c7e:	4b0d      	ldr	r3, [pc, #52]	; (8002cb4 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3cc>)
 8002c80:	edd3 7a00 	vldr	s15, [r3]
 8002c84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c8c:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8002c90:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002c94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c9c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002ca0:	e010      	b.n	8002cc4 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x3dc>
 8002ca2:	bf00      	nop
 8002ca4:	f3af 8000 	nop.w
 8002ca8:	54524550 	.word	0x54524550
 8002cac:	400921fb 	.word	0x400921fb
 8002cb0:	43340000 	.word	0x43340000
 8002cb4:	20000630 	.word	0x20000630
 8002cb8:	20000634 	.word	0x20000634
 8002cbc:	20000638 	.word	0x20000638
 8002cc0:	20000064 	.word	0x20000064
 8002cc4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cc8:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8002ccc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002cd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cd8:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8002cdc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002ce0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ce4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ce8:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8002cec:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002cf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8002cfc:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002d00:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002d04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d08:	4be3      	ldr	r3, [pc, #908]	; (8003098 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b0>)
 8002d0a:	edd3 7a00 	vldr	s15, [r3]
 8002d0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d12:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8002d16:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002d1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d22:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8002d26:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002d2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d32:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8002d36:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002d3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d42:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002d46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d4a:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8002d4e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002d52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d5a:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8002d5e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002d62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d6a:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8002d6e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002d72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d7a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8002d7e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002d82:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002d86:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d8a:	4bc4      	ldr	r3, [pc, #784]	; (800309c <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b4>)
 8002d8c:	edd3 7a00 	vldr	s15, [r3]
 8002d90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d94:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8002d98:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002d9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002da0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002da4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002da8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002dac:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002db0:	4bba      	ldr	r3, [pc, #744]	; (800309c <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b4>)
 8002db2:	edd3 7a00 	vldr	s15, [r3]
 8002db6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dbe:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8002dc2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002dc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dce:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002dd2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002dd6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002dda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dde:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8002de2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002de6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dee:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8002df2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002df6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dfa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dfe:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002e02:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002e06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e0e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e12:	f7fe fc5d 	bl	80016d0 <_Z7invSqrtf>
 8002e16:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
		s0 *= recipNorm;
 8002e1a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002e1e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e26:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		s1 *= recipNorm;
 8002e2a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002e2e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e36:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		s2 *= recipNorm;
 8002e3a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002e3e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e46:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		s3 *= recipNorm;
 8002e4a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002e4e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e56:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

		// Apply feedback step
		qDot1 -= beta * s0;
 8002e5a:	4b91      	ldr	r3, [pc, #580]	; (80030a0 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b8>)
 8002e5c:	ed93 7a00 	vldr	s14, [r3]
 8002e60:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e68:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002e6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e70:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		qDot2 -= beta * s1;
 8002e74:	4b8a      	ldr	r3, [pc, #552]	; (80030a0 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b8>)
 8002e76:	ed93 7a00 	vldr	s14, [r3]
 8002e7a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e82:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002e86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e8a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		qDot3 -= beta * s2;
 8002e8e:	4b84      	ldr	r3, [pc, #528]	; (80030a0 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b8>)
 8002e90:	ed93 7a00 	vldr	s14, [r3]
 8002e94:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e9c:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002ea0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ea4:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		qDot4 -= beta * s3;
 8002ea8:	4b7d      	ldr	r3, [pc, #500]	; (80030a0 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b8>)
 8002eaa:	ed93 7a00 	vldr	s14, [r3]
 8002eae:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb6:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8002eba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ebe:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (dt);
 8002ec2:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ec6:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002eca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ece:	4b75      	ldr	r3, [pc, #468]	; (80030a4 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7bc>)
 8002ed0:	edd3 7a00 	vldr	s15, [r3]
 8002ed4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ed8:	4b72      	ldr	r3, [pc, #456]	; (80030a4 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7bc>)
 8002eda:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (dt);
 8002ede:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ee2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002ee6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eea:	4b6f      	ldr	r3, [pc, #444]	; (80030a8 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7c0>)
 8002eec:	edd3 7a00 	vldr	s15, [r3]
 8002ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef4:	4b6c      	ldr	r3, [pc, #432]	; (80030a8 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7c0>)
 8002ef6:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (dt);
 8002efa:	ed97 7a05 	vldr	s14, [r7, #20]
 8002efe:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002f02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f06:	4b64      	ldr	r3, [pc, #400]	; (8003098 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b0>)
 8002f08:	edd3 7a00 	vldr	s15, [r3]
 8002f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f10:	4b61      	ldr	r3, [pc, #388]	; (8003098 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b0>)
 8002f12:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (dt);
 8002f16:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f1a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002f1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f22:	4b5e      	ldr	r3, [pc, #376]	; (800309c <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b4>)
 8002f24:	edd3 7a00 	vldr	s15, [r3]
 8002f28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f2c:	4b5b      	ldr	r3, [pc, #364]	; (800309c <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b4>)
 8002f2e:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002f32:	4b5c      	ldr	r3, [pc, #368]	; (80030a4 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7bc>)
 8002f34:	ed93 7a00 	vldr	s14, [r3]
 8002f38:	4b5a      	ldr	r3, [pc, #360]	; (80030a4 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7bc>)
 8002f3a:	edd3 7a00 	vldr	s15, [r3]
 8002f3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f42:	4b59      	ldr	r3, [pc, #356]	; (80030a8 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7c0>)
 8002f44:	edd3 6a00 	vldr	s13, [r3]
 8002f48:	4b57      	ldr	r3, [pc, #348]	; (80030a8 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7c0>)
 8002f4a:	edd3 7a00 	vldr	s15, [r3]
 8002f4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f56:	4b50      	ldr	r3, [pc, #320]	; (8003098 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b0>)
 8002f58:	edd3 6a00 	vldr	s13, [r3]
 8002f5c:	4b4e      	ldr	r3, [pc, #312]	; (8003098 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b0>)
 8002f5e:	edd3 7a00 	vldr	s15, [r3]
 8002f62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f6a:	4b4c      	ldr	r3, [pc, #304]	; (800309c <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b4>)
 8002f6c:	edd3 6a00 	vldr	s13, [r3]
 8002f70:	4b4a      	ldr	r3, [pc, #296]	; (800309c <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b4>)
 8002f72:	edd3 7a00 	vldr	s15, [r3]
 8002f76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f7e:	eeb0 0a67 	vmov.f32	s0, s15
 8002f82:	f7fe fba5 	bl	80016d0 <_Z7invSqrtf>
 8002f86:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
	q0 *= recipNorm;
 8002f8a:	4b46      	ldr	r3, [pc, #280]	; (80030a4 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7bc>)
 8002f8c:	ed93 7a00 	vldr	s14, [r3]
 8002f90:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f98:	4b42      	ldr	r3, [pc, #264]	; (80030a4 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7bc>)
 8002f9a:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002f9e:	4b42      	ldr	r3, [pc, #264]	; (80030a8 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7c0>)
 8002fa0:	ed93 7a00 	vldr	s14, [r3]
 8002fa4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002fa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fac:	4b3e      	ldr	r3, [pc, #248]	; (80030a8 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7c0>)
 8002fae:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8002fb2:	4b39      	ldr	r3, [pc, #228]	; (8003098 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b0>)
 8002fb4:	ed93 7a00 	vldr	s14, [r3]
 8002fb8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc0:	4b35      	ldr	r3, [pc, #212]	; (8003098 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b0>)
 8002fc2:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8002fc6:	4b35      	ldr	r3, [pc, #212]	; (800309c <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b4>)
 8002fc8:	ed93 7a00 	vldr	s14, [r3]
 8002fcc:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fd4:	4b31      	ldr	r3, [pc, #196]	; (800309c <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b4>)
 8002fd6:	edc3 7a00 	vstr	s15, [r3]


	float sinr = 2*(q0*q1 + q2 * q3);
 8002fda:	4b32      	ldr	r3, [pc, #200]	; (80030a4 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7bc>)
 8002fdc:	ed93 7a00 	vldr	s14, [r3]
 8002fe0:	4b31      	ldr	r3, [pc, #196]	; (80030a8 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7c0>)
 8002fe2:	edd3 7a00 	vldr	s15, [r3]
 8002fe6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fea:	4b2b      	ldr	r3, [pc, #172]	; (8003098 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b0>)
 8002fec:	edd3 6a00 	vldr	s13, [r3]
 8002ff0:	4b2a      	ldr	r3, [pc, #168]	; (800309c <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b4>)
 8002ff2:	edd3 7a00 	vldr	s15, [r3]
 8002ff6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ffa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ffe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003002:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	float cosr = 1 - 2*(q1*q1 + q2 * q2);
 8003006:	4b28      	ldr	r3, [pc, #160]	; (80030a8 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7c0>)
 8003008:	ed93 7a00 	vldr	s14, [r3]
 800300c:	4b26      	ldr	r3, [pc, #152]	; (80030a8 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7c0>)
 800300e:	edd3 7a00 	vldr	s15, [r3]
 8003012:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003016:	4b20      	ldr	r3, [pc, #128]	; (8003098 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b0>)
 8003018:	edd3 6a00 	vldr	s13, [r3]
 800301c:	4b1e      	ldr	r3, [pc, #120]	; (8003098 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b0>)
 800301e:	edd3 7a00 	vldr	s15, [r3]
 8003022:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003026:	ee77 7a27 	vadd.f32	s15, s14, s15
 800302a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800302e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003032:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003036:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	magd_r = atan2(sinr, cosr);
 800303a:	edd7 0a10 	vldr	s1, [r7, #64]	; 0x40
 800303e:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8003042:	f7fe f9cb 	bl	80013dc <_ZSt5atan2ff>
 8003046:	eef0 7a40 	vmov.f32	s15, s0
 800304a:	4b18      	ldr	r3, [pc, #96]	; (80030ac <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7c4>)
 800304c:	edc3 7a00 	vstr	s15, [r3]


	float sinp = 2*( q0*q2 - q3*q1);
 8003050:	4b14      	ldr	r3, [pc, #80]	; (80030a4 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7bc>)
 8003052:	ed93 7a00 	vldr	s14, [r3]
 8003056:	4b10      	ldr	r3, [pc, #64]	; (8003098 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b0>)
 8003058:	edd3 7a00 	vldr	s15, [r3]
 800305c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003060:	4b0e      	ldr	r3, [pc, #56]	; (800309c <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7b4>)
 8003062:	edd3 6a00 	vldr	s13, [r3]
 8003066:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7c0>)
 8003068:	edd3 7a00 	vldr	s15, [r3]
 800306c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003070:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003074:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003078:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    if (sinp >= 1)
 800307c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003080:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003084:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800308c:	db14      	blt.n	80030b8 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7d0>
    	magd_p = PI/2;
 800308e:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7c8>)
 8003090:	4a08      	ldr	r2, [pc, #32]	; (80030b4 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7cc>)
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	e026      	b.n	80030e4 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7fc>
 8003096:	bf00      	nop
 8003098:	20000634 	.word	0x20000634
 800309c:	20000638 	.word	0x20000638
 80030a0:	20000060 	.word	0x20000060
 80030a4:	20000064 	.word	0x20000064
 80030a8:	20000630 	.word	0x20000630
 80030ac:	20000624 	.word	0x20000624
 80030b0:	20000628 	.word	0x20000628
 80030b4:	3fc90fdb 	.word	0x3fc90fdb
    else{
    	if(sinp <= -1){
 80030b8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80030bc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80030c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c8:	d803      	bhi.n	80030d2 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7ea>
    	magd_p = -PI/2;
 80030ca:	4b4f      	ldr	r3, [pc, #316]	; (8003208 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x920>)
 80030cc:	4a4f      	ldr	r2, [pc, #316]	; (800320c <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x924>)
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	e008      	b.n	80030e4 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x7fc>
    }
    else{
    	magd_p = asin(sinp);
 80030d2:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80030d6:	f7fe f961 	bl	800139c <_ZSt4asinf>
 80030da:	eef0 7a40 	vmov.f32	s15, s0
 80030de:	4b4a      	ldr	r3, [pc, #296]	; (8003208 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x920>)
 80030e0:	edc3 7a00 	vstr	s15, [r3]
    }
    }


	float siny = 2*( q0*q3 + q2*q1);
 80030e4:	4b4a      	ldr	r3, [pc, #296]	; (8003210 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x928>)
 80030e6:	ed93 7a00 	vldr	s14, [r3]
 80030ea:	4b4a      	ldr	r3, [pc, #296]	; (8003214 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x92c>)
 80030ec:	edd3 7a00 	vldr	s15, [r3]
 80030f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030f4:	4b48      	ldr	r3, [pc, #288]	; (8003218 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x930>)
 80030f6:	edd3 6a00 	vldr	s13, [r3]
 80030fa:	4b48      	ldr	r3, [pc, #288]	; (800321c <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x934>)
 80030fc:	edd3 7a00 	vldr	s15, [r3]
 8003100:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003108:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800310c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float cosy = 1 - 2*( q1*q1 + q3*q3);
 8003110:	4b42      	ldr	r3, [pc, #264]	; (800321c <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x934>)
 8003112:	ed93 7a00 	vldr	s14, [r3]
 8003116:	4b41      	ldr	r3, [pc, #260]	; (800321c <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x934>)
 8003118:	edd3 7a00 	vldr	s15, [r3]
 800311c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003120:	4b3c      	ldr	r3, [pc, #240]	; (8003214 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x92c>)
 8003122:	edd3 6a00 	vldr	s13, [r3]
 8003126:	4b3b      	ldr	r3, [pc, #236]	; (8003214 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x92c>)
 8003128:	edd3 7a00 	vldr	s15, [r3]
 800312c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003134:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003138:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800313c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003140:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	magd_y = atan2(siny, cosy);
 8003144:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 8003148:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 800314c:	f7fe f946 	bl	80013dc <_ZSt5atan2ff>
 8003150:	eef0 7a40 	vmov.f32	s15, s0
 8003154:	4b32      	ldr	r3, [pc, #200]	; (8003220 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x938>)
 8003156:	edc3 7a00 	vstr	s15, [r3]

	angle_e.roll = magd_r*RAD2DEC;
 800315a:	4b32      	ldr	r3, [pc, #200]	; (8003224 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x93c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7fd f9a2 	bl	80004a8 <__aeabi_f2d>
 8003164:	a326      	add	r3, pc, #152	; (adr r3, 8003200 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x918>)
 8003166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316a:	f7fd f9f5 	bl	8000558 <__aeabi_dmul>
 800316e:	4603      	mov	r3, r0
 8003170:	460c      	mov	r4, r1
 8003172:	4618      	mov	r0, r3
 8003174:	4621      	mov	r1, r4
 8003176:	f7fd fcd1 	bl	8000b1c <__aeabi_d2f>
 800317a:	4603      	mov	r3, r0
 800317c:	61fb      	str	r3, [r7, #28]
	angle_e.pitch = magd_p*RAD2DEC;
 800317e:	4b22      	ldr	r3, [pc, #136]	; (8003208 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x920>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f7fd f990 	bl	80004a8 <__aeabi_f2d>
 8003188:	a31d      	add	r3, pc, #116	; (adr r3, 8003200 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x918>)
 800318a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318e:	f7fd f9e3 	bl	8000558 <__aeabi_dmul>
 8003192:	4603      	mov	r3, r0
 8003194:	460c      	mov	r4, r1
 8003196:	4618      	mov	r0, r3
 8003198:	4621      	mov	r1, r4
 800319a:	f7fd fcbf 	bl	8000b1c <__aeabi_d2f>
 800319e:	4603      	mov	r3, r0
 80031a0:	623b      	str	r3, [r7, #32]
	angle_e.yaw = magd_y*RAD2DEC;
 80031a2:	4b1f      	ldr	r3, [pc, #124]	; (8003220 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x938>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fd f97e 	bl	80004a8 <__aeabi_f2d>
 80031ac:	a314      	add	r3, pc, #80	; (adr r3, 8003200 <_Z21MadgwickAHRSupdateIMU8IMU_dataf+0x918>)
 80031ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b2:	f7fd f9d1 	bl	8000558 <__aeabi_dmul>
 80031b6:	4603      	mov	r3, r0
 80031b8:	460c      	mov	r4, r1
 80031ba:	4618      	mov	r0, r3
 80031bc:	4621      	mov	r1, r4
 80031be:	f7fd fcad 	bl	8000b1c <__aeabi_d2f>
 80031c2:	4603      	mov	r3, r0
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
	return angle_e;
 80031c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031ca:	f107 021c 	add.w	r2, r7, #28
 80031ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80031d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80031d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031da:	ee06 1a90 	vmov	s13, r1
 80031de:	ee07 2a10 	vmov	s14, r2
 80031e2:	ee07 3a90 	vmov	s15, r3
}
 80031e6:	eeb0 0a66 	vmov.f32	s0, s13
 80031ea:	eef0 0a47 	vmov.f32	s1, s14
 80031ee:	eeb0 1a67 	vmov.f32	s2, s15
 80031f2:	37bc      	adds	r7, #188	; 0xbc
 80031f4:	46bd      	mov	sp, r7
 80031f6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80031fa:	b004      	add	sp, #16
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	1a5d2372 	.word	0x1a5d2372
 8003204:	404ca5dc 	.word	0x404ca5dc
 8003208:	20000628 	.word	0x20000628
 800320c:	bfc90fdb 	.word	0xbfc90fdb
 8003210:	20000064 	.word	0x20000064
 8003214:	20000638 	.word	0x20000638
 8003218:	20000634 	.word	0x20000634
 800321c:	20000630 	.word	0x20000630
 8003220:	2000062c 	.word	0x2000062c
 8003224:	20000624 	.word	0x20000624

08003228 <_Z10pid_decodePh>:
	raw.data[10] = pid.Ki4;
	raw.data[11] = pid.Kd4;

	return raw;
}
PID_raw pid_decode(uint8_t data[24]){
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
	PID_raw pid;

	pid.data[0] = (data[0] << 6) | ((data[1]&0xFC) >> 2);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	019b      	lsls	r3, r3, #6
 8003238:	b21a      	sxth	r2, r3
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	3301      	adds	r3, #1
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	089b      	lsrs	r3, r3, #2
 8003242:	b2db      	uxtb	r3, r3
 8003244:	b21b      	sxth	r3, r3
 8003246:	4313      	orrs	r3, r2
 8003248:	b21b      	sxth	r3, r3
 800324a:	b29a      	uxth	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	801a      	strh	r2, [r3, #0]
	pid.data[1] = ((data[1] & 0x03) <<12 ) |(data[2] <<4)|((data[3]&0xF0 )>> 4);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	3301      	adds	r3, #1
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	031b      	lsls	r3, r3, #12
 8003258:	b21b      	sxth	r3, r3
 800325a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800325e:	b21a      	sxth	r2, r3
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	3302      	adds	r3, #2
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	b21b      	sxth	r3, r3
 800326a:	4313      	orrs	r3, r2
 800326c:	b21a      	sxth	r2, r3
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	3303      	adds	r3, #3
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	091b      	lsrs	r3, r3, #4
 8003276:	b2db      	uxtb	r3, r3
 8003278:	b21b      	sxth	r3, r3
 800327a:	4313      	orrs	r3, r2
 800327c:	b21b      	sxth	r3, r3
 800327e:	b29a      	uxth	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	805a      	strh	r2, [r3, #2]
	pid.data[2] = ((data[3]&0x0F )<< 10 | (data[4] << 2) |  (data[5] &0xC0)>>6);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	3303      	adds	r3, #3
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	029b      	lsls	r3, r3, #10
 800328c:	b21b      	sxth	r3, r3
 800328e:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003292:	b21a      	sxth	r2, r3
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	3304      	adds	r3, #4
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	b21b      	sxth	r3, r3
 800329e:	4313      	orrs	r3, r2
 80032a0:	b21a      	sxth	r2, r3
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	3305      	adds	r3, #5
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	099b      	lsrs	r3, r3, #6
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	b21b      	sxth	r3, r3
 80032ae:	4313      	orrs	r3, r2
 80032b0:	b21b      	sxth	r3, r3
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	809a      	strh	r2, [r3, #4]

	pid.data[3] = ((data[5] & 0x3F)<<8|data[6]);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	3305      	adds	r3, #5
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	021b      	lsls	r3, r3, #8
 80032c0:	b21b      	sxth	r3, r3
 80032c2:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80032c6:	b21a      	sxth	r2, r3
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	3306      	adds	r3, #6
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	b21b      	sxth	r3, r3
 80032d0:	4313      	orrs	r3, r2
 80032d2:	b21b      	sxth	r3, r3
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	80da      	strh	r2, [r3, #6]
	pid.data[4] = ((data[7] << 6)|((data[8]&0xFC) >> 2));
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	3307      	adds	r3, #7
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	019b      	lsls	r3, r3, #6
 80032e2:	b21a      	sxth	r2, r3
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	3308      	adds	r3, #8
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	089b      	lsrs	r3, r3, #2
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	b21b      	sxth	r3, r3
 80032f0:	4313      	orrs	r3, r2
 80032f2:	b21b      	sxth	r3, r3
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	811a      	strh	r2, [r3, #8]
	pid.data[5] = ((data[8] & 0x03) <<12)| (data[9] <<4) |((data[10]&0xF0 )>> 4);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	3308      	adds	r3, #8
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	031b      	lsls	r3, r3, #12
 8003302:	b21b      	sxth	r3, r3
 8003304:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003308:	b21a      	sxth	r2, r3
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	3309      	adds	r3, #9
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	b21b      	sxth	r3, r3
 8003314:	4313      	orrs	r3, r2
 8003316:	b21a      	sxth	r2, r3
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	330a      	adds	r3, #10
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	091b      	lsrs	r3, r3, #4
 8003320:	b2db      	uxtb	r3, r3
 8003322:	b21b      	sxth	r3, r3
 8003324:	4313      	orrs	r3, r2
 8003326:	b21b      	sxth	r3, r3
 8003328:	b29a      	uxth	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	815a      	strh	r2, [r3, #10]

	pid.data[6] = ((data[10]&0x0F) << 10) | (data[11] << 2) |  ((data[12] &0xC0)>>6);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	330a      	adds	r3, #10
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	029b      	lsls	r3, r3, #10
 8003336:	b21b      	sxth	r3, r3
 8003338:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800333c:	b21a      	sxth	r2, r3
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	330b      	adds	r3, #11
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	b21b      	sxth	r3, r3
 8003348:	4313      	orrs	r3, r2
 800334a:	b21a      	sxth	r2, r3
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	330c      	adds	r3, #12
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	099b      	lsrs	r3, r3, #6
 8003354:	b2db      	uxtb	r3, r3
 8003356:	b21b      	sxth	r3, r3
 8003358:	4313      	orrs	r3, r2
 800335a:	b21b      	sxth	r3, r3
 800335c:	b29a      	uxth	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	819a      	strh	r2, [r3, #12]
	pid.data[7] = ((data[12] & 0x3F)<<8)|(data[13]);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	330c      	adds	r3, #12
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	021b      	lsls	r3, r3, #8
 800336a:	b21b      	sxth	r3, r3
 800336c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8003370:	b21a      	sxth	r2, r3
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	330d      	adds	r3, #13
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	b21b      	sxth	r3, r3
 800337a:	4313      	orrs	r3, r2
 800337c:	b21b      	sxth	r3, r3
 800337e:	b29a      	uxth	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	81da      	strh	r2, [r3, #14]
	pid.data[8] = ((data[14] << 6) | ((data[15]&0xFC) >> 2));
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	330e      	adds	r3, #14
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	019b      	lsls	r3, r3, #6
 800338c:	b21a      	sxth	r2, r3
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	330f      	adds	r3, #15
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	089b      	lsrs	r3, r3, #2
 8003396:	b2db      	uxtb	r3, r3
 8003398:	b21b      	sxth	r3, r3
 800339a:	4313      	orrs	r3, r2
 800339c:	b21b      	sxth	r3, r3
 800339e:	b29a      	uxth	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	821a      	strh	r2, [r3, #16]

	pid.data[9] = ((data[15] & 0x03) << 12) | (data[16] << 4) | ((data[17]&0xF0) >> 4);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	330f      	adds	r3, #15
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	031b      	lsls	r3, r3, #12
 80033ac:	b21b      	sxth	r3, r3
 80033ae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80033b2:	b21a      	sxth	r2, r3
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	3310      	adds	r3, #16
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	b21b      	sxth	r3, r3
 80033be:	4313      	orrs	r3, r2
 80033c0:	b21a      	sxth	r2, r3
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	3311      	adds	r3, #17
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	091b      	lsrs	r3, r3, #4
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	b21b      	sxth	r3, r3
 80033ce:	4313      	orrs	r3, r2
 80033d0:	b21b      	sxth	r3, r3
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	825a      	strh	r2, [r3, #18]
	pid.data[10] = ((data[17]&0x0F) << 10) | (data[18]<<2)|((data[19] &0xC0)>>6);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	3311      	adds	r3, #17
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	029b      	lsls	r3, r3, #10
 80033e0:	b21b      	sxth	r3, r3
 80033e2:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80033e6:	b21a      	sxth	r2, r3
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	3312      	adds	r3, #18
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	b21b      	sxth	r3, r3
 80033f2:	4313      	orrs	r3, r2
 80033f4:	b21a      	sxth	r2, r3
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	3313      	adds	r3, #19
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	099b      	lsrs	r3, r3, #6
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	b21b      	sxth	r3, r3
 8003402:	4313      	orrs	r3, r2
 8003404:	b21b      	sxth	r3, r3
 8003406:	b29a      	uxth	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	829a      	strh	r2, [r3, #20]
	pid.data[11] = ((data[19] & 0x3F)<<8) | data[20];
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	3313      	adds	r3, #19
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	021b      	lsls	r3, r3, #8
 8003414:	b21b      	sxth	r3, r3
 8003416:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800341a:	b21a      	sxth	r2, r3
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	3314      	adds	r3, #20
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	b21b      	sxth	r3, r3
 8003424:	4313      	orrs	r3, r2
 8003426:	b21b      	sxth	r3, r3
 8003428:	b29a      	uxth	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	82da      	strh	r2, [r3, #22]
    pid.crc = data[21];
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	7d5a      	ldrb	r2, [r3, #21]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	761a      	strb	r2, [r3, #24]
	return pid;
 8003436:	bf00      	nop
}
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <_Z13check_CRC_pid7PID_raw>:
uint8_t check_CRC_pid(PID_raw pid){
 8003444:	b084      	sub	sp, #16
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	f107 0c10 	add.w	ip, r7, #16
 8003450:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    uint32_t check = 0;
 8003454:	2300      	movs	r3, #0
 8003456:	607b      	str	r3, [r7, #4]
    for(uint8_t i = 0; i<12; i++)
 8003458:	2300      	movs	r3, #0
 800345a:	70fb      	strb	r3, [r7, #3]
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	2b0b      	cmp	r3, #11
 8003460:	d80c      	bhi.n	800347c <_Z13check_CRC_pid7PID_raw+0x38>
    	check += pid.data[i];
 8003462:	78fb      	ldrb	r3, [r7, #3]
 8003464:	f107 0210 	add.w	r2, r7, #16
 8003468:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800346c:	461a      	mov	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4413      	add	r3, r2
 8003472:	607b      	str	r3, [r7, #4]
    for(uint8_t i = 0; i<12; i++)
 8003474:	78fb      	ldrb	r3, [r7, #3]
 8003476:	3301      	adds	r3, #1
 8003478:	70fb      	strb	r3, [r7, #3]
 800347a:	e7ef      	b.n	800345c <_Z13check_CRC_pid7PID_raw+0x18>

    if(check % 37 != pid.crc)
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4b0d      	ldr	r3, [pc, #52]	; (80034b4 <_Z13check_CRC_pid7PID_raw+0x70>)
 8003480:	fba3 2301 	umull	r2, r3, r3, r1
 8003484:	1aca      	subs	r2, r1, r3
 8003486:	0852      	lsrs	r2, r2, #1
 8003488:	4413      	add	r3, r2
 800348a:	095a      	lsrs	r2, r3, #5
 800348c:	4613      	mov	r3, r2
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	4413      	add	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	1aca      	subs	r2, r1, r3
 8003498:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800349c:	429a      	cmp	r2, r3
 800349e:	d001      	beq.n	80034a4 <_Z13check_CRC_pid7PID_raw+0x60>
    	return 0;
 80034a0:	2300      	movs	r3, #0
 80034a2:	e000      	b.n	80034a6 <_Z13check_CRC_pid7PID_raw+0x62>
    return 1;
 80034a4:	2301      	movs	r3, #1
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	b004      	add	sp, #16
 80034b2:	4770      	bx	lr
 80034b4:	bacf914d 	.word	0xbacf914d

080034b8 <_ZN3PID6updateEff>:
	float Error, pre_Error, pre_pre_Error;
	float P_part, I_part, D_part, Out, pre_out;
    float Kp, Ki, Kd, T;
    LPF Dterm;

	float update(float setpoint, float input){
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80034c4:	edc7 0a01 	vstr	s1, [r7, #4]
		Error = setpoint - input;
 80034c8:	ed97 7a02 	vldr	s14, [r7, #8]
 80034cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80034d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	edc3 7a01 	vstr	s15, [r3, #4]
		P_part = Kp*(Error);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80034e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	edc3 7a04 	vstr	s15, [r3, #16]
		I_part += Ki*T*Error;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	ed93 7a05 	vldr	s14, [r3, #20]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003502:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	edd3 7a01 	vldr	s15, [r3, #4]
 800350c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	edc3 7a05 	vstr	s15, [r3, #20]
		if(I_part > 500){
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	edd3 7a05 	vldr	s15, [r3, #20]
 8003520:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80035a4 <_ZN3PID6updateEff+0xec>
 8003524:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800352c:	dd02      	ble.n	8003534 <_ZN3PID6updateEff+0x7c>
			I_part = 500;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	4a1d      	ldr	r2, [pc, #116]	; (80035a8 <_ZN3PID6updateEff+0xf0>)
 8003532:	615a      	str	r2, [r3, #20]
		}
		D_part = Kd*(Error - pre_Error)/T;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	edd3 6a01 	vldr	s13, [r3, #4]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	edd3 7a02 	vldr	s15, [r3, #8]
 8003546:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800354a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8003554:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	edc3 7a06 	vstr	s15, [r3, #24]
		Out = P_part + I_part + D_part ;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	ed93 7a04 	vldr	s14, [r3, #16]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	edd3 7a05 	vldr	s15, [r3, #20]
 800356a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	edd3 7a06 	vldr	s15, [r3, #24]
 8003574:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	edc3 7a07 	vstr	s15, [r3, #28]
		pre_Error = Error;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	609a      	str	r2, [r3, #8]
		pre_out = Out;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	69da      	ldr	r2, [r3, #28]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	621a      	str	r2, [r3, #32]

		return Out;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	ee07 3a90 	vmov	s15, r3
	}
 8003596:	eeb0 0a67 	vmov.f32	s0, s15
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	43fa0000 	.word	0x43fa0000
 80035a8:	43fa0000 	.word	0x43fa0000

080035ac <_ZN3PID17get_control_valueEv>:
	    	}
	    	else{
	    		return 1000;
	    	}
	}
	int get_control_value()
 80035ac:	b590      	push	{r4, r7, lr}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
	{
	    if (Out < 0.0)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	edd3 7a07 	vldr	s15, [r3, #28]
 80035ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c2:	d51d      	bpl.n	8003600 <_ZN3PID17get_control_valueEv+0x54>
	    	if(Out > -1000){
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	edd3 7a07 	vldr	s15, [r3, #28]
 80035ca:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003644 <_ZN3PID17get_control_valueEv+0x98>
 80035ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d6:	dd11      	ble.n	80035fc <_ZN3PID17get_control_valueEv+0x50>
	        return (int)(Out - 0.5);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fc ff63 	bl	80004a8 <__aeabi_f2d>
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	4b18      	ldr	r3, [pc, #96]	; (8003648 <_ZN3PID17get_control_valueEv+0x9c>)
 80035e8:	f7fc fdfe 	bl	80001e8 <__aeabi_dsub>
 80035ec:	4603      	mov	r3, r0
 80035ee:	460c      	mov	r4, r1
 80035f0:	4618      	mov	r0, r3
 80035f2:	4621      	mov	r1, r4
 80035f4:	f7fd fa4a 	bl	8000a8c <__aeabi_d2iz>
 80035f8:	4603      	mov	r3, r0
 80035fa:	e01f      	b.n	800363c <_ZN3PID17get_control_valueEv+0x90>
	    	}
	    	else{
	    		return -1000;
 80035fc:	4b13      	ldr	r3, [pc, #76]	; (800364c <_ZN3PID17get_control_valueEv+0xa0>)
 80035fe:	e01d      	b.n	800363c <_ZN3PID17get_control_valueEv+0x90>
	    	}
	    else
	    	if(Out < 1000){
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	edd3 7a07 	vldr	s15, [r3, #28]
 8003606:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003650 <_ZN3PID17get_control_valueEv+0xa4>
 800360a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800360e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003612:	d511      	bpl.n	8003638 <_ZN3PID17get_control_valueEv+0x8c>
		        return (int)(Out + 0.5);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	4618      	mov	r0, r3
 800361a:	f7fc ff45 	bl	80004a8 <__aeabi_f2d>
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	4b09      	ldr	r3, [pc, #36]	; (8003648 <_ZN3PID17get_control_valueEv+0x9c>)
 8003624:	f7fc fde2 	bl	80001ec <__adddf3>
 8003628:	4603      	mov	r3, r0
 800362a:	460c      	mov	r4, r1
 800362c:	4618      	mov	r0, r3
 800362e:	4621      	mov	r1, r4
 8003630:	f7fd fa2c 	bl	8000a8c <__aeabi_d2iz>
 8003634:	4603      	mov	r3, r0
 8003636:	e001      	b.n	800363c <_ZN3PID17get_control_valueEv+0x90>
	    	}
	    	else{
	    		return 1000;
 8003638:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	    	}

	}
 800363c:	4618      	mov	r0, r3
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	bd90      	pop	{r4, r7, pc}
 8003644:	c47a0000 	.word	0xc47a0000
 8003648:	3fe00000 	.word	0x3fe00000
 800364c:	fffffc18 	.word	0xfffffc18
 8003650:	447a0000 	.word	0x447a0000

08003654 <_ZN3PID4loadEffff>:
    void load(float Kp,float Ki,float Kd,float T){
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6178      	str	r0, [r7, #20]
 800365c:	ed87 0a04 	vstr	s0, [r7, #16]
 8003660:	edc7 0a03 	vstr	s1, [r7, #12]
 8003664:	ed87 1a02 	vstr	s2, [r7, #8]
 8003668:	edc7 1a01 	vstr	s3, [r7, #4]
    	this->Kp = Kp;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	625a      	str	r2, [r3, #36]	; 0x24
    	this->Ki = Ki;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	629a      	str	r2, [r3, #40]	; 0x28
    	this->Kd = Kd;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	62da      	str	r2, [r3, #44]	; 0x2c
    	this->T = T;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	631a      	str	r2, [r3, #48]	; 0x30

    	Dterm.load(LPF_10HZ);
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	3338      	adds	r3, #56	; 0x38
 8003688:	4903      	ldr	r1, [pc, #12]	; (8003698 <_ZN3PID4loadEffff+0x44>)
 800368a:	4618      	mov	r0, r3
 800368c:	f7fe f85c 	bl	8001748 <_ZN3LPF4loadEPd>
    }
 8003690:	bf00      	nop
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	20000030 	.word	0x20000030

0800369c <_ZN3PIDD1Ev>:
	PID();
	virtual ~PID();
};
PID::~PID(){
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	4a04      	ldr	r2, [pc, #16]	; (80036b8 <_ZN3PIDD1Ev+0x1c>)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	601a      	str	r2, [r3, #0]

}
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4618      	mov	r0, r3
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	0800dd68 	.word	0x0800dd68

080036bc <_ZN3PIDD0Ev>:
PID::~PID(){
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
}
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7ff ffe9 	bl	800369c <_ZN3PIDD1Ev>
 80036ca:	2188      	movs	r1, #136	; 0x88
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f009 fed7 	bl	800d480 <_ZdlPvj>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4618      	mov	r0, r3
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <_ZN3PIDC1Ev>:

PID::PID(){
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	4a06      	ldr	r2, [pc, #24]	; (8003700 <_ZN3PIDC1Ev+0x24>)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3338      	adds	r3, #56	; 0x38
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fe f8fa 	bl	80018e8 <_ZN3LPFC1Ev>

}
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	0800dd68 	.word	0x0800dd68

08003704 <_Z11bytes2FloatPh>:
  // Overite bytes of union with float variable
  u.float_variable = val;
  // Assign bytes to input array
  memcpy(bytes_array, u.temp_array, 4);
}
float bytes2Float(uint8_t * bytes_array){
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  // Create union of shared memory space
  union {
    float float_variable;
    uint8_t temp_array[4];
  } u;
  for(uint8_t i = 0; i<4; i++){
 800370c:	2300      	movs	r3, #0
 800370e:	73fb      	strb	r3, [r7, #15]
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	2b03      	cmp	r3, #3
 8003714:	d80d      	bhi.n	8003732 <_Z11bytes2FloatPh+0x2e>
	  u.temp_array[i] = bytes_array[i];
 8003716:	7bfb      	ldrb	r3, [r7, #15]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	441a      	add	r2, r3
 800371c:	7bfb      	ldrb	r3, [r7, #15]
 800371e:	7812      	ldrb	r2, [r2, #0]
 8003720:	f107 0110 	add.w	r1, r7, #16
 8003724:	440b      	add	r3, r1
 8003726:	f803 2c08 	strb.w	r2, [r3, #-8]
  for(uint8_t i = 0; i<4; i++){
 800372a:	7bfb      	ldrb	r3, [r7, #15]
 800372c:	3301      	adds	r3, #1
 800372e:	73fb      	strb	r3, [r7, #15]
 8003730:	e7ee      	b.n	8003710 <_Z11bytes2FloatPh+0xc>
  }
  return   u.float_variable;
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	ee07 3a90 	vmov	s15, r3
}
 8003738:	eeb0 0a67 	vmov.f32	s0, s15
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
	...

08003748 <_Z19print_euler_compare11EULER_angleS_S_>:
}
void print_msg(char*msg){
	HAL_UART_Transmit(&huart3,(uint8_t*) msg, strlen(msg),1000);
}

void print_euler_compare(EULER_angle data, EULER_angle data1,EULER_angle data2){
 8003748:	b5b0      	push	{r4, r5, r7, lr}
 800374a:	b08e      	sub	sp, #56	; 0x38
 800374c:	af00      	add	r7, sp, #0
 800374e:	eef0 4a41 	vmov.f32	s9, s2
 8003752:	eeb0 5a61 	vmov.f32	s10, s3
 8003756:	eef0 5a42 	vmov.f32	s11, s4
 800375a:	eeb0 6a62 	vmov.f32	s12, s5
 800375e:	eef0 6a43 	vmov.f32	s13, s6
 8003762:	eeb0 7a63 	vmov.f32	s14, s7
 8003766:	eef0 7a44 	vmov.f32	s15, s8
 800376a:	ed87 0a07 	vstr	s0, [r7, #28]
 800376e:	edc7 0a08 	vstr	s1, [r7, #32]
 8003772:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8003776:	ed87 5a04 	vstr	s10, [r7, #16]
 800377a:	edc7 5a05 	vstr	s11, [r7, #20]
 800377e:	ed87 6a06 	vstr	s12, [r7, #24]
 8003782:	edc7 6a01 	vstr	s13, [r7, #4]
 8003786:	ed87 7a02 	vstr	s14, [r7, #8]
 800378a:	edc7 7a03 	vstr	s15, [r7, #12]
	        char buffer[10];

            ftoa(data.roll, buffer, 2);
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	4618      	mov	r0, r3
 8003792:	f7fc fe89 	bl	80004a8 <__aeabi_f2d>
 8003796:	4604      	mov	r4, r0
 8003798:	460d      	mov	r5, r1
 800379a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800379e:	2102      	movs	r1, #2
 80037a0:	4618      	mov	r0, r3
 80037a2:	ec45 4b10 	vmov	d0, r4, r5
 80037a6:	f7fd fe57 	bl	8001458 <_Z4ftoadPci>
            strcat(buffer," ");
 80037aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fc fd0e 	bl	80001d0 <strlen>
 80037b4:	4603      	mov	r3, r0
 80037b6:	461a      	mov	r2, r3
 80037b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037bc:	4413      	add	r3, r2
 80037be:	49b7      	ldr	r1, [pc, #732]	; (8003a9c <_Z19print_euler_compare11EULER_angleS_S_+0x354>)
 80037c0:	461a      	mov	r2, r3
 80037c2:	460b      	mov	r3, r1
 80037c4:	881b      	ldrh	r3, [r3, #0]
 80037c6:	8013      	strh	r3, [r2, #0]
            HAL_UART_Transmit(&huart3,(uint8_t*) buffer, strlen(buffer),1000);
 80037c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fc fcff 	bl	80001d0 <strlen>
 80037d2:	4603      	mov	r3, r0
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80037da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037de:	48b0      	ldr	r0, [pc, #704]	; (8003aa0 <_Z19print_euler_compare11EULER_angleS_S_+0x358>)
 80037e0:	f006 fcc3 	bl	800a16a <HAL_UART_Transmit>

            ftoa(data.pitch, buffer, 2);
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fc fe5e 	bl	80004a8 <__aeabi_f2d>
 80037ec:	4604      	mov	r4, r0
 80037ee:	460d      	mov	r5, r1
 80037f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037f4:	2102      	movs	r1, #2
 80037f6:	4618      	mov	r0, r3
 80037f8:	ec45 4b10 	vmov	d0, r4, r5
 80037fc:	f7fd fe2c 	bl	8001458 <_Z4ftoadPci>
            strcat(buffer," ");
 8003800:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003804:	4618      	mov	r0, r3
 8003806:	f7fc fce3 	bl	80001d0 <strlen>
 800380a:	4603      	mov	r3, r0
 800380c:	461a      	mov	r2, r3
 800380e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003812:	4413      	add	r3, r2
 8003814:	49a1      	ldr	r1, [pc, #644]	; (8003a9c <_Z19print_euler_compare11EULER_angleS_S_+0x354>)
 8003816:	461a      	mov	r2, r3
 8003818:	460b      	mov	r3, r1
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	8013      	strh	r3, [r2, #0]
            HAL_UART_Transmit(&huart3,(uint8_t*) buffer, strlen(buffer),1000);
 800381e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003822:	4618      	mov	r0, r3
 8003824:	f7fc fcd4 	bl	80001d0 <strlen>
 8003828:	4603      	mov	r3, r0
 800382a:	b29a      	uxth	r2, r3
 800382c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003830:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003834:	489a      	ldr	r0, [pc, #616]	; (8003aa0 <_Z19print_euler_compare11EULER_angleS_S_+0x358>)
 8003836:	f006 fc98 	bl	800a16a <HAL_UART_Transmit>

            ftoa(data.yaw, buffer, 2);
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	4618      	mov	r0, r3
 800383e:	f7fc fe33 	bl	80004a8 <__aeabi_f2d>
 8003842:	4604      	mov	r4, r0
 8003844:	460d      	mov	r5, r1
 8003846:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800384a:	2102      	movs	r1, #2
 800384c:	4618      	mov	r0, r3
 800384e:	ec45 4b10 	vmov	d0, r4, r5
 8003852:	f7fd fe01 	bl	8001458 <_Z4ftoadPci>
            strcat(buffer," ");
 8003856:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800385a:	4618      	mov	r0, r3
 800385c:	f7fc fcb8 	bl	80001d0 <strlen>
 8003860:	4603      	mov	r3, r0
 8003862:	461a      	mov	r2, r3
 8003864:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003868:	4413      	add	r3, r2
 800386a:	498c      	ldr	r1, [pc, #560]	; (8003a9c <_Z19print_euler_compare11EULER_angleS_S_+0x354>)
 800386c:	461a      	mov	r2, r3
 800386e:	460b      	mov	r3, r1
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	8013      	strh	r3, [r2, #0]
            HAL_UART_Transmit(&huart3,(uint8_t*) buffer, strlen(buffer),1000);
 8003874:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003878:	4618      	mov	r0, r3
 800387a:	f7fc fca9 	bl	80001d0 <strlen>
 800387e:	4603      	mov	r3, r0
 8003880:	b29a      	uxth	r2, r3
 8003882:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800388a:	4885      	ldr	r0, [pc, #532]	; (8003aa0 <_Z19print_euler_compare11EULER_angleS_S_+0x358>)
 800388c:	f006 fc6d 	bl	800a16a <HAL_UART_Transmit>

            ftoa(data1.roll, buffer, 2);
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4618      	mov	r0, r3
 8003894:	f7fc fe08 	bl	80004a8 <__aeabi_f2d>
 8003898:	4604      	mov	r4, r0
 800389a:	460d      	mov	r5, r1
 800389c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038a0:	2102      	movs	r1, #2
 80038a2:	4618      	mov	r0, r3
 80038a4:	ec45 4b10 	vmov	d0, r4, r5
 80038a8:	f7fd fdd6 	bl	8001458 <_Z4ftoadPci>
            strcat(buffer," ");
 80038ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7fc fc8d 	bl	80001d0 <strlen>
 80038b6:	4603      	mov	r3, r0
 80038b8:	461a      	mov	r2, r3
 80038ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038be:	4413      	add	r3, r2
 80038c0:	4976      	ldr	r1, [pc, #472]	; (8003a9c <_Z19print_euler_compare11EULER_angleS_S_+0x354>)
 80038c2:	461a      	mov	r2, r3
 80038c4:	460b      	mov	r3, r1
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	8013      	strh	r3, [r2, #0]
            HAL_UART_Transmit(&huart3,(uint8_t*) buffer, strlen(buffer),1000);
 80038ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fc fc7e 	bl	80001d0 <strlen>
 80038d4:	4603      	mov	r3, r0
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80038dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038e0:	486f      	ldr	r0, [pc, #444]	; (8003aa0 <_Z19print_euler_compare11EULER_angleS_S_+0x358>)
 80038e2:	f006 fc42 	bl	800a16a <HAL_UART_Transmit>

            ftoa(data1.pitch, buffer, 2);
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fc fddd 	bl	80004a8 <__aeabi_f2d>
 80038ee:	4604      	mov	r4, r0
 80038f0:	460d      	mov	r5, r1
 80038f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038f6:	2102      	movs	r1, #2
 80038f8:	4618      	mov	r0, r3
 80038fa:	ec45 4b10 	vmov	d0, r4, r5
 80038fe:	f7fd fdab 	bl	8001458 <_Z4ftoadPci>
             strcat(buffer," ");
 8003902:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003906:	4618      	mov	r0, r3
 8003908:	f7fc fc62 	bl	80001d0 <strlen>
 800390c:	4603      	mov	r3, r0
 800390e:	461a      	mov	r2, r3
 8003910:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003914:	4413      	add	r3, r2
 8003916:	4961      	ldr	r1, [pc, #388]	; (8003a9c <_Z19print_euler_compare11EULER_angleS_S_+0x354>)
 8003918:	461a      	mov	r2, r3
 800391a:	460b      	mov	r3, r1
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	8013      	strh	r3, [r2, #0]
             HAL_UART_Transmit(&huart3,(uint8_t*) buffer, strlen(buffer),1000);
 8003920:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003924:	4618      	mov	r0, r3
 8003926:	f7fc fc53 	bl	80001d0 <strlen>
 800392a:	4603      	mov	r3, r0
 800392c:	b29a      	uxth	r2, r3
 800392e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003936:	485a      	ldr	r0, [pc, #360]	; (8003aa0 <_Z19print_euler_compare11EULER_angleS_S_+0x358>)
 8003938:	f006 fc17 	bl	800a16a <HAL_UART_Transmit>

             ftoa(data1.yaw, buffer, 2);
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	4618      	mov	r0, r3
 8003940:	f7fc fdb2 	bl	80004a8 <__aeabi_f2d>
 8003944:	4604      	mov	r4, r0
 8003946:	460d      	mov	r5, r1
 8003948:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800394c:	2102      	movs	r1, #2
 800394e:	4618      	mov	r0, r3
 8003950:	ec45 4b10 	vmov	d0, r4, r5
 8003954:	f7fd fd80 	bl	8001458 <_Z4ftoadPci>
             strcat(buffer," ");
 8003958:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800395c:	4618      	mov	r0, r3
 800395e:	f7fc fc37 	bl	80001d0 <strlen>
 8003962:	4603      	mov	r3, r0
 8003964:	461a      	mov	r2, r3
 8003966:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800396a:	4413      	add	r3, r2
 800396c:	494b      	ldr	r1, [pc, #300]	; (8003a9c <_Z19print_euler_compare11EULER_angleS_S_+0x354>)
 800396e:	461a      	mov	r2, r3
 8003970:	460b      	mov	r3, r1
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	8013      	strh	r3, [r2, #0]
             HAL_UART_Transmit(&huart3,(uint8_t*) buffer, strlen(buffer),1000);
 8003976:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800397a:	4618      	mov	r0, r3
 800397c:	f7fc fc28 	bl	80001d0 <strlen>
 8003980:	4603      	mov	r3, r0
 8003982:	b29a      	uxth	r2, r3
 8003984:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003988:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800398c:	4844      	ldr	r0, [pc, #272]	; (8003aa0 <_Z19print_euler_compare11EULER_angleS_S_+0x358>)
 800398e:	f006 fbec 	bl	800a16a <HAL_UART_Transmit>

             ftoa(data2.roll, buffer, 2);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4618      	mov	r0, r3
 8003996:	f7fc fd87 	bl	80004a8 <__aeabi_f2d>
 800399a:	4604      	mov	r4, r0
 800399c:	460d      	mov	r5, r1
 800399e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039a2:	2102      	movs	r1, #2
 80039a4:	4618      	mov	r0, r3
 80039a6:	ec45 4b10 	vmov	d0, r4, r5
 80039aa:	f7fd fd55 	bl	8001458 <_Z4ftoadPci>
             strcat(buffer," ");
 80039ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fc fc0c 	bl	80001d0 <strlen>
 80039b8:	4603      	mov	r3, r0
 80039ba:	461a      	mov	r2, r3
 80039bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039c0:	4413      	add	r3, r2
 80039c2:	4936      	ldr	r1, [pc, #216]	; (8003a9c <_Z19print_euler_compare11EULER_angleS_S_+0x354>)
 80039c4:	461a      	mov	r2, r3
 80039c6:	460b      	mov	r3, r1
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	8013      	strh	r3, [r2, #0]
             HAL_UART_Transmit(&huart3,(uint8_t*) buffer, strlen(buffer),1000);
 80039cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fc fbfd 	bl	80001d0 <strlen>
 80039d6:	4603      	mov	r3, r0
 80039d8:	b29a      	uxth	r2, r3
 80039da:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80039de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039e2:	482f      	ldr	r0, [pc, #188]	; (8003aa0 <_Z19print_euler_compare11EULER_angleS_S_+0x358>)
 80039e4:	f006 fbc1 	bl	800a16a <HAL_UART_Transmit>

             ftoa(data2.pitch, buffer, 2);
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fc fd5c 	bl	80004a8 <__aeabi_f2d>
 80039f0:	4604      	mov	r4, r0
 80039f2:	460d      	mov	r5, r1
 80039f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039f8:	2102      	movs	r1, #2
 80039fa:	4618      	mov	r0, r3
 80039fc:	ec45 4b10 	vmov	d0, r4, r5
 8003a00:	f7fd fd2a 	bl	8001458 <_Z4ftoadPci>
             strcat(buffer," ");
 8003a04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fc fbe1 	bl	80001d0 <strlen>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	461a      	mov	r2, r3
 8003a12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a16:	4413      	add	r3, r2
 8003a18:	4920      	ldr	r1, [pc, #128]	; (8003a9c <_Z19print_euler_compare11EULER_angleS_S_+0x354>)
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	881b      	ldrh	r3, [r3, #0]
 8003a20:	8013      	strh	r3, [r2, #0]
             HAL_UART_Transmit(&huart3,(uint8_t*) buffer, strlen(buffer),1000);
 8003a22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fc fbd2 	bl	80001d0 <strlen>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003a34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a38:	4819      	ldr	r0, [pc, #100]	; (8003aa0 <_Z19print_euler_compare11EULER_angleS_S_+0x358>)
 8003a3a:	f006 fb96 	bl	800a16a <HAL_UART_Transmit>

             ftoa(data2.yaw, buffer, 2);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fc fd31 	bl	80004a8 <__aeabi_f2d>
 8003a46:	4604      	mov	r4, r0
 8003a48:	460d      	mov	r5, r1
 8003a4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a4e:	2102      	movs	r1, #2
 8003a50:	4618      	mov	r0, r3
 8003a52:	ec45 4b10 	vmov	d0, r4, r5
 8003a56:	f7fd fcff 	bl	8001458 <_Z4ftoadPci>
             strcat(buffer,"\n");
 8003a5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fc fbb6 	bl	80001d0 <strlen>
 8003a64:	4603      	mov	r3, r0
 8003a66:	461a      	mov	r2, r3
 8003a68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a6c:	4413      	add	r3, r2
 8003a6e:	490d      	ldr	r1, [pc, #52]	; (8003aa4 <_Z19print_euler_compare11EULER_angleS_S_+0x35c>)
 8003a70:	461a      	mov	r2, r3
 8003a72:	460b      	mov	r3, r1
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	8013      	strh	r3, [r2, #0]
             HAL_UART_Transmit(&huart3,(uint8_t*) buffer, strlen(buffer),1000);
 8003a78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7fc fba7 	bl	80001d0 <strlen>
 8003a82:	4603      	mov	r3, r0
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a8e:	4804      	ldr	r0, [pc, #16]	; (8003aa0 <_Z19print_euler_compare11EULER_angleS_S_+0x358>)
 8003a90:	f006 fb6b 	bl	800a16a <HAL_UART_Transmit>
////


}
 8003a94:	bf00      	nop
 8003a96:	3738      	adds	r7, #56	; 0x38
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a9c:	0800dc3c 	.word	0x0800dc3c
 8003aa0:	200003e8 	.word	0x200003e8
 8003aa4:	0800dc40 	.word	0x0800dc40

08003aa8 <_Z15print_pid_value9PID_value>:
void print_pid_value(PID_value pid){
 8003aa8:	b084      	sub	sp, #16
 8003aaa:	b5b0      	push	{r4, r5, r7, lr}
 8003aac:	b084      	sub	sp, #16
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	f107 0420 	add.w	r4, r7, #32
 8003ab4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	        char buffer[10];

            ftoa(pid.Kp1, buffer, 2);
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fc fcf4 	bl	80004a8 <__aeabi_f2d>
 8003ac0:	4604      	mov	r4, r0
 8003ac2:	460d      	mov	r5, r1
 8003ac4:	1d3b      	adds	r3, r7, #4
 8003ac6:	2102      	movs	r1, #2
 8003ac8:	4618      	mov	r0, r3
 8003aca:	ec45 4b10 	vmov	d0, r4, r5
 8003ace:	f7fd fcc3 	bl	8001458 <_Z4ftoadPci>
            strcat(buffer," ");
 8003ad2:	1d3b      	adds	r3, r7, #4
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fc fb7b 	bl	80001d0 <strlen>
 8003ada:	4603      	mov	r3, r0
 8003adc:	461a      	mov	r2, r3
 8003ade:	1d3b      	adds	r3, r7, #4
 8003ae0:	4413      	add	r3, r2
 8003ae2:	49dd      	ldr	r1, [pc, #884]	; (8003e58 <_Z15print_pid_value9PID_value+0x3b0>)
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	8013      	strh	r3, [r2, #0]
            HAL_UART_Transmit(&huart3,(uint8_t*) buffer, strlen(buffer),1000);
 8003aec:	1d3b      	adds	r3, r7, #4
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fc fb6e 	bl	80001d0 <strlen>
 8003af4:	4603      	mov	r3, r0
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	1d39      	adds	r1, r7, #4
 8003afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003afe:	48d7      	ldr	r0, [pc, #860]	; (8003e5c <_Z15print_pid_value9PID_value+0x3b4>)
 8003b00:	f006 fb33 	bl	800a16a <HAL_UART_Transmit>

            ftoa(pid.Ki1, buffer, 2);
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fc fcce 	bl	80004a8 <__aeabi_f2d>
 8003b0c:	4604      	mov	r4, r0
 8003b0e:	460d      	mov	r5, r1
 8003b10:	1d3b      	adds	r3, r7, #4
 8003b12:	2102      	movs	r1, #2
 8003b14:	4618      	mov	r0, r3
 8003b16:	ec45 4b10 	vmov	d0, r4, r5
 8003b1a:	f7fd fc9d 	bl	8001458 <_Z4ftoadPci>
            strcat(buffer," ");
 8003b1e:	1d3b      	adds	r3, r7, #4
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fc fb55 	bl	80001d0 <strlen>
 8003b26:	4603      	mov	r3, r0
 8003b28:	461a      	mov	r2, r3
 8003b2a:	1d3b      	adds	r3, r7, #4
 8003b2c:	4413      	add	r3, r2
 8003b2e:	49ca      	ldr	r1, [pc, #808]	; (8003e58 <_Z15print_pid_value9PID_value+0x3b0>)
 8003b30:	461a      	mov	r2, r3
 8003b32:	460b      	mov	r3, r1
 8003b34:	881b      	ldrh	r3, [r3, #0]
 8003b36:	8013      	strh	r3, [r2, #0]
            HAL_UART_Transmit(&huart3,(uint8_t*) buffer, strlen(buffer),1000);
 8003b38:	1d3b      	adds	r3, r7, #4
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fc fb48 	bl	80001d0 <strlen>
 8003b40:	4603      	mov	r3, r0
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	1d39      	adds	r1, r7, #4
 8003b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b4a:	48c4      	ldr	r0, [pc, #784]	; (8003e5c <_Z15print_pid_value9PID_value+0x3b4>)
 8003b4c:	f006 fb0d 	bl	800a16a <HAL_UART_Transmit>

            ftoa(pid.Kd1, buffer, 2);
 8003b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fc fca8 	bl	80004a8 <__aeabi_f2d>
 8003b58:	4604      	mov	r4, r0
 8003b5a:	460d      	mov	r5, r1
 8003b5c:	1d3b      	adds	r3, r7, #4
 8003b5e:	2102      	movs	r1, #2
 8003b60:	4618      	mov	r0, r3
 8003b62:	ec45 4b10 	vmov	d0, r4, r5
 8003b66:	f7fd fc77 	bl	8001458 <_Z4ftoadPci>
            strcat(buffer," ");
 8003b6a:	1d3b      	adds	r3, r7, #4
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7fc fb2f 	bl	80001d0 <strlen>
 8003b72:	4603      	mov	r3, r0
 8003b74:	461a      	mov	r2, r3
 8003b76:	1d3b      	adds	r3, r7, #4
 8003b78:	4413      	add	r3, r2
 8003b7a:	49b7      	ldr	r1, [pc, #732]	; (8003e58 <_Z15print_pid_value9PID_value+0x3b0>)
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	460b      	mov	r3, r1
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	8013      	strh	r3, [r2, #0]
            HAL_UART_Transmit(&huart3,(uint8_t*) buffer, strlen(buffer),1000);
 8003b84:	1d3b      	adds	r3, r7, #4
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fc fb22 	bl	80001d0 <strlen>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	1d39      	adds	r1, r7, #4
 8003b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b96:	48b1      	ldr	r0, [pc, #708]	; (8003e5c <_Z15print_pid_value9PID_value+0x3b4>)
 8003b98:	f006 fae7 	bl	800a16a <HAL_UART_Transmit>

            ftoa(pid.Kp2, buffer, 2);
 8003b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fc fc82 	bl	80004a8 <__aeabi_f2d>
 8003ba4:	4604      	mov	r4, r0
 8003ba6:	460d      	mov	r5, r1
 8003ba8:	1d3b      	adds	r3, r7, #4
 8003baa:	2102      	movs	r1, #2
 8003bac:	4618      	mov	r0, r3
 8003bae:	ec45 4b10 	vmov	d0, r4, r5
 8003bb2:	f7fd fc51 	bl	8001458 <_Z4ftoadPci>
            strcat(buffer," ");
 8003bb6:	1d3b      	adds	r3, r7, #4
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7fc fb09 	bl	80001d0 <strlen>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	1d3b      	adds	r3, r7, #4
 8003bc4:	4413      	add	r3, r2
 8003bc6:	49a4      	ldr	r1, [pc, #656]	; (8003e58 <_Z15print_pid_value9PID_value+0x3b0>)
 8003bc8:	461a      	mov	r2, r3
 8003bca:	460b      	mov	r3, r1
 8003bcc:	881b      	ldrh	r3, [r3, #0]
 8003bce:	8013      	strh	r3, [r2, #0]
            HAL_UART_Transmit(&huart3,(uint8_t*) buffer, strlen(buffer),1000);
 8003bd0:	1d3b      	adds	r3, r7, #4
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fc fafc 	bl	80001d0 <strlen>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	1d39      	adds	r1, r7, #4
 8003bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003be2:	489e      	ldr	r0, [pc, #632]	; (8003e5c <_Z15print_pid_value9PID_value+0x3b4>)
 8003be4:	f006 fac1 	bl	800a16a <HAL_UART_Transmit>

            ftoa(pid.Ki2, buffer, 2);
 8003be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fc fc5c 	bl	80004a8 <__aeabi_f2d>
 8003bf0:	4604      	mov	r4, r0
 8003bf2:	460d      	mov	r5, r1
 8003bf4:	1d3b      	adds	r3, r7, #4
 8003bf6:	2102      	movs	r1, #2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	ec45 4b10 	vmov	d0, r4, r5
 8003bfe:	f7fd fc2b 	bl	8001458 <_Z4ftoadPci>
             strcat(buffer," ");
 8003c02:	1d3b      	adds	r3, r7, #4
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7fc fae3 	bl	80001d0 <strlen>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	1d3b      	adds	r3, r7, #4
 8003c10:	4413      	add	r3, r2
 8003c12:	4991      	ldr	r1, [pc, #580]	; (8003e58 <_Z15print_pid_value9PID_value+0x3b0>)
 8003c14:	461a      	mov	r2, r3
 8003c16:	460b      	mov	r3, r1
 8003c18:	881b      	ldrh	r3, [r3, #0]
 8003c1a:	8013      	strh	r3, [r2, #0]
             HAL_UART_Transmit(&huart3,(uint8_t*) buffer, strlen(buffer),1000);
 8003c1c:	1d3b      	adds	r3, r7, #4
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fc fad6 	bl	80001d0 <strlen>
 8003c24:	4603      	mov	r3, r0
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	1d39      	adds	r1, r7, #4
 8003c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c2e:	488b      	ldr	r0, [pc, #556]	; (8003e5c <_Z15print_pid_value9PID_value+0x3b4>)
 8003c30:	f006 fa9b 	bl	800a16a <HAL_UART_Transmit>

             ftoa(pid.Kd2, buffer, 2);
 8003c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fc fc36 	bl	80004a8 <__aeabi_f2d>
 8003c3c:	4604      	mov	r4, r0
 8003c3e:	460d      	mov	r5, r1
 8003c40:	1d3b      	adds	r3, r7, #4
 8003c42:	2102      	movs	r1, #2
 8003c44:	4618      	mov	r0, r3
 8003c46:	ec45 4b10 	vmov	d0, r4, r5
 8003c4a:	f7fd fc05 	bl	8001458 <_Z4ftoadPci>
             strcat(buffer," ");
 8003c4e:	1d3b      	adds	r3, r7, #4
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7fc fabd 	bl	80001d0 <strlen>
 8003c56:	4603      	mov	r3, r0
 8003c58:	461a      	mov	r2, r3
 8003c5a:	1d3b      	adds	r3, r7, #4
 8003c5c:	4413      	add	r3, r2
 8003c5e:	497e      	ldr	r1, [pc, #504]	; (8003e58 <_Z15print_pid_value9PID_value+0x3b0>)
 8003c60:	461a      	mov	r2, r3
 8003c62:	460b      	mov	r3, r1
 8003c64:	881b      	ldrh	r3, [r3, #0]
 8003c66:	8013      	strh	r3, [r2, #0]
             HAL_UART_Transmit(&huart3,(uint8_t*) buffer, strlen(buffer),1000);
 8003c68:	1d3b      	adds	r3, r7, #4
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7fc fab0 	bl	80001d0 <strlen>
 8003c70:	4603      	mov	r3, r0
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	1d39      	adds	r1, r7, #4
 8003c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c7a:	4878      	ldr	r0, [pc, #480]	; (8003e5c <_Z15print_pid_value9PID_value+0x3b4>)
 8003c7c:	f006 fa75 	bl	800a16a <HAL_UART_Transmit>

             ftoa(pid.Kp3, buffer, 2);
 8003c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fc fc10 	bl	80004a8 <__aeabi_f2d>
 8003c88:	4604      	mov	r4, r0
 8003c8a:	460d      	mov	r5, r1
 8003c8c:	1d3b      	adds	r3, r7, #4
 8003c8e:	2102      	movs	r1, #2
 8003c90:	4618      	mov	r0, r3
 8003c92:	ec45 4b10 	vmov	d0, r4, r5
 8003c96:	f7fd fbdf 	bl	8001458 <_Z4ftoadPci>
             strcat(buffer," ");
 8003c9a:	1d3b      	adds	r3, r7, #4
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7fc fa97 	bl	80001d0 <strlen>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	1d3b      	adds	r3, r7, #4
 8003ca8:	4413      	add	r3, r2
 8003caa:	496b      	ldr	r1, [pc, #428]	; (8003e58 <_Z15print_pid_value9PID_value+0x3b0>)
 8003cac:	461a      	mov	r2, r3
 8003cae:	460b      	mov	r3, r1
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	8013      	strh	r3, [r2, #0]
             HAL_UART_Transmit(&huart3,(uint8_t*) buffer, strlen(buffer),1000);
 8003cb4:	1d3b      	adds	r3, r7, #4
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fc fa8a 	bl	80001d0 <strlen>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	1d39      	adds	r1, r7, #4
 8003cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cc6:	4865      	ldr	r0, [pc, #404]	; (8003e5c <_Z15print_pid_value9PID_value+0x3b4>)
 8003cc8:	f006 fa4f 	bl	800a16a <HAL_UART_Transmit>

             ftoa(pid.Ki3, buffer, 2);
 8003ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fc fbea 	bl	80004a8 <__aeabi_f2d>
 8003cd4:	4604      	mov	r4, r0
 8003cd6:	460d      	mov	r5, r1
 8003cd8:	1d3b      	adds	r3, r7, #4
 8003cda:	2102      	movs	r1, #2
 8003cdc:	4618      	mov	r0, r3
 8003cde:	ec45 4b10 	vmov	d0, r4, r5
 8003ce2:	f7fd fbb9 	bl	8001458 <_Z4ftoadPci>
             strcat(buffer," ");
 8003ce6:	1d3b      	adds	r3, r7, #4
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7fc fa71 	bl	80001d0 <strlen>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	1d3b      	adds	r3, r7, #4
 8003cf4:	4413      	add	r3, r2
 8003cf6:	4958      	ldr	r1, [pc, #352]	; (8003e58 <_Z15print_pid_value9PID_value+0x3b0>)
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	881b      	ldrh	r3, [r3, #0]
 8003cfe:	8013      	strh	r3, [r2, #0]
             HAL_UART_Transmit(&huart3,(uint8_t*) buffer, strlen(buffer),1000);
 8003d00:	1d3b      	adds	r3, r7, #4
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fc fa64 	bl	80001d0 <strlen>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	1d39      	adds	r1, r7, #4
 8003d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d12:	4852      	ldr	r0, [pc, #328]	; (8003e5c <_Z15print_pid_value9PID_value+0x3b4>)
 8003d14:	f006 fa29 	bl	800a16a <HAL_UART_Transmit>

             ftoa(pid.Kd3, buffer, 2);
 8003d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fc fbc4 	bl	80004a8 <__aeabi_f2d>
 8003d20:	4604      	mov	r4, r0
 8003d22:	460d      	mov	r5, r1
 8003d24:	1d3b      	adds	r3, r7, #4
 8003d26:	2102      	movs	r1, #2
 8003d28:	4618      	mov	r0, r3
 8003d2a:	ec45 4b10 	vmov	d0, r4, r5
 8003d2e:	f7fd fb93 	bl	8001458 <_Z4ftoadPci>
             strcat(buffer," ");
 8003d32:	1d3b      	adds	r3, r7, #4
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7fc fa4b 	bl	80001d0 <strlen>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	1d3b      	adds	r3, r7, #4
 8003d40:	4413      	add	r3, r2
 8003d42:	4945      	ldr	r1, [pc, #276]	; (8003e58 <_Z15print_pid_value9PID_value+0x3b0>)
 8003d44:	461a      	mov	r2, r3
 8003d46:	460b      	mov	r3, r1
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	8013      	strh	r3, [r2, #0]
             HAL_UART_Transmit(&huart3,(uint8_t*) buffer, strlen(buffer),1000);
 8003d4c:	1d3b      	adds	r3, r7, #4
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fc fa3e 	bl	80001d0 <strlen>
 8003d54:	4603      	mov	r3, r0
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	1d39      	adds	r1, r7, #4
 8003d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d5e:	483f      	ldr	r0, [pc, #252]	; (8003e5c <_Z15print_pid_value9PID_value+0x3b4>)
 8003d60:	f006 fa03 	bl	800a16a <HAL_UART_Transmit>

             ftoa(pid.Kp4, buffer, 2);
 8003d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fc fb9e 	bl	80004a8 <__aeabi_f2d>
 8003d6c:	4604      	mov	r4, r0
 8003d6e:	460d      	mov	r5, r1
 8003d70:	1d3b      	adds	r3, r7, #4
 8003d72:	2102      	movs	r1, #2
 8003d74:	4618      	mov	r0, r3
 8003d76:	ec45 4b10 	vmov	d0, r4, r5
 8003d7a:	f7fd fb6d 	bl	8001458 <_Z4ftoadPci>
             strcat(buffer," ");
 8003d7e:	1d3b      	adds	r3, r7, #4
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fc fa25 	bl	80001d0 <strlen>
 8003d86:	4603      	mov	r3, r0
 8003d88:	461a      	mov	r2, r3
 8003d8a:	1d3b      	adds	r3, r7, #4
 8003d8c:	4413      	add	r3, r2
 8003d8e:	4932      	ldr	r1, [pc, #200]	; (8003e58 <_Z15print_pid_value9PID_value+0x3b0>)
 8003d90:	461a      	mov	r2, r3
 8003d92:	460b      	mov	r3, r1
 8003d94:	881b      	ldrh	r3, [r3, #0]
 8003d96:	8013      	strh	r3, [r2, #0]
             HAL_UART_Transmit(&huart3,(uint8_t*) buffer, strlen(buffer),1000);
 8003d98:	1d3b      	adds	r3, r7, #4
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fc fa18 	bl	80001d0 <strlen>
 8003da0:	4603      	mov	r3, r0
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	1d39      	adds	r1, r7, #4
 8003da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003daa:	482c      	ldr	r0, [pc, #176]	; (8003e5c <_Z15print_pid_value9PID_value+0x3b4>)
 8003dac:	f006 f9dd 	bl	800a16a <HAL_UART_Transmit>

             ftoa(pid.Ki4, buffer, 2);
 8003db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fc fb78 	bl	80004a8 <__aeabi_f2d>
 8003db8:	4604      	mov	r4, r0
 8003dba:	460d      	mov	r5, r1
 8003dbc:	1d3b      	adds	r3, r7, #4
 8003dbe:	2102      	movs	r1, #2
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	ec45 4b10 	vmov	d0, r4, r5
 8003dc6:	f7fd fb47 	bl	8001458 <_Z4ftoadPci>
             strcat(buffer," ");
 8003dca:	1d3b      	adds	r3, r7, #4
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fc f9ff 	bl	80001d0 <strlen>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	1d3b      	adds	r3, r7, #4
 8003dd8:	4413      	add	r3, r2
 8003dda:	491f      	ldr	r1, [pc, #124]	; (8003e58 <_Z15print_pid_value9PID_value+0x3b0>)
 8003ddc:	461a      	mov	r2, r3
 8003dde:	460b      	mov	r3, r1
 8003de0:	881b      	ldrh	r3, [r3, #0]
 8003de2:	8013      	strh	r3, [r2, #0]
             HAL_UART_Transmit(&huart3,(uint8_t*) buffer, strlen(buffer),1000);
 8003de4:	1d3b      	adds	r3, r7, #4
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fc f9f2 	bl	80001d0 <strlen>
 8003dec:	4603      	mov	r3, r0
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	1d39      	adds	r1, r7, #4
 8003df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003df6:	4819      	ldr	r0, [pc, #100]	; (8003e5c <_Z15print_pid_value9PID_value+0x3b4>)
 8003df8:	f006 f9b7 	bl	800a16a <HAL_UART_Transmit>

             ftoa(pid.Kd4, buffer, 2);
 8003dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fc fb52 	bl	80004a8 <__aeabi_f2d>
 8003e04:	4604      	mov	r4, r0
 8003e06:	460d      	mov	r5, r1
 8003e08:	1d3b      	adds	r3, r7, #4
 8003e0a:	2102      	movs	r1, #2
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	ec45 4b10 	vmov	d0, r4, r5
 8003e12:	f7fd fb21 	bl	8001458 <_Z4ftoadPci>
             strcat(buffer,"\n");
 8003e16:	1d3b      	adds	r3, r7, #4
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fc f9d9 	bl	80001d0 <strlen>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	461a      	mov	r2, r3
 8003e22:	1d3b      	adds	r3, r7, #4
 8003e24:	4413      	add	r3, r2
 8003e26:	490e      	ldr	r1, [pc, #56]	; (8003e60 <_Z15print_pid_value9PID_value+0x3b8>)
 8003e28:	461a      	mov	r2, r3
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	8013      	strh	r3, [r2, #0]
             HAL_UART_Transmit(&huart3,(uint8_t*) buffer, strlen(buffer),1000);
 8003e30:	1d3b      	adds	r3, r7, #4
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fc f9cc 	bl	80001d0 <strlen>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	1d39      	adds	r1, r7, #4
 8003e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e42:	4806      	ldr	r0, [pc, #24]	; (8003e5c <_Z15print_pid_value9PID_value+0x3b4>)
 8003e44:	f006 f991 	bl	800a16a <HAL_UART_Transmit>
////


}
 8003e48:	bf00      	nop
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003e52:	b004      	add	sp, #16
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	0800dc3c 	.word	0x0800dc3c
 8003e5c:	200003e8 	.word	0x200003e8
 8003e60:	0800dc40 	.word	0x0800dc40

08003e64 <_Z10writeFlashPt>:
    	data[i] = bytes2Float(temp);
        i++;
    }
//	HAL_UART_Transmit(&huart3,(uint8_t*) buffer, strlen(buffer),1000);
}
void writeFlash(uint16_t num[12]){
 8003e64:	b590      	push	{r4, r7, lr}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
	 HAL_FLASH_Unlock();
 8003e6c:	f002 fc42 	bl	80066f4 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	  /* Get the 1st sector to erase */
	  FirstSector = GetSector(FLASH_USER_START_ADDR);
 8003e70:	4848      	ldr	r0, [pc, #288]	; (8003f94 <_Z10writeFlashPt+0x130>)
 8003e72:	f000 f9ab 	bl	80041cc <_ZL9GetSectorm>
 8003e76:	4602      	mov	r2, r0
 8003e78:	4b47      	ldr	r3, [pc, #284]	; (8003f98 <_Z10writeFlashPt+0x134>)
 8003e7a:	601a      	str	r2, [r3, #0]
	  /* Get the number of sector to erase from 1st sector*/
	  NbOfSectors = GetSector(FLASH_USER_END_ADDR) - FirstSector + 1;
 8003e7c:	4845      	ldr	r0, [pc, #276]	; (8003f94 <_Z10writeFlashPt+0x130>)
 8003e7e:	f000 fa43 	bl	8004308 <_ZL13GetSectorSizem>
 8003e82:	4602      	mov	r2, r0
 8003e84:	4b45      	ldr	r3, [pc, #276]	; (8003f9c <_Z10writeFlashPt+0x138>)
 8003e86:	4413      	add	r3, r2
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 f99f 	bl	80041cc <_ZL9GetSectorm>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	4b41      	ldr	r3, [pc, #260]	; (8003f98 <_Z10writeFlashPt+0x134>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	3301      	adds	r3, #1
 8003e98:	4a41      	ldr	r2, [pc, #260]	; (8003fa0 <_Z10writeFlashPt+0x13c>)
 8003e9a:	6013      	str	r3, [r2, #0]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8003e9c:	4b41      	ldr	r3, [pc, #260]	; (8003fa4 <_Z10writeFlashPt+0x140>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8003ea2:	4b40      	ldr	r3, [pc, #256]	; (8003fa4 <_Z10writeFlashPt+0x140>)
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector = FirstSector;
 8003ea8:	4b3b      	ldr	r3, [pc, #236]	; (8003f98 <_Z10writeFlashPt+0x134>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a3d      	ldr	r2, [pc, #244]	; (8003fa4 <_Z10writeFlashPt+0x140>)
 8003eae:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors = NbOfSectors;
 8003eb0:	4b3b      	ldr	r3, [pc, #236]	; (8003fa0 <_Z10writeFlashPt+0x13c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a3b      	ldr	r2, [pc, #236]	; (8003fa4 <_Z10writeFlashPt+0x140>)
 8003eb6:	60d3      	str	r3, [r2, #12]
	  if(HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 8003eb8:	493b      	ldr	r1, [pc, #236]	; (8003fa8 <_Z10writeFlashPt+0x144>)
 8003eba:	483a      	ldr	r0, [pc, #232]	; (8003fa4 <_Z10writeFlashPt+0x140>)
 8003ebc:	f002 fd7a 	bl	80069b4 <HAL_FLASHEx_Erase>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  __HAL_FLASH_DATA_CACHE_DISABLE();
 8003ec4:	4b39      	ldr	r3, [pc, #228]	; (8003fac <_Z10writeFlashPt+0x148>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a38      	ldr	r2, [pc, #224]	; (8003fac <_Z10writeFlashPt+0x148>)
 8003eca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ece:	6013      	str	r3, [r2, #0]
	  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003ed0:	4b36      	ldr	r3, [pc, #216]	; (8003fac <_Z10writeFlashPt+0x148>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a35      	ldr	r2, [pc, #212]	; (8003fac <_Z10writeFlashPt+0x148>)
 8003ed6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003eda:	6013      	str	r3, [r2, #0]

	  __HAL_FLASH_DATA_CACHE_RESET();
 8003edc:	4b33      	ldr	r3, [pc, #204]	; (8003fac <_Z10writeFlashPt+0x148>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a32      	ldr	r2, [pc, #200]	; (8003fac <_Z10writeFlashPt+0x148>)
 8003ee2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ee6:	6013      	str	r3, [r2, #0]
 8003ee8:	4b30      	ldr	r3, [pc, #192]	; (8003fac <_Z10writeFlashPt+0x148>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a2f      	ldr	r2, [pc, #188]	; (8003fac <_Z10writeFlashPt+0x148>)
 8003eee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ef2:	6013      	str	r3, [r2, #0]
	  __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003ef4:	4b2d      	ldr	r3, [pc, #180]	; (8003fac <_Z10writeFlashPt+0x148>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a2c      	ldr	r2, [pc, #176]	; (8003fac <_Z10writeFlashPt+0x148>)
 8003efa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	4b2a      	ldr	r3, [pc, #168]	; (8003fac <_Z10writeFlashPt+0x148>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a29      	ldr	r2, [pc, #164]	; (8003fac <_Z10writeFlashPt+0x148>)
 8003f06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f0a:	6013      	str	r3, [r2, #0]

	  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f0c:	4b27      	ldr	r3, [pc, #156]	; (8003fac <_Z10writeFlashPt+0x148>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a26      	ldr	r2, [pc, #152]	; (8003fac <_Z10writeFlashPt+0x148>)
 8003f12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f16:	6013      	str	r3, [r2, #0]
	  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f18:	4b24      	ldr	r3, [pc, #144]	; (8003fac <_Z10writeFlashPt+0x148>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a23      	ldr	r2, [pc, #140]	; (8003fac <_Z10writeFlashPt+0x148>)
 8003f1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f22:	6013      	str	r3, [r2, #0]
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/



	  int i = 0;
 8003f24:	2300      	movs	r3, #0
 8003f26:	60fb      	str	r3, [r7, #12]

	  Address = FLASH_USER_START_ADDR;
 8003f28:	4b21      	ldr	r3, [pc, #132]	; (8003fb0 <_Z10writeFlashPt+0x14c>)
 8003f2a:	4a1a      	ldr	r2, [pc, #104]	; (8003f94 <_Z10writeFlashPt+0x130>)
 8003f2c:	601a      	str	r2, [r3, #0]

	  while (i < 12)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2b0b      	cmp	r3, #11
 8003f32:	dc28      	bgt.n	8003f86 <_Z10writeFlashPt+0x122>
	  {
//		float2Bytes(num[i],temp);
		uint32_t temp_val = (num[i] <<16) | (num[i + 1]);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	041b      	lsls	r3, r3, #16
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	3201      	adds	r2, #1
 8003f44:	0052      	lsls	r2, r2, #1
 8003f46:	6879      	ldr	r1, [r7, #4]
 8003f48:	440a      	add	r2, r1
 8003f4a:	8812      	ldrh	r2, [r2, #0]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	60bb      	str	r3, [r7, #8]
	    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, temp_val) == HAL_OK)
 8003f50:	4b17      	ldr	r3, [pc, #92]	; (8003fb0 <_Z10writeFlashPt+0x14c>)
 8003f52:	6819      	ldr	r1, [r3, #0]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f04f 0400 	mov.w	r4, #0
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	4623      	mov	r3, r4
 8003f5e:	2002      	movs	r0, #2
 8003f60:	f002 fb74 	bl	800664c <HAL_FLASH_Program>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	bf0c      	ite	eq
 8003f6a:	2301      	moveq	r3, #1
 8003f6c:	2300      	movne	r3, #0
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d004      	beq.n	8003f7e <_Z10writeFlashPt+0x11a>
	    {
	      Address = Address + 4;
 8003f74:	4b0e      	ldr	r3, [pc, #56]	; (8003fb0 <_Z10writeFlashPt+0x14c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3304      	adds	r3, #4
 8003f7a:	4a0d      	ldr	r2, [pc, #52]	; (8003fb0 <_Z10writeFlashPt+0x14c>)
 8003f7c:	6013      	str	r3, [r2, #0]
	      /*
	        FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError();
	      */

	    }
	    i+=2;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	3302      	adds	r3, #2
 8003f82:	60fb      	str	r3, [r7, #12]
	  while (i < 12)
 8003f84:	e7d3      	b.n	8003f2e <_Z10writeFlashPt+0xca>
	  }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 8003f86:	f002 fbd7 	bl	8006738 <HAL_FLASH_Lock>
}
 8003f8a:	bf00      	nop
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd90      	pop	{r4, r7, pc}
 8003f92:	bf00      	nop
 8003f94:	080e0000 	.word	0x080e0000
 8003f98:	2000063c 	.word	0x2000063c
 8003f9c:	080dffff 	.word	0x080dffff
 8003fa0:	20000640 	.word	0x20000640
 8003fa4:	20000654 	.word	0x20000654
 8003fa8:	20000648 	.word	0x20000648
 8003fac:	40023c00 	.word	0x40023c00
 8003fb0:	20000644 	.word	0x20000644

08003fb4 <_Z12readIMUcalibv>:

IMU_calib_data readIMUcalib(){
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b08c      	sub	sp, #48	; 0x30
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]

	  float temp_arr_[6];

	  float result;

	  Address = FLASH_USER_START_ADDR+ 2*12 ;
 8003fbc:	4b29      	ldr	r3, [pc, #164]	; (8004064 <_Z12readIMUcalibv+0xb0>)
 8003fbe:	4a2a      	ldr	r2, [pc, #168]	; (8004068 <_Z12readIMUcalibv+0xb4>)
 8003fc0:	601a      	str	r2, [r3, #0]

	  uint8_t count = 0;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	  uint8_t temp[4];
	  while (Address < FLASH_USER_START_ADDR + 2*12 + 4*6)
 8003fc8:	4b26      	ldr	r3, [pc, #152]	; (8004064 <_Z12readIMUcalibv+0xb0>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a27      	ldr	r2, [pc, #156]	; (800406c <_Z12readIMUcalibv+0xb8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d831      	bhi.n	8004036 <_Z12readIMUcalibv+0x82>
	  {
	    data32 = *(__IO uint32_t*)Address;
 8003fd2:	4b24      	ldr	r3, [pc, #144]	; (8004064 <_Z12readIMUcalibv+0xb0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a25      	ldr	r2, [pc, #148]	; (8004070 <_Z12readIMUcalibv+0xbc>)
 8003fda:	6013      	str	r3, [r2, #0]

	    temp[0] = (uint8_t) ((data32 &0xFF000000)>>24);
 8003fdc:	4b24      	ldr	r3, [pc, #144]	; (8004070 <_Z12readIMUcalibv+0xbc>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	0e1b      	lsrs	r3, r3, #24
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	733b      	strb	r3, [r7, #12]
	    temp[1] = (uint8_t) (data32 & 0x00FF0000) >> 16;
 8003fe6:	4b22      	ldr	r3, [pc, #136]	; (8004070 <_Z12readIMUcalibv+0xbc>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2300      	movs	r3, #0
 8003fec:	737b      	strb	r3, [r7, #13]

	    temp[2] = (uint8_t) ((data32 &0x0000FF00)>>8);
 8003fee:	4b20      	ldr	r3, [pc, #128]	; (8004070 <_Z12readIMUcalibv+0xbc>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	0a1b      	lsrs	r3, r3, #8
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	73bb      	strb	r3, [r7, #14]
	    temp[3] = (uint8_t) data32 &0x000000FF;
 8003ff8:	4b1d      	ldr	r3, [pc, #116]	; (8004070 <_Z12readIMUcalibv+0xbc>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	73fb      	strb	r3, [r7, #15]

	    result = bytes2Float(temp);
 8004000:	f107 030c 	add.w	r3, r7, #12
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff fb7d 	bl	8003704 <_Z11bytes2FloatPh>
 800400a:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	    temp_arr_[count] = result;
 800400e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004018:	4413      	add	r3, r2
 800401a:	3b20      	subs	r3, #32
 800401c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800401e:	601a      	str	r2, [r3, #0]
        count ++;
 8004020:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004024:	3301      	adds	r3, #1
 8004026:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	    Address = Address + 4;
 800402a:	4b0e      	ldr	r3, [pc, #56]	; (8004064 <_Z12readIMUcalibv+0xb0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	3304      	adds	r3, #4
 8004030:	4a0c      	ldr	r2, [pc, #48]	; (8004064 <_Z12readIMUcalibv+0xb0>)
 8004032:	6013      	str	r3, [r2, #0]
	  while (Address < FLASH_USER_START_ADDR + 2*12 + 4*6)
 8004034:	e7c8      	b.n	8003fc8 <_Z12readIMUcalibv+0x14>
	  }
      calib.bAx = temp_arr_[0];
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	60da      	str	r2, [r3, #12]
      calib.bAy = temp_arr_[1];
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	611a      	str	r2, [r3, #16]
      calib.bAz = temp_arr_[2];
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	615a      	str	r2, [r3, #20]

      calib.bGx = temp_arr_[3];
 8004048:	69fa      	ldr	r2, [r7, #28]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	601a      	str	r2, [r3, #0]
      calib.bGy = temp_arr_[4];
 800404e:	6a3a      	ldr	r2, [r7, #32]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	605a      	str	r2, [r3, #4]
      calib.bGz = temp_arr_[5];
 8004054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	609a      	str	r2, [r3, #8]

      return calib;
 800405a:	bf00      	nop
}
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	3730      	adds	r7, #48	; 0x30
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20000644 	.word	0x20000644
 8004068:	080e0018 	.word	0x080e0018
 800406c:	080e002f 	.word	0x080e002f
 8004070:	2000064c 	.word	0x2000064c

08004074 <_Z9readFlashv>:
      calib.bGy = temp_arr_[4];
      calib.bGz = temp_arr_[5];

      return calib;
}
PID_value readFlash(){
 8004074:	b480      	push	{r7}
 8004076:	b08b      	sub	sp, #44	; 0x2c
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
	  PID_value pid;
	  Address = FLASH_USER_START_ADDR;
 800407c:	4b4e      	ldr	r3, [pc, #312]	; (80041b8 <_Z9readFlashv+0x144>)
 800407e:	4a4f      	ldr	r2, [pc, #316]	; (80041bc <_Z9readFlashv+0x148>)
 8004080:	601a      	str	r2, [r3, #0]
	  MemoryProgramStatus = 0x0;
 8004082:	4b4f      	ldr	r3, [pc, #316]	; (80041c0 <_Z9readFlashv+0x14c>)
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]
	  uint16_t temp_arr[12];
//	  uint16_t result,result1;

	  uint8_t count = 0;
 8004088:	2300      	movs	r3, #0
 800408a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  while (Address < FLASH_USER_START_ADDR + 2*12)
 800408e:	4b4a      	ldr	r3, [pc, #296]	; (80041b8 <_Z9readFlashv+0x144>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a4c      	ldr	r2, [pc, #304]	; (80041c4 <_Z9readFlashv+0x150>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d827      	bhi.n	80040e8 <_Z9readFlashv+0x74>
	  {
	    data32 = *(__IO uint32_t*)Address;
 8004098:	4b47      	ldr	r3, [pc, #284]	; (80041b8 <_Z9readFlashv+0x144>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a4a      	ldr	r2, [pc, #296]	; (80041c8 <_Z9readFlashv+0x154>)
 80040a0:	6013      	str	r3, [r2, #0]

	    temp_arr[count] = (uint16_t) ((data32 &0xFFFF0000)>>16);
 80040a2:	4b49      	ldr	r3, [pc, #292]	; (80041c8 <_Z9readFlashv+0x154>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	0c1a      	lsrs	r2, r3, #16
 80040a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040ac:	b292      	uxth	r2, r2
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80040b4:	440b      	add	r3, r1
 80040b6:	f823 2c1c 	strh.w	r2, [r3, #-28]
	    temp_arr[count+1] = (uint16_t) (data32 & 0x0000FFFF);
 80040ba:	4b43      	ldr	r3, [pc, #268]	; (80041c8 <_Z9readFlashv+0x154>)
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040c2:	3301      	adds	r3, #1
 80040c4:	b292      	uxth	r2, r2
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80040cc:	440b      	add	r3, r1
 80040ce:	f823 2c1c 	strh.w	r2, [r3, #-28]


//	    temp_arr[2] = (uint8_t) ((data32 &0x0000FF00)>>8);
//	    temp_arr[3] = (uint8_t) data32 &0x000000FF;
//	    result = bytes2Float(temp_arr);
        count += 2;
 80040d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040d6:	3302      	adds	r3, #2
 80040d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	    Address = Address + 4;
 80040dc:	4b36      	ldr	r3, [pc, #216]	; (80041b8 <_Z9readFlashv+0x144>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3304      	adds	r3, #4
 80040e2:	4a35      	ldr	r2, [pc, #212]	; (80041b8 <_Z9readFlashv+0x144>)
 80040e4:	6013      	str	r3, [r2, #0]
	  while (Address < FLASH_USER_START_ADDR + 2*12)
 80040e6:	e7d2      	b.n	800408e <_Z9readFlashv+0x1a>
	  }
      pid.Kp1 = temp_arr[0];
 80040e8:	89bb      	ldrh	r3, [r7, #12]
 80040ea:	ee07 3a90 	vmov	s15, r3
 80040ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	edc3 7a00 	vstr	s15, [r3]
      pid.Ki1 = temp_arr[1];
 80040f8:	89fb      	ldrh	r3, [r7, #14]
 80040fa:	ee07 3a90 	vmov	s15, r3
 80040fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	edc3 7a01 	vstr	s15, [r3, #4]
      pid.Kd1 = temp_arr[2];
 8004108:	8a3b      	ldrh	r3, [r7, #16]
 800410a:	ee07 3a90 	vmov	s15, r3
 800410e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	edc3 7a02 	vstr	s15, [r3, #8]

      pid.Kp2 = temp_arr[3];
 8004118:	8a7b      	ldrh	r3, [r7, #18]
 800411a:	ee07 3a90 	vmov	s15, r3
 800411e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	edc3 7a03 	vstr	s15, [r3, #12]
      pid.Ki2 = temp_arr[4];
 8004128:	8abb      	ldrh	r3, [r7, #20]
 800412a:	ee07 3a90 	vmov	s15, r3
 800412e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	edc3 7a04 	vstr	s15, [r3, #16]
      pid.Kd2 = temp_arr[5];
 8004138:	8afb      	ldrh	r3, [r7, #22]
 800413a:	ee07 3a90 	vmov	s15, r3
 800413e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	edc3 7a05 	vstr	s15, [r3, #20]

      pid.Kp3 = temp_arr[6];
 8004148:	8b3b      	ldrh	r3, [r7, #24]
 800414a:	ee07 3a90 	vmov	s15, r3
 800414e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	edc3 7a06 	vstr	s15, [r3, #24]
      pid.Ki3 = temp_arr[7];
 8004158:	8b7b      	ldrh	r3, [r7, #26]
 800415a:	ee07 3a90 	vmov	s15, r3
 800415e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	edc3 7a07 	vstr	s15, [r3, #28]
      pid.Kd3 = temp_arr[8];
 8004168:	8bbb      	ldrh	r3, [r7, #28]
 800416a:	ee07 3a90 	vmov	s15, r3
 800416e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	edc3 7a08 	vstr	s15, [r3, #32]

      pid.Kp4 = temp_arr[9];
 8004178:	8bfb      	ldrh	r3, [r7, #30]
 800417a:	ee07 3a90 	vmov	s15, r3
 800417e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
      pid.Ki4 = temp_arr[10];
 8004188:	8c3b      	ldrh	r3, [r7, #32]
 800418a:	ee07 3a90 	vmov	s15, r3
 800418e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
      pid.Kd4 = temp_arr[11];
 8004198:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800419a:	ee07 3a90 	vmov	s15, r3
 800419e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
      return pid;
 80041a8:	bf00      	nop
}
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	372c      	adds	r7, #44	; 0x2c
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	20000644 	.word	0x20000644
 80041bc:	080e0000 	.word	0x080e0000
 80041c0:	20000650 	.word	0x20000650
 80041c4:	080e0017 	.word	0x080e0017
 80041c8:	2000064c 	.word	0x2000064c

080041cc <_ZL9GetSectorm>:
  * @brief  Gets the sector of a given address
  * @param  None
  * @retval The sector of a given address
  */
static uint32_t GetSector(uint32_t Address)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 80041d4:	2300      	movs	r3, #0
 80041d6:	60fb      	str	r3, [r7, #12]

  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a40      	ldr	r2, [pc, #256]	; (80042dc <_ZL9GetSectorm+0x110>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d806      	bhi.n	80041ee <_ZL9GetSectorm+0x22>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041e6:	d302      	bcc.n	80041ee <_ZL9GetSectorm+0x22>
  {
    sector = FLASH_SECTOR_0;
 80041e8:	2300      	movs	r3, #0
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	e06f      	b.n	80042ce <_ZL9GetSectorm+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a3b      	ldr	r2, [pc, #236]	; (80042e0 <_ZL9GetSectorm+0x114>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d806      	bhi.n	8004204 <_ZL9GetSectorm+0x38>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a38      	ldr	r2, [pc, #224]	; (80042dc <_ZL9GetSectorm+0x110>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d902      	bls.n	8004204 <_ZL9GetSectorm+0x38>
  {
    sector = FLASH_SECTOR_1;
 80041fe:	2301      	movs	r3, #1
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	e064      	b.n	80042ce <_ZL9GetSectorm+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a37      	ldr	r2, [pc, #220]	; (80042e4 <_ZL9GetSectorm+0x118>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d806      	bhi.n	800421a <_ZL9GetSectorm+0x4e>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a34      	ldr	r2, [pc, #208]	; (80042e0 <_ZL9GetSectorm+0x114>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d902      	bls.n	800421a <_ZL9GetSectorm+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8004214:	2302      	movs	r3, #2
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	e059      	b.n	80042ce <_ZL9GetSectorm+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a32      	ldr	r2, [pc, #200]	; (80042e8 <_ZL9GetSectorm+0x11c>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d806      	bhi.n	8004230 <_ZL9GetSectorm+0x64>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a2f      	ldr	r2, [pc, #188]	; (80042e4 <_ZL9GetSectorm+0x118>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d902      	bls.n	8004230 <_ZL9GetSectorm+0x64>
  {
    sector = FLASH_SECTOR_3;
 800422a:	2303      	movs	r3, #3
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	e04e      	b.n	80042ce <_ZL9GetSectorm+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a2e      	ldr	r2, [pc, #184]	; (80042ec <_ZL9GetSectorm+0x120>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d806      	bhi.n	8004246 <_ZL9GetSectorm+0x7a>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a2b      	ldr	r2, [pc, #172]	; (80042e8 <_ZL9GetSectorm+0x11c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d902      	bls.n	8004246 <_ZL9GetSectorm+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8004240:	2304      	movs	r3, #4
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	e043      	b.n	80042ce <_ZL9GetSectorm+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a29      	ldr	r2, [pc, #164]	; (80042f0 <_ZL9GetSectorm+0x124>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d806      	bhi.n	800425c <_ZL9GetSectorm+0x90>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a26      	ldr	r2, [pc, #152]	; (80042ec <_ZL9GetSectorm+0x120>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d902      	bls.n	800425c <_ZL9GetSectorm+0x90>
  {
    sector = FLASH_SECTOR_5;
 8004256:	2305      	movs	r3, #5
 8004258:	60fb      	str	r3, [r7, #12]
 800425a:	e038      	b.n	80042ce <_ZL9GetSectorm+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a25      	ldr	r2, [pc, #148]	; (80042f4 <_ZL9GetSectorm+0x128>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d806      	bhi.n	8004272 <_ZL9GetSectorm+0xa6>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a22      	ldr	r2, [pc, #136]	; (80042f0 <_ZL9GetSectorm+0x124>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d902      	bls.n	8004272 <_ZL9GetSectorm+0xa6>
  {
    sector = FLASH_SECTOR_6;
 800426c:	2306      	movs	r3, #6
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	e02d      	b.n	80042ce <_ZL9GetSectorm+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a20      	ldr	r2, [pc, #128]	; (80042f8 <_ZL9GetSectorm+0x12c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d806      	bhi.n	8004288 <_ZL9GetSectorm+0xbc>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a1d      	ldr	r2, [pc, #116]	; (80042f4 <_ZL9GetSectorm+0x128>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d902      	bls.n	8004288 <_ZL9GetSectorm+0xbc>
  {
    sector = FLASH_SECTOR_7;
 8004282:	2307      	movs	r3, #7
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	e022      	b.n	80042ce <_ZL9GetSectorm+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a1c      	ldr	r2, [pc, #112]	; (80042fc <_ZL9GetSectorm+0x130>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d806      	bhi.n	800429e <_ZL9GetSectorm+0xd2>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a19      	ldr	r2, [pc, #100]	; (80042f8 <_ZL9GetSectorm+0x12c>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d902      	bls.n	800429e <_ZL9GetSectorm+0xd2>
  {
    sector = FLASH_SECTOR_8;
 8004298:	2308      	movs	r3, #8
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	e017      	b.n	80042ce <_ZL9GetSectorm+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a17      	ldr	r2, [pc, #92]	; (8004300 <_ZL9GetSectorm+0x134>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d806      	bhi.n	80042b4 <_ZL9GetSectorm+0xe8>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a14      	ldr	r2, [pc, #80]	; (80042fc <_ZL9GetSectorm+0x130>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d902      	bls.n	80042b4 <_ZL9GetSectorm+0xe8>
  {
    sector = FLASH_SECTOR_9;
 80042ae:	2309      	movs	r3, #9
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	e00c      	b.n	80042ce <_ZL9GetSectorm+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a13      	ldr	r2, [pc, #76]	; (8004304 <_ZL9GetSectorm+0x138>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d806      	bhi.n	80042ca <_ZL9GetSectorm+0xfe>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a10      	ldr	r2, [pc, #64]	; (8004300 <_ZL9GetSectorm+0x134>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d902      	bls.n	80042ca <_ZL9GetSectorm+0xfe>
  {
    sector = FLASH_SECTOR_10;
 80042c4:	230a      	movs	r3, #10
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	e001      	b.n	80042ce <_ZL9GetSectorm+0x102>
  }
  else /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_11) */
  {
    sector = FLASH_SECTOR_11;
 80042ca:	230b      	movs	r3, #11
 80042cc:	60fb      	str	r3, [r7, #12]
  }

  return sector;
 80042ce:	68fb      	ldr	r3, [r7, #12]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	08003fff 	.word	0x08003fff
 80042e0:	08007fff 	.word	0x08007fff
 80042e4:	0800bfff 	.word	0x0800bfff
 80042e8:	0800ffff 	.word	0x0800ffff
 80042ec:	0801ffff 	.word	0x0801ffff
 80042f0:	0803ffff 	.word	0x0803ffff
 80042f4:	0805ffff 	.word	0x0805ffff
 80042f8:	0807ffff 	.word	0x0807ffff
 80042fc:	0809ffff 	.word	0x0809ffff
 8004300:	080bffff 	.word	0x080bffff
 8004304:	080dffff 	.word	0x080dffff

08004308 <_ZL13GetSectorSizem>:
  * @brief  Gets sector Size
  * @param  None
  * @retval The size of a given sector
  */
static uint32_t GetSectorSize(uint32_t Sector)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t sectorsize = 0x00;
 8004310:	2300      	movs	r3, #0
 8004312:	60fb      	str	r3, [r7, #12]

  if((Sector == FLASH_SECTOR_0) || (Sector == FLASH_SECTOR_1) || (Sector == FLASH_SECTOR_2) || (Sector == FLASH_SECTOR_3))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d008      	beq.n	800432c <_ZL13GetSectorSizem+0x24>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d005      	beq.n	800432c <_ZL13GetSectorSizem+0x24>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b02      	cmp	r3, #2
 8004324:	d002      	beq.n	800432c <_ZL13GetSectorSizem+0x24>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b03      	cmp	r3, #3
 800432a:	d103      	bne.n	8004334 <_ZL13GetSectorSizem+0x2c>
  {
    sectorsize = 16 * 1024;
 800432c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004330:	60fb      	str	r3, [r7, #12]
 8004332:	e009      	b.n	8004348 <_ZL13GetSectorSizem+0x40>
  }
  else if(Sector == FLASH_SECTOR_4)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b04      	cmp	r3, #4
 8004338:	d103      	bne.n	8004342 <_ZL13GetSectorSizem+0x3a>
  {
    sectorsize = 64 * 1024;
 800433a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	e002      	b.n	8004348 <_ZL13GetSectorSizem+0x40>
  }
  else
  {
    sectorsize = 128 * 1024;
 8004342:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004346:	60fb      	str	r3, [r7, #12]
  }
  return sectorsize;
 8004348:	68fb      	ldr	r3, [r7, #12]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <_Z11sbus_decodePh>:
}ESC_value;




ESC_value sbus_decode(uint8_t data[7]){
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
 800435e:	6039      	str	r1, [r7, #0]
	ESC_value value;
	value.esc_value1 = (data[0] << 3) | ((data[1] & 0b11100000)>>5);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	b21a      	sxth	r2, r3
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	3301      	adds	r3, #1
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	b2db      	uxtb	r3, r3
 8004372:	b21b      	sxth	r3, r3
 8004374:	4313      	orrs	r3, r2
 8004376:	b21b      	sxth	r3, r3
 8004378:	b29a      	uxth	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	801a      	strh	r2, [r3, #0]
	value.esc_value2 = ((data[1] & 0b00011111)<<6)|((data[2] & 0b11111100)>>2);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	3301      	adds	r3, #1
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	019b      	lsls	r3, r3, #6
 8004386:	b21b      	sxth	r3, r3
 8004388:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800438c:	b21a      	sxth	r2, r3
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	3302      	adds	r3, #2
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	089b      	lsrs	r3, r3, #2
 8004396:	b2db      	uxtb	r3, r3
 8004398:	b21b      	sxth	r3, r3
 800439a:	4313      	orrs	r3, r2
 800439c:	b21b      	sxth	r3, r3
 800439e:	b29a      	uxth	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	805a      	strh	r2, [r3, #2]
	value.esc_value3 = (((data[2] &0b00000011)<<9)|(data[3]<<1))|((data[4] & 0b10000000)>>7);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	3302      	adds	r3, #2
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	025b      	lsls	r3, r3, #9
 80043ac:	b21b      	sxth	r3, r3
 80043ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043b2:	b21a      	sxth	r2, r3
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	3303      	adds	r3, #3
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	b21b      	sxth	r3, r3
 80043be:	4313      	orrs	r3, r2
 80043c0:	b21a      	sxth	r2, r3
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	3304      	adds	r3, #4
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	09db      	lsrs	r3, r3, #7
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	b21b      	sxth	r3, r3
 80043ce:	4313      	orrs	r3, r2
 80043d0:	b21b      	sxth	r3, r3
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	809a      	strh	r2, [r3, #4]
	value.esc_value4 = ((data[4] & 0b01111111)<<4)|(data[5])>>4;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	3304      	adds	r3, #4
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	b21b      	sxth	r3, r3
 80043e2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80043e6:	b21a      	sxth	r2, r3
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	3305      	adds	r3, #5
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	111b      	asrs	r3, r3, #4
 80043f0:	b21b      	sxth	r3, r3
 80043f2:	4313      	orrs	r3, r2
 80043f4:	b21b      	sxth	r3, r3
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	80da      	strh	r2, [r3, #6]
    value.crc = data[6];
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	3306      	adds	r3, #6
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	b29a      	uxth	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	811a      	strh	r2, [r3, #8]
	return value;
 8004408:	bf00      	nop
}
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
	...

08004418 <_Z9check_CRC9ESC_value>:
bool check_CRC(ESC_value value){
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	1d3b      	adds	r3, r7, #4
 8004420:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint16_t check = value.esc_value1 + value.esc_value2 + value.esc_value3 + value.esc_value4;
 8004424:	88ba      	ldrh	r2, [r7, #4]
 8004426:	88fb      	ldrh	r3, [r7, #6]
 8004428:	4413      	add	r3, r2
 800442a:	b29a      	uxth	r2, r3
 800442c:	893b      	ldrh	r3, [r7, #8]
 800442e:	4413      	add	r3, r2
 8004430:	b29a      	uxth	r2, r3
 8004432:	897b      	ldrh	r3, [r7, #10]
 8004434:	4413      	add	r3, r2
 8004436:	82fb      	strh	r3, [r7, #22]
    if(check % 37 != value.crc)
 8004438:	8afa      	ldrh	r2, [r7, #22]
 800443a:	4b0d      	ldr	r3, [pc, #52]	; (8004470 <_Z9check_CRC9ESC_value+0x58>)
 800443c:	fba3 1302 	umull	r1, r3, r3, r2
 8004440:	1ad1      	subs	r1, r2, r3
 8004442:	0849      	lsrs	r1, r1, #1
 8004444:	440b      	add	r3, r1
 8004446:	0959      	lsrs	r1, r3, #5
 8004448:	460b      	mov	r3, r1
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	440b      	add	r3, r1
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	b29a      	uxth	r2, r3
 8004456:	89bb      	ldrh	r3, [r7, #12]
 8004458:	429a      	cmp	r2, r3
 800445a:	d001      	beq.n	8004460 <_Z9check_CRC9ESC_value+0x48>
    	return false;
 800445c:	2300      	movs	r3, #0
 800445e:	e000      	b.n	8004462 <_Z9check_CRC9ESC_value+0x4a>
    return true;
 8004460:	2301      	movs	r3, #1
}
 8004462:	4618      	mov	r0, r3
 8004464:	371c      	adds	r7, #28
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	bacf914d 	.word	0xbacf914d

08004474 <_Z10CRC_thurst9ESC_value>:

bool CRC_thurst(ESC_value value){
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	1d3b      	adds	r3, r7, #4
 800447c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    if((value.esc_value1 == value.esc_value2) && (value.esc_value3 == value.esc_value4) && (value.esc_value1 == value.esc_value4))
 8004480:	88ba      	ldrh	r2, [r7, #4]
 8004482:	88fb      	ldrh	r3, [r7, #6]
 8004484:	429a      	cmp	r2, r3
 8004486:	d109      	bne.n	800449c <_Z10CRC_thurst9ESC_value+0x28>
 8004488:	893a      	ldrh	r2, [r7, #8]
 800448a:	897b      	ldrh	r3, [r7, #10]
 800448c:	429a      	cmp	r2, r3
 800448e:	d105      	bne.n	800449c <_Z10CRC_thurst9ESC_value+0x28>
 8004490:	88ba      	ldrh	r2, [r7, #4]
 8004492:	897b      	ldrh	r3, [r7, #10]
 8004494:	429a      	cmp	r2, r3
 8004496:	d101      	bne.n	800449c <_Z10CRC_thurst9ESC_value+0x28>
    	return true;
 8004498:	2301      	movs	r3, #1
 800449a:	e000      	b.n	800449e <_Z10CRC_thurst9ESC_value+0x2a>
    return false;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3714      	adds	r7, #20
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
	...

080044ac <_Z8init_ESCv>:

void init_ESC(){
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start(&htim4);
 80044b2:	4830      	ldr	r0, [pc, #192]	; (8004574 <_Z8init_ESCv+0xc8>)
 80044b4:	f004 feb1 	bl	800921a <HAL_TIM_Base_Start>
	  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80044b8:	2100      	movs	r1, #0
 80044ba:	482f      	ldr	r0, [pc, #188]	; (8004578 <_Z8init_ESCv+0xcc>)
 80044bc:	f004 ff2a 	bl	8009314 <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80044c0:	2104      	movs	r1, #4
 80044c2:	482d      	ldr	r0, [pc, #180]	; (8004578 <_Z8init_ESCv+0xcc>)
 80044c4:	f004 ff26 	bl	8009314 <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 80044c8:	2108      	movs	r1, #8
 80044ca:	482b      	ldr	r0, [pc, #172]	; (8004578 <_Z8init_ESCv+0xcc>)
 80044cc:	f004 ff22 	bl	8009314 <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 80044d0:	210c      	movs	r1, #12
 80044d2:	4829      	ldr	r0, [pc, #164]	; (8004578 <_Z8init_ESCv+0xcc>)
 80044d4:	f004 ff1e 	bl	8009314 <HAL_TIM_PWM_Start>
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1000);
 80044d8:	4b27      	ldr	r3, [pc, #156]	; (8004578 <_Z8init_ESCv+0xcc>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044e0:	635a      	str	r2, [r3, #52]	; 0x34
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1000);
 80044e2:	4b25      	ldr	r3, [pc, #148]	; (8004578 <_Z8init_ESCv+0xcc>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044ea:	639a      	str	r2, [r3, #56]	; 0x38
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 1000);
 80044ec:	4b22      	ldr	r3, [pc, #136]	; (8004578 <_Z8init_ESCv+0xcc>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044f4:	63da      	str	r2, [r3, #60]	; 0x3c
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1000);
 80044f6:	4b20      	ldr	r3, [pc, #128]	; (8004578 <_Z8init_ESCv+0xcc>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044fe:	641a      	str	r2, [r3, #64]	; 0x40

        for(int i = 0; i < 5; i++){
 8004500:	2300      	movs	r3, #0
 8004502:	607b      	str	r3, [r7, #4]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b04      	cmp	r3, #4
 8004508:	dc1a      	bgt.n	8004540 <_Z8init_ESCv+0x94>
        	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 800450a:	2104      	movs	r1, #4
 800450c:	481b      	ldr	r0, [pc, #108]	; (800457c <_Z8init_ESCv+0xd0>)
 800450e:	f002 fe38 	bl	8007182 <HAL_GPIO_TogglePin>
        	HAL_Delay(50);
 8004512:	2032      	movs	r0, #50	; 0x32
 8004514:	f001 ff74 	bl	8006400 <HAL_Delay>
        	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8004518:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800451c:	4817      	ldr	r0, [pc, #92]	; (800457c <_Z8init_ESCv+0xd0>)
 800451e:	f002 fe30 	bl	8007182 <HAL_GPIO_TogglePin>
        	HAL_Delay(50);
 8004522:	2032      	movs	r0, #50	; 0x32
 8004524:	f001 ff6c 	bl	8006400 <HAL_Delay>
        	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8004528:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800452c:	4813      	ldr	r0, [pc, #76]	; (800457c <_Z8init_ESCv+0xd0>)
 800452e:	f002 fe28 	bl	8007182 <HAL_GPIO_TogglePin>
        	HAL_Delay(50);
 8004532:	2032      	movs	r0, #50	; 0x32
 8004534:	f001 ff64 	bl	8006400 <HAL_Delay>
        for(int i = 0; i < 5; i++){
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	3301      	adds	r3, #1
 800453c:	607b      	str	r3, [r7, #4]
 800453e:	e7e1      	b.n	8004504 <_Z8init_ESCv+0x58>
        }
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_RESET);
 8004540:	2200      	movs	r2, #0
 8004542:	2104      	movs	r1, #4
 8004544:	480d      	ldr	r0, [pc, #52]	; (800457c <_Z8init_ESCv+0xd0>)
 8004546:	f002 fe03 	bl	8007150 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 800454a:	2200      	movs	r2, #0
 800454c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004550:	480a      	ldr	r0, [pc, #40]	; (800457c <_Z8init_ESCv+0xd0>)
 8004552:	f002 fdfd 	bl	8007150 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 8004556:	2200      	movs	r2, #0
 8004558:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800455c:	4807      	ldr	r0, [pc, #28]	; (800457c <_Z8init_ESCv+0xd0>)
 800455e:	f002 fdf7 	bl	8007150 <HAL_GPIO_WritePin>
	    HAL_Delay(1000);
 8004562:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004566:	f001 ff4b 	bl	8006400 <HAL_Delay>
}
 800456a:	bf00      	nop
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	20000468 	.word	0x20000468
 8004578:	20000428 	.word	0x20000428
 800457c:	40020400 	.word	0x40020400

08004580 <_Z7set_ESC9ESC_value>:

void set_ESC(ESC_value esc){
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	1d3b      	adds	r3, r7, #4
 8004588:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,esc.esc_value1);
 800458c:	88ba      	ldrh	r2, [r7, #4]
 800458e:	4b0a      	ldr	r3, [pc, #40]	; (80045b8 <_Z7set_ESC9ESC_value+0x38>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	635a      	str	r2, [r3, #52]	; 0x34
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, esc.esc_value2);
 8004594:	88fa      	ldrh	r2, [r7, #6]
 8004596:	4b08      	ldr	r3, [pc, #32]	; (80045b8 <_Z7set_ESC9ESC_value+0x38>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	639a      	str	r2, [r3, #56]	; 0x38
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,esc.esc_value3);
 800459c:	893a      	ldrh	r2, [r7, #8]
 800459e:	4b06      	ldr	r3, [pc, #24]	; (80045b8 <_Z7set_ESC9ESC_value+0x38>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	63da      	str	r2, [r3, #60]	; 0x3c
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,esc.esc_value4);
 80045a4:	897a      	ldrh	r2, [r7, #10]
 80045a6:	4b04      	ldr	r3, [pc, #16]	; (80045b8 <_Z7set_ESC9ESC_value+0x38>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	641a      	str	r2, [r3, #64]	; 0x40
}
 80045ac:	bf00      	nop
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	20000428 	.word	0x20000428

080045bc <_ZN15MotorController7loadPIDE9PID_value>:
	   PID_value pid;
	   PID pid_r;
	   PID pid_p;
	   PID pid_y;
	   PID pid_alt;
   void loadPID(PID_value pid){
 80045bc:	b084      	sub	sp, #16
 80045be:	b580      	push	{r7, lr}
 80045c0:	b082      	sub	sp, #8
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	f107 0014 	add.w	r0, r7, #20
 80045ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		this->pid_r.load(pid.Kp1/100, pid.Ki1/100, pid.Kd1/100,0.01);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3338      	adds	r3, #56	; 0x38
 80045d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80045d6:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80046d8 <_ZN15MotorController7loadPIDE9PID_value+0x11c>
 80045da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80045de:	edd7 7a06 	vldr	s15, [r7, #24]
 80045e2:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80046d8 <_ZN15MotorController7loadPIDE9PID_value+0x11c>
 80045e6:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80045ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80045ee:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80046d8 <_ZN15MotorController7loadPIDE9PID_value+0x11c>
 80045f2:	eec7 5a87 	vdiv.f32	s11, s15, s14
 80045f6:	eddf 1a39 	vldr	s3, [pc, #228]	; 80046dc <_ZN15MotorController7loadPIDE9PID_value+0x120>
 80045fa:	eeb0 1a65 	vmov.f32	s2, s11
 80045fe:	eef0 0a46 	vmov.f32	s1, s12
 8004602:	eeb0 0a66 	vmov.f32	s0, s13
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff f824 	bl	8003654 <_ZN3PID4loadEffff>
		this->pid_p.load(pid.Kp2/100, pid.Ki2/100, pid.Kd2/100,0.01);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	33c0      	adds	r3, #192	; 0xc0
 8004610:	edd7 7a08 	vldr	s15, [r7, #32]
 8004614:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80046d8 <_ZN15MotorController7loadPIDE9PID_value+0x11c>
 8004618:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800461c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004620:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80046d8 <_ZN15MotorController7loadPIDE9PID_value+0x11c>
 8004624:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8004628:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800462c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80046d8 <_ZN15MotorController7loadPIDE9PID_value+0x11c>
 8004630:	eec7 5a87 	vdiv.f32	s11, s15, s14
 8004634:	eddf 1a29 	vldr	s3, [pc, #164]	; 80046dc <_ZN15MotorController7loadPIDE9PID_value+0x120>
 8004638:	eeb0 1a65 	vmov.f32	s2, s11
 800463c:	eef0 0a46 	vmov.f32	s1, s12
 8004640:	eeb0 0a66 	vmov.f32	s0, s13
 8004644:	4618      	mov	r0, r3
 8004646:	f7ff f805 	bl	8003654 <_ZN3PID4loadEffff>
	    this->pid_y.load(pid.Kp3/100, pid.Ki3/100, pid.Kd3/100,0.01);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8004650:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004654:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80046d8 <_ZN15MotorController7loadPIDE9PID_value+0x11c>
 8004658:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800465c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004660:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80046d8 <_ZN15MotorController7loadPIDE9PID_value+0x11c>
 8004664:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8004668:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800466c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80046d8 <_ZN15MotorController7loadPIDE9PID_value+0x11c>
 8004670:	eec7 5a87 	vdiv.f32	s11, s15, s14
 8004674:	eddf 1a19 	vldr	s3, [pc, #100]	; 80046dc <_ZN15MotorController7loadPIDE9PID_value+0x120>
 8004678:	eeb0 1a65 	vmov.f32	s2, s11
 800467c:	eef0 0a46 	vmov.f32	s1, s12
 8004680:	eeb0 0a66 	vmov.f32	s0, s13
 8004684:	4618      	mov	r0, r3
 8004686:	f7fe ffe5 	bl	8003654 <_ZN3PID4loadEffff>
	    this->pid_alt.load(pid.Kp4/100, pid.Ki4/100, pid.Kd4/100,0.01);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8004690:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004694:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80046d8 <_ZN15MotorController7loadPIDE9PID_value+0x11c>
 8004698:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800469c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80046a0:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80046d8 <_ZN15MotorController7loadPIDE9PID_value+0x11c>
 80046a4:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80046a8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80046ac:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80046d8 <_ZN15MotorController7loadPIDE9PID_value+0x11c>
 80046b0:	eec7 5a87 	vdiv.f32	s11, s15, s14
 80046b4:	eddf 1a09 	vldr	s3, [pc, #36]	; 80046dc <_ZN15MotorController7loadPIDE9PID_value+0x120>
 80046b8:	eeb0 1a65 	vmov.f32	s2, s11
 80046bc:	eef0 0a46 	vmov.f32	s1, s12
 80046c0:	eeb0 0a66 	vmov.f32	s0, s13
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7fe ffc5 	bl	8003654 <_ZN3PID4loadEffff>
   }
 80046ca:	bf00      	nop
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046d4:	b004      	add	sp, #16
 80046d6:	4770      	bx	lr
 80046d8:	42c80000 	.word	0x42c80000
 80046dc:	3c23d70a 	.word	0x3c23d70a

080046e0 <_ZN15MotorController6updateE11EULER_anglet>:
   ESC_value update(EULER_angle drone_state, uint16_t thurst){
 80046e0:	b590      	push	{r4, r7, lr}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6178      	str	r0, [r7, #20]
 80046e8:	6139      	str	r1, [r7, #16]
 80046ea:	eef0 6a40 	vmov.f32	s13, s0
 80046ee:	eeb0 7a60 	vmov.f32	s14, s1
 80046f2:	eef0 7a41 	vmov.f32	s15, s2
 80046f6:	4613      	mov	r3, r2
 80046f8:	edc7 6a01 	vstr	s13, [r7, #4]
 80046fc:	ed87 7a02 	vstr	s14, [r7, #8]
 8004700:	edc7 7a03 	vstr	s15, [r7, #12]
 8004704:	807b      	strh	r3, [r7, #2]
	    ESC_value control;
        this->pid_p.update(0, drone_state.pitch);
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	33c0      	adds	r3, #192	; 0xc0
 800470a:	edd7 7a02 	vldr	s15, [r7, #8]
 800470e:	eef0 0a67 	vmov.f32	s1, s15
 8004712:	ed9f 0a74 	vldr	s0, [pc, #464]	; 80048e4 <_ZN15MotorController6updateE11EULER_anglet+0x204>
 8004716:	4618      	mov	r0, r3
 8004718:	f7fe fece 	bl	80034b8 <_ZN3PID6updateEff>
        this->pid_r.update(0, drone_state.roll);
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	3338      	adds	r3, #56	; 0x38
 8004720:	edd7 7a01 	vldr	s15, [r7, #4]
 8004724:	eef0 0a67 	vmov.f32	s1, s15
 8004728:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 80048e4 <_ZN15MotorController6updateE11EULER_anglet+0x204>
 800472c:	4618      	mov	r0, r3
 800472e:	f7fe fec3 	bl	80034b8 <_ZN3PID6updateEff>
        this->pid_y.update(0, drone_state.yaw);
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8004738:	edd7 7a03 	vldr	s15, [r7, #12]
 800473c:	eef0 0a67 	vmov.f32	s1, s15
 8004740:	ed9f 0a68 	vldr	s0, [pc, #416]	; 80048e4 <_ZN15MotorController6updateE11EULER_anglet+0x204>
 8004744:	4618      	mov	r0, r3
 8004746:	f7fe feb7 	bl	80034b8 <_ZN3PID6updateEff>


        control.esc_value1 = thurst + pid_r.get_control_value() - pid_p.get_control_value() + pid_y.get_control_value();
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	3338      	adds	r3, #56	; 0x38
 800474e:	4618      	mov	r0, r3
 8004750:	f7fe ff2c 	bl	80035ac <_ZN3PID17get_control_valueEv>
 8004754:	4603      	mov	r3, r0
 8004756:	b29a      	uxth	r2, r3
 8004758:	887b      	ldrh	r3, [r7, #2]
 800475a:	4413      	add	r3, r2
 800475c:	b29c      	uxth	r4, r3
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	33c0      	adds	r3, #192	; 0xc0
 8004762:	4618      	mov	r0, r3
 8004764:	f7fe ff22 	bl	80035ac <_ZN3PID17get_control_valueEv>
 8004768:	4603      	mov	r3, r0
 800476a:	b29b      	uxth	r3, r3
 800476c:	1ae3      	subs	r3, r4, r3
 800476e:	b29c      	uxth	r4, r3
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8004776:	4618      	mov	r0, r3
 8004778:	f7fe ff18 	bl	80035ac <_ZN3PID17get_control_valueEv>
 800477c:	4603      	mov	r3, r0
 800477e:	b29b      	uxth	r3, r3
 8004780:	4423      	add	r3, r4
 8004782:	b29a      	uxth	r2, r3
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	801a      	strh	r2, [r3, #0]
        control.esc_value2 = thurst + pid_r.get_control_value() + pid_p.get_control_value() - pid_y.get_control_value();
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	3338      	adds	r3, #56	; 0x38
 800478c:	4618      	mov	r0, r3
 800478e:	f7fe ff0d 	bl	80035ac <_ZN3PID17get_control_valueEv>
 8004792:	4603      	mov	r3, r0
 8004794:	b29a      	uxth	r2, r3
 8004796:	887b      	ldrh	r3, [r7, #2]
 8004798:	4413      	add	r3, r2
 800479a:	b29c      	uxth	r4, r3
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	33c0      	adds	r3, #192	; 0xc0
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7fe ff03 	bl	80035ac <_ZN3PID17get_control_valueEv>
 80047a6:	4603      	mov	r3, r0
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	4423      	add	r3, r4
 80047ac:	b29c      	uxth	r4, r3
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7fe fef9 	bl	80035ac <_ZN3PID17get_control_valueEv>
 80047ba:	4603      	mov	r3, r0
 80047bc:	b29b      	uxth	r3, r3
 80047be:	1ae3      	subs	r3, r4, r3
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	805a      	strh	r2, [r3, #2]

        control.esc_value3 = thurst - pid_r.get_control_value() - pid_p.get_control_value() - pid_y.get_control_value();
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	3338      	adds	r3, #56	; 0x38
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fe feee 	bl	80035ac <_ZN3PID17get_control_valueEv>
 80047d0:	4603      	mov	r3, r0
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	887a      	ldrh	r2, [r7, #2]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	b29c      	uxth	r4, r3
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	33c0      	adds	r3, #192	; 0xc0
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fe fee4 	bl	80035ac <_ZN3PID17get_control_valueEv>
 80047e4:	4603      	mov	r3, r0
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	1ae3      	subs	r3, r4, r3
 80047ea:	b29c      	uxth	r4, r3
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fe feda 	bl	80035ac <_ZN3PID17get_control_valueEv>
 80047f8:	4603      	mov	r3, r0
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	1ae3      	subs	r3, r4, r3
 80047fe:	b29a      	uxth	r2, r3
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	809a      	strh	r2, [r3, #4]
        control.esc_value4 = thurst - pid_r.get_control_value() + pid_p.get_control_value() + pid_y.get_control_value();
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	3338      	adds	r3, #56	; 0x38
 8004808:	4618      	mov	r0, r3
 800480a:	f7fe fecf 	bl	80035ac <_ZN3PID17get_control_valueEv>
 800480e:	4603      	mov	r3, r0
 8004810:	b29b      	uxth	r3, r3
 8004812:	887a      	ldrh	r2, [r7, #2]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	b29c      	uxth	r4, r3
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	33c0      	adds	r3, #192	; 0xc0
 800481c:	4618      	mov	r0, r3
 800481e:	f7fe fec5 	bl	80035ac <_ZN3PID17get_control_valueEv>
 8004822:	4603      	mov	r3, r0
 8004824:	b29b      	uxth	r3, r3
 8004826:	4423      	add	r3, r4
 8004828:	b29c      	uxth	r4, r3
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8004830:	4618      	mov	r0, r3
 8004832:	f7fe febb 	bl	80035ac <_ZN3PID17get_control_valueEv>
 8004836:	4603      	mov	r3, r0
 8004838:	b29b      	uxth	r3, r3
 800483a:	4423      	add	r3, r4
 800483c:	b29a      	uxth	r2, r3
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	80da      	strh	r2, [r3, #6]

        if(control.esc_value1 < 1000){
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800484a:	d203      	bcs.n	8004854 <_ZN15MotorController6updateE11EULER_anglet+0x174>
        	control.esc_value1 = 1000;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004852:	801a      	strh	r2, [r3, #0]
        }
        if(control.esc_value1 > 1500){
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	881b      	ldrh	r3, [r3, #0]
 8004858:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800485c:	4293      	cmp	r3, r2
 800485e:	d903      	bls.n	8004868 <_ZN15MotorController6updateE11EULER_anglet+0x188>
        	control.esc_value1 = 1500;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004866:	801a      	strh	r2, [r3, #0]
        }

        if(control.esc_value2 < 1000){
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	885b      	ldrh	r3, [r3, #2]
 800486c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004870:	d203      	bcs.n	800487a <_ZN15MotorController6updateE11EULER_anglet+0x19a>
        	control.esc_value2 = 1000;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004878:	805a      	strh	r2, [r3, #2]
        }
        if(control.esc_value2 > 1500){
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	885b      	ldrh	r3, [r3, #2]
 800487e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004882:	4293      	cmp	r3, r2
 8004884:	d903      	bls.n	800488e <_ZN15MotorController6updateE11EULER_anglet+0x1ae>
        	control.esc_value2 = 1500;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800488c:	805a      	strh	r2, [r3, #2]
        }

        if(control.esc_value3 < 1000){
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	889b      	ldrh	r3, [r3, #4]
 8004892:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004896:	d203      	bcs.n	80048a0 <_ZN15MotorController6updateE11EULER_anglet+0x1c0>
        	control.esc_value3 = 1000;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800489e:	809a      	strh	r2, [r3, #4]
        }
        if(control.esc_value3 > 1500){
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	889b      	ldrh	r3, [r3, #4]
 80048a4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d903      	bls.n	80048b4 <_ZN15MotorController6updateE11EULER_anglet+0x1d4>
        	control.esc_value3 = 1500;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80048b2:	809a      	strh	r2, [r3, #4]
        }

        if(control.esc_value4 < 1000){
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	88db      	ldrh	r3, [r3, #6]
 80048b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048bc:	d203      	bcs.n	80048c6 <_ZN15MotorController6updateE11EULER_anglet+0x1e6>
        	control.esc_value4 = 1000;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048c4:	80da      	strh	r2, [r3, #6]
        }
        if(control.esc_value4 > 1500){
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	88db      	ldrh	r3, [r3, #6]
 80048ca:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d903      	bls.n	80048da <_ZN15MotorController6updateE11EULER_anglet+0x1fa>
        	control.esc_value4 = 1500;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80048d8:	80da      	strh	r2, [r3, #6]
        }

        return control;
 80048da:	bf00      	nop
   }
 80048dc:	6978      	ldr	r0, [r7, #20]
 80048de:	371c      	adds	r7, #28
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd90      	pop	{r4, r7, pc}
 80048e4:	00000000 	.word	0x00000000

080048e8 <_ZN15MotorControllerC1Ev>:
};
MotorController::MotorController(){
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3338      	adds	r3, #56	; 0x38
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7fe fef1 	bl	80036dc <_ZN3PIDC1Ev>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	33c0      	adds	r3, #192	; 0xc0
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fe feec 	bl	80036dc <_ZN3PIDC1Ev>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800490a:	4618      	mov	r0, r3
 800490c:	f7fe fee6 	bl	80036dc <_ZN3PIDC1Ev>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8004916:	4618      	mov	r0, r3
 8004918:	f7fe fee0 	bl	80036dc <_ZN3PIDC1Ev>
}
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4618      	mov	r0, r3
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
	...

08004928 <_Z10init_nRF24v>:
void StartTask03(void const * argument);
void readMagnet(void const * argument);
void filterFunction(void const * argument);

/* USER CODE BEGIN PFP */
void init_nRF24(){
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
	 uint8_t ADDR[] = { 'n', 'R', 'F', '2', '4' }; // the address for RX pipe
 800492e:	4a15      	ldr	r2, [pc, #84]	; (8004984 <_Z10init_nRF24v+0x5c>)
 8004930:	463b      	mov	r3, r7
 8004932:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004936:	6018      	str	r0, [r3, #0]
 8004938:	3304      	adds	r3, #4
 800493a:	7019      	strb	r1, [r3, #0]
	  nRF24_SetRFChannel(90); // set RF channel to 2490MHz
 800493c:	205a      	movs	r0, #90	; 0x5a
 800493e:	f001 f8ee 	bl	8005b1e <nRF24_SetRFChannel>
	  nRF24_SetDataRate(nRF24_DR_2Mbps); // 2Mbit/s data rate
 8004942:	2008      	movs	r0, #8
 8004944:	f001 f961 	bl	8005c0a <nRF24_SetDataRate>
	  nRF24_SetCRCScheme(nRF24_CRC_1byte); // 1-byte CRC scheme
 8004948:	2008      	movs	r0, #8
 800494a:	f001 f8c7 	bl	8005adc <nRF24_SetCRCScheme>
	  nRF24_SetAddrWidth(5); // address width is 5 bytes
 800494e:	2005      	movs	r0, #5
 8004950:	f001 f8f3 	bl	8005b3a <nRF24_SetAddrWidth>
	  nRF24_SetAddr(nRF24_PIPE1, ADDR); // program pipe address
 8004954:	463b      	mov	r3, r7
 8004956:	4619      	mov	r1, r3
 8004958:	2001      	movs	r0, #1
 800495a:	f001 f8ff 	bl	8005b5c <nRF24_SetAddr>
	  nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_ON, 10); // enable RX pipe#1 with Auto-ACK: enabled, payload length: 10 bytes
 800495e:	220a      	movs	r2, #10
 8004960:	2101      	movs	r1, #1
 8004962:	2001      	movs	r0, #1
 8004964:	f001 f96c 	bl	8005c40 <nRF24_SetRXPipe>
	  nRF24_SetTXPower(nRF24_TXPWR_0dBm); // configure TX power for Auto-ACK, good choice - same power level as on transmitter
 8004968:	2006      	movs	r0, #6
 800496a:	f001 f933 	bl	8005bd4 <nRF24_SetTXPower>
	  nRF24_SetOperationalMode(nRF24_MODE_RX); // switch transceiver to the RX mode
 800496e:	2001      	movs	r0, #1
 8004970:	f001 f893 	bl	8005a9a <nRF24_SetOperationalMode>
	  nRF24_SetPowerMode(nRF24_PWR_UP); // wake-up transceiver (in case if it sleeping)
 8004974:	2002      	movs	r0, #2
 8004976:	f001 f871 	bl	8005a5c <nRF24_SetPowerMode>
	  // then pull CE pin to HIGH, and the nRF24 will start a receive...
}
 800497a:	bf00      	nop
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	0800dc44 	.word	0x0800dc44

08004988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800498a:	b0bb      	sub	sp, #236	; 0xec
 800498c:	af0a      	add	r7, sp, #40	; 0x28

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  HAL_Init();
 800498e:	f001 fcf5 	bl	800637c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004992:	f000 f969 	bl	8004c68 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004996:	f7fc fc11 	bl	80011bc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800499a:	f7fc fbe9 	bl	8001170 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800499e:	f7fc faa7 	bl	8000ef0 <MX_I2C1_Init>
  MX_TIM1_Init();
 80049a2:	f7fc fad1 	bl	8000f48 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80049a6:	f7fc fbbd 	bl	8001124 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80049aa:	f7fc fb77 	bl	800109c <MX_TIM4_Init>
  MX_TIM7_Init();
 80049ae:	f7fc fcc3 	bl	8001338 <MX_TIM7_Init>
  MX_SPI1_Init();
 80049b2:	f7fc fc8d 	bl	80012d0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, (uint8_t *) Rx_data, 1);
 80049b6:	2201      	movs	r2, #1
 80049b8:	498b      	ldr	r1, [pc, #556]	; (8004be8 <main+0x260>)
 80049ba:	488c      	ldr	r0, [pc, #560]	; (8004bec <main+0x264>)
 80049bc:	f005 fc6e 	bl	800a29c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, (uint8_t *) Rx_data, 1);
 80049c0:	2201      	movs	r2, #1
 80049c2:	4989      	ldr	r1, [pc, #548]	; (8004be8 <main+0x260>)
 80049c4:	488a      	ldr	r0, [pc, #552]	; (8004bf0 <main+0x268>)
 80049c6:	f005 fc69 	bl	800a29c <HAL_UART_Receive_IT>

  check_AHRS(true);
 80049ca:	2001      	movs	r0, #1
 80049cc:	f7fd fee4 	bl	8002798 <_Z10check_AHRSb>
 80049d0:	4603      	mov	r3, r0
 80049d2:	461a      	mov	r2, r3
 80049d4:	f887 20bc 	strb.w	r2, [r7, #188]	; 0xbc
 80049d8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80049dc:	f887 20bd 	strb.w	r2, [r7, #189]	; 0xbd
 80049e0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80049e4:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe

  esc_stop.esc_value1 = 1000;
 80049e8:	4b82      	ldr	r3, [pc, #520]	; (8004bf4 <main+0x26c>)
 80049ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80049ee:	801a      	strh	r2, [r3, #0]
  esc_stop.esc_value2 = 1000;
 80049f0:	4b80      	ldr	r3, [pc, #512]	; (8004bf4 <main+0x26c>)
 80049f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80049f6:	805a      	strh	r2, [r3, #2]
  esc_stop.esc_value3 = 1000;
 80049f8:	4b7e      	ldr	r3, [pc, #504]	; (8004bf4 <main+0x26c>)
 80049fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80049fe:	809a      	strh	r2, [r3, #4]
  esc_stop.esc_value4 = 1000;
 8004a00:	4b7c      	ldr	r3, [pc, #496]	; (8004bf4 <main+0x26c>)
 8004a02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a06:	80da      	strh	r2, [r3, #6]

  thrust_control = 1000;
 8004a08:	4b7b      	ldr	r3, [pc, #492]	; (8004bf8 <main+0x270>)
 8004a0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a0e:	801a      	strh	r2, [r3, #0]

  init_MPU();
 8004a10:	f7fd f87e 	bl	8001b10 <_Z8init_MPUv>
  init_ESC();
 8004a14:	f7ff fd4a 	bl	80044ac <_Z8init_ESCv>
  init_nRF24();
 8004a18:	f7ff ff86 	bl	8004928 <_Z10init_nRF24v>
//  initBMP();

  pid = readFlash();
 8004a1c:	4c77      	ldr	r4, [pc, #476]	; (8004bfc <main+0x274>)
 8004a1e:	463b      	mov	r3, r7
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff fb27 	bl	8004074 <_Z9readFlashv>
 8004a26:	4625      	mov	r5, r4
 8004a28:	463c      	mov	r4, r7
 8004a2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a36:	6823      	ldr	r3, [r4, #0]
 8004a38:	602b      	str	r3, [r5, #0]

  print_pid_value(pid);
 8004a3a:	4e70      	ldr	r6, [pc, #448]	; (8004bfc <main+0x274>)
 8004a3c:	466d      	mov	r5, sp
 8004a3e:	f106 0410 	add.w	r4, r6, #16
 8004a42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a4a:	6823      	ldr	r3, [r4, #0]
 8004a4c:	602b      	str	r3, [r5, #0]
 8004a4e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004a52:	f7ff f829 	bl	8003aa8 <_Z15print_pid_value9PID_value>

  controller.loadPID(pid);
 8004a56:	4e69      	ldr	r6, [pc, #420]	; (8004bfc <main+0x274>)
 8004a58:	466d      	mov	r5, sp
 8004a5a:	f106 040c 	add.w	r4, r6, #12
 8004a5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a6e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8004a72:	4863      	ldr	r0, [pc, #396]	; (8004c00 <main+0x278>)
 8004a74:	f7ff fda2 	bl	80045bc <_ZN15MotorController7loadPIDE9PID_value>

//  pid_roll.load(pid.Kp1/100,pid.Ki1/100,pid.Kd1/100,0.01);
//  pid_pitch.load(pid.Kp1/100,pid.Ki1/100,pid.Kd1/100,0.01);
//  pid_yaw.load(pid.Kp1/100,pid.Ki1/100,pid.Kd1/100,0.01);
//  MX_TIM7_Init();
  BOARD_MODE = FLY_MODE;
 8004a78:	4b62      	ldr	r3, [pc, #392]	; (8004c04 <main+0x27c>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	701a      	strb	r2, [r3, #0]
  ARMED = UNARMED;
 8004a7e:	4b62      	ldr	r3, [pc, #392]	; (8004c08 <main+0x280>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	701a      	strb	r2, [r3, #0]
//  data_lpf.load(LPF_10HZ);

  gyro_lpf.load(LPF_50HZ);
 8004a84:	4961      	ldr	r1, [pc, #388]	; (8004c0c <main+0x284>)
 8004a86:	4862      	ldr	r0, [pc, #392]	; (8004c10 <main+0x288>)
 8004a88:	f7fc fe5e 	bl	8001748 <_ZN3LPF4loadEPd>
  gyro_lpf1.load(LPF_50HZ);
 8004a8c:	495f      	ldr	r1, [pc, #380]	; (8004c0c <main+0x284>)
 8004a8e:	4861      	ldr	r0, [pc, #388]	; (8004c14 <main+0x28c>)
 8004a90:	f7fc fe5a 	bl	8001748 <_ZN3LPF4loadEPd>
  gyro_lpf2.load(LPF_50HZ);
 8004a94:	495d      	ldr	r1, [pc, #372]	; (8004c0c <main+0x284>)
 8004a96:	4860      	ldr	r0, [pc, #384]	; (8004c18 <main+0x290>)
 8004a98:	f7fc fe56 	bl	8001748 <_ZN3LPF4loadEPd>

  acc_lpf.load(LPF_10HZ);
 8004a9c:	495f      	ldr	r1, [pc, #380]	; (8004c1c <main+0x294>)
 8004a9e:	4860      	ldr	r0, [pc, #384]	; (8004c20 <main+0x298>)
 8004aa0:	f7fc fe52 	bl	8001748 <_ZN3LPF4loadEPd>
  acc_lpf1.load(LPF_10HZ);
 8004aa4:	495d      	ldr	r1, [pc, #372]	; (8004c1c <main+0x294>)
 8004aa6:	485f      	ldr	r0, [pc, #380]	; (8004c24 <main+0x29c>)
 8004aa8:	f7fc fe4e 	bl	8001748 <_ZN3LPF4loadEPd>
  acc_lpf2.load(LPF_10HZ);
 8004aac:	495b      	ldr	r1, [pc, #364]	; (8004c1c <main+0x294>)
 8004aae:	485e      	ldr	r0, [pc, #376]	; (8004c28 <main+0x2a0>)
 8004ab0:	f7fc fe4a 	bl	8001748 <_ZN3LPF4loadEPd>

  imu_bias = readIMUcalib();
 8004ab4:	4c5d      	ldr	r4, [pc, #372]	; (8004c2c <main+0x2a4>)
 8004ab6:	463b      	mov	r3, r7
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff fa7b 	bl	8003fb4 <_Z12readIMUcalibv>
 8004abe:	4625      	mov	r5, r4
 8004ac0:	463c      	mov	r4, r7
 8004ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004aca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004ace:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
//  writeCalibration(imu_bias);

  x[4] = bGx*DEC2RAD;
 8004ad2:	4b57      	ldr	r3, [pc, #348]	; (8004c30 <main+0x2a8>)
 8004ad4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ad8:	a341      	add	r3, pc, #260	; (adr r3, 8004be0 <main+0x258>)
 8004ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ade:	f7fb fd3b 	bl	8000558 <__aeabi_dmul>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	460c      	mov	r4, r1
 8004ae6:	4a53      	ldr	r2, [pc, #332]	; (8004c34 <main+0x2ac>)
 8004ae8:	e9c2 3408 	strd	r3, r4, [r2, #32]
  x[5] = bGy*DEC2RAD;
 8004aec:	4b52      	ldr	r3, [pc, #328]	; (8004c38 <main+0x2b0>)
 8004aee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004af2:	a33b      	add	r3, pc, #236	; (adr r3, 8004be0 <main+0x258>)
 8004af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af8:	f7fb fd2e 	bl	8000558 <__aeabi_dmul>
 8004afc:	4603      	mov	r3, r0
 8004afe:	460c      	mov	r4, r1
 8004b00:	4a4c      	ldr	r2, [pc, #304]	; (8004c34 <main+0x2ac>)
 8004b02:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
  x[6] = bGz*DEC2RAD;
 8004b06:	4b4d      	ldr	r3, [pc, #308]	; (8004c3c <main+0x2b4>)
 8004b08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b0c:	a334      	add	r3, pc, #208	; (adr r3, 8004be0 <main+0x258>)
 8004b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b12:	f7fb fd21 	bl	8000558 <__aeabi_dmul>
 8004b16:	4603      	mov	r3, r0
 8004b18:	460c      	mov	r4, r1
 8004b1a:	4a46      	ldr	r2, [pc, #280]	; (8004c34 <main+0x2ac>)
 8004b1c:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of Queue */
  osMessageQStaticDef(Queue, 32, IMU_data *, QueueBuffer, &QueueControlBlock);
 8004b20:	4b47      	ldr	r3, [pc, #284]	; (8004c40 <main+0x2b8>)
 8004b22:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8004b26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  QueueHandle = osMessageCreate(osMessageQ(Queue), NULL);
 8004b2c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004b30:	2100      	movs	r1, #0
 8004b32:	4618      	mov	r0, r3
 8004b34:	f006 fa95 	bl	800b062 <osMessageCreate>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	4b42      	ldr	r3, [pc, #264]	; (8004c44 <main+0x2bc>)
 8004b3c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of read_MPU */
  osThreadDef(read_MPU, StartDefaultTask, osPriorityNormal, 0, 128);
 8004b3e:	4b42      	ldr	r3, [pc, #264]	; (8004c48 <main+0x2c0>)
 8004b40:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8004b44:	461d      	mov	r5, r3
 8004b46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004b4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  read_MPUHandle = osThreadCreate(osThread(read_MPU), NULL);
 8004b52:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004b56:	2100      	movs	r1, #0
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f006 fa22 	bl	800afa2 <osThreadCreate>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	4b3a      	ldr	r3, [pc, #232]	; (8004c4c <main+0x2c4>)
 8004b62:	601a      	str	r2, [r3, #0]

  /* definition and creation of read_BMP */
  osThreadDef(read_BMP, StartTask02, osPriorityNormal, 0, 128);
 8004b64:	4b3a      	ldr	r3, [pc, #232]	; (8004c50 <main+0x2c8>)
 8004b66:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8004b6a:	461d      	mov	r5, r3
 8004b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004b74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  read_BMPHandle = osThreadCreate(osThread(read_BMP), NULL);
 8004b78:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f006 fa0f 	bl	800afa2 <osThreadCreate>
 8004b84:	4602      	mov	r2, r0
 8004b86:	4b33      	ldr	r3, [pc, #204]	; (8004c54 <main+0x2cc>)
 8004b88:	601a      	str	r2, [r3, #0]
  /* definition and creation of read_magnet */
//  osThreadDef(read_Magnet, readMagnet, osPriorityNormal, 0, 128);
//  read_MagnetHandle = osThreadCreate(osThread(read_Magnet), NULL);

  /* definition and creation of receiveTask */
  osThreadDef(receiveTask, StartTask03, osPriorityHigh, 0, 512);
 8004b8a:	4b33      	ldr	r3, [pc, #204]	; (8004c58 <main+0x2d0>)
 8004b8c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8004b90:	461d      	mov	r5, r3
 8004b92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b96:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004b9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveTaskHandle = osThreadCreate(osThread(receiveTask), NULL);
 8004b9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f006 f9fc 	bl	800afa2 <osThreadCreate>
 8004baa:	4602      	mov	r2, r0
 8004bac:	4b2b      	ldr	r3, [pc, #172]	; (8004c5c <main+0x2d4>)
 8004bae:	601a      	str	r2, [r3, #0]

  /* definition and creation of filterTask */
  osThreadDef(filterTask, filterFunction, osPriorityAboveNormal , 0, 10000);
 8004bb0:	4b2b      	ldr	r3, [pc, #172]	; (8004c60 <main+0x2d8>)
 8004bb2:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8004bb6:	461d      	mov	r5, r3
 8004bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bbc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004bc0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  filterTaskHandle = osThreadCreate(osThread(filterTask), NULL);
 8004bc4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004bc8:	2100      	movs	r1, #0
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f006 f9e9 	bl	800afa2 <osThreadCreate>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	4b24      	ldr	r3, [pc, #144]	; (8004c64 <main+0x2dc>)
 8004bd4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8004bd6:	f006 f9dd 	bl	800af94 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004bda:	e7fe      	b.n	8004bda <main+0x252>
 8004bdc:	f3af 8000 	nop.w
 8004be0:	a226e211 	.word	0xa226e211
 8004be4:	3f91df46 	.word	0x3f91df46
 8004be8:	2000067c 	.word	0x2000067c
 8004bec:	200003e8 	.word	0x200003e8
 8004bf0:	200004a8 	.word	0x200004a8
 8004bf4:	20000784 	.word	0x20000784
 8004bf8:	20000dc0 	.word	0x20000dc0
 8004bfc:	2000099c 	.word	0x2000099c
 8004c00:	20000b68 	.word	0x20000b68
 8004c04:	20000540 	.word	0x20000540
 8004c08:	20000541 	.word	0x20000541
 8004c0c:	20000000 	.word	0x20000000
 8004c10:	200007a0 	.word	0x200007a0
 8004c14:	200007f0 	.word	0x200007f0
 8004c18:	20000840 	.word	0x20000840
 8004c1c:	20000030 	.word	0x20000030
 8004c20:	20000890 	.word	0x20000890
 8004c24:	200008e0 	.word	0x200008e0
 8004c28:	20000930 	.word	0x20000930
 8004c2c:	200006b8 	.word	0x200006b8
 8004c30:	200005c0 	.word	0x200005c0
 8004c34:	20000068 	.word	0x20000068
 8004c38:	200005c8 	.word	0x200005c8
 8004c3c:	200005d0 	.word	0x200005d0
 8004c40:	0800dc4c 	.word	0x0800dc4c
 8004c44:	20000678 	.word	0x20000678
 8004c48:	0800dc68 	.word	0x0800dc68
 8004c4c:	20000668 	.word	0x20000668
 8004c50:	0800dc90 	.word	0x0800dc90
 8004c54:	2000066c 	.word	0x2000066c
 8004c58:	0800dcb8 	.word	0x0800dcb8
 8004c5c:	20000670 	.word	0x20000670
 8004c60:	0800dce0 	.word	0x0800dce0
 8004c64:	20000674 	.word	0x20000674

08004c68 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b094      	sub	sp, #80	; 0x50
 8004c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004c6e:	f107 0320 	add.w	r3, r7, #32
 8004c72:	2230      	movs	r2, #48	; 0x30
 8004c74:	2100      	movs	r1, #0
 8004c76:	4618      	mov	r0, r3
 8004c78:	f008 ff6f 	bl	800db5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004c7c:	f107 030c 	add.w	r3, r7, #12
 8004c80:	2200      	movs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	605a      	str	r2, [r3, #4]
 8004c86:	609a      	str	r2, [r3, #8]
 8004c88:	60da      	str	r2, [r3, #12]
 8004c8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	60bb      	str	r3, [r7, #8]
 8004c90:	4b25      	ldr	r3, [pc, #148]	; (8004d28 <_Z18SystemClock_Configv+0xc0>)
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	4a24      	ldr	r2, [pc, #144]	; (8004d28 <_Z18SystemClock_Configv+0xc0>)
 8004c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c9a:	6413      	str	r3, [r2, #64]	; 0x40
 8004c9c:	4b22      	ldr	r3, [pc, #136]	; (8004d28 <_Z18SystemClock_Configv+0xc0>)
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca4:	60bb      	str	r3, [r7, #8]
 8004ca6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ca8:	2300      	movs	r3, #0
 8004caa:	607b      	str	r3, [r7, #4]
 8004cac:	4b1f      	ldr	r3, [pc, #124]	; (8004d2c <_Z18SystemClock_Configv+0xc4>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a1e      	ldr	r2, [pc, #120]	; (8004d2c <_Z18SystemClock_Configv+0xc4>)
 8004cb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cb6:	6013      	str	r3, [r2, #0]
 8004cb8:	4b1c      	ldr	r3, [pc, #112]	; (8004d2c <_Z18SystemClock_Configv+0xc4>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cc0:	607b      	str	r3, [r7, #4]
 8004cc2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004cc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ccc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004cce:	2302      	movs	r3, #2
 8004cd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004cd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8004cd8:	2306      	movs	r3, #6
 8004cda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004cdc:	23a8      	movs	r3, #168	; 0xa8
 8004cde:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004ce4:	2304      	movs	r3, #4
 8004ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ce8:	f107 0320 	add.w	r3, r7, #32
 8004cec:	4618      	mov	r0, r3
 8004cee:	f003 fb49 	bl	8008384 <HAL_RCC_OscConfig>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
  {

  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004cf6:	230f      	movs	r3, #15
 8004cf8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004d02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004d06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004d08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004d0e:	f107 030c 	add.w	r3, r7, #12
 8004d12:	2105      	movs	r1, #5
 8004d14:	4618      	mov	r0, r3
 8004d16:	f003 fda5 	bl	8008864 <HAL_RCC_ClockConfig>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
  {

  }
}
 8004d1e:	bf00      	nop
 8004d20:	3750      	adds	r7, #80	; 0x50
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	40023800 	.word	0x40023800
 8004d2c:	40007000 	.word	0x40007000

08004d30 <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8004d30:	b5b0      	push	{r4, r5, r7, lr}
 8004d32:	b088      	sub	sp, #32
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	61f8      	str	r0, [r7, #28]
  /* Infinite loop */
  for(;;)
  {

//    data = osMailAlloc(QueueHandle, osWaitForever); /* Allocate memory */
	  data_imu_raw = process_MPU(true,false);
 8004d38:	4c10      	ldr	r4, [pc, #64]	; (8004d7c <_Z16StartDefaultTaskPKv+0x4c>)
 8004d3a:	463b      	mov	r3, r7
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	2101      	movs	r1, #1
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7fd f9f5 	bl	8002130 <_Z11process_MPUbb>
 8004d46:	4625      	mov	r5, r4
 8004d48:	463c      	mov	r4, r7
 8004d4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d52:	e885 0003 	stmia.w	r5, {r0, r1}
	  osMessagePut(QueueHandle , (uint32_t) (&data_imu_raw), 200);
 8004d56:	4b0a      	ldr	r3, [pc, #40]	; (8004d80 <_Z16StartDefaultTaskPKv+0x50>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4908      	ldr	r1, [pc, #32]	; (8004d7c <_Z16StartDefaultTaskPKv+0x4c>)
 8004d5c:	22c8      	movs	r2, #200	; 0xc8
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f006 f9a8 	bl	800b0b4 <osMessagePut>
	  adding_raw();
 8004d64:	f7fd f954 	bl	8002010 <_Z10adding_rawv>
	  i++;
 8004d68:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <_Z16StartDefaultTaskPKv+0x54>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	4a05      	ldr	r2, [pc, #20]	; (8004d84 <_Z16StartDefaultTaskPKv+0x54>)
 8004d70:	6013      	str	r3, [r2, #0]
	//	     osDelay(2);
	  osDelay(1);
 8004d72:	2001      	movs	r0, #1
 8004d74:	f006 f961 	bl	800b03a <osDelay>
	  data_imu_raw = process_MPU(true,false);
 8004d78:	e7de      	b.n	8004d38 <_Z16StartDefaultTaskPKv+0x8>
 8004d7a:	bf00      	nop
 8004d7c:	20000700 	.word	0x20000700
 8004d80:	20000678 	.word	0x20000678
 8004d84:	200006a0 	.word	0x200006a0

08004d88 <_Z11StartTask03PKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask03(void const * argument)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
//	  print_euler_compare(com_state,magd_state,drone_state);
//	  print_magnet(mag_data);
//	  print_raw(data_imu_buffer);
//	  print_raw_mag(data_imu_buffer, mag_data);
//	  print_euler(drone_state);
	  print_euler_compare(com_state,magd_state,drone_state);
 8004d90:	4b16      	ldr	r3, [pc, #88]	; (8004dec <_Z11StartTask03PKv+0x64>)
 8004d92:	edd3 3a00 	vldr	s7, [r3]
 8004d96:	ed93 4a01 	vldr	s8, [r3, #4]
 8004d9a:	edd3 4a02 	vldr	s9, [r3, #8]
 8004d9e:	4b14      	ldr	r3, [pc, #80]	; (8004df0 <_Z11StartTask03PKv+0x68>)
 8004da0:	ed93 5a00 	vldr	s10, [r3]
 8004da4:	edd3 5a01 	vldr	s11, [r3, #4]
 8004da8:	ed93 6a02 	vldr	s12, [r3, #8]
 8004dac:	4b11      	ldr	r3, [pc, #68]	; (8004df4 <_Z11StartTask03PKv+0x6c>)
 8004dae:	edd3 6a00 	vldr	s13, [r3]
 8004db2:	ed93 7a01 	vldr	s14, [r3, #4]
 8004db6:	edd3 7a02 	vldr	s15, [r3, #8]
 8004dba:	eeb0 3a63 	vmov.f32	s6, s7
 8004dbe:	eef0 3a44 	vmov.f32	s7, s8
 8004dc2:	eeb0 4a64 	vmov.f32	s8, s9
 8004dc6:	eef0 1a45 	vmov.f32	s3, s10
 8004dca:	eeb0 2a65 	vmov.f32	s4, s11
 8004dce:	eef0 2a46 	vmov.f32	s5, s12
 8004dd2:	eeb0 0a66 	vmov.f32	s0, s13
 8004dd6:	eef0 0a47 	vmov.f32	s1, s14
 8004dda:	eeb0 1a67 	vmov.f32	s2, s15
 8004dde:	f7fe fcb3 	bl	8003748 <_Z19print_euler_compare11EULER_angleS_S_>

	  osDelay(45);
 8004de2:	202d      	movs	r0, #45	; 0x2d
 8004de4:	f006 f929 	bl	800b03a <osDelay>
	  print_euler_compare(com_state,magd_state,drone_state);
 8004de8:	e7d2      	b.n	8004d90 <_Z11StartTask03PKv+0x8>
 8004dea:	bf00      	nop
 8004dec:	20000754 	.word	0x20000754
 8004df0:	20000760 	.word	0x20000760
 8004df4:	2000076c 	.word	0x2000076c

08004df8 <_Z11StartTask02PKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask02(void const * argument)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  nRF24_CE_H; // start receiving
 8004e00:	2201      	movs	r2, #1
 8004e02:	2110      	movs	r1, #16
 8004e04:	480d      	ldr	r0, [pc, #52]	; (8004e3c <_Z11StartTask02PKv+0x44>)
 8004e06:	f002 f9a3 	bl	8007150 <HAL_GPIO_WritePin>
	  if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) {
 8004e0a:	f000 ff6f 	bl	8005cec <nRF24_GetStatus_RXFIFO>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	bf14      	ite	ne
 8004e14:	2301      	movne	r3, #1
 8004e16:	2300      	moveq	r3, #0
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d009      	beq.n	8004e32 <_Z11StartTask02PKv+0x3a>
	 //	    	  IRQ = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4);
	 //	          // the RX FIFO have some data, take a note what nRF24 can hold up to three payloads of 32 bytes...
	 	          pipe = nRF24_ReadPayload(nRF24_payload, &payload_length); // read a payload to buffer
 8004e1e:	4908      	ldr	r1, [pc, #32]	; (8004e40 <_Z11StartTask02PKv+0x48>)
 8004e20:	4808      	ldr	r0, [pc, #32]	; (8004e44 <_Z11StartTask02PKv+0x4c>)
 8004e22:	f000 ff83 	bl	8005d2c <nRF24_ReadPayload>
 8004e26:	4603      	mov	r3, r0
 8004e28:	461a      	mov	r2, r3
 8004e2a:	4b07      	ldr	r3, [pc, #28]	; (8004e48 <_Z11StartTask02PKv+0x50>)
 8004e2c:	701a      	strb	r2, [r3, #0]
	 	          nRF24_ClearIRQFlags(); // clear any pending IRQ bits
 8004e2e:	f000 ff68 	bl	8005d02 <nRF24_ClearIRQFlags>

	 	      }
	  osDelay(100);
 8004e32:	2064      	movs	r0, #100	; 0x64
 8004e34:	f006 f901 	bl	800b03a <osDelay>
	  nRF24_CE_H; // start receiving
 8004e38:	e7e2      	b.n	8004e00 <_Z11StartTask02PKv+0x8>
 8004e3a:	bf00      	nop
 8004e3c:	40020800 	.word	0x40020800
 8004e40:	20000550 	.word	0x20000550
 8004e44:	20000544 	.word	0x20000544
 8004e48:	20000551 	.word	0x20000551
 8004e4c:	00000000 	.word	0x00000000

08004e50 <_Z14filterFunctionPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_filterFunction */
void filterFunction(void const * argument)
{
 8004e50:	b590      	push	{r4, r7, lr}
 8004e52:	b08b      	sub	sp, #44	; 0x2c
 8004e54:	af02      	add	r7, sp, #8
 8004e56:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN filterFunction */
  /* Infinite loop */
  for(;;)
  {

		data_imu_temp.Gyro_x  = 0;
 8004e58:	4b3f      	ldr	r3, [pc, #252]	; (8004f58 <_Z14filterFunctionPKv+0x108>)
 8004e5a:	f04f 0200 	mov.w	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]
		data_imu_temp.Gyro_y  = 0;
 8004e60:	4b3d      	ldr	r3, [pc, #244]	; (8004f58 <_Z14filterFunctionPKv+0x108>)
 8004e62:	f04f 0200 	mov.w	r2, #0
 8004e66:	605a      	str	r2, [r3, #4]
		data_imu_temp.Gyro_z  = 0;
 8004e68:	4b3b      	ldr	r3, [pc, #236]	; (8004f58 <_Z14filterFunctionPKv+0x108>)
 8004e6a:	f04f 0200 	mov.w	r2, #0
 8004e6e:	609a      	str	r2, [r3, #8]

		data_imu_temp.Acc_x  = 0;
 8004e70:	4b39      	ldr	r3, [pc, #228]	; (8004f58 <_Z14filterFunctionPKv+0x108>)
 8004e72:	f04f 0200 	mov.w	r2, #0
 8004e76:	60da      	str	r2, [r3, #12]
		data_imu_temp.Acc_y  = 0;
 8004e78:	4b37      	ldr	r3, [pc, #220]	; (8004f58 <_Z14filterFunctionPKv+0x108>)
 8004e7a:	f04f 0200 	mov.w	r2, #0
 8004e7e:	611a      	str	r2, [r3, #16]
		data_imu_temp.Acc_z  = 0;
 8004e80:	4b35      	ldr	r3, [pc, #212]	; (8004f58 <_Z14filterFunctionPKv+0x108>)
 8004e82:	f04f 0200 	mov.w	r2, #0
 8004e86:	615a      	str	r2, [r3, #20]
	  if(i!=0){
 8004e88:	4b34      	ldr	r3, [pc, #208]	; (8004f5c <_Z14filterFunctionPKv+0x10c>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 81b7 	beq.w	8005200 <_Z14filterFunctionPKv+0x3b0>
		  for(int count = 0; count < 10; count++){
 8004e92:	2300      	movs	r3, #0
 8004e94:	61fb      	str	r3, [r7, #28]
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	2b09      	cmp	r3, #9
 8004e9a:	dc67      	bgt.n	8004f6c <_Z14filterFunctionPKv+0x11c>
		  	retvalue = osMessageGet(QueueHandle, 10);
 8004e9c:	4b30      	ldr	r3, [pc, #192]	; (8004f60 <_Z14filterFunctionPKv+0x110>)
 8004e9e:	6819      	ldr	r1, [r3, #0]
 8004ea0:	4c30      	ldr	r4, [pc, #192]	; (8004f64 <_Z14filterFunctionPKv+0x114>)
 8004ea2:	463b      	mov	r3, r7
 8004ea4:	220a      	movs	r2, #10
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f006 f944 	bl	800b134 <osMessageGet>
 8004eac:	463b      	mov	r3, r7
 8004eae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004eb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		  	ptr = (IMU_data*) retvalue.value.p;
 8004eb6:	4b2b      	ldr	r3, [pc, #172]	; (8004f64 <_Z14filterFunctionPKv+0x114>)
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	4a2b      	ldr	r2, [pc, #172]	; (8004f68 <_Z14filterFunctionPKv+0x118>)
 8004ebc:	6013      	str	r3, [r2, #0]
		  	data_imu_temp.Acc_x += ptr->Acc_x;
 8004ebe:	4b26      	ldr	r3, [pc, #152]	; (8004f58 <_Z14filterFunctionPKv+0x108>)
 8004ec0:	ed93 7a03 	vldr	s14, [r3, #12]
 8004ec4:	4b28      	ldr	r3, [pc, #160]	; (8004f68 <_Z14filterFunctionPKv+0x118>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	edd3 7a03 	vldr	s15, [r3, #12]
 8004ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ed0:	4b21      	ldr	r3, [pc, #132]	; (8004f58 <_Z14filterFunctionPKv+0x108>)
 8004ed2:	edc3 7a03 	vstr	s15, [r3, #12]
		  	data_imu_temp.Acc_y += ptr->Acc_y;
 8004ed6:	4b20      	ldr	r3, [pc, #128]	; (8004f58 <_Z14filterFunctionPKv+0x108>)
 8004ed8:	ed93 7a04 	vldr	s14, [r3, #16]
 8004edc:	4b22      	ldr	r3, [pc, #136]	; (8004f68 <_Z14filterFunctionPKv+0x118>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	edd3 7a04 	vldr	s15, [r3, #16]
 8004ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ee8:	4b1b      	ldr	r3, [pc, #108]	; (8004f58 <_Z14filterFunctionPKv+0x108>)
 8004eea:	edc3 7a04 	vstr	s15, [r3, #16]
		  	data_imu_temp.Acc_z += ptr->Acc_z;
 8004eee:	4b1a      	ldr	r3, [pc, #104]	; (8004f58 <_Z14filterFunctionPKv+0x108>)
 8004ef0:	ed93 7a05 	vldr	s14, [r3, #20]
 8004ef4:	4b1c      	ldr	r3, [pc, #112]	; (8004f68 <_Z14filterFunctionPKv+0x118>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	edd3 7a05 	vldr	s15, [r3, #20]
 8004efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f00:	4b15      	ldr	r3, [pc, #84]	; (8004f58 <_Z14filterFunctionPKv+0x108>)
 8004f02:	edc3 7a05 	vstr	s15, [r3, #20]

		  	data_imu_temp.Gyro_x += ptr->Gyro_x;
 8004f06:	4b14      	ldr	r3, [pc, #80]	; (8004f58 <_Z14filterFunctionPKv+0x108>)
 8004f08:	ed93 7a00 	vldr	s14, [r3]
 8004f0c:	4b16      	ldr	r3, [pc, #88]	; (8004f68 <_Z14filterFunctionPKv+0x118>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	edd3 7a00 	vldr	s15, [r3]
 8004f14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f18:	4b0f      	ldr	r3, [pc, #60]	; (8004f58 <_Z14filterFunctionPKv+0x108>)
 8004f1a:	edc3 7a00 	vstr	s15, [r3]
		  	data_imu_temp.Gyro_y += ptr->Gyro_y;
 8004f1e:	4b0e      	ldr	r3, [pc, #56]	; (8004f58 <_Z14filterFunctionPKv+0x108>)
 8004f20:	ed93 7a01 	vldr	s14, [r3, #4]
 8004f24:	4b10      	ldr	r3, [pc, #64]	; (8004f68 <_Z14filterFunctionPKv+0x118>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f30:	4b09      	ldr	r3, [pc, #36]	; (8004f58 <_Z14filterFunctionPKv+0x108>)
 8004f32:	edc3 7a01 	vstr	s15, [r3, #4]
		  	data_imu_temp.Gyro_z += ptr->Gyro_z;
 8004f36:	4b08      	ldr	r3, [pc, #32]	; (8004f58 <_Z14filterFunctionPKv+0x108>)
 8004f38:	ed93 7a02 	vldr	s14, [r3, #8]
 8004f3c:	4b0a      	ldr	r3, [pc, #40]	; (8004f68 <_Z14filterFunctionPKv+0x118>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	edd3 7a02 	vldr	s15, [r3, #8]
 8004f44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f48:	4b03      	ldr	r3, [pc, #12]	; (8004f58 <_Z14filterFunctionPKv+0x108>)
 8004f4a:	edc3 7a02 	vstr	s15, [r3, #8]
		  for(int count = 0; count < 10; count++){
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	3301      	adds	r3, #1
 8004f52:	61fb      	str	r3, [r7, #28]
 8004f54:	e79f      	b.n	8004e96 <_Z14filterFunctionPKv+0x46>
 8004f56:	bf00      	nop
 8004f58:	200006e8 	.word	0x200006e8
 8004f5c:	200006a0 	.word	0x200006a0
 8004f60:	20000678 	.word	0x20000678
 8004f64:	200006ac 	.word	0x200006ac
 8004f68:	200006a8 	.word	0x200006a8
		  }
		  gyro_lpf.update(data_imu_temp.Gyro_x /i);
 8004f6c:	4bcc      	ldr	r3, [pc, #816]	; (80052a0 <_Z14filterFunctionPKv+0x450>)
 8004f6e:	ed93 7a00 	vldr	s14, [r3]
 8004f72:	4bcc      	ldr	r3, [pc, #816]	; (80052a4 <_Z14filterFunctionPKv+0x454>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	ee07 3a90 	vmov	s15, r3
 8004f7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f7e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004f82:	ee16 0a90 	vmov	r0, s13
 8004f86:	f7fb fa8f 	bl	80004a8 <__aeabi_f2d>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	460c      	mov	r4, r1
 8004f8e:	ec44 3b10 	vmov	d0, r3, r4
 8004f92:	48c5      	ldr	r0, [pc, #788]	; (80052a8 <_Z14filterFunctionPKv+0x458>)
 8004f94:	f7fc fc06 	bl	80017a4 <_ZN3LPF6updateEd>
		  gyro_lpf1.update(data_imu_temp.Gyro_y /i);
 8004f98:	4bc1      	ldr	r3, [pc, #772]	; (80052a0 <_Z14filterFunctionPKv+0x450>)
 8004f9a:	ed93 7a01 	vldr	s14, [r3, #4]
 8004f9e:	4bc1      	ldr	r3, [pc, #772]	; (80052a4 <_Z14filterFunctionPKv+0x454>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	ee07 3a90 	vmov	s15, r3
 8004fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004faa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004fae:	ee16 0a90 	vmov	r0, s13
 8004fb2:	f7fb fa79 	bl	80004a8 <__aeabi_f2d>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	460c      	mov	r4, r1
 8004fba:	ec44 3b10 	vmov	d0, r3, r4
 8004fbe:	48bb      	ldr	r0, [pc, #748]	; (80052ac <_Z14filterFunctionPKv+0x45c>)
 8004fc0:	f7fc fbf0 	bl	80017a4 <_ZN3LPF6updateEd>
		  gyro_lpf2.update(data_imu_temp.Gyro_z /i);
 8004fc4:	4bb6      	ldr	r3, [pc, #728]	; (80052a0 <_Z14filterFunctionPKv+0x450>)
 8004fc6:	ed93 7a02 	vldr	s14, [r3, #8]
 8004fca:	4bb6      	ldr	r3, [pc, #728]	; (80052a4 <_Z14filterFunctionPKv+0x454>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	ee07 3a90 	vmov	s15, r3
 8004fd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fd6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004fda:	ee16 0a90 	vmov	r0, s13
 8004fde:	f7fb fa63 	bl	80004a8 <__aeabi_f2d>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	460c      	mov	r4, r1
 8004fe6:	ec44 3b10 	vmov	d0, r3, r4
 8004fea:	48b1      	ldr	r0, [pc, #708]	; (80052b0 <_Z14filterFunctionPKv+0x460>)
 8004fec:	f7fc fbda 	bl	80017a4 <_ZN3LPF6updateEd>

		  acc_lpf.update(data_imu_temp.Acc_x/i);
 8004ff0:	4bab      	ldr	r3, [pc, #684]	; (80052a0 <_Z14filterFunctionPKv+0x450>)
 8004ff2:	ed93 7a03 	vldr	s14, [r3, #12]
 8004ff6:	4bab      	ldr	r3, [pc, #684]	; (80052a4 <_Z14filterFunctionPKv+0x454>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	ee07 3a90 	vmov	s15, r3
 8004ffe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005002:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005006:	ee16 0a90 	vmov	r0, s13
 800500a:	f7fb fa4d 	bl	80004a8 <__aeabi_f2d>
 800500e:	4603      	mov	r3, r0
 8005010:	460c      	mov	r4, r1
 8005012:	ec44 3b10 	vmov	d0, r3, r4
 8005016:	48a7      	ldr	r0, [pc, #668]	; (80052b4 <_Z14filterFunctionPKv+0x464>)
 8005018:	f7fc fbc4 	bl	80017a4 <_ZN3LPF6updateEd>
		  acc_lpf1.update(data_imu_temp.Acc_y/i);
 800501c:	4ba0      	ldr	r3, [pc, #640]	; (80052a0 <_Z14filterFunctionPKv+0x450>)
 800501e:	ed93 7a04 	vldr	s14, [r3, #16]
 8005022:	4ba0      	ldr	r3, [pc, #640]	; (80052a4 <_Z14filterFunctionPKv+0x454>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	ee07 3a90 	vmov	s15, r3
 800502a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800502e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005032:	ee16 0a90 	vmov	r0, s13
 8005036:	f7fb fa37 	bl	80004a8 <__aeabi_f2d>
 800503a:	4603      	mov	r3, r0
 800503c:	460c      	mov	r4, r1
 800503e:	ec44 3b10 	vmov	d0, r3, r4
 8005042:	489d      	ldr	r0, [pc, #628]	; (80052b8 <_Z14filterFunctionPKv+0x468>)
 8005044:	f7fc fbae 	bl	80017a4 <_ZN3LPF6updateEd>

		  acc_lpf2.update(data_imu_temp.Acc_z/i);
 8005048:	4b95      	ldr	r3, [pc, #596]	; (80052a0 <_Z14filterFunctionPKv+0x450>)
 800504a:	ed93 7a05 	vldr	s14, [r3, #20]
 800504e:	4b95      	ldr	r3, [pc, #596]	; (80052a4 <_Z14filterFunctionPKv+0x454>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	ee07 3a90 	vmov	s15, r3
 8005056:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800505a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800505e:	ee16 0a90 	vmov	r0, s13
 8005062:	f7fb fa21 	bl	80004a8 <__aeabi_f2d>
 8005066:	4603      	mov	r3, r0
 8005068:	460c      	mov	r4, r1
 800506a:	ec44 3b10 	vmov	d0, r3, r4
 800506e:	4893      	ldr	r0, [pc, #588]	; (80052bc <_Z14filterFunctionPKv+0x46c>)
 8005070:	f7fc fb98 	bl	80017a4 <_ZN3LPF6updateEd>

	  data_imu_buffer.Acc_x = acc_lpf.get();
 8005074:	488f      	ldr	r0, [pc, #572]	; (80052b4 <_Z14filterFunctionPKv+0x464>)
 8005076:	f7fc fc26 	bl	80018c6 <_ZN3LPF3getEv>
 800507a:	ec54 3b10 	vmov	r3, r4, d0
 800507e:	4618      	mov	r0, r3
 8005080:	4621      	mov	r1, r4
 8005082:	f7fb fd4b 	bl	8000b1c <__aeabi_d2f>
 8005086:	4602      	mov	r2, r0
 8005088:	4b8d      	ldr	r3, [pc, #564]	; (80052c0 <_Z14filterFunctionPKv+0x470>)
 800508a:	60da      	str	r2, [r3, #12]
	  data_imu_buffer.Acc_y = acc_lpf1.get();
 800508c:	488a      	ldr	r0, [pc, #552]	; (80052b8 <_Z14filterFunctionPKv+0x468>)
 800508e:	f7fc fc1a 	bl	80018c6 <_ZN3LPF3getEv>
 8005092:	ec54 3b10 	vmov	r3, r4, d0
 8005096:	4618      	mov	r0, r3
 8005098:	4621      	mov	r1, r4
 800509a:	f7fb fd3f 	bl	8000b1c <__aeabi_d2f>
 800509e:	4602      	mov	r2, r0
 80050a0:	4b87      	ldr	r3, [pc, #540]	; (80052c0 <_Z14filterFunctionPKv+0x470>)
 80050a2:	611a      	str	r2, [r3, #16]
	  data_imu_buffer.Acc_z = acc_lpf2.get();
 80050a4:	4885      	ldr	r0, [pc, #532]	; (80052bc <_Z14filterFunctionPKv+0x46c>)
 80050a6:	f7fc fc0e 	bl	80018c6 <_ZN3LPF3getEv>
 80050aa:	ec54 3b10 	vmov	r3, r4, d0
 80050ae:	4618      	mov	r0, r3
 80050b0:	4621      	mov	r1, r4
 80050b2:	f7fb fd33 	bl	8000b1c <__aeabi_d2f>
 80050b6:	4602      	mov	r2, r0
 80050b8:	4b81      	ldr	r3, [pc, #516]	; (80052c0 <_Z14filterFunctionPKv+0x470>)
 80050ba:	615a      	str	r2, [r3, #20]

	  data_imu_buffer.Gyro_x = gyro_lpf.get();
 80050bc:	487a      	ldr	r0, [pc, #488]	; (80052a8 <_Z14filterFunctionPKv+0x458>)
 80050be:	f7fc fc02 	bl	80018c6 <_ZN3LPF3getEv>
 80050c2:	ec54 3b10 	vmov	r3, r4, d0
 80050c6:	4618      	mov	r0, r3
 80050c8:	4621      	mov	r1, r4
 80050ca:	f7fb fd27 	bl	8000b1c <__aeabi_d2f>
 80050ce:	4602      	mov	r2, r0
 80050d0:	4b7b      	ldr	r3, [pc, #492]	; (80052c0 <_Z14filterFunctionPKv+0x470>)
 80050d2:	601a      	str	r2, [r3, #0]
	  data_imu_buffer.Gyro_y = gyro_lpf1.get();
 80050d4:	4875      	ldr	r0, [pc, #468]	; (80052ac <_Z14filterFunctionPKv+0x45c>)
 80050d6:	f7fc fbf6 	bl	80018c6 <_ZN3LPF3getEv>
 80050da:	ec54 3b10 	vmov	r3, r4, d0
 80050de:	4618      	mov	r0, r3
 80050e0:	4621      	mov	r1, r4
 80050e2:	f7fb fd1b 	bl	8000b1c <__aeabi_d2f>
 80050e6:	4602      	mov	r2, r0
 80050e8:	4b75      	ldr	r3, [pc, #468]	; (80052c0 <_Z14filterFunctionPKv+0x470>)
 80050ea:	605a      	str	r2, [r3, #4]
	  data_imu_buffer.Gyro_z = gyro_lpf2.get();
 80050ec:	4870      	ldr	r0, [pc, #448]	; (80052b0 <_Z14filterFunctionPKv+0x460>)
 80050ee:	f7fc fbea 	bl	80018c6 <_ZN3LPF3getEv>
 80050f2:	ec54 3b10 	vmov	r3, r4, d0
 80050f6:	4618      	mov	r0, r3
 80050f8:	4621      	mov	r1, r4
 80050fa:	f7fb fd0f 	bl	8000b1c <__aeabi_d2f>
 80050fe:	4602      	mov	r2, r0
 8005100:	4b6f      	ldr	r3, [pc, #444]	; (80052c0 <_Z14filterFunctionPKv+0x470>)
 8005102:	609a      	str	r2, [r3, #8]

	  data_imu_com.Gyro_x = (gyro_lpf.get() - bGx);
 8005104:	4868      	ldr	r0, [pc, #416]	; (80052a8 <_Z14filterFunctionPKv+0x458>)
 8005106:	f7fc fbde 	bl	80018c6 <_ZN3LPF3getEv>
 800510a:	ec51 0b10 	vmov	r0, r1, d0
 800510e:	4b6d      	ldr	r3, [pc, #436]	; (80052c4 <_Z14filterFunctionPKv+0x474>)
 8005110:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005114:	461a      	mov	r2, r3
 8005116:	4623      	mov	r3, r4
 8005118:	f7fb f866 	bl	80001e8 <__aeabi_dsub>
 800511c:	4603      	mov	r3, r0
 800511e:	460c      	mov	r4, r1
 8005120:	4618      	mov	r0, r3
 8005122:	4621      	mov	r1, r4
 8005124:	f7fb fcfa 	bl	8000b1c <__aeabi_d2f>
 8005128:	4602      	mov	r2, r0
 800512a:	4b67      	ldr	r3, [pc, #412]	; (80052c8 <_Z14filterFunctionPKv+0x478>)
 800512c:	601a      	str	r2, [r3, #0]
	  data_imu_com.Gyro_y = (gyro_lpf1.get() - bGy);
 800512e:	485f      	ldr	r0, [pc, #380]	; (80052ac <_Z14filterFunctionPKv+0x45c>)
 8005130:	f7fc fbc9 	bl	80018c6 <_ZN3LPF3getEv>
 8005134:	ec51 0b10 	vmov	r0, r1, d0
 8005138:	4b64      	ldr	r3, [pc, #400]	; (80052cc <_Z14filterFunctionPKv+0x47c>)
 800513a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800513e:	461a      	mov	r2, r3
 8005140:	4623      	mov	r3, r4
 8005142:	f7fb f851 	bl	80001e8 <__aeabi_dsub>
 8005146:	4603      	mov	r3, r0
 8005148:	460c      	mov	r4, r1
 800514a:	4618      	mov	r0, r3
 800514c:	4621      	mov	r1, r4
 800514e:	f7fb fce5 	bl	8000b1c <__aeabi_d2f>
 8005152:	4602      	mov	r2, r0
 8005154:	4b5c      	ldr	r3, [pc, #368]	; (80052c8 <_Z14filterFunctionPKv+0x478>)
 8005156:	605a      	str	r2, [r3, #4]
	  data_imu_com.Gyro_z = (gyro_lpf2.get()  - bGz);
 8005158:	4855      	ldr	r0, [pc, #340]	; (80052b0 <_Z14filterFunctionPKv+0x460>)
 800515a:	f7fc fbb4 	bl	80018c6 <_ZN3LPF3getEv>
 800515e:	ec51 0b10 	vmov	r0, r1, d0
 8005162:	4b5b      	ldr	r3, [pc, #364]	; (80052d0 <_Z14filterFunctionPKv+0x480>)
 8005164:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005168:	461a      	mov	r2, r3
 800516a:	4623      	mov	r3, r4
 800516c:	f7fb f83c 	bl	80001e8 <__aeabi_dsub>
 8005170:	4603      	mov	r3, r0
 8005172:	460c      	mov	r4, r1
 8005174:	4618      	mov	r0, r3
 8005176:	4621      	mov	r1, r4
 8005178:	f7fb fcd0 	bl	8000b1c <__aeabi_d2f>
 800517c:	4602      	mov	r2, r0
 800517e:	4b52      	ldr	r3, [pc, #328]	; (80052c8 <_Z14filterFunctionPKv+0x478>)
 8005180:	609a      	str	r2, [r3, #8]
//	  data_imu_buffer.Acc_x =  acc_lpf.update(Acc_x_/i);
//	  data_imu_buffer.Acc_y =  acc_lpf1.update(Acc_y_/i);
//	  data_imu_buffer.Acc_z =  acc_lpf2.update(Acc_z_/i);


	  data_imu_com.Acc_x =  acc_lpf.get() - bAx;
 8005182:	484c      	ldr	r0, [pc, #304]	; (80052b4 <_Z14filterFunctionPKv+0x464>)
 8005184:	f7fc fb9f 	bl	80018c6 <_ZN3LPF3getEv>
 8005188:	ec51 0b10 	vmov	r0, r1, d0
 800518c:	4b51      	ldr	r3, [pc, #324]	; (80052d4 <_Z14filterFunctionPKv+0x484>)
 800518e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005192:	461a      	mov	r2, r3
 8005194:	4623      	mov	r3, r4
 8005196:	f7fb f827 	bl	80001e8 <__aeabi_dsub>
 800519a:	4603      	mov	r3, r0
 800519c:	460c      	mov	r4, r1
 800519e:	4618      	mov	r0, r3
 80051a0:	4621      	mov	r1, r4
 80051a2:	f7fb fcbb 	bl	8000b1c <__aeabi_d2f>
 80051a6:	4602      	mov	r2, r0
 80051a8:	4b47      	ldr	r3, [pc, #284]	; (80052c8 <_Z14filterFunctionPKv+0x478>)
 80051aa:	60da      	str	r2, [r3, #12]
	  data_imu_com.Acc_y =  acc_lpf1.get()- bAy;
 80051ac:	4842      	ldr	r0, [pc, #264]	; (80052b8 <_Z14filterFunctionPKv+0x468>)
 80051ae:	f7fc fb8a 	bl	80018c6 <_ZN3LPF3getEv>
 80051b2:	ec51 0b10 	vmov	r0, r1, d0
 80051b6:	4b48      	ldr	r3, [pc, #288]	; (80052d8 <_Z14filterFunctionPKv+0x488>)
 80051b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80051bc:	461a      	mov	r2, r3
 80051be:	4623      	mov	r3, r4
 80051c0:	f7fb f812 	bl	80001e8 <__aeabi_dsub>
 80051c4:	4603      	mov	r3, r0
 80051c6:	460c      	mov	r4, r1
 80051c8:	4618      	mov	r0, r3
 80051ca:	4621      	mov	r1, r4
 80051cc:	f7fb fca6 	bl	8000b1c <__aeabi_d2f>
 80051d0:	4602      	mov	r2, r0
 80051d2:	4b3d      	ldr	r3, [pc, #244]	; (80052c8 <_Z14filterFunctionPKv+0x478>)
 80051d4:	611a      	str	r2, [r3, #16]
	  data_imu_com.Acc_z =  acc_lpf2.get()- bAz;
 80051d6:	4839      	ldr	r0, [pc, #228]	; (80052bc <_Z14filterFunctionPKv+0x46c>)
 80051d8:	f7fc fb75 	bl	80018c6 <_ZN3LPF3getEv>
 80051dc:	ec51 0b10 	vmov	r0, r1, d0
 80051e0:	4b3e      	ldr	r3, [pc, #248]	; (80052dc <_Z14filterFunctionPKv+0x48c>)
 80051e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80051e6:	461a      	mov	r2, r3
 80051e8:	4623      	mov	r3, r4
 80051ea:	f7fa fffd 	bl	80001e8 <__aeabi_dsub>
 80051ee:	4603      	mov	r3, r0
 80051f0:	460c      	mov	r4, r1
 80051f2:	4618      	mov	r0, r3
 80051f4:	4621      	mov	r1, r4
 80051f6:	f7fb fc91 	bl	8000b1c <__aeabi_d2f>
 80051fa:	4602      	mov	r2, r0
 80051fc:	4b32      	ldr	r3, [pc, #200]	; (80052c8 <_Z14filterFunctionPKv+0x478>)
 80051fe:	615a      	str	r2, [r3, #20]
//	  data_imu_buffer.Acc_y =  gyro_angle_p;
//	  data_imu_buffer.Acc_z =  gyro_angle_y;
//	  drone_state = ekf.getAngle();
//	  print_raw(data_imu_buffer);
	  }
	  magd_state = MadgwickAHRSupdateIMU(data_imu_com,0.01);
 8005200:	4b31      	ldr	r3, [pc, #196]	; (80052c8 <_Z14filterFunctionPKv+0x478>)
 8005202:	466c      	mov	r4, sp
 8005204:	f103 0210 	add.w	r2, r3, #16
 8005208:	e892 0003 	ldmia.w	r2, {r0, r1}
 800520c:	e884 0003 	stmia.w	r4, {r0, r1}
 8005210:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005212:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80052e0 <_Z14filterFunctionPKv+0x490>
 8005216:	f7fd fb67 	bl	80028e8 <_Z21MadgwickAHRSupdateIMU8IMU_dataf>
 800521a:	eef0 6a40 	vmov.f32	s13, s0
 800521e:	eeb0 7a60 	vmov.f32	s14, s1
 8005222:	eef0 7a41 	vmov.f32	s15, s2
 8005226:	4b2f      	ldr	r3, [pc, #188]	; (80052e4 <_Z14filterFunctionPKv+0x494>)
 8005228:	edc3 6a00 	vstr	s13, [r3]
 800522c:	ed83 7a01 	vstr	s14, [r3, #4]
 8005230:	edc3 7a02 	vstr	s15, [r3, #8]
	  com_state = complementary_filter(data_imu_com, 0.01, 0.98);
 8005234:	4b24      	ldr	r3, [pc, #144]	; (80052c8 <_Z14filterFunctionPKv+0x478>)
 8005236:	466c      	mov	r4, sp
 8005238:	f103 0210 	add.w	r2, r3, #16
 800523c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005240:	e884 0003 	stmia.w	r4, {r0, r1}
 8005244:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005246:	eddf 0a28 	vldr	s1, [pc, #160]	; 80052e8 <_Z14filterFunctionPKv+0x498>
 800524a:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80052e0 <_Z14filterFunctionPKv+0x490>
 800524e:	f7fd f953 	bl	80024f8 <_Z20complementary_filter8IMU_dataff>
 8005252:	eef0 6a40 	vmov.f32	s13, s0
 8005256:	eeb0 7a60 	vmov.f32	s14, s1
 800525a:	eef0 7a41 	vmov.f32	s15, s2
 800525e:	4b23      	ldr	r3, [pc, #140]	; (80052ec <_Z14filterFunctionPKv+0x49c>)
 8005260:	edc3 6a00 	vstr	s13, [r3]
 8005264:	ed83 7a01 	vstr	s14, [r3, #4]
 8005268:	edc3 7a02 	vstr	s15, [r3, #8]

//	  float mag_x = mag_data.Mag_x*cos(com_state.pitch) + mag_data.Mag_y*sin(com_state.roll)*sin(com_state.pitch) + mag_data.Mag_z*cos(com_state.roll)*sin(com_state.pitch);
//	  float mag_y = mag_data.Mag_y*cos(com_state.roll) - mag_data.Mag_z* sin(com_state.roll);
	  com_state.yaw = 180 * atan2(-mag_data.Mag_x,mag_data.Mag_y)/M_PI;
 800526c:	4b20      	ldr	r3, [pc, #128]	; (80052f0 <_Z14filterFunctionPKv+0x4a0>)
 800526e:	edd3 7a00 	vldr	s15, [r3]
 8005272:	eef1 7a67 	vneg.f32	s15, s15
 8005276:	4b1e      	ldr	r3, [pc, #120]	; (80052f0 <_Z14filterFunctionPKv+0x4a0>)
 8005278:	ed93 7a01 	vldr	s14, [r3, #4]
 800527c:	eef0 0a47 	vmov.f32	s1, s14
 8005280:	eeb0 0a67 	vmov.f32	s0, s15
 8005284:	f7fc f8aa 	bl	80013dc <_ZSt5atan2ff>
 8005288:	eeb0 7a40 	vmov.f32	s14, s0
 800528c:	eddf 7a19 	vldr	s15, [pc, #100]	; 80052f4 <_Z14filterFunctionPKv+0x4a4>
 8005290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005294:	ee17 0a90 	vmov	r0, s15
 8005298:	f7fb f906 	bl	80004a8 <__aeabi_f2d>
 800529c:	e02c      	b.n	80052f8 <_Z14filterFunctionPKv+0x4a8>
 800529e:	bf00      	nop
 80052a0:	200006e8 	.word	0x200006e8
 80052a4:	200006a0 	.word	0x200006a0
 80052a8:	200007a0 	.word	0x200007a0
 80052ac:	200007f0 	.word	0x200007f0
 80052b0:	20000840 	.word	0x20000840
 80052b4:	20000890 	.word	0x20000890
 80052b8:	200008e0 	.word	0x200008e0
 80052bc:	20000930 	.word	0x20000930
 80052c0:	20000718 	.word	0x20000718
 80052c4:	200005c0 	.word	0x200005c0
 80052c8:	20000730 	.word	0x20000730
 80052cc:	200005c8 	.word	0x200005c8
 80052d0:	200005d0 	.word	0x200005d0
 80052d4:	200005a8 	.word	0x200005a8
 80052d8:	200005b0 	.word	0x200005b0
 80052dc:	200005b8 	.word	0x200005b8
 80052e0:	3c23d70a 	.word	0x3c23d70a
 80052e4:	20000760 	.word	0x20000760
 80052e8:	3f7ae148 	.word	0x3f7ae148
 80052ec:	2000076c 	.word	0x2000076c
 80052f0:	20000748 	.word	0x20000748
 80052f4:	43340000 	.word	0x43340000
 80052f8:	a33a      	add	r3, pc, #232	; (adr r3, 80053e4 <_Z14filterFunctionPKv+0x594>)
 80052fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fe:	f7fb fa55 	bl	80007ac <__aeabi_ddiv>
 8005302:	4603      	mov	r3, r0
 8005304:	460c      	mov	r4, r1
 8005306:	4618      	mov	r0, r3
 8005308:	4621      	mov	r1, r4
 800530a:	f7fb fc07 	bl	8000b1c <__aeabi_d2f>
 800530e:	4602      	mov	r2, r0
 8005310:	4b2b      	ldr	r3, [pc, #172]	; (80053c0 <_Z14filterFunctionPKv+0x570>)
 8005312:	609a      	str	r2, [r3, #8]

	  esc = controller.update(com_state,thrust_control);
 8005314:	4b2b      	ldr	r3, [pc, #172]	; (80053c4 <_Z14filterFunctionPKv+0x574>)
 8005316:	881a      	ldrh	r2, [r3, #0]
 8005318:	4c2b      	ldr	r4, [pc, #172]	; (80053c8 <_Z14filterFunctionPKv+0x578>)
 800531a:	4638      	mov	r0, r7
 800531c:	4b28      	ldr	r3, [pc, #160]	; (80053c0 <_Z14filterFunctionPKv+0x570>)
 800531e:	edd3 6a00 	vldr	s13, [r3]
 8005322:	ed93 7a01 	vldr	s14, [r3, #4]
 8005326:	edd3 7a02 	vldr	s15, [r3, #8]
 800532a:	eeb0 0a66 	vmov.f32	s0, s13
 800532e:	eef0 0a47 	vmov.f32	s1, s14
 8005332:	eeb0 1a67 	vmov.f32	s2, s15
 8005336:	4925      	ldr	r1, [pc, #148]	; (80053cc <_Z14filterFunctionPKv+0x57c>)
 8005338:	f7ff f9d2 	bl	80046e0 <_ZN15MotorController6updateE11EULER_anglet>
 800533c:	4623      	mov	r3, r4
 800533e:	463a      	mov	r2, r7
 8005340:	6810      	ldr	r0, [r2, #0]
 8005342:	6851      	ldr	r1, [r2, #4]
 8005344:	c303      	stmia	r3!, {r0, r1}
 8005346:	8912      	ldrh	r2, [r2, #8]
 8005348:	801a      	strh	r2, [r3, #0]
      if((ARMED == ARMED_)  && (BOARD_MODE == FLY_MODE)){
 800534a:	4b21      	ldr	r3, [pc, #132]	; (80053d0 <_Z14filterFunctionPKv+0x580>)
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d108      	bne.n	8005364 <_Z14filterFunctionPKv+0x514>
 8005352:	4b20      	ldr	r3, [pc, #128]	; (80053d4 <_Z14filterFunctionPKv+0x584>)
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d104      	bne.n	8005364 <_Z14filterFunctionPKv+0x514>
	      set_ESC(esc);
 800535a:	4b1b      	ldr	r3, [pc, #108]	; (80053c8 <_Z14filterFunctionPKv+0x578>)
 800535c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005360:	f7ff f90e 	bl	8004580 <_Z7set_ESC9ESC_value>
      }
	  magd_state.yaw = esc.esc_value1;
 8005364:	4b18      	ldr	r3, [pc, #96]	; (80053c8 <_Z14filterFunctionPKv+0x578>)
 8005366:	881b      	ldrh	r3, [r3, #0]
 8005368:	ee07 3a90 	vmov	s15, r3
 800536c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005370:	4b19      	ldr	r3, [pc, #100]	; (80053d8 <_Z14filterFunctionPKv+0x588>)
 8005372:	edc3 7a02 	vstr	s15, [r3, #8]
      drone_state.roll = esc.esc_value2;
 8005376:	4b14      	ldr	r3, [pc, #80]	; (80053c8 <_Z14filterFunctionPKv+0x578>)
 8005378:	885b      	ldrh	r3, [r3, #2]
 800537a:	ee07 3a90 	vmov	s15, r3
 800537e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005382:	4b16      	ldr	r3, [pc, #88]	; (80053dc <_Z14filterFunctionPKv+0x58c>)
 8005384:	edc3 7a00 	vstr	s15, [r3]
      drone_state.pitch = esc.esc_value3;
 8005388:	4b0f      	ldr	r3, [pc, #60]	; (80053c8 <_Z14filterFunctionPKv+0x578>)
 800538a:	889b      	ldrh	r3, [r3, #4]
 800538c:	ee07 3a90 	vmov	s15, r3
 8005390:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005394:	4b11      	ldr	r3, [pc, #68]	; (80053dc <_Z14filterFunctionPKv+0x58c>)
 8005396:	edc3 7a01 	vstr	s15, [r3, #4]
      drone_state.yaw = esc.esc_value4;
 800539a:	4b0b      	ldr	r3, [pc, #44]	; (80053c8 <_Z14filterFunctionPKv+0x578>)
 800539c:	88db      	ldrh	r3, [r3, #6]
 800539e:	ee07 3a90 	vmov	s15, r3
 80053a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053a6:	4b0d      	ldr	r3, [pc, #52]	; (80053dc <_Z14filterFunctionPKv+0x58c>)
 80053a8:	edc3 7a02 	vstr	s15, [r3, #8]
//	  pid_r_value = pid_pitch.round(pid_roll.Out);
////
//	  magd_state.pitch = pid_p_value;
//	  magd_state.roll = pid_r_value;
//	  com_state = cross2plus(com_state);
	  i = 0;
 80053ac:	4b0c      	ldr	r3, [pc, #48]	; (80053e0 <_Z14filterFunctionPKv+0x590>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	601a      	str	r2, [r3, #0]

	  delete_raw();
 80053b2:	f7fc fe8f 	bl	80020d4 <_Z10delete_rawv>
      osDelay(10);
 80053b6:	200a      	movs	r0, #10
 80053b8:	f005 fe3f 	bl	800b03a <osDelay>
  }
 80053bc:	e54c      	b.n	8004e58 <_Z14filterFunctionPKv+0x8>
 80053be:	bf00      	nop
 80053c0:	2000076c 	.word	0x2000076c
 80053c4:	20000dc0 	.word	0x20000dc0
 80053c8:	20000790 	.word	0x20000790
 80053cc:	20000b68 	.word	0x20000b68
 80053d0:	20000541 	.word	0x20000541
 80053d4:	20000540 	.word	0x20000540
 80053d8:	20000760 	.word	0x20000760
 80053dc:	20000754 	.word	0x20000754
 80053e0:	200006a0 	.word	0x200006a0
 80053e4:	54442d18 	.word	0x54442d18
 80053e8:	400921fb 	.word	0x400921fb

080053ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a09      	ldr	r2, [pc, #36]	; (8005420 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d101      	bne.n	8005402 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80053fe:	f000 ffdf 	bl	80063c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM7) {
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a07      	ldr	r2, [pc, #28]	; (8005424 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d104      	bne.n	8005416 <HAL_TIM_PeriodElapsedCallback+0x2a>
	  ulHighFrequencyTimerTicks ++;
 800540c:	4b06      	ldr	r3, [pc, #24]	; (8005428 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3301      	adds	r3, #1
 8005412:	4a05      	ldr	r2, [pc, #20]	; (8005428 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8005414:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END Callback 1 */
}
 8005416:	bf00      	nop
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	40002000 	.word	0x40002000
 8005424:	40001400 	.word	0x40001400
 8005428:	20000594 	.word	0x20000594

0800542c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800542c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800542e:	b09d      	sub	sp, #116	; 0x74
 8005430:	af0a      	add	r7, sp, #40	; 0x28
 8005432:	6378      	str	r0, [r7, #52]	; 0x34
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8005434:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005438:	48ab      	ldr	r0, [pc, #684]	; (80056e8 <HAL_UART_RxCpltCallback+0x2bc>)
 800543a:	f001 fea2 	bl	8007182 <HAL_GPIO_TogglePin>

	if (huart->Instance == USART1)  //current UART
 800543e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4aaa      	ldr	r2, [pc, #680]	; (80056ec <HAL_UART_RxCpltCallback+0x2c0>)
 8005444:	4293      	cmp	r3, r2
 8005446:	f040 80e7 	bne.w	8005618 <HAL_UART_RxCpltCallback+0x1ec>
	{

//		char trans_b[4];
		if(Rx_data[0] == 's'){
 800544a:	4ba9      	ldr	r3, [pc, #676]	; (80056f0 <HAL_UART_RxCpltCallback+0x2c4>)
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	2b73      	cmp	r3, #115	; 0x73
 8005450:	d111      	bne.n	8005476 <HAL_UART_RxCpltCallback+0x4a>
			j = 0;
 8005452:	4ba8      	ldr	r3, [pc, #672]	; (80056f4 <HAL_UART_RxCpltCallback+0x2c8>)
 8005454:	2200      	movs	r2, #0
 8005456:	601a      	str	r2, [r3, #0]
//			BOARD_MODE = FLY_MODE;

             for(int count = 0; count< 24; count++)
 8005458:	2300      	movs	r3, #0
 800545a:	647b      	str	r3, [r7, #68]	; 0x44
 800545c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800545e:	2b17      	cmp	r3, #23
 8005460:	f300 80ba 	bgt.w	80055d8 <HAL_UART_RxCpltCallback+0x1ac>
            	 Rx_buffer[count] = 0x00;
 8005464:	4aa4      	ldr	r2, [pc, #656]	; (80056f8 <HAL_UART_RxCpltCallback+0x2cc>)
 8005466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005468:	4413      	add	r3, r2
 800546a:	2200      	movs	r2, #0
 800546c:	701a      	strb	r2, [r3, #0]
             for(int count = 0; count< 24; count++)
 800546e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005470:	3301      	adds	r3, #1
 8005472:	647b      	str	r3, [r7, #68]	; 0x44
 8005474:	e7f2      	b.n	800545c <HAL_UART_RxCpltCallback+0x30>
		}
		else{
			if((Rx_data[0] != 'e')){
 8005476:	4b9e      	ldr	r3, [pc, #632]	; (80056f0 <HAL_UART_RxCpltCallback+0x2c4>)
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	2b65      	cmp	r3, #101	; 0x65
 800547c:	d00b      	beq.n	8005496 <HAL_UART_RxCpltCallback+0x6a>
			 Rx_buffer[j] = Rx_data[0];
 800547e:	4b9d      	ldr	r3, [pc, #628]	; (80056f4 <HAL_UART_RxCpltCallback+0x2c8>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a9b      	ldr	r2, [pc, #620]	; (80056f0 <HAL_UART_RxCpltCallback+0x2c4>)
 8005484:	7811      	ldrb	r1, [r2, #0]
 8005486:	4a9c      	ldr	r2, [pc, #624]	; (80056f8 <HAL_UART_RxCpltCallback+0x2cc>)
 8005488:	54d1      	strb	r1, [r2, r3]
			 j++;
 800548a:	4b9a      	ldr	r3, [pc, #616]	; (80056f4 <HAL_UART_RxCpltCallback+0x2c8>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3301      	adds	r3, #1
 8005490:	4a98      	ldr	r2, [pc, #608]	; (80056f4 <HAL_UART_RxCpltCallback+0x2c8>)
 8005492:	6013      	str	r3, [r2, #0]
 8005494:	e0a0      	b.n	80055d8 <HAL_UART_RxCpltCallback+0x1ac>
//			 HAL_UART_Receive_IT(&huart3, (uint8_t *) Rx_data, 1);

			}
			else{

				if(Rx_buffer[21] == 0x00){
 8005496:	4b98      	ldr	r3, [pc, #608]	; (80056f8 <HAL_UART_RxCpltCallback+0x2cc>)
 8005498:	7d5b      	ldrb	r3, [r3, #21]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d14d      	bne.n	800553a <HAL_UART_RxCpltCallback+0x10e>
					for(uint8_t k = 0; k<8; k++){
 800549e:	2300      	movs	r3, #0
 80054a0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054a4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80054a8:	2b07      	cmp	r3, #7
 80054aa:	d80d      	bhi.n	80054c8 <HAL_UART_RxCpltCallback+0x9c>
                        sbus_buffer[k] = Rx_buffer[k];
 80054ac:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80054b0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80054b4:	4990      	ldr	r1, [pc, #576]	; (80056f8 <HAL_UART_RxCpltCallback+0x2cc>)
 80054b6:	5c89      	ldrb	r1, [r1, r2]
 80054b8:	4a90      	ldr	r2, [pc, #576]	; (80056fc <HAL_UART_RxCpltCallback+0x2d0>)
 80054ba:	54d1      	strb	r1, [r2, r3]
					for(uint8_t k = 0; k<8; k++){
 80054bc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80054c0:	3301      	adds	r3, #1
 80054c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054c6:	e7ed      	b.n	80054a4 <HAL_UART_RxCpltCallback+0x78>
					}
				esc_value = sbus_decode(sbus_buffer);
 80054c8:	4c8d      	ldr	r4, [pc, #564]	; (8005700 <HAL_UART_RxCpltCallback+0x2d4>)
 80054ca:	f107 0320 	add.w	r3, r7, #32
 80054ce:	498b      	ldr	r1, [pc, #556]	; (80056fc <HAL_UART_RxCpltCallback+0x2d0>)
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7fe ff40 	bl	8004356 <_Z11sbus_decodePh>
 80054d6:	4623      	mov	r3, r4
 80054d8:	f107 0220 	add.w	r2, r7, #32
 80054dc:	6810      	ldr	r0, [r2, #0]
 80054de:	6851      	ldr	r1, [r2, #4]
 80054e0:	c303      	stmia	r3!, {r0, r1}
 80054e2:	8912      	ldrh	r2, [r2, #8]
 80054e4:	801a      	strh	r2, [r3, #0]
				if(check_CRC(esc_value)){
 80054e6:	4b86      	ldr	r3, [pc, #536]	; (8005700 <HAL_UART_RxCpltCallback+0x2d4>)
 80054e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80054ec:	f7fe ff94 	bl	8004418 <_Z9check_CRC9ESC_value>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d01d      	beq.n	8005532 <HAL_UART_RxCpltCallback+0x106>
					if(CRC_thurst(esc_value)){
 80054f6:	4b82      	ldr	r3, [pc, #520]	; (8005700 <HAL_UART_RxCpltCallback+0x2d4>)
 80054f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80054fc:	f7fe ffba 	bl	8004474 <_Z10CRC_thurst9ESC_value>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d004      	beq.n	8005510 <HAL_UART_RxCpltCallback+0xe4>
						thrust_control = esc_value.esc_value1;
 8005506:	4b7e      	ldr	r3, [pc, #504]	; (8005700 <HAL_UART_RxCpltCallback+0x2d4>)
 8005508:	881a      	ldrh	r2, [r3, #0]
 800550a:	4b7e      	ldr	r3, [pc, #504]	; (8005704 <HAL_UART_RxCpltCallback+0x2d8>)
 800550c:	801a      	strh	r2, [r3, #0]
 800550e:	e00c      	b.n	800552a <HAL_UART_RxCpltCallback+0xfe>
					}
					else{
						if(ARMED && (BOARD_MODE == TEST_MODE))
 8005510:	4b7d      	ldr	r3, [pc, #500]	; (8005708 <HAL_UART_RxCpltCallback+0x2dc>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d008      	beq.n	800552a <HAL_UART_RxCpltCallback+0xfe>
 8005518:	4b7c      	ldr	r3, [pc, #496]	; (800570c <HAL_UART_RxCpltCallback+0x2e0>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b03      	cmp	r3, #3
 800551e:	d104      	bne.n	800552a <HAL_UART_RxCpltCallback+0xfe>
				        set_ESC(esc_value);
 8005520:	4b77      	ldr	r3, [pc, #476]	; (8005700 <HAL_UART_RxCpltCallback+0x2d4>)
 8005522:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005526:	f7ff f82b 	bl	8004580 <_Z7set_ESC9ESC_value>
					}
				    j = 0;
 800552a:	4b72      	ldr	r3, [pc, #456]	; (80056f4 <HAL_UART_RxCpltCallback+0x2c8>)
 800552c:	2200      	movs	r2, #0
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	e04f      	b.n	80055d2 <HAL_UART_RxCpltCallback+0x1a6>
//				   	HAL_UART_Transmit(&huart1,(uint8_t*) ack, strlen(ack),100);
				}
				else{
					 j = 0;
 8005532:	4b70      	ldr	r3, [pc, #448]	; (80056f4 <HAL_UART_RxCpltCallback+0x2c8>)
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]
 8005538:	e04b      	b.n	80055d2 <HAL_UART_RxCpltCallback+0x1a6>
				}
				}
				else{
					 pid_temp = pid_decode(Rx_buffer);
 800553a:	4c75      	ldr	r4, [pc, #468]	; (8005710 <HAL_UART_RxCpltCallback+0x2e4>)
 800553c:	463b      	mov	r3, r7
 800553e:	496e      	ldr	r1, [pc, #440]	; (80056f8 <HAL_UART_RxCpltCallback+0x2cc>)
 8005540:	4618      	mov	r0, r3
 8005542:	f7fd fe71 	bl	8003228 <_Z10pid_decodePh>
 8005546:	463d      	mov	r5, r7
 8005548:	6828      	ldr	r0, [r5, #0]
 800554a:	6869      	ldr	r1, [r5, #4]
 800554c:	68aa      	ldr	r2, [r5, #8]
 800554e:	68eb      	ldr	r3, [r5, #12]
 8005550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005552:	6928      	ldr	r0, [r5, #16]
 8005554:	6969      	ldr	r1, [r5, #20]
 8005556:	c403      	stmia	r4!, {r0, r1}
 8005558:	8b2b      	ldrh	r3, [r5, #24]
 800555a:	8023      	strh	r3, [r4, #0]
					 if(check_CRC_pid(pid_temp)){
 800555c:	4c6c      	ldr	r4, [pc, #432]	; (8005710 <HAL_UART_RxCpltCallback+0x2e4>)
 800555e:	466b      	mov	r3, sp
 8005560:	f104 0210 	add.w	r2, r4, #16
 8005564:	ca07      	ldmia	r2, {r0, r1, r2}
 8005566:	c303      	stmia	r3!, {r0, r1}
 8005568:	801a      	strh	r2, [r3, #0]
 800556a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800556e:	f7fd ff69 	bl	8003444 <_Z13check_CRC_pid7PID_raw>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	bf14      	ite	ne
 8005578:	2301      	movne	r3, #1
 800557a:	2300      	moveq	r3, #0
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d027      	beq.n	80055d2 <HAL_UART_RxCpltCallback+0x1a6>
						 writeFlash(pid_temp.data);
 8005582:	4863      	ldr	r0, [pc, #396]	; (8005710 <HAL_UART_RxCpltCallback+0x2e4>)
 8005584:	f7fe fc6e 	bl	8003e64 <_Z10writeFlashPt>
						 pid = readFlash();
 8005588:	4c62      	ldr	r4, [pc, #392]	; (8005714 <HAL_UART_RxCpltCallback+0x2e8>)
 800558a:	463b      	mov	r3, r7
 800558c:	4618      	mov	r0, r3
 800558e:	f7fe fd71 	bl	8004074 <_Z9readFlashv>
 8005592:	4625      	mov	r5, r4
 8005594:	463c      	mov	r4, r7
 8005596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800559a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800559c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800559e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055a2:	6823      	ldr	r3, [r4, #0]
 80055a4:	602b      	str	r3, [r5, #0]
						 controller.loadPID(pid);
 80055a6:	4e5b      	ldr	r6, [pc, #364]	; (8005714 <HAL_UART_RxCpltCallback+0x2e8>)
 80055a8:	466d      	mov	r5, sp
 80055aa:	f106 040c 	add.w	r4, r6, #12
 80055ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80055ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80055be:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80055c2:	4855      	ldr	r0, [pc, #340]	; (8005718 <HAL_UART_RxCpltCallback+0x2ec>)
 80055c4:	f7fe fffa 	bl	80045bc <_ZN15MotorController7loadPIDE9PID_value>
//						 pid_roll.load(pid.Kp1/100,pid.Ki1/100,pid.Kd1/100,0.01);
//						 pid_pitch.load(pid.Kp1/100,pid.Ki1/100,pid.Kd1/100,0.01);
						 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80055c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80055cc:	4846      	ldr	r0, [pc, #280]	; (80056e8 <HAL_UART_RxCpltCallback+0x2bc>)
 80055ce:	f001 fdd8 	bl	8007182 <HAL_GPIO_TogglePin>
					 }
				}
                Rx_data[0] = 0;
 80055d2:	4b47      	ldr	r3, [pc, #284]	; (80056f0 <HAL_UART_RxCpltCallback+0x2c4>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	701a      	strb	r2, [r3, #0]

//				HAL_UART_Receive_IT(&huart3, (uint8_t *) Rx_data, 1);
			}
		}

		if((Rx_data[0] == 'd')){
 80055d8:	4b45      	ldr	r3, [pc, #276]	; (80056f0 <HAL_UART_RxCpltCallback+0x2c4>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b64      	cmp	r3, #100	; 0x64
 80055de:	d10a      	bne.n	80055f6 <HAL_UART_RxCpltCallback+0x1ca>
			set_ESC(esc_stop);
 80055e0:	4b4e      	ldr	r3, [pc, #312]	; (800571c <HAL_UART_RxCpltCallback+0x2f0>)
 80055e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80055e6:	f7fe ffcb 	bl	8004580 <_Z7set_ESC9ESC_value>
			ARMED = UNARMED;
 80055ea:	4b47      	ldr	r3, [pc, #284]	; (8005708 <HAL_UART_RxCpltCallback+0x2dc>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	701a      	strb	r2, [r3, #0]
			BOARD_MODE = FLY_MODE;
 80055f0:	4b46      	ldr	r3, [pc, #280]	; (800570c <HAL_UART_RxCpltCallback+0x2e0>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	701a      	strb	r2, [r3, #0]
		}
		if(Rx_data[0] == 'a'){
 80055f6:	4b3e      	ldr	r3, [pc, #248]	; (80056f0 <HAL_UART_RxCpltCallback+0x2c4>)
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	2b61      	cmp	r3, #97	; 0x61
 80055fc:	d105      	bne.n	800560a <HAL_UART_RxCpltCallback+0x1de>
			ARMED = ARMED_;
 80055fe:	4b42      	ldr	r3, [pc, #264]	; (8005708 <HAL_UART_RxCpltCallback+0x2dc>)
 8005600:	2201      	movs	r2, #1
 8005602:	701a      	strb	r2, [r3, #0]
			BOARD_MODE = FLY_MODE;
 8005604:	4b41      	ldr	r3, [pc, #260]	; (800570c <HAL_UART_RxCpltCallback+0x2e0>)
 8005606:	2200      	movs	r2, #0
 8005608:	701a      	strb	r2, [r3, #0]
		}
//
		if(Rx_data[0] == 't'){
 800560a:	4b39      	ldr	r3, [pc, #228]	; (80056f0 <HAL_UART_RxCpltCallback+0x2c4>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	2b74      	cmp	r3, #116	; 0x74
 8005610:	d102      	bne.n	8005618 <HAL_UART_RxCpltCallback+0x1ec>
			BOARD_MODE = TEST_MODE;
 8005612:	4b3e      	ldr	r3, [pc, #248]	; (800570c <HAL_UART_RxCpltCallback+0x2e0>)
 8005614:	2203      	movs	r2, #3
 8005616:	701a      	strb	r2, [r3, #0]
		}
	}


//
	if (huart->Instance == USART3)  //current UART
 8005618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a40      	ldr	r2, [pc, #256]	; (8005720 <HAL_UART_RxCpltCallback+0x2f4>)
 800561e:	4293      	cmp	r3, r2
 8005620:	f040 80c2 	bne.w	80057a8 <HAL_UART_RxCpltCallback+0x37c>
	{

//		char trans_b[4];
		if(Rx_data[0] == 's'){
 8005624:	4b32      	ldr	r3, [pc, #200]	; (80056f0 <HAL_UART_RxCpltCallback+0x2c4>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	2b73      	cmp	r3, #115	; 0x73
 800562a:	d111      	bne.n	8005650 <HAL_UART_RxCpltCallback+0x224>
			j = 0;
 800562c:	4b31      	ldr	r3, [pc, #196]	; (80056f4 <HAL_UART_RxCpltCallback+0x2c8>)
 800562e:	2200      	movs	r2, #0
 8005630:	601a      	str	r2, [r3, #0]
//			BOARD_MODE = FLY_MODE;
//			reading = true;
             for(int count = 0; count< 24; count++)
 8005632:	2300      	movs	r3, #0
 8005634:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005638:	2b17      	cmp	r3, #23
 800563a:	f300 80ac 	bgt.w	8005796 <HAL_UART_RxCpltCallback+0x36a>
            	 Rx_buffer[count] = 0x00;
 800563e:	4a2e      	ldr	r2, [pc, #184]	; (80056f8 <HAL_UART_RxCpltCallback+0x2cc>)
 8005640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005642:	4413      	add	r3, r2
 8005644:	2200      	movs	r2, #0
 8005646:	701a      	strb	r2, [r3, #0]
             for(int count = 0; count< 24; count++)
 8005648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800564a:	3301      	adds	r3, #1
 800564c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800564e:	e7f2      	b.n	8005636 <HAL_UART_RxCpltCallback+0x20a>
		}
		else{
			if(Rx_data[0] != 'e'){
 8005650:	4b27      	ldr	r3, [pc, #156]	; (80056f0 <HAL_UART_RxCpltCallback+0x2c4>)
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	2b65      	cmp	r3, #101	; 0x65
 8005656:	d00b      	beq.n	8005670 <HAL_UART_RxCpltCallback+0x244>
			 Rx_buffer[j] = Rx_data[0];
 8005658:	4b26      	ldr	r3, [pc, #152]	; (80056f4 <HAL_UART_RxCpltCallback+0x2c8>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a24      	ldr	r2, [pc, #144]	; (80056f0 <HAL_UART_RxCpltCallback+0x2c4>)
 800565e:	7811      	ldrb	r1, [r2, #0]
 8005660:	4a25      	ldr	r2, [pc, #148]	; (80056f8 <HAL_UART_RxCpltCallback+0x2cc>)
 8005662:	54d1      	strb	r1, [r2, r3]
			 j++;
 8005664:	4b23      	ldr	r3, [pc, #140]	; (80056f4 <HAL_UART_RxCpltCallback+0x2c8>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3301      	adds	r3, #1
 800566a:	4a22      	ldr	r2, [pc, #136]	; (80056f4 <HAL_UART_RxCpltCallback+0x2c8>)
 800566c:	6013      	str	r3, [r2, #0]
 800566e:	e092      	b.n	8005796 <HAL_UART_RxCpltCallback+0x36a>
//			 HAL_UART_Receive_IT(&huart3, (uint8_t *) Rx_data, 1);

			}
			else{
				if(Rx_buffer[8] == 0x00){
 8005670:	4b21      	ldr	r3, [pc, #132]	; (80056f8 <HAL_UART_RxCpltCallback+0x2cc>)
 8005672:	7a1b      	ldrb	r3, [r3, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d155      	bne.n	8005724 <HAL_UART_RxCpltCallback+0x2f8>
					for(uint8_t k = 0; k<8; k++){
 8005678:	2300      	movs	r3, #0
 800567a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800567e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005682:	2b07      	cmp	r3, #7
 8005684:	d80d      	bhi.n	80056a2 <HAL_UART_RxCpltCallback+0x276>
                        sbus_buffer[k] = Rx_buffer[k];
 8005686:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800568a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800568e:	491a      	ldr	r1, [pc, #104]	; (80056f8 <HAL_UART_RxCpltCallback+0x2cc>)
 8005690:	5c89      	ldrb	r1, [r1, r2]
 8005692:	4a1a      	ldr	r2, [pc, #104]	; (80056fc <HAL_UART_RxCpltCallback+0x2d0>)
 8005694:	54d1      	strb	r1, [r2, r3]
					for(uint8_t k = 0; k<8; k++){
 8005696:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800569a:	3301      	adds	r3, #1
 800569c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80056a0:	e7ed      	b.n	800567e <HAL_UART_RxCpltCallback+0x252>
					}
				esc_value = sbus_decode(sbus_buffer);
 80056a2:	4c17      	ldr	r4, [pc, #92]	; (8005700 <HAL_UART_RxCpltCallback+0x2d4>)
 80056a4:	463b      	mov	r3, r7
 80056a6:	4915      	ldr	r1, [pc, #84]	; (80056fc <HAL_UART_RxCpltCallback+0x2d0>)
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7fe fe54 	bl	8004356 <_Z11sbus_decodePh>
 80056ae:	4623      	mov	r3, r4
 80056b0:	463a      	mov	r2, r7
 80056b2:	6810      	ldr	r0, [r2, #0]
 80056b4:	6851      	ldr	r1, [r2, #4]
 80056b6:	c303      	stmia	r3!, {r0, r1}
 80056b8:	8912      	ldrh	r2, [r2, #8]
 80056ba:	801a      	strh	r2, [r3, #0]
				if(check_CRC(esc_value)){
 80056bc:	4b10      	ldr	r3, [pc, #64]	; (8005700 <HAL_UART_RxCpltCallback+0x2d4>)
 80056be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80056c2:	f7fe fea9 	bl	8004418 <_Z9check_CRC9ESC_value>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d008      	beq.n	80056de <HAL_UART_RxCpltCallback+0x2b2>
				    set_ESC(esc_value);
 80056cc:	4b0c      	ldr	r3, [pc, #48]	; (8005700 <HAL_UART_RxCpltCallback+0x2d4>)
 80056ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80056d2:	f7fe ff55 	bl	8004580 <_Z7set_ESC9ESC_value>
				    j = 0;
 80056d6:	4b07      	ldr	r3, [pc, #28]	; (80056f4 <HAL_UART_RxCpltCallback+0x2c8>)
 80056d8:	2200      	movs	r2, #0
 80056da:	601a      	str	r2, [r3, #0]
 80056dc:	e058      	b.n	8005790 <HAL_UART_RxCpltCallback+0x364>
//				   	HAL_UART_Transmit(&huart1,(uint8_t*) ack, strlen(ack),100);
				}
				else{
					 j = 0;
 80056de:	4b05      	ldr	r3, [pc, #20]	; (80056f4 <HAL_UART_RxCpltCallback+0x2c8>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	e054      	b.n	8005790 <HAL_UART_RxCpltCallback+0x364>
 80056e6:	bf00      	nop
 80056e8:	40020400 	.word	0x40020400
 80056ec:	40011000 	.word	0x40011000
 80056f0:	2000067c 	.word	0x2000067c
 80056f4:	200006a4 	.word	0x200006a4
 80056f8:	20000680 	.word	0x20000680
 80056fc:	20000698 	.word	0x20000698
 8005700:	20000778 	.word	0x20000778
 8005704:	20000dc0 	.word	0x20000dc0
 8005708:	20000541 	.word	0x20000541
 800570c:	20000540 	.word	0x20000540
 8005710:	20000980 	.word	0x20000980
 8005714:	2000099c 	.word	0x2000099c
 8005718:	20000b68 	.word	0x20000b68
 800571c:	20000784 	.word	0x20000784
 8005720:	40004800 	.word	0x40004800
				}
				}
				else{
					 pid_temp = pid_decode(Rx_buffer);
 8005724:	4c27      	ldr	r4, [pc, #156]	; (80057c4 <HAL_UART_RxCpltCallback+0x398>)
 8005726:	463b      	mov	r3, r7
 8005728:	4927      	ldr	r1, [pc, #156]	; (80057c8 <HAL_UART_RxCpltCallback+0x39c>)
 800572a:	4618      	mov	r0, r3
 800572c:	f7fd fd7c 	bl	8003228 <_Z10pid_decodePh>
 8005730:	463d      	mov	r5, r7
 8005732:	6828      	ldr	r0, [r5, #0]
 8005734:	6869      	ldr	r1, [r5, #4]
 8005736:	68aa      	ldr	r2, [r5, #8]
 8005738:	68eb      	ldr	r3, [r5, #12]
 800573a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800573c:	6928      	ldr	r0, [r5, #16]
 800573e:	6969      	ldr	r1, [r5, #20]
 8005740:	c403      	stmia	r4!, {r0, r1}
 8005742:	8b2b      	ldrh	r3, [r5, #24]
 8005744:	8023      	strh	r3, [r4, #0]
					 if(check_CRC_pid(pid_temp)){
 8005746:	4c1f      	ldr	r4, [pc, #124]	; (80057c4 <HAL_UART_RxCpltCallback+0x398>)
 8005748:	466b      	mov	r3, sp
 800574a:	f104 0210 	add.w	r2, r4, #16
 800574e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005750:	c303      	stmia	r3!, {r0, r1}
 8005752:	801a      	strh	r2, [r3, #0]
 8005754:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005758:	f7fd fe74 	bl	8003444 <_Z13check_CRC_pid7PID_raw>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	bf14      	ite	ne
 8005762:	2301      	movne	r3, #1
 8005764:	2300      	moveq	r3, #0
 8005766:	b2db      	uxtb	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	d011      	beq.n	8005790 <HAL_UART_RxCpltCallback+0x364>
						 writeFlash(pid_temp.data);
 800576c:	4815      	ldr	r0, [pc, #84]	; (80057c4 <HAL_UART_RxCpltCallback+0x398>)
 800576e:	f7fe fb79 	bl	8003e64 <_Z10writeFlashPt>
						 pid = readFlash();
 8005772:	4c16      	ldr	r4, [pc, #88]	; (80057cc <HAL_UART_RxCpltCallback+0x3a0>)
 8005774:	463b      	mov	r3, r7
 8005776:	4618      	mov	r0, r3
 8005778:	f7fe fc7c 	bl	8004074 <_Z9readFlashv>
 800577c:	4625      	mov	r5, r4
 800577e:	463c      	mov	r4, r7
 8005780:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005782:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005786:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005788:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800578a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	602b      	str	r3, [r5, #0]
					 }
				}
                Rx_data[0] = 0;
 8005790:	4b0f      	ldr	r3, [pc, #60]	; (80057d0 <HAL_UART_RxCpltCallback+0x3a4>)
 8005792:	2200      	movs	r2, #0
 8005794:	701a      	strb	r2, [r3, #0]

//				HAL_UART_Receive_IT(&huart3, (uint8_t *) Rx_data, 1);
			}
		}

		if(Rx_data[0] == 'd'){
 8005796:	4b0e      	ldr	r3, [pc, #56]	; (80057d0 <HAL_UART_RxCpltCallback+0x3a4>)
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	2b64      	cmp	r3, #100	; 0x64
 800579c:	d104      	bne.n	80057a8 <HAL_UART_RxCpltCallback+0x37c>
			set_ESC(esc_stop);
 800579e:	4b0d      	ldr	r3, [pc, #52]	; (80057d4 <HAL_UART_RxCpltCallback+0x3a8>)
 80057a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80057a4:	f7fe feec 	bl	8004580 <_Z7set_ESC9ESC_value>
		}
	}
	 HAL_UART_Receive_IT(&huart1, (uint8_t *) Rx_data, 1);
 80057a8:	2201      	movs	r2, #1
 80057aa:	4909      	ldr	r1, [pc, #36]	; (80057d0 <HAL_UART_RxCpltCallback+0x3a4>)
 80057ac:	480a      	ldr	r0, [pc, #40]	; (80057d8 <HAL_UART_RxCpltCallback+0x3ac>)
 80057ae:	f004 fd75 	bl	800a29c <HAL_UART_Receive_IT>
	 HAL_UART_Receive_IT(&huart3, (uint8_t *) Rx_data, 1);
 80057b2:	2201      	movs	r2, #1
 80057b4:	4906      	ldr	r1, [pc, #24]	; (80057d0 <HAL_UART_RxCpltCallback+0x3a4>)
 80057b6:	4809      	ldr	r0, [pc, #36]	; (80057dc <HAL_UART_RxCpltCallback+0x3b0>)
 80057b8:	f004 fd70 	bl	800a29c <HAL_UART_Receive_IT>
}
 80057bc:	bf00      	nop
 80057be:	374c      	adds	r7, #76	; 0x4c
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057c4:	20000980 	.word	0x20000980
 80057c8:	20000680 	.word	0x20000680
 80057cc:	2000099c 	.word	0x2000099c
 80057d0:	2000067c 	.word	0x2000067c
 80057d4:	20000784 	.word	0x20000784
 80057d8:	200004a8 	.word	0x200004a8
 80057dc:	200003e8 	.word	0x200003e8

080057e0 <_ZN15MotorControllerD1Ev>:
class MotorController{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fd ff54 	bl	800369c <_ZN3PIDD1Ev>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fd ff4e 	bl	800369c <_ZN3PIDD1Ev>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	33c0      	adds	r3, #192	; 0xc0
 8005804:	4618      	mov	r0, r3
 8005806:	f7fd ff49 	bl	800369c <_ZN3PIDD1Ev>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	3338      	adds	r3, #56	; 0x38
 800580e:	4618      	mov	r0, r3
 8005810:	f7fd ff44 	bl	800369c <_ZN3PIDD1Ev>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4618      	mov	r0, r3
 8005818:	3708      	adds	r7, #8
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
	...

08005820 <_Z41__static_initialization_and_destruction_0ii>:
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d122      	bne.n	8005876 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005836:	4293      	cmp	r3, r2
 8005838:	d11d      	bne.n	8005876 <_Z41__static_initialization_and_destruction_0ii+0x56>
LPF gyro_lpf;
 800583a:	481b      	ldr	r0, [pc, #108]	; (80058a8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800583c:	f7fc f854 	bl	80018e8 <_ZN3LPFC1Ev>
LPF gyro_lpf1;
 8005840:	481a      	ldr	r0, [pc, #104]	; (80058ac <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8005842:	f7fc f851 	bl	80018e8 <_ZN3LPFC1Ev>
LPF gyro_lpf2;
 8005846:	481a      	ldr	r0, [pc, #104]	; (80058b0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8005848:	f7fc f84e 	bl	80018e8 <_ZN3LPFC1Ev>
LPF acc_lpf;
 800584c:	4819      	ldr	r0, [pc, #100]	; (80058b4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800584e:	f7fc f84b 	bl	80018e8 <_ZN3LPFC1Ev>
LPF acc_lpf1;
 8005852:	4819      	ldr	r0, [pc, #100]	; (80058b8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8005854:	f7fc f848 	bl	80018e8 <_ZN3LPFC1Ev>
LPF acc_lpf2;
 8005858:	4818      	ldr	r0, [pc, #96]	; (80058bc <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800585a:	f7fc f845 	bl	80018e8 <_ZN3LPFC1Ev>
PID pid_roll;
 800585e:	4818      	ldr	r0, [pc, #96]	; (80058c0 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8005860:	f7fd ff3c 	bl	80036dc <_ZN3PIDC1Ev>
PID pid_pitch;
 8005864:	4817      	ldr	r0, [pc, #92]	; (80058c4 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8005866:	f7fd ff39 	bl	80036dc <_ZN3PIDC1Ev>
PID pid_yaw;
 800586a:	4817      	ldr	r0, [pc, #92]	; (80058c8 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800586c:	f7fd ff36 	bl	80036dc <_ZN3PIDC1Ev>
MotorController controller;
 8005870:	4816      	ldr	r0, [pc, #88]	; (80058cc <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8005872:	f7ff f839 	bl	80048e8 <_ZN15MotorControllerC1Ev>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d110      	bne.n	800589e <_Z41__static_initialization_and_destruction_0ii+0x7e>
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005882:	4293      	cmp	r3, r2
 8005884:	d10b      	bne.n	800589e <_Z41__static_initialization_and_destruction_0ii+0x7e>
 8005886:	4811      	ldr	r0, [pc, #68]	; (80058cc <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8005888:	f7ff ffaa 	bl	80057e0 <_ZN15MotorControllerD1Ev>
PID pid_yaw;
 800588c:	480e      	ldr	r0, [pc, #56]	; (80058c8 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800588e:	f7fd ff05 	bl	800369c <_ZN3PIDD1Ev>
PID pid_pitch;
 8005892:	480c      	ldr	r0, [pc, #48]	; (80058c4 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8005894:	f7fd ff02 	bl	800369c <_ZN3PIDD1Ev>
PID pid_roll;
 8005898:	4809      	ldr	r0, [pc, #36]	; (80058c0 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800589a:	f7fd feff 	bl	800369c <_ZN3PIDD1Ev>
}
 800589e:	bf00      	nop
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	200007a0 	.word	0x200007a0
 80058ac:	200007f0 	.word	0x200007f0
 80058b0:	20000840 	.word	0x20000840
 80058b4:	20000890 	.word	0x20000890
 80058b8:	200008e0 	.word	0x200008e0
 80058bc:	20000930 	.word	0x20000930
 80058c0:	200009d0 	.word	0x200009d0
 80058c4:	20000a58 	.word	0x20000a58
 80058c8:	20000ae0 	.word	0x20000ae0
 80058cc:	20000b68 	.word	0x20000b68

080058d0 <_GLOBAL__sub_I_hi2c1>:
 80058d0:	b580      	push	{r7, lr}
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80058d8:	2001      	movs	r0, #1
 80058da:	f7ff ffa1 	bl	8005820 <_Z41__static_initialization_and_destruction_0ii>
 80058de:	bd80      	pop	{r7, pc}

080058e0 <_GLOBAL__sub_D_hi2c1>:
 80058e0:	b580      	push	{r7, lr}
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80058e8:	2000      	movs	r0, #0
 80058ea:	f7ff ff99 	bl	8005820 <_Z41__static_initialization_and_destruction_0ii>
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <nRF24_ReadReg>:

// Reads a value of register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	4603      	mov	r3, r0
 80058f8:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L;
 80058fa:	2200      	movs	r2, #0
 80058fc:	2120      	movs	r1, #32
 80058fe:	480c      	ldr	r0, [pc, #48]	; (8005930 <nRF24_ReadReg+0x40>)
 8005900:	f001 fc26 	bl	8007150 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8005904:	79fb      	ldrb	r3, [r7, #7]
 8005906:	f003 031f 	and.w	r3, r3, #31
 800590a:	b2db      	uxtb	r3, r3
 800590c:	4618      	mov	r0, r3
 800590e:	f000 fa3d 	bl	8005d8c <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8005912:	20ff      	movs	r0, #255	; 0xff
 8005914:	f000 fa3a 	bl	8005d8c <nRF24_LL_RW>
 8005918:	4603      	mov	r3, r0
 800591a:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H;
 800591c:	2201      	movs	r2, #1
 800591e:	2120      	movs	r1, #32
 8005920:	4803      	ldr	r0, [pc, #12]	; (8005930 <nRF24_ReadReg+0x40>)
 8005922:	f001 fc15 	bl	8007150 <HAL_GPIO_WritePin>

	return value;
 8005926:	7bfb      	ldrb	r3, [r7, #15]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	40020800 	.word	0x40020800

08005934 <nRF24_WriteReg>:

// Writes a new value to the register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	4603      	mov	r3, r0
 800593c:	460a      	mov	r2, r1
 800593e:	71fb      	strb	r3, [r7, #7]
 8005940:	4613      	mov	r3, r2
 8005942:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L;
 8005944:	2200      	movs	r2, #0
 8005946:	2120      	movs	r1, #32
 8005948:	4819      	ldr	r0, [pc, #100]	; (80059b0 <nRF24_WriteReg+0x7c>)
 800594a:	f001 fc01 	bl	8007150 <HAL_GPIO_WritePin>
	if (reg < nRF24_CMD_W_REGISTER) {
 800594e:	79fb      	ldrb	r3, [r7, #7]
 8005950:	2b1f      	cmp	r3, #31
 8005952:	d810      	bhi.n	8005976 <nRF24_WriteReg+0x42>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8005954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005958:	f003 031f 	and.w	r3, r3, #31
 800595c:	b25b      	sxtb	r3, r3
 800595e:	f043 0320 	orr.w	r3, r3, #32
 8005962:	b25b      	sxtb	r3, r3
 8005964:	b2db      	uxtb	r3, r3
 8005966:	4618      	mov	r0, r3
 8005968:	f000 fa10 	bl	8005d8c <nRF24_LL_RW>
		nRF24_LL_RW(value);
 800596c:	79bb      	ldrb	r3, [r7, #6]
 800596e:	4618      	mov	r0, r3
 8005970:	f000 fa0c 	bl	8005d8c <nRF24_LL_RW>
 8005974:	e013      	b.n	800599e <nRF24_WriteReg+0x6a>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8005976:	79fb      	ldrb	r3, [r7, #7]
 8005978:	4618      	mov	r0, r3
 800597a:	f000 fa07 	bl	8005d8c <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 800597e:	79fb      	ldrb	r3, [r7, #7]
 8005980:	2be1      	cmp	r3, #225	; 0xe1
 8005982:	d00c      	beq.n	800599e <nRF24_WriteReg+0x6a>
 8005984:	79fb      	ldrb	r3, [r7, #7]
 8005986:	2be2      	cmp	r3, #226	; 0xe2
 8005988:	d009      	beq.n	800599e <nRF24_WriteReg+0x6a>
 800598a:	79fb      	ldrb	r3, [r7, #7]
 800598c:	2be3      	cmp	r3, #227	; 0xe3
 800598e:	d006      	beq.n	800599e <nRF24_WriteReg+0x6a>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 8005990:	79fb      	ldrb	r3, [r7, #7]
 8005992:	2bff      	cmp	r3, #255	; 0xff
 8005994:	d003      	beq.n	800599e <nRF24_WriteReg+0x6a>
			// Send register value
			nRF24_LL_RW(value);
 8005996:	79bb      	ldrb	r3, [r7, #6]
 8005998:	4618      	mov	r0, r3
 800599a:	f000 f9f7 	bl	8005d8c <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H;
 800599e:	2201      	movs	r2, #1
 80059a0:	2120      	movs	r1, #32
 80059a2:	4803      	ldr	r0, [pc, #12]	; (80059b0 <nRF24_WriteReg+0x7c>)
 80059a4:	f001 fbd4 	bl	8007150 <HAL_GPIO_WritePin>
}
 80059a8:	bf00      	nop
 80059aa:	3708      	adds	r7, #8
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	40020800 	.word	0x40020800

080059b4 <nRF24_ReadMBReg>:
// Reads to the buffer from a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 80059b4:	b590      	push	{r4, r7, lr}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	4603      	mov	r3, r0
 80059bc:	6039      	str	r1, [r7, #0]
 80059be:	71fb      	strb	r3, [r7, #7]
 80059c0:	4613      	mov	r3, r2
 80059c2:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L;
 80059c4:	2200      	movs	r2, #0
 80059c6:	2120      	movs	r1, #32
 80059c8:	480e      	ldr	r0, [pc, #56]	; (8005a04 <nRF24_ReadMBReg+0x50>)
 80059ca:	f001 fbc1 	bl	8007150 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 80059ce:	79fb      	ldrb	r3, [r7, #7]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 f9db 	bl	8005d8c <nRF24_LL_RW>
	while (count--) { *pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP); }
 80059d6:	e007      	b.n	80059e8 <nRF24_ReadMBReg+0x34>
 80059d8:	683c      	ldr	r4, [r7, #0]
 80059da:	1c63      	adds	r3, r4, #1
 80059dc:	603b      	str	r3, [r7, #0]
 80059de:	20ff      	movs	r0, #255	; 0xff
 80059e0:	f000 f9d4 	bl	8005d8c <nRF24_LL_RW>
 80059e4:	4603      	mov	r3, r0
 80059e6:	7023      	strb	r3, [r4, #0]
 80059e8:	79bb      	ldrb	r3, [r7, #6]
 80059ea:	1e5a      	subs	r2, r3, #1
 80059ec:	71ba      	strb	r2, [r7, #6]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1f2      	bne.n	80059d8 <nRF24_ReadMBReg+0x24>
	nRF24_CSN_H;
 80059f2:	2201      	movs	r2, #1
 80059f4:	2120      	movs	r1, #32
 80059f6:	4803      	ldr	r0, [pc, #12]	; (8005a04 <nRF24_ReadMBReg+0x50>)
 80059f8:	f001 fbaa 	bl	8007150 <HAL_GPIO_WritePin>
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd90      	pop	{r4, r7, pc}
 8005a04:	40020800 	.word	0x40020800

08005a08 <nRF24_WriteMBReg>:
// Writes a buffer to a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	4603      	mov	r3, r0
 8005a10:	6039      	str	r1, [r7, #0]
 8005a12:	71fb      	strb	r3, [r7, #7]
 8005a14:	4613      	mov	r3, r2
 8005a16:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L;
 8005a18:	2200      	movs	r2, #0
 8005a1a:	2120      	movs	r1, #32
 8005a1c:	480e      	ldr	r0, [pc, #56]	; (8005a58 <nRF24_WriteMBReg+0x50>)
 8005a1e:	f001 fb97 	bl	8007150 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 8005a22:	79fb      	ldrb	r3, [r7, #7]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f000 f9b1 	bl	8005d8c <nRF24_LL_RW>
	while (count--) {
 8005a2a:	e006      	b.n	8005a3a <nRF24_WriteMBReg+0x32>
		nRF24_LL_RW(*pBuf++);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	1c5a      	adds	r2, r3, #1
 8005a30:	603a      	str	r2, [r7, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 f9a9 	bl	8005d8c <nRF24_LL_RW>
	while (count--) {
 8005a3a:	79bb      	ldrb	r3, [r7, #6]
 8005a3c:	1e5a      	subs	r2, r3, #1
 8005a3e:	71ba      	strb	r2, [r7, #6]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1f3      	bne.n	8005a2c <nRF24_WriteMBReg+0x24>
	}
	nRF24_CSN_H;
 8005a44:	2201      	movs	r2, #1
 8005a46:	2120      	movs	r1, #32
 8005a48:	4803      	ldr	r0, [pc, #12]	; (8005a58 <nRF24_WriteMBReg+0x50>)
 8005a4a:	f001 fb81 	bl	8007150 <HAL_GPIO_WritePin>
}
 8005a4e:	bf00      	nop
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	40020800 	.word	0x40020800

08005a5c <nRF24_SetPowerMode>:
}

// Set transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	4603      	mov	r3, r0
 8005a64:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8005a66:	2000      	movs	r0, #0
 8005a68:	f7ff ff42 	bl	80058f0 <nRF24_ReadReg>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8005a70:	79fb      	ldrb	r3, [r7, #7]
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d104      	bne.n	8005a80 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Standby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 8005a76:	7bfb      	ldrb	r3, [r7, #15]
 8005a78:	f043 0302 	orr.w	r3, r3, #2
 8005a7c:	73fb      	strb	r3, [r7, #15]
 8005a7e:	e003      	b.n	8005a88 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// It goes into Power Down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
 8005a82:	f023 0302 	bic.w	r3, r3, #2
 8005a86:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	f7ff ff51 	bl	8005934 <nRF24_WriteReg>
}
 8005a92:	bf00      	nop
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b084      	sub	sp, #16
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8005aa4:	2000      	movs	r0, #0
 8005aa6:	f7ff ff23 	bl	80058f0 <nRF24_ReadReg>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8005aae:	7bfb      	ldrb	r3, [r7, #15]
 8005ab0:	f023 0301 	bic.w	r3, r3, #1
 8005ab4:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8005ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	b25a      	sxtb	r2, r3
 8005ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	b25b      	sxtb	r3, r3
 8005ac8:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8005aca:	7bfb      	ldrb	r3, [r7, #15]
 8005acc:	4619      	mov	r1, r3
 8005ace:	2000      	movs	r0, #0
 8005ad0:	f7ff ff30 	bl	8005934 <nRF24_WriteReg>
}
 8005ad4:	bf00      	nop
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8005ae6:	2000      	movs	r0, #0
 8005ae8:	f7ff ff02 	bl	80058f0 <nRF24_ReadReg>
 8005aec:	4603      	mov	r3, r0
 8005aee:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
 8005af2:	f023 030c 	bic.w	r3, r3, #12
 8005af6:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8005af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005afc:	f003 030c 	and.w	r3, r3, #12
 8005b00:	b25a      	sxtb	r2, r3
 8005b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	b25b      	sxtb	r3, r3
 8005b0a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8005b0c:	7bfb      	ldrb	r3, [r7, #15]
 8005b0e:	4619      	mov	r1, r3
 8005b10:	2000      	movs	r0, #0
 8005b12:	f7ff ff0f 	bl	8005934 <nRF24_WriteReg>
}
 8005b16:	bf00      	nop
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <nRF24_SetRFChannel>:
// Set RF frequency channel
// input:
//   channel - radio frequency channel, can be a value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b082      	sub	sp, #8
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	4603      	mov	r3, r0
 8005b26:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8005b28:	79fb      	ldrb	r3, [r7, #7]
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	2005      	movs	r0, #5
 8005b2e:	f7ff ff01 	bl	8005934 <nRF24_WriteReg>
}
 8005b32:	bf00      	nop
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b082      	sub	sp, #8
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	4603      	mov	r3, r0
 8005b42:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2U);
 8005b44:	79fb      	ldrb	r3, [r7, #7]
 8005b46:	3b02      	subs	r3, #2
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	2003      	movs	r0, #3
 8005b4e:	f7ff fef1 	bl	8005934 <nRF24_WriteReg>
}
 8005b52:	bf00      	nop
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
	...

08005b5c <nRF24_SetAddr>:
//       of the actual address width configured in the transceiver
// note: for the pipes[2..5] only the first byte from the addr buffer
//       will be written since the pipes[1..5] share the four
//       most significant address bytes
// note: always ensure that none of the data pipes have the same address
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	4603      	mov	r3, r0
 8005b64:	6039      	str	r1, [r7, #0]
 8005b66:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 8005b68:	79fb      	ldrb	r3, [r7, #7]
 8005b6a:	2b06      	cmp	r3, #6
 8005b6c:	d82a      	bhi.n	8005bc4 <nRF24_SetAddr+0x68>
 8005b6e:	a201      	add	r2, pc, #4	; (adr r2, 8005b74 <nRF24_SetAddr+0x18>)
 8005b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b74:	08005b91 	.word	0x08005b91
 8005b78:	08005b91 	.word	0x08005b91
 8005b7c:	08005bb1 	.word	0x08005bb1
 8005b80:	08005bb1 	.word	0x08005bb1
 8005b84:	08005bb1 	.word	0x08005bb1
 8005b88:	08005bb1 	.word	0x08005bb1
 8005b8c:	08005b91 	.word	0x08005b91
		case nRF24_PIPETX:
		case nRF24_PIPE0:
		case nRF24_PIPE1:
			// Get address width
			addr_width = nRF24_GetAddrWidth();
 8005b90:	f000 f8a2 	bl	8005cd8 <nRF24_GetAddrWidth>
 8005b94:	4603      	mov	r3, r0
 8005b96:	73fb      	strb	r3, [r7, #15]
#if (!nRF24_ADDR_REVERSE)
			nRF24_WriteMBReg(
				nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe],
 8005b98:	79fb      	ldrb	r3, [r7, #7]
 8005b9a:	4a0d      	ldr	r2, [pc, #52]	; (8005bd0 <nRF24_SetAddr+0x74>)
 8005b9c:	5cd3      	ldrb	r3, [r2, r3]
			nRF24_WriteMBReg(
 8005b9e:	f043 0320 	orr.w	r3, r3, #32
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	7bfa      	ldrb	r2, [r7, #15]
 8005ba6:	6839      	ldr	r1, [r7, #0]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7ff ff2d 	bl	8005a08 <nRF24_WriteMBReg>
			nRF24_CSN_L;
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
			while (addr_width--) { nRF24_LL_RW(*(addr + addr_width)); }
			nRF24_CSN_H;
#endif // nRF24_ADDR_REVERSE
			break;
 8005bae:	e00a      	b.n	8005bc6 <nRF24_SetAddr+0x6a>
		case nRF24_PIPE3:
		case nRF24_PIPE4:
		case nRF24_PIPE5:
			// Write first byte from the addr buffer,
			// it will be the LSByte of the pipe address
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8005bb0:	79fb      	ldrb	r3, [r7, #7]
 8005bb2:	4a07      	ldr	r2, [pc, #28]	; (8005bd0 <nRF24_SetAddr+0x74>)
 8005bb4:	5cd2      	ldrb	r2, [r2, r3]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	4619      	mov	r1, r3
 8005bbc:	4610      	mov	r0, r2
 8005bbe:	f7ff feb9 	bl	8005934 <nRF24_WriteReg>
			break;
 8005bc2:	e000      	b.n	8005bc6 <nRF24_SetAddr+0x6a>
		default:
			// Incorrect pipe number -> do nothing
			break;
 8005bc4:	bf00      	nop
	}
}
 8005bc6:	bf00      	nop
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	0800dd70 	.word	0x0800dd70

08005bd4 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	4603      	mov	r3, r0
 8005bdc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8005bde:	2006      	movs	r0, #6
 8005be0:	f7ff fe86 	bl	80058f0 <nRF24_ReadReg>
 8005be4:	4603      	mov	r3, r0
 8005be6:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
 8005bea:	f023 0306 	bic.w	r3, r3, #6
 8005bee:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8005bf0:	7bfa      	ldrb	r2, [r7, #15]
 8005bf2:	79fb      	ldrb	r3, [r7, #7]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	2006      	movs	r0, #6
 8005bfe:	f7ff fe99 	bl	8005934 <nRF24_WriteReg>
}
 8005c02:	bf00      	nop
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b084      	sub	sp, #16
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	4603      	mov	r3, r0
 8005c12:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8005c14:	2006      	movs	r0, #6
 8005c16:	f7ff fe6b 	bl	80058f0 <nRF24_ReadReg>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 8005c1e:	7bfb      	ldrb	r3, [r7, #15]
 8005c20:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8005c24:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8005c26:	7bfa      	ldrb	r2, [r7, #15]
 8005c28:	79fb      	ldrb	r3, [r7, #7]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8005c2e:	7bfb      	ldrb	r3, [r7, #15]
 8005c30:	4619      	mov	r1, r3
 8005c32:	2006      	movs	r0, #6
 8005c34:	f7ff fe7e 	bl	8005934 <nRF24_WriteReg>
}
 8005c38:	bf00      	nop
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	4603      	mov	r3, r0
 8005c48:	71fb      	strb	r3, [r7, #7]
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	71bb      	strb	r3, [r7, #6]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1U << pipe)) & nRF24_MASK_EN_RX;
 8005c52:	2002      	movs	r0, #2
 8005c54:	f7ff fe4c 	bl	80058f0 <nRF24_ReadReg>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	79fb      	ldrb	r3, [r7, #7]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	fa02 f303 	lsl.w	r3, r2, r3
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	430b      	orrs	r3, r1
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c6e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 8005c70:	7bfb      	ldrb	r3, [r7, #15]
 8005c72:	4619      	mov	r1, r3
 8005c74:	2002      	movs	r0, #2
 8005c76:	f7ff fe5d 	bl	8005934 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_REG_RX_PW_P0 + pipe, payload_len & nRF24_MASK_RX_PW);
 8005c7a:	79fb      	ldrb	r3, [r7, #7]
 8005c7c:	3311      	adds	r3, #17
 8005c7e:	b2da      	uxtb	r2, r3
 8005c80:	797b      	ldrb	r3, [r7, #5]
 8005c82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	4619      	mov	r1, r3
 8005c8a:	4610      	mov	r0, r2
 8005c8c:	f7ff fe52 	bl	8005934 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 8005c90:	2001      	movs	r0, #1
 8005c92:	f7ff fe2d 	bl	80058f0 <nRF24_ReadReg>
 8005c96:	4603      	mov	r3, r0
 8005c98:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 8005c9a:	79bb      	ldrb	r3, [r7, #6]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d108      	bne.n	8005cb2 <nRF24_SetRXPipe+0x72>
		reg |= (1U << pipe);
 8005ca0:	79fb      	ldrb	r3, [r7, #7]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	7bfb      	ldrb	r3, [r7, #15]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	73fb      	strb	r3, [r7, #15]
 8005cb0:	e009      	b.n	8005cc6 <nRF24_SetRXPipe+0x86>
	} else {
		reg &= ~(1U << pipe);
 8005cb2:	79fb      	ldrb	r3, [r7, #7]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	43db      	mvns	r3, r3
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
 8005cc8:	4619      	mov	r1, r3
 8005cca:	2001      	movs	r0, #1
 8005ccc:	f7ff fe32 	bl	8005934 <nRF24_WriteReg>
}
 8005cd0:	bf00      	nop
 8005cd2:	3710      	adds	r7, #16
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <nRF24_GetAddrWidth>:
}

// Get address length
// return: the length of the address configured in the transceiver,
//         value from 3 to 5
uint8_t nRF24_GetAddrWidth(void) {
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_SETUP_AW) + 2U;
 8005cdc:	2003      	movs	r0, #3
 8005cde:	f7ff fe07 	bl	80058f0 <nRF24_ReadReg>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	3302      	adds	r3, #2
 8005ce6:	b2db      	uxtb	r3, r3
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	bd80      	pop	{r7, pc}

08005cec <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 8005cec:	b580      	push	{r7, lr}
 8005cee:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 8005cf0:	2017      	movs	r0, #23
 8005cf2:	f7ff fdfd 	bl	80058f0 <nRF24_ReadReg>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	f003 0303 	and.w	r3, r3, #3
 8005cfc:	b2db      	uxtb	r3, r3
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <nRF24_ClearIRQFlags>:
void nRF24_FlushRX(void) {
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
}

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b082      	sub	sp, #8
 8005d06:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg = nRF24_ReadReg(nRF24_REG_STATUS);
 8005d08:	2007      	movs	r0, #7
 8005d0a:	f7ff fdf1 	bl	80058f0 <nRF24_ReadReg>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8005d12:	79fb      	ldrb	r3, [r7, #7]
 8005d14:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8005d18:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8005d1a:	79fb      	ldrb	r3, [r7, #7]
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	2007      	movs	r0, #7
 8005d20:	f7ff fe08 	bl	8005934 <nRF24_WriteReg>
}
 8005d24:	bf00      	nop
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <nRF24_ReadPayload>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 8005d36:	2007      	movs	r0, #7
 8005d38:	f7ff fdda 	bl	80058f0 <nRF24_ReadReg>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	105b      	asrs	r3, r3, #1
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	f003 0307 	and.w	r3, r3, #7
 8005d46:	73fb      	strb	r3, [r7, #15]

	// RX FIFO empty?
	if (pipe < 6U) {
 8005d48:	7bfb      	ldrb	r3, [r7, #15]
 8005d4a:	2b05      	cmp	r3, #5
 8005d4c:	d816      	bhi.n	8005d7c <nRF24_ReadPayload+0x50>
		// Get payload length
		*length = nRF24_ReadReg(nRF24_REG_RX_PW_P0 + pipe);
 8005d4e:	7bfb      	ldrb	r3, [r7, #15]
 8005d50:	3311      	adds	r3, #17
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7ff fdcb 	bl	80058f0 <nRF24_ReadReg>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	701a      	strb	r2, [r3, #0]

		// Read a payload from the RX FIFO
		if (*length) {
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d006      	beq.n	8005d78 <nRF24_ReadPayload+0x4c>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	6879      	ldr	r1, [r7, #4]
 8005d72:	2061      	movs	r0, #97	; 0x61
 8005d74:	f7ff fe1e 	bl	80059b4 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 8005d78:	7bfb      	ldrb	r3, [r7, #15]
 8005d7a:	e003      	b.n	8005d84 <nRF24_ReadPayload+0x58>
	}

	// The RX FIFO is empty
	*length = 0U;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 8005d82:	23ff      	movs	r3, #255	; 0xff
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <nRF24_LL_RW>:

// Low level SPI transmit/receive function (hardware depended)
// input:
//   data - value to transmit via SPI
// return: value received from SPI
uint8_t nRF24_LL_RW(uint8_t data) {
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b086      	sub	sp, #24
 8005d90:	af02      	add	r7, sp, #8
 8005d92:	4603      	mov	r3, r0
 8005d94:	71fb      	strb	r3, [r7, #7]
	 // Wait until TX buffer is empty
	uint8_t  rx_data;
	while (HAL_SPI_TransmitReceive(&hspi1, &data, &rx_data,1,500) != HAL_OK);
 8005d96:	bf00      	nop
 8005d98:	f107 020f 	add.w	r2, r7, #15
 8005d9c:	1df9      	adds	r1, r7, #7
 8005d9e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005da2:	9300      	str	r3, [sp, #0]
 8005da4:	2301      	movs	r3, #1
 8005da6:	4805      	ldr	r0, [pc, #20]	; (8005dbc <nRF24_LL_RW+0x30>)
 8005da8:	f002 ffbe 	bl	8008d28 <HAL_SPI_TransmitReceive>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1f2      	bne.n	8005d98 <nRF24_LL_RW+0xc>

	// Return received byte
	return rx_data;
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	200004e8 	.word	0x200004e8

08005dc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	607b      	str	r3, [r7, #4]
 8005dca:	4b12      	ldr	r3, [pc, #72]	; (8005e14 <HAL_MspInit+0x54>)
 8005dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dce:	4a11      	ldr	r2, [pc, #68]	; (8005e14 <HAL_MspInit+0x54>)
 8005dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8005dd6:	4b0f      	ldr	r3, [pc, #60]	; (8005e14 <HAL_MspInit+0x54>)
 8005dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dde:	607b      	str	r3, [r7, #4]
 8005de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005de2:	2300      	movs	r3, #0
 8005de4:	603b      	str	r3, [r7, #0]
 8005de6:	4b0b      	ldr	r3, [pc, #44]	; (8005e14 <HAL_MspInit+0x54>)
 8005de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dea:	4a0a      	ldr	r2, [pc, #40]	; (8005e14 <HAL_MspInit+0x54>)
 8005dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005df0:	6413      	str	r3, [r2, #64]	; 0x40
 8005df2:	4b08      	ldr	r3, [pc, #32]	; (8005e14 <HAL_MspInit+0x54>)
 8005df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dfa:	603b      	str	r3, [r7, #0]
 8005dfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005dfe:	2200      	movs	r2, #0
 8005e00:	210f      	movs	r1, #15
 8005e02:	f06f 0001 	mvn.w	r0, #1
 8005e06:	f000 fbd5 	bl	80065b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e0a:	bf00      	nop
 8005e0c:	3708      	adds	r7, #8
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	40023800 	.word	0x40023800

08005e18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b08a      	sub	sp, #40	; 0x28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e20:	f107 0314 	add.w	r3, r7, #20
 8005e24:	2200      	movs	r2, #0
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	605a      	str	r2, [r3, #4]
 8005e2a:	609a      	str	r2, [r3, #8]
 8005e2c:	60da      	str	r2, [r3, #12]
 8005e2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a19      	ldr	r2, [pc, #100]	; (8005e9c <HAL_I2C_MspInit+0x84>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d12c      	bne.n	8005e94 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	613b      	str	r3, [r7, #16]
 8005e3e:	4b18      	ldr	r3, [pc, #96]	; (8005ea0 <HAL_I2C_MspInit+0x88>)
 8005e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e42:	4a17      	ldr	r2, [pc, #92]	; (8005ea0 <HAL_I2C_MspInit+0x88>)
 8005e44:	f043 0302 	orr.w	r3, r3, #2
 8005e48:	6313      	str	r3, [r2, #48]	; 0x30
 8005e4a:	4b15      	ldr	r3, [pc, #84]	; (8005ea0 <HAL_I2C_MspInit+0x88>)
 8005e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	613b      	str	r3, [r7, #16]
 8005e54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005e56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e5c:	2312      	movs	r3, #18
 8005e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005e60:	2301      	movs	r3, #1
 8005e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e64:	2303      	movs	r3, #3
 8005e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005e68:	2304      	movs	r3, #4
 8005e6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e6c:	f107 0314 	add.w	r3, r7, #20
 8005e70:	4619      	mov	r1, r3
 8005e72:	480c      	ldr	r0, [pc, #48]	; (8005ea4 <HAL_I2C_MspInit+0x8c>)
 8005e74:	f000 fec0 	bl	8006bf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005e78:	2300      	movs	r3, #0
 8005e7a:	60fb      	str	r3, [r7, #12]
 8005e7c:	4b08      	ldr	r3, [pc, #32]	; (8005ea0 <HAL_I2C_MspInit+0x88>)
 8005e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e80:	4a07      	ldr	r2, [pc, #28]	; (8005ea0 <HAL_I2C_MspInit+0x88>)
 8005e82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e86:	6413      	str	r3, [r2, #64]	; 0x40
 8005e88:	4b05      	ldr	r3, [pc, #20]	; (8005ea0 <HAL_I2C_MspInit+0x88>)
 8005e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e90:	60fb      	str	r3, [r7, #12]
 8005e92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005e94:	bf00      	nop
 8005e96:	3728      	adds	r7, #40	; 0x28
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	40005400 	.word	0x40005400
 8005ea0:	40023800 	.word	0x40023800
 8005ea4:	40020400 	.word	0x40020400

08005ea8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a08      	ldr	r2, [pc, #32]	; (8005ed8 <HAL_I2C_MspDeInit+0x30>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d10a      	bne.n	8005ed0 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8005eba:	4b08      	ldr	r3, [pc, #32]	; (8005edc <HAL_I2C_MspDeInit+0x34>)
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebe:	4a07      	ldr	r2, [pc, #28]	; (8005edc <HAL_I2C_MspDeInit+0x34>)
 8005ec0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ec4:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8005ec6:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005eca:	4805      	ldr	r0, [pc, #20]	; (8005ee0 <HAL_I2C_MspDeInit+0x38>)
 8005ecc:	f001 f82e 	bl	8006f2c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8005ed0:	bf00      	nop
 8005ed2:	3708      	adds	r7, #8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	40005400 	.word	0x40005400
 8005edc:	40023800 	.word	0x40023800
 8005ee0:	40020400 	.word	0x40020400

08005ee4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b08a      	sub	sp, #40	; 0x28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005eec:	f107 0314 	add.w	r3, r7, #20
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	601a      	str	r2, [r3, #0]
 8005ef4:	605a      	str	r2, [r3, #4]
 8005ef6:	609a      	str	r2, [r3, #8]
 8005ef8:	60da      	str	r2, [r3, #12]
 8005efa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a19      	ldr	r2, [pc, #100]	; (8005f68 <HAL_SPI_MspInit+0x84>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d12b      	bne.n	8005f5e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005f06:	2300      	movs	r3, #0
 8005f08:	613b      	str	r3, [r7, #16]
 8005f0a:	4b18      	ldr	r3, [pc, #96]	; (8005f6c <HAL_SPI_MspInit+0x88>)
 8005f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f0e:	4a17      	ldr	r2, [pc, #92]	; (8005f6c <HAL_SPI_MspInit+0x88>)
 8005f10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f14:	6453      	str	r3, [r2, #68]	; 0x44
 8005f16:	4b15      	ldr	r3, [pc, #84]	; (8005f6c <HAL_SPI_MspInit+0x88>)
 8005f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f1e:	613b      	str	r3, [r7, #16]
 8005f20:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f22:	2300      	movs	r3, #0
 8005f24:	60fb      	str	r3, [r7, #12]
 8005f26:	4b11      	ldr	r3, [pc, #68]	; (8005f6c <HAL_SPI_MspInit+0x88>)
 8005f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2a:	4a10      	ldr	r2, [pc, #64]	; (8005f6c <HAL_SPI_MspInit+0x88>)
 8005f2c:	f043 0301 	orr.w	r3, r3, #1
 8005f30:	6313      	str	r3, [r2, #48]	; 0x30
 8005f32:	4b0e      	ldr	r3, [pc, #56]	; (8005f6c <HAL_SPI_MspInit+0x88>)
 8005f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005f3e:	23e0      	movs	r3, #224	; 0xe0
 8005f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f42:	2302      	movs	r3, #2
 8005f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f46:	2300      	movs	r3, #0
 8005f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005f4e:	2305      	movs	r3, #5
 8005f50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f52:	f107 0314 	add.w	r3, r7, #20
 8005f56:	4619      	mov	r1, r3
 8005f58:	4805      	ldr	r0, [pc, #20]	; (8005f70 <HAL_SPI_MspInit+0x8c>)
 8005f5a:	f000 fe4d 	bl	8006bf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005f5e:	bf00      	nop
 8005f60:	3728      	adds	r7, #40	; 0x28
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	40013000 	.word	0x40013000
 8005f6c:	40023800 	.word	0x40023800
 8005f70:	40020000 	.word	0x40020000

08005f74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a22      	ldr	r2, [pc, #136]	; (800600c <HAL_TIM_Base_MspInit+0x98>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d10e      	bne.n	8005fa4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005f86:	2300      	movs	r3, #0
 8005f88:	617b      	str	r3, [r7, #20]
 8005f8a:	4b21      	ldr	r3, [pc, #132]	; (8006010 <HAL_TIM_Base_MspInit+0x9c>)
 8005f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f8e:	4a20      	ldr	r2, [pc, #128]	; (8006010 <HAL_TIM_Base_MspInit+0x9c>)
 8005f90:	f043 0301 	orr.w	r3, r3, #1
 8005f94:	6453      	str	r3, [r2, #68]	; 0x44
 8005f96:	4b1e      	ldr	r3, [pc, #120]	; (8006010 <HAL_TIM_Base_MspInit+0x9c>)
 8005f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	617b      	str	r3, [r7, #20]
 8005fa0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8005fa2:	e02e      	b.n	8006002 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a1a      	ldr	r2, [pc, #104]	; (8006014 <HAL_TIM_Base_MspInit+0xa0>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d10e      	bne.n	8005fcc <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005fae:	2300      	movs	r3, #0
 8005fb0:	613b      	str	r3, [r7, #16]
 8005fb2:	4b17      	ldr	r3, [pc, #92]	; (8006010 <HAL_TIM_Base_MspInit+0x9c>)
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb6:	4a16      	ldr	r2, [pc, #88]	; (8006010 <HAL_TIM_Base_MspInit+0x9c>)
 8005fb8:	f043 0304 	orr.w	r3, r3, #4
 8005fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8005fbe:	4b14      	ldr	r3, [pc, #80]	; (8006010 <HAL_TIM_Base_MspInit+0x9c>)
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc2:	f003 0304 	and.w	r3, r3, #4
 8005fc6:	613b      	str	r3, [r7, #16]
 8005fc8:	693b      	ldr	r3, [r7, #16]
}
 8005fca:	e01a      	b.n	8006002 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM7)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a11      	ldr	r2, [pc, #68]	; (8006018 <HAL_TIM_Base_MspInit+0xa4>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d115      	bne.n	8006002 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	60fb      	str	r3, [r7, #12]
 8005fda:	4b0d      	ldr	r3, [pc, #52]	; (8006010 <HAL_TIM_Base_MspInit+0x9c>)
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fde:	4a0c      	ldr	r2, [pc, #48]	; (8006010 <HAL_TIM_Base_MspInit+0x9c>)
 8005fe0:	f043 0320 	orr.w	r3, r3, #32
 8005fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8005fe6:	4b0a      	ldr	r3, [pc, #40]	; (8006010 <HAL_TIM_Base_MspInit+0x9c>)
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	f003 0320 	and.w	r3, r3, #32
 8005fee:	60fb      	str	r3, [r7, #12]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	2105      	movs	r1, #5
 8005ff6:	2037      	movs	r0, #55	; 0x37
 8005ff8:	f000 fadc 	bl	80065b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005ffc:	2037      	movs	r0, #55	; 0x37
 8005ffe:	f000 faf5 	bl	80065ec <HAL_NVIC_EnableIRQ>
}
 8006002:	bf00      	nop
 8006004:	3718      	adds	r7, #24
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	40010000 	.word	0x40010000
 8006010:	40023800 	.word	0x40023800
 8006014:	40000800 	.word	0x40000800
 8006018:	40001400 	.word	0x40001400

0800601c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b088      	sub	sp, #32
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006024:	f107 030c 	add.w	r3, r7, #12
 8006028:	2200      	movs	r2, #0
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	605a      	str	r2, [r3, #4]
 800602e:	609a      	str	r2, [r3, #8]
 8006030:	60da      	str	r2, [r3, #12]
 8006032:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a12      	ldr	r2, [pc, #72]	; (8006084 <HAL_TIM_MspPostInit+0x68>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d11e      	bne.n	800607c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800603e:	2300      	movs	r3, #0
 8006040:	60bb      	str	r3, [r7, #8]
 8006042:	4b11      	ldr	r3, [pc, #68]	; (8006088 <HAL_TIM_MspPostInit+0x6c>)
 8006044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006046:	4a10      	ldr	r2, [pc, #64]	; (8006088 <HAL_TIM_MspPostInit+0x6c>)
 8006048:	f043 0301 	orr.w	r3, r3, #1
 800604c:	6313      	str	r3, [r2, #48]	; 0x30
 800604e:	4b0e      	ldr	r3, [pc, #56]	; (8006088 <HAL_TIM_MspPostInit+0x6c>)
 8006050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	60bb      	str	r3, [r7, #8]
 8006058:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800605a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800605e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006060:	2302      	movs	r3, #2
 8006062:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006064:	2300      	movs	r3, #0
 8006066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006068:	2300      	movs	r3, #0
 800606a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800606c:	2301      	movs	r3, #1
 800606e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006070:	f107 030c 	add.w	r3, r7, #12
 8006074:	4619      	mov	r1, r3
 8006076:	4805      	ldr	r0, [pc, #20]	; (800608c <HAL_TIM_MspPostInit+0x70>)
 8006078:	f000 fdbe 	bl	8006bf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800607c:	bf00      	nop
 800607e:	3720      	adds	r7, #32
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	40010000 	.word	0x40010000
 8006088:	40023800 	.word	0x40023800
 800608c:	40020000 	.word	0x40020000

08006090 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b08c      	sub	sp, #48	; 0x30
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006098:	f107 031c 	add.w	r3, r7, #28
 800609c:	2200      	movs	r2, #0
 800609e:	601a      	str	r2, [r3, #0]
 80060a0:	605a      	str	r2, [r3, #4]
 80060a2:	609a      	str	r2, [r3, #8]
 80060a4:	60da      	str	r2, [r3, #12]
 80060a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a36      	ldr	r2, [pc, #216]	; (8006188 <HAL_UART_MspInit+0xf8>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d134      	bne.n	800611c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80060b2:	2300      	movs	r3, #0
 80060b4:	61bb      	str	r3, [r7, #24]
 80060b6:	4b35      	ldr	r3, [pc, #212]	; (800618c <HAL_UART_MspInit+0xfc>)
 80060b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ba:	4a34      	ldr	r2, [pc, #208]	; (800618c <HAL_UART_MspInit+0xfc>)
 80060bc:	f043 0310 	orr.w	r3, r3, #16
 80060c0:	6453      	str	r3, [r2, #68]	; 0x44
 80060c2:	4b32      	ldr	r3, [pc, #200]	; (800618c <HAL_UART_MspInit+0xfc>)
 80060c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c6:	f003 0310 	and.w	r3, r3, #16
 80060ca:	61bb      	str	r3, [r7, #24]
 80060cc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060ce:	2300      	movs	r3, #0
 80060d0:	617b      	str	r3, [r7, #20]
 80060d2:	4b2e      	ldr	r3, [pc, #184]	; (800618c <HAL_UART_MspInit+0xfc>)
 80060d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d6:	4a2d      	ldr	r2, [pc, #180]	; (800618c <HAL_UART_MspInit+0xfc>)
 80060d8:	f043 0302 	orr.w	r3, r3, #2
 80060dc:	6313      	str	r3, [r2, #48]	; 0x30
 80060de:	4b2b      	ldr	r3, [pc, #172]	; (800618c <HAL_UART_MspInit+0xfc>)
 80060e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e2:	f003 0302 	and.w	r3, r3, #2
 80060e6:	617b      	str	r3, [r7, #20]
 80060e8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80060ea:	23c0      	movs	r3, #192	; 0xc0
 80060ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060ee:	2302      	movs	r3, #2
 80060f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060f2:	2300      	movs	r3, #0
 80060f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060f6:	2303      	movs	r3, #3
 80060f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80060fa:	2307      	movs	r3, #7
 80060fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060fe:	f107 031c 	add.w	r3, r7, #28
 8006102:	4619      	mov	r1, r3
 8006104:	4822      	ldr	r0, [pc, #136]	; (8006190 <HAL_UART_MspInit+0x100>)
 8006106:	f000 fd77 	bl	8006bf8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 8, 0);
 800610a:	2200      	movs	r2, #0
 800610c:	2108      	movs	r1, #8
 800610e:	2025      	movs	r0, #37	; 0x25
 8006110:	f000 fa50 	bl	80065b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006114:	2025      	movs	r0, #37	; 0x25
 8006116:	f000 fa69 	bl	80065ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800611a:	e031      	b.n	8006180 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a1c      	ldr	r2, [pc, #112]	; (8006194 <HAL_UART_MspInit+0x104>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d12c      	bne.n	8006180 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006126:	2300      	movs	r3, #0
 8006128:	613b      	str	r3, [r7, #16]
 800612a:	4b18      	ldr	r3, [pc, #96]	; (800618c <HAL_UART_MspInit+0xfc>)
 800612c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612e:	4a17      	ldr	r2, [pc, #92]	; (800618c <HAL_UART_MspInit+0xfc>)
 8006130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006134:	6413      	str	r3, [r2, #64]	; 0x40
 8006136:	4b15      	ldr	r3, [pc, #84]	; (800618c <HAL_UART_MspInit+0xfc>)
 8006138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800613e:	613b      	str	r3, [r7, #16]
 8006140:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006142:	2300      	movs	r3, #0
 8006144:	60fb      	str	r3, [r7, #12]
 8006146:	4b11      	ldr	r3, [pc, #68]	; (800618c <HAL_UART_MspInit+0xfc>)
 8006148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614a:	4a10      	ldr	r2, [pc, #64]	; (800618c <HAL_UART_MspInit+0xfc>)
 800614c:	f043 0302 	orr.w	r3, r3, #2
 8006150:	6313      	str	r3, [r2, #48]	; 0x30
 8006152:	4b0e      	ldr	r3, [pc, #56]	; (800618c <HAL_UART_MspInit+0xfc>)
 8006154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800615e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006164:	2302      	movs	r3, #2
 8006166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006168:	2300      	movs	r3, #0
 800616a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800616c:	2303      	movs	r3, #3
 800616e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006170:	2307      	movs	r3, #7
 8006172:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006174:	f107 031c 	add.w	r3, r7, #28
 8006178:	4619      	mov	r1, r3
 800617a:	4805      	ldr	r0, [pc, #20]	; (8006190 <HAL_UART_MspInit+0x100>)
 800617c:	f000 fd3c 	bl	8006bf8 <HAL_GPIO_Init>
}
 8006180:	bf00      	nop
 8006182:	3730      	adds	r7, #48	; 0x30
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	40011000 	.word	0x40011000
 800618c:	40023800 	.word	0x40023800
 8006190:	40020400 	.word	0x40020400
 8006194:	40004800 	.word	0x40004800

08006198 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b08c      	sub	sp, #48	; 0x30
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80061a0:	2300      	movs	r3, #0
 80061a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80061a4:	2300      	movs	r3, #0
 80061a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 80061a8:	2200      	movs	r2, #0
 80061aa:	6879      	ldr	r1, [r7, #4]
 80061ac:	202d      	movs	r0, #45	; 0x2d
 80061ae:	f000 fa01 	bl	80065b4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 80061b2:	202d      	movs	r0, #45	; 0x2d
 80061b4:	f000 fa1a 	bl	80065ec <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80061b8:	2300      	movs	r3, #0
 80061ba:	60fb      	str	r3, [r7, #12]
 80061bc:	4b1f      	ldr	r3, [pc, #124]	; (800623c <HAL_InitTick+0xa4>)
 80061be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c0:	4a1e      	ldr	r2, [pc, #120]	; (800623c <HAL_InitTick+0xa4>)
 80061c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061c6:	6413      	str	r3, [r2, #64]	; 0x40
 80061c8:	4b1c      	ldr	r3, [pc, #112]	; (800623c <HAL_InitTick+0xa4>)
 80061ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d0:	60fb      	str	r3, [r7, #12]
 80061d2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80061d4:	f107 0210 	add.w	r2, r7, #16
 80061d8:	f107 0314 	add.w	r3, r7, #20
 80061dc:	4611      	mov	r1, r2
 80061de:	4618      	mov	r0, r3
 80061e0:	f002 fd0c 	bl	8008bfc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80061e4:	f002 fce2 	bl	8008bac <HAL_RCC_GetPCLK1Freq>
 80061e8:	4603      	mov	r3, r0
 80061ea:	005b      	lsls	r3, r3, #1
 80061ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80061ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f0:	4a13      	ldr	r2, [pc, #76]	; (8006240 <HAL_InitTick+0xa8>)
 80061f2:	fba2 2303 	umull	r2, r3, r2, r3
 80061f6:	0c9b      	lsrs	r3, r3, #18
 80061f8:	3b01      	subs	r3, #1
 80061fa:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80061fc:	4b11      	ldr	r3, [pc, #68]	; (8006244 <HAL_InitTick+0xac>)
 80061fe:	4a12      	ldr	r2, [pc, #72]	; (8006248 <HAL_InitTick+0xb0>)
 8006200:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 8006202:	4b10      	ldr	r3, [pc, #64]	; (8006244 <HAL_InitTick+0xac>)
 8006204:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006208:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800620a:	4a0e      	ldr	r2, [pc, #56]	; (8006244 <HAL_InitTick+0xac>)
 800620c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620e:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8006210:	4b0c      	ldr	r3, [pc, #48]	; (8006244 <HAL_InitTick+0xac>)
 8006212:	2200      	movs	r2, #0
 8006214:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006216:	4b0b      	ldr	r3, [pc, #44]	; (8006244 <HAL_InitTick+0xac>)
 8006218:	2200      	movs	r2, #0
 800621a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 800621c:	4809      	ldr	r0, [pc, #36]	; (8006244 <HAL_InitTick+0xac>)
 800621e:	f002 ffd1 	bl	80091c4 <HAL_TIM_Base_Init>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d104      	bne.n	8006232 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8006228:	4806      	ldr	r0, [pc, #24]	; (8006244 <HAL_InitTick+0xac>)
 800622a:	f003 f81a 	bl	8009262 <HAL_TIM_Base_Start_IT>
 800622e:	4603      	mov	r3, r0
 8006230:	e000      	b.n	8006234 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
}
 8006234:	4618      	mov	r0, r3
 8006236:	3730      	adds	r7, #48	; 0x30
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	40023800 	.word	0x40023800
 8006240:	431bde83 	.word	0x431bde83
 8006244:	2001968c 	.word	0x2001968c
 8006248:	40002000 	.word	0x40002000

0800624c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800624c:	b480      	push	{r7}
 800624e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006250:	bf00      	nop
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800625a:	b480      	push	{r7}
 800625c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800625e:	e7fe      	b.n	800625e <HardFault_Handler+0x4>

08006260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006260:	b480      	push	{r7}
 8006262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006264:	e7fe      	b.n	8006264 <MemManage_Handler+0x4>

08006266 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006266:	b480      	push	{r7}
 8006268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800626a:	e7fe      	b.n	800626a <BusFault_Handler+0x4>

0800626c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800626c:	b480      	push	{r7}
 800626e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006270:	e7fe      	b.n	8006270 <UsageFault_Handler+0x4>

08006272 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006272:	b480      	push	{r7}
 8006274:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006276:	bf00      	nop
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006284:	4802      	ldr	r0, [pc, #8]	; (8006290 <USART1_IRQHandler+0x10>)
 8006286:	f004 f85f 	bl	800a348 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800628a:	bf00      	nop
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	200004a8 	.word	0x200004a8

08006294 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8006298:	4802      	ldr	r0, [pc, #8]	; (80062a4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800629a:	f003 f879 	bl	8009390 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800629e:	bf00      	nop
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	2001968c 	.word	0x2001968c

080062a8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80062ac:	4802      	ldr	r0, [pc, #8]	; (80062b8 <TIM7_IRQHandler+0x10>)
 80062ae:	f003 f86f 	bl	8009390 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80062b2:	bf00      	nop
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	20000554 	.word	0x20000554

080062bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80062bc:	b480      	push	{r7}
 80062be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80062c0:	4b16      	ldr	r3, [pc, #88]	; (800631c <SystemInit+0x60>)
 80062c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c6:	4a15      	ldr	r2, [pc, #84]	; (800631c <SystemInit+0x60>)
 80062c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80062d0:	4b13      	ldr	r3, [pc, #76]	; (8006320 <SystemInit+0x64>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a12      	ldr	r2, [pc, #72]	; (8006320 <SystemInit+0x64>)
 80062d6:	f043 0301 	orr.w	r3, r3, #1
 80062da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80062dc:	4b10      	ldr	r3, [pc, #64]	; (8006320 <SystemInit+0x64>)
 80062de:	2200      	movs	r2, #0
 80062e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80062e2:	4b0f      	ldr	r3, [pc, #60]	; (8006320 <SystemInit+0x64>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a0e      	ldr	r2, [pc, #56]	; (8006320 <SystemInit+0x64>)
 80062e8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80062ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062f0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80062f2:	4b0b      	ldr	r3, [pc, #44]	; (8006320 <SystemInit+0x64>)
 80062f4:	4a0b      	ldr	r2, [pc, #44]	; (8006324 <SystemInit+0x68>)
 80062f6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80062f8:	4b09      	ldr	r3, [pc, #36]	; (8006320 <SystemInit+0x64>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a08      	ldr	r2, [pc, #32]	; (8006320 <SystemInit+0x64>)
 80062fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006302:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006304:	4b06      	ldr	r3, [pc, #24]	; (8006320 <SystemInit+0x64>)
 8006306:	2200      	movs	r2, #0
 8006308:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800630a:	4b04      	ldr	r3, [pc, #16]	; (800631c <SystemInit+0x60>)
 800630c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006310:	609a      	str	r2, [r3, #8]
#endif
}
 8006312:	bf00      	nop
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr
 800631c:	e000ed00 	.word	0xe000ed00
 8006320:	40023800 	.word	0x40023800
 8006324:	24003010 	.word	0x24003010

08006328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006328:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006360 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800632c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800632e:	e003      	b.n	8006338 <LoopCopyDataInit>

08006330 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006330:	4b0c      	ldr	r3, [pc, #48]	; (8006364 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006332:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006334:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006336:	3104      	adds	r1, #4

08006338 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006338:	480b      	ldr	r0, [pc, #44]	; (8006368 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800633a:	4b0c      	ldr	r3, [pc, #48]	; (800636c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800633c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800633e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006340:	d3f6      	bcc.n	8006330 <CopyDataInit>
  ldr  r2, =_sbss
 8006342:	4a0b      	ldr	r2, [pc, #44]	; (8006370 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006344:	e002      	b.n	800634c <LoopFillZerobss>

08006346 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006346:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006348:	f842 3b04 	str.w	r3, [r2], #4

0800634c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800634c:	4b09      	ldr	r3, [pc, #36]	; (8006374 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800634e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006350:	d3f9      	bcc.n	8006346 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006352:	f7ff ffb3 	bl	80062bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006356:	f007 fbc9 	bl	800daec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800635a:	f7fe fb15 	bl	8004988 <main>
  bx  lr    
 800635e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006360:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006364:	0800ddd4 	.word	0x0800ddd4
  ldr  r0, =_sdata
 8006368:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800636c:	20000118 	.word	0x20000118
  ldr  r2, =_sbss
 8006370:	20000118 	.word	0x20000118
  ldr  r3, = _ebss
 8006374:	200196f0 	.word	0x200196f0

08006378 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006378:	e7fe      	b.n	8006378 <ADC_IRQHandler>
	...

0800637c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006380:	4b0e      	ldr	r3, [pc, #56]	; (80063bc <HAL_Init+0x40>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a0d      	ldr	r2, [pc, #52]	; (80063bc <HAL_Init+0x40>)
 8006386:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800638a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800638c:	4b0b      	ldr	r3, [pc, #44]	; (80063bc <HAL_Init+0x40>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a0a      	ldr	r2, [pc, #40]	; (80063bc <HAL_Init+0x40>)
 8006392:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006396:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006398:	4b08      	ldr	r3, [pc, #32]	; (80063bc <HAL_Init+0x40>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a07      	ldr	r2, [pc, #28]	; (80063bc <HAL_Init+0x40>)
 800639e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80063a4:	2003      	movs	r0, #3
 80063a6:	f000 f8fa 	bl	800659e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80063aa:	2000      	movs	r0, #0
 80063ac:	f7ff fef4 	bl	8006198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80063b0:	f7ff fd06 	bl	8005dc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	40023c00 	.word	0x40023c00

080063c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80063c0:	b480      	push	{r7}
 80063c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80063c4:	4b06      	ldr	r3, [pc, #24]	; (80063e0 <HAL_IncTick+0x20>)
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	461a      	mov	r2, r3
 80063ca:	4b06      	ldr	r3, [pc, #24]	; (80063e4 <HAL_IncTick+0x24>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4413      	add	r3, r2
 80063d0:	4a04      	ldr	r2, [pc, #16]	; (80063e4 <HAL_IncTick+0x24>)
 80063d2:	6013      	str	r3, [r2, #0]
}
 80063d4:	bf00      	nop
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	200000a8 	.word	0x200000a8
 80063e4:	200196cc 	.word	0x200196cc

080063e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80063e8:	b480      	push	{r7}
 80063ea:	af00      	add	r7, sp, #0
  return uwTick;
 80063ec:	4b03      	ldr	r3, [pc, #12]	; (80063fc <HAL_GetTick+0x14>)
 80063ee:	681b      	ldr	r3, [r3, #0]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	200196cc 	.word	0x200196cc

08006400 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006408:	f7ff ffee 	bl	80063e8 <HAL_GetTick>
 800640c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006418:	d005      	beq.n	8006426 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800641a:	4b09      	ldr	r3, [pc, #36]	; (8006440 <HAL_Delay+0x40>)
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	461a      	mov	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4413      	add	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006426:	bf00      	nop
 8006428:	f7ff ffde 	bl	80063e8 <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	429a      	cmp	r2, r3
 8006436:	d8f7      	bhi.n	8006428 <HAL_Delay+0x28>
  {
  }
}
 8006438:	bf00      	nop
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	200000a8 	.word	0x200000a8

08006444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f003 0307 	and.w	r3, r3, #7
 8006452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006454:	4b0c      	ldr	r3, [pc, #48]	; (8006488 <__NVIC_SetPriorityGrouping+0x44>)
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006460:	4013      	ands	r3, r2
 8006462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800646c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006476:	4a04      	ldr	r2, [pc, #16]	; (8006488 <__NVIC_SetPriorityGrouping+0x44>)
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	60d3      	str	r3, [r2, #12]
}
 800647c:	bf00      	nop
 800647e:	3714      	adds	r7, #20
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	e000ed00 	.word	0xe000ed00

0800648c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800648c:	b480      	push	{r7}
 800648e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006490:	4b04      	ldr	r3, [pc, #16]	; (80064a4 <__NVIC_GetPriorityGrouping+0x18>)
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	0a1b      	lsrs	r3, r3, #8
 8006496:	f003 0307 	and.w	r3, r3, #7
}
 800649a:	4618      	mov	r0, r3
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	e000ed00 	.word	0xe000ed00

080064a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	4603      	mov	r3, r0
 80064b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	db0b      	blt.n	80064d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80064ba:	79fb      	ldrb	r3, [r7, #7]
 80064bc:	f003 021f 	and.w	r2, r3, #31
 80064c0:	4907      	ldr	r1, [pc, #28]	; (80064e0 <__NVIC_EnableIRQ+0x38>)
 80064c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064c6:	095b      	lsrs	r3, r3, #5
 80064c8:	2001      	movs	r0, #1
 80064ca:	fa00 f202 	lsl.w	r2, r0, r2
 80064ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80064d2:	bf00      	nop
 80064d4:	370c      	adds	r7, #12
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	e000e100 	.word	0xe000e100

080064e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	4603      	mov	r3, r0
 80064ec:	6039      	str	r1, [r7, #0]
 80064ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	db0a      	blt.n	800650e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	b2da      	uxtb	r2, r3
 80064fc:	490c      	ldr	r1, [pc, #48]	; (8006530 <__NVIC_SetPriority+0x4c>)
 80064fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006502:	0112      	lsls	r2, r2, #4
 8006504:	b2d2      	uxtb	r2, r2
 8006506:	440b      	add	r3, r1
 8006508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800650c:	e00a      	b.n	8006524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	b2da      	uxtb	r2, r3
 8006512:	4908      	ldr	r1, [pc, #32]	; (8006534 <__NVIC_SetPriority+0x50>)
 8006514:	79fb      	ldrb	r3, [r7, #7]
 8006516:	f003 030f 	and.w	r3, r3, #15
 800651a:	3b04      	subs	r3, #4
 800651c:	0112      	lsls	r2, r2, #4
 800651e:	b2d2      	uxtb	r2, r2
 8006520:	440b      	add	r3, r1
 8006522:	761a      	strb	r2, [r3, #24]
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	e000e100 	.word	0xe000e100
 8006534:	e000ed00 	.word	0xe000ed00

08006538 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006538:	b480      	push	{r7}
 800653a:	b089      	sub	sp, #36	; 0x24
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f003 0307 	and.w	r3, r3, #7
 800654a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	f1c3 0307 	rsb	r3, r3, #7
 8006552:	2b04      	cmp	r3, #4
 8006554:	bf28      	it	cs
 8006556:	2304      	movcs	r3, #4
 8006558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	3304      	adds	r3, #4
 800655e:	2b06      	cmp	r3, #6
 8006560:	d902      	bls.n	8006568 <NVIC_EncodePriority+0x30>
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	3b03      	subs	r3, #3
 8006566:	e000      	b.n	800656a <NVIC_EncodePriority+0x32>
 8006568:	2300      	movs	r3, #0
 800656a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800656c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	fa02 f303 	lsl.w	r3, r2, r3
 8006576:	43da      	mvns	r2, r3
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	401a      	ands	r2, r3
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006580:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	fa01 f303 	lsl.w	r3, r1, r3
 800658a:	43d9      	mvns	r1, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006590:	4313      	orrs	r3, r2
         );
}
 8006592:	4618      	mov	r0, r3
 8006594:	3724      	adds	r7, #36	; 0x24
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b082      	sub	sp, #8
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7ff ff4c 	bl	8006444 <__NVIC_SetPriorityGrouping>
}
 80065ac:	bf00      	nop
 80065ae:	3708      	adds	r7, #8
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	4603      	mov	r3, r0
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
 80065c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80065c2:	2300      	movs	r3, #0
 80065c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80065c6:	f7ff ff61 	bl	800648c <__NVIC_GetPriorityGrouping>
 80065ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	68b9      	ldr	r1, [r7, #8]
 80065d0:	6978      	ldr	r0, [r7, #20]
 80065d2:	f7ff ffb1 	bl	8006538 <NVIC_EncodePriority>
 80065d6:	4602      	mov	r2, r0
 80065d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065dc:	4611      	mov	r1, r2
 80065de:	4618      	mov	r0, r3
 80065e0:	f7ff ff80 	bl	80064e4 <__NVIC_SetPriority>
}
 80065e4:	bf00      	nop
 80065e6:	3718      	adds	r7, #24
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	4603      	mov	r3, r0
 80065f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80065f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7ff ff54 	bl	80064a8 <__NVIC_EnableIRQ>
}
 8006600:	bf00      	nop
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b02      	cmp	r3, #2
 800661a:	d004      	beq.n	8006626 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2280      	movs	r2, #128	; 0x80
 8006620:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e00c      	b.n	8006640 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2205      	movs	r2, #5
 800662a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 0201 	bic.w	r2, r2, #1
 800663c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800665e:	4b23      	ldr	r3, [pc, #140]	; (80066ec <HAL_FLASH_Program+0xa0>)
 8006660:	7e1b      	ldrb	r3, [r3, #24]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d101      	bne.n	800666a <HAL_FLASH_Program+0x1e>
 8006666:	2302      	movs	r3, #2
 8006668:	e03b      	b.n	80066e2 <HAL_FLASH_Program+0x96>
 800666a:	4b20      	ldr	r3, [pc, #128]	; (80066ec <HAL_FLASH_Program+0xa0>)
 800666c:	2201      	movs	r2, #1
 800666e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006670:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006674:	f000 f870 	bl	8006758 <FLASH_WaitForLastOperation>
 8006678:	4603      	mov	r3, r0
 800667a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800667c:	7dfb      	ldrb	r3, [r7, #23]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d12b      	bne.n	80066da <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d105      	bne.n	8006694 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8006688:	783b      	ldrb	r3, [r7, #0]
 800668a:	4619      	mov	r1, r3
 800668c:	68b8      	ldr	r0, [r7, #8]
 800668e:	f000 f919 	bl	80068c4 <FLASH_Program_Byte>
 8006692:	e016      	b.n	80066c2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d105      	bne.n	80066a6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800669a:	883b      	ldrh	r3, [r7, #0]
 800669c:	4619      	mov	r1, r3
 800669e:	68b8      	ldr	r0, [r7, #8]
 80066a0:	f000 f8ec 	bl	800687c <FLASH_Program_HalfWord>
 80066a4:	e00d      	b.n	80066c2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d105      	bne.n	80066b8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	4619      	mov	r1, r3
 80066b0:	68b8      	ldr	r0, [r7, #8]
 80066b2:	f000 f8c1 	bl	8006838 <FLASH_Program_Word>
 80066b6:	e004      	b.n	80066c2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80066b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066bc:	68b8      	ldr	r0, [r7, #8]
 80066be:	f000 f88b 	bl	80067d8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80066c2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80066c6:	f000 f847 	bl	8006758 <FLASH_WaitForLastOperation>
 80066ca:	4603      	mov	r3, r0
 80066cc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80066ce:	4b08      	ldr	r3, [pc, #32]	; (80066f0 <HAL_FLASH_Program+0xa4>)
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	4a07      	ldr	r2, [pc, #28]	; (80066f0 <HAL_FLASH_Program+0xa4>)
 80066d4:	f023 0301 	bic.w	r3, r3, #1
 80066d8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80066da:	4b04      	ldr	r3, [pc, #16]	; (80066ec <HAL_FLASH_Program+0xa0>)
 80066dc:	2200      	movs	r2, #0
 80066de:	761a      	strb	r2, [r3, #24]
  
  return status;
 80066e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3718      	adds	r7, #24
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	200196d0 	.word	0x200196d0
 80066f0:	40023c00 	.word	0x40023c00

080066f4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80066fa:	2300      	movs	r3, #0
 80066fc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80066fe:	4b0b      	ldr	r3, [pc, #44]	; (800672c <HAL_FLASH_Unlock+0x38>)
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	2b00      	cmp	r3, #0
 8006704:	da0b      	bge.n	800671e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006706:	4b09      	ldr	r3, [pc, #36]	; (800672c <HAL_FLASH_Unlock+0x38>)
 8006708:	4a09      	ldr	r2, [pc, #36]	; (8006730 <HAL_FLASH_Unlock+0x3c>)
 800670a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800670c:	4b07      	ldr	r3, [pc, #28]	; (800672c <HAL_FLASH_Unlock+0x38>)
 800670e:	4a09      	ldr	r2, [pc, #36]	; (8006734 <HAL_FLASH_Unlock+0x40>)
 8006710:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006712:	4b06      	ldr	r3, [pc, #24]	; (800672c <HAL_FLASH_Unlock+0x38>)
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	2b00      	cmp	r3, #0
 8006718:	da01      	bge.n	800671e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800671e:	79fb      	ldrb	r3, [r7, #7]
}
 8006720:	4618      	mov	r0, r3
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr
 800672c:	40023c00 	.word	0x40023c00
 8006730:	45670123 	.word	0x45670123
 8006734:	cdef89ab 	.word	0xcdef89ab

08006738 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006738:	b480      	push	{r7}
 800673a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800673c:	4b05      	ldr	r3, [pc, #20]	; (8006754 <HAL_FLASH_Lock+0x1c>)
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	4a04      	ldr	r2, [pc, #16]	; (8006754 <HAL_FLASH_Lock+0x1c>)
 8006742:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006746:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr
 8006754:	40023c00 	.word	0x40023c00

08006758 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006760:	2300      	movs	r3, #0
 8006762:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006764:	4b1a      	ldr	r3, [pc, #104]	; (80067d0 <FLASH_WaitForLastOperation+0x78>)
 8006766:	2200      	movs	r2, #0
 8006768:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800676a:	f7ff fe3d 	bl	80063e8 <HAL_GetTick>
 800676e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006770:	e010      	b.n	8006794 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006778:	d00c      	beq.n	8006794 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d007      	beq.n	8006790 <FLASH_WaitForLastOperation+0x38>
 8006780:	f7ff fe32 	bl	80063e8 <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	429a      	cmp	r2, r3
 800678e:	d201      	bcs.n	8006794 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	e019      	b.n	80067c8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006794:	4b0f      	ldr	r3, [pc, #60]	; (80067d4 <FLASH_WaitForLastOperation+0x7c>)
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1e8      	bne.n	8006772 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80067a0:	4b0c      	ldr	r3, [pc, #48]	; (80067d4 <FLASH_WaitForLastOperation+0x7c>)
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80067ac:	4b09      	ldr	r3, [pc, #36]	; (80067d4 <FLASH_WaitForLastOperation+0x7c>)
 80067ae:	2201      	movs	r2, #1
 80067b0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80067b2:	4b08      	ldr	r3, [pc, #32]	; (80067d4 <FLASH_WaitForLastOperation+0x7c>)
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d003      	beq.n	80067c6 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80067be:	f000 f8a3 	bl	8006908 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e000      	b.n	80067c8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
  
}  
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	200196d0 	.word	0x200196d0
 80067d4:	40023c00 	.word	0x40023c00

080067d8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80067d8:	b490      	push	{r4, r7}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80067e4:	4b13      	ldr	r3, [pc, #76]	; (8006834 <FLASH_Program_DoubleWord+0x5c>)
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	4a12      	ldr	r2, [pc, #72]	; (8006834 <FLASH_Program_DoubleWord+0x5c>)
 80067ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80067f0:	4b10      	ldr	r3, [pc, #64]	; (8006834 <FLASH_Program_DoubleWord+0x5c>)
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	4a0f      	ldr	r2, [pc, #60]	; (8006834 <FLASH_Program_DoubleWord+0x5c>)
 80067f6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80067fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80067fc:	4b0d      	ldr	r3, [pc, #52]	; (8006834 <FLASH_Program_DoubleWord+0x5c>)
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	4a0c      	ldr	r2, [pc, #48]	; (8006834 <FLASH_Program_DoubleWord+0x5c>)
 8006802:	f043 0301 	orr.w	r3, r3, #1
 8006806:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800680e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8006812:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006816:	f04f 0300 	mov.w	r3, #0
 800681a:	f04f 0400 	mov.w	r4, #0
 800681e:	0013      	movs	r3, r2
 8006820:	2400      	movs	r4, #0
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	3204      	adds	r2, #4
 8006826:	6013      	str	r3, [r2, #0]
}
 8006828:	bf00      	nop
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bc90      	pop	{r4, r7}
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	40023c00 	.word	0x40023c00

08006838 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006842:	4b0d      	ldr	r3, [pc, #52]	; (8006878 <FLASH_Program_Word+0x40>)
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	4a0c      	ldr	r2, [pc, #48]	; (8006878 <FLASH_Program_Word+0x40>)
 8006848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800684c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800684e:	4b0a      	ldr	r3, [pc, #40]	; (8006878 <FLASH_Program_Word+0x40>)
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	4a09      	ldr	r2, [pc, #36]	; (8006878 <FLASH_Program_Word+0x40>)
 8006854:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006858:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800685a:	4b07      	ldr	r3, [pc, #28]	; (8006878 <FLASH_Program_Word+0x40>)
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	4a06      	ldr	r2, [pc, #24]	; (8006878 <FLASH_Program_Word+0x40>)
 8006860:	f043 0301 	orr.w	r3, r3, #1
 8006864:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	601a      	str	r2, [r3, #0]
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr
 8006878:	40023c00 	.word	0x40023c00

0800687c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006888:	4b0d      	ldr	r3, [pc, #52]	; (80068c0 <FLASH_Program_HalfWord+0x44>)
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	4a0c      	ldr	r2, [pc, #48]	; (80068c0 <FLASH_Program_HalfWord+0x44>)
 800688e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006892:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8006894:	4b0a      	ldr	r3, [pc, #40]	; (80068c0 <FLASH_Program_HalfWord+0x44>)
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	4a09      	ldr	r2, [pc, #36]	; (80068c0 <FLASH_Program_HalfWord+0x44>)
 800689a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800689e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80068a0:	4b07      	ldr	r3, [pc, #28]	; (80068c0 <FLASH_Program_HalfWord+0x44>)
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	4a06      	ldr	r2, [pc, #24]	; (80068c0 <FLASH_Program_HalfWord+0x44>)
 80068a6:	f043 0301 	orr.w	r3, r3, #1
 80068aa:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	887a      	ldrh	r2, [r7, #2]
 80068b0:	801a      	strh	r2, [r3, #0]
}
 80068b2:	bf00      	nop
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	40023c00 	.word	0x40023c00

080068c4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	460b      	mov	r3, r1
 80068ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80068d0:	4b0c      	ldr	r3, [pc, #48]	; (8006904 <FLASH_Program_Byte+0x40>)
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	4a0b      	ldr	r2, [pc, #44]	; (8006904 <FLASH_Program_Byte+0x40>)
 80068d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80068dc:	4b09      	ldr	r3, [pc, #36]	; (8006904 <FLASH_Program_Byte+0x40>)
 80068de:	4a09      	ldr	r2, [pc, #36]	; (8006904 <FLASH_Program_Byte+0x40>)
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80068e4:	4b07      	ldr	r3, [pc, #28]	; (8006904 <FLASH_Program_Byte+0x40>)
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	4a06      	ldr	r2, [pc, #24]	; (8006904 <FLASH_Program_Byte+0x40>)
 80068ea:	f043 0301 	orr.w	r3, r3, #1
 80068ee:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	78fa      	ldrb	r2, [r7, #3]
 80068f4:	701a      	strb	r2, [r3, #0]
}
 80068f6:	bf00      	nop
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	40023c00 	.word	0x40023c00

08006908 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8006908:	b480      	push	{r7}
 800690a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800690c:	4b27      	ldr	r3, [pc, #156]	; (80069ac <FLASH_SetErrorCode+0xa4>)
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	f003 0310 	and.w	r3, r3, #16
 8006914:	2b00      	cmp	r3, #0
 8006916:	d008      	beq.n	800692a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006918:	4b25      	ldr	r3, [pc, #148]	; (80069b0 <FLASH_SetErrorCode+0xa8>)
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	f043 0310 	orr.w	r3, r3, #16
 8006920:	4a23      	ldr	r2, [pc, #140]	; (80069b0 <FLASH_SetErrorCode+0xa8>)
 8006922:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006924:	4b21      	ldr	r3, [pc, #132]	; (80069ac <FLASH_SetErrorCode+0xa4>)
 8006926:	2210      	movs	r2, #16
 8006928:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800692a:	4b20      	ldr	r3, [pc, #128]	; (80069ac <FLASH_SetErrorCode+0xa4>)
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	f003 0320 	and.w	r3, r3, #32
 8006932:	2b00      	cmp	r3, #0
 8006934:	d008      	beq.n	8006948 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8006936:	4b1e      	ldr	r3, [pc, #120]	; (80069b0 <FLASH_SetErrorCode+0xa8>)
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	f043 0308 	orr.w	r3, r3, #8
 800693e:	4a1c      	ldr	r2, [pc, #112]	; (80069b0 <FLASH_SetErrorCode+0xa8>)
 8006940:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8006942:	4b1a      	ldr	r3, [pc, #104]	; (80069ac <FLASH_SetErrorCode+0xa4>)
 8006944:	2220      	movs	r2, #32
 8006946:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8006948:	4b18      	ldr	r3, [pc, #96]	; (80069ac <FLASH_SetErrorCode+0xa4>)
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006950:	2b00      	cmp	r3, #0
 8006952:	d008      	beq.n	8006966 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006954:	4b16      	ldr	r3, [pc, #88]	; (80069b0 <FLASH_SetErrorCode+0xa8>)
 8006956:	69db      	ldr	r3, [r3, #28]
 8006958:	f043 0304 	orr.w	r3, r3, #4
 800695c:	4a14      	ldr	r2, [pc, #80]	; (80069b0 <FLASH_SetErrorCode+0xa8>)
 800695e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8006960:	4b12      	ldr	r3, [pc, #72]	; (80069ac <FLASH_SetErrorCode+0xa4>)
 8006962:	2240      	movs	r2, #64	; 0x40
 8006964:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8006966:	4b11      	ldr	r3, [pc, #68]	; (80069ac <FLASH_SetErrorCode+0xa4>)
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800696e:	2b00      	cmp	r3, #0
 8006970:	d008      	beq.n	8006984 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8006972:	4b0f      	ldr	r3, [pc, #60]	; (80069b0 <FLASH_SetErrorCode+0xa8>)
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	f043 0302 	orr.w	r3, r3, #2
 800697a:	4a0d      	ldr	r2, [pc, #52]	; (80069b0 <FLASH_SetErrorCode+0xa8>)
 800697c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800697e:	4b0b      	ldr	r3, [pc, #44]	; (80069ac <FLASH_SetErrorCode+0xa4>)
 8006980:	2280      	movs	r2, #128	; 0x80
 8006982:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8006984:	4b09      	ldr	r3, [pc, #36]	; (80069ac <FLASH_SetErrorCode+0xa4>)
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	f003 0302 	and.w	r3, r3, #2
 800698c:	2b00      	cmp	r3, #0
 800698e:	d008      	beq.n	80069a2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006990:	4b07      	ldr	r3, [pc, #28]	; (80069b0 <FLASH_SetErrorCode+0xa8>)
 8006992:	69db      	ldr	r3, [r3, #28]
 8006994:	f043 0320 	orr.w	r3, r3, #32
 8006998:	4a05      	ldr	r2, [pc, #20]	; (80069b0 <FLASH_SetErrorCode+0xa8>)
 800699a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800699c:	4b03      	ldr	r3, [pc, #12]	; (80069ac <FLASH_SetErrorCode+0xa4>)
 800699e:	2202      	movs	r2, #2
 80069a0:	60da      	str	r2, [r3, #12]
  }
}
 80069a2:	bf00      	nop
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	40023c00 	.word	0x40023c00
 80069b0:	200196d0 	.word	0x200196d0

080069b4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80069c2:	2300      	movs	r3, #0
 80069c4:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80069c6:	4b31      	ldr	r3, [pc, #196]	; (8006a8c <HAL_FLASHEx_Erase+0xd8>)
 80069c8:	7e1b      	ldrb	r3, [r3, #24]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d101      	bne.n	80069d2 <HAL_FLASHEx_Erase+0x1e>
 80069ce:	2302      	movs	r3, #2
 80069d0:	e058      	b.n	8006a84 <HAL_FLASHEx_Erase+0xd0>
 80069d2:	4b2e      	ldr	r3, [pc, #184]	; (8006a8c <HAL_FLASHEx_Erase+0xd8>)
 80069d4:	2201      	movs	r2, #1
 80069d6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80069d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80069dc:	f7ff febc 	bl	8006758 <FLASH_WaitForLastOperation>
 80069e0:	4603      	mov	r3, r0
 80069e2:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d148      	bne.n	8006a7c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069f0:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d115      	bne.n	8006a26 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	4619      	mov	r1, r3
 8006a06:	4610      	mov	r0, r2
 8006a08:	f000 f844 	bl	8006a94 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006a0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006a10:	f7ff fea2 	bl	8006758 <FLASH_WaitForLastOperation>
 8006a14:	4603      	mov	r3, r0
 8006a16:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8006a18:	4b1d      	ldr	r3, [pc, #116]	; (8006a90 <HAL_FLASHEx_Erase+0xdc>)
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	4a1c      	ldr	r2, [pc, #112]	; (8006a90 <HAL_FLASHEx_Erase+0xdc>)
 8006a1e:	f023 0304 	bic.w	r3, r3, #4
 8006a22:	6113      	str	r3, [r2, #16]
 8006a24:	e028      	b.n	8006a78 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	60bb      	str	r3, [r7, #8]
 8006a2c:	e01c      	b.n	8006a68 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	4619      	mov	r1, r3
 8006a36:	68b8      	ldr	r0, [r7, #8]
 8006a38:	f000 f850 	bl	8006adc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006a3c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006a40:	f7ff fe8a 	bl	8006758 <FLASH_WaitForLastOperation>
 8006a44:	4603      	mov	r3, r0
 8006a46:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8006a48:	4b11      	ldr	r3, [pc, #68]	; (8006a90 <HAL_FLASHEx_Erase+0xdc>)
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	4a10      	ldr	r2, [pc, #64]	; (8006a90 <HAL_FLASHEx_Erase+0xdc>)
 8006a4e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8006a52:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8006a54:	7bfb      	ldrb	r3, [r7, #15]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d003      	beq.n	8006a62 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	601a      	str	r2, [r3, #0]
          break;
 8006a60:	e00a      	b.n	8006a78 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	3301      	adds	r3, #1
 8006a66:	60bb      	str	r3, [r7, #8]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68da      	ldr	r2, [r3, #12]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	4413      	add	r3, r2
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d3da      	bcc.n	8006a2e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8006a78:	f000 f878 	bl	8006b6c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006a7c:	4b03      	ldr	r3, [pc, #12]	; (8006a8c <HAL_FLASHEx_Erase+0xd8>)
 8006a7e:	2200      	movs	r2, #0
 8006a80:	761a      	strb	r2, [r3, #24]

  return status;
 8006a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	200196d0 	.word	0x200196d0
 8006a90:	40023c00 	.word	0x40023c00

08006a94 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	6039      	str	r1, [r7, #0]
 8006a9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006aa0:	4b0d      	ldr	r3, [pc, #52]	; (8006ad8 <FLASH_MassErase+0x44>)
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	4a0c      	ldr	r2, [pc, #48]	; (8006ad8 <FLASH_MassErase+0x44>)
 8006aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aaa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8006aac:	4b0a      	ldr	r3, [pc, #40]	; (8006ad8 <FLASH_MassErase+0x44>)
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	4a09      	ldr	r2, [pc, #36]	; (8006ad8 <FLASH_MassErase+0x44>)
 8006ab2:	f043 0304 	orr.w	r3, r3, #4
 8006ab6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8006ab8:	4b07      	ldr	r3, [pc, #28]	; (8006ad8 <FLASH_MassErase+0x44>)
 8006aba:	691a      	ldr	r2, [r3, #16]
 8006abc:	79fb      	ldrb	r3, [r7, #7]
 8006abe:	021b      	lsls	r3, r3, #8
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	4a05      	ldr	r2, [pc, #20]	; (8006ad8 <FLASH_MassErase+0x44>)
 8006ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ac8:	6113      	str	r3, [r2, #16]
}
 8006aca:	bf00      	nop
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	40023c00 	.word	0x40023c00

08006adc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006aec:	78fb      	ldrb	r3, [r7, #3]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d102      	bne.n	8006af8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8006af2:	2300      	movs	r3, #0
 8006af4:	60fb      	str	r3, [r7, #12]
 8006af6:	e010      	b.n	8006b1a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006af8:	78fb      	ldrb	r3, [r7, #3]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d103      	bne.n	8006b06 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006afe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b02:	60fb      	str	r3, [r7, #12]
 8006b04:	e009      	b.n	8006b1a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8006b06:	78fb      	ldrb	r3, [r7, #3]
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d103      	bne.n	8006b14 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b10:	60fb      	str	r3, [r7, #12]
 8006b12:	e002      	b.n	8006b1a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006b14:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006b18:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006b1a:	4b13      	ldr	r3, [pc, #76]	; (8006b68 <FLASH_Erase_Sector+0x8c>)
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	4a12      	ldr	r2, [pc, #72]	; (8006b68 <FLASH_Erase_Sector+0x8c>)
 8006b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b24:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8006b26:	4b10      	ldr	r3, [pc, #64]	; (8006b68 <FLASH_Erase_Sector+0x8c>)
 8006b28:	691a      	ldr	r2, [r3, #16]
 8006b2a:	490f      	ldr	r1, [pc, #60]	; (8006b68 <FLASH_Erase_Sector+0x8c>)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006b32:	4b0d      	ldr	r3, [pc, #52]	; (8006b68 <FLASH_Erase_Sector+0x8c>)
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	4a0c      	ldr	r2, [pc, #48]	; (8006b68 <FLASH_Erase_Sector+0x8c>)
 8006b38:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006b3c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8006b3e:	4b0a      	ldr	r3, [pc, #40]	; (8006b68 <FLASH_Erase_Sector+0x8c>)
 8006b40:	691a      	ldr	r2, [r3, #16]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	00db      	lsls	r3, r3, #3
 8006b46:	4313      	orrs	r3, r2
 8006b48:	4a07      	ldr	r2, [pc, #28]	; (8006b68 <FLASH_Erase_Sector+0x8c>)
 8006b4a:	f043 0302 	orr.w	r3, r3, #2
 8006b4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006b50:	4b05      	ldr	r3, [pc, #20]	; (8006b68 <FLASH_Erase_Sector+0x8c>)
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	4a04      	ldr	r2, [pc, #16]	; (8006b68 <FLASH_Erase_Sector+0x8c>)
 8006b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b5a:	6113      	str	r3, [r2, #16]
}
 8006b5c:	bf00      	nop
 8006b5e:	3714      	adds	r7, #20
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr
 8006b68:	40023c00 	.word	0x40023c00

08006b6c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8006b70:	4b20      	ldr	r3, [pc, #128]	; (8006bf4 <FLASH_FlushCaches+0x88>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d017      	beq.n	8006bac <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006b7c:	4b1d      	ldr	r3, [pc, #116]	; (8006bf4 <FLASH_FlushCaches+0x88>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a1c      	ldr	r2, [pc, #112]	; (8006bf4 <FLASH_FlushCaches+0x88>)
 8006b82:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b86:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006b88:	4b1a      	ldr	r3, [pc, #104]	; (8006bf4 <FLASH_FlushCaches+0x88>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a19      	ldr	r2, [pc, #100]	; (8006bf4 <FLASH_FlushCaches+0x88>)
 8006b8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006b92:	6013      	str	r3, [r2, #0]
 8006b94:	4b17      	ldr	r3, [pc, #92]	; (8006bf4 <FLASH_FlushCaches+0x88>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a16      	ldr	r2, [pc, #88]	; (8006bf4 <FLASH_FlushCaches+0x88>)
 8006b9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b9e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006ba0:	4b14      	ldr	r3, [pc, #80]	; (8006bf4 <FLASH_FlushCaches+0x88>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a13      	ldr	r2, [pc, #76]	; (8006bf4 <FLASH_FlushCaches+0x88>)
 8006ba6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006baa:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8006bac:	4b11      	ldr	r3, [pc, #68]	; (8006bf4 <FLASH_FlushCaches+0x88>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d017      	beq.n	8006be8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8006bb8:	4b0e      	ldr	r3, [pc, #56]	; (8006bf4 <FLASH_FlushCaches+0x88>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a0d      	ldr	r2, [pc, #52]	; (8006bf4 <FLASH_FlushCaches+0x88>)
 8006bbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bc2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006bc4:	4b0b      	ldr	r3, [pc, #44]	; (8006bf4 <FLASH_FlushCaches+0x88>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a0a      	ldr	r2, [pc, #40]	; (8006bf4 <FLASH_FlushCaches+0x88>)
 8006bca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006bce:	6013      	str	r3, [r2, #0]
 8006bd0:	4b08      	ldr	r3, [pc, #32]	; (8006bf4 <FLASH_FlushCaches+0x88>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a07      	ldr	r2, [pc, #28]	; (8006bf4 <FLASH_FlushCaches+0x88>)
 8006bd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bda:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006bdc:	4b05      	ldr	r3, [pc, #20]	; (8006bf4 <FLASH_FlushCaches+0x88>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a04      	ldr	r2, [pc, #16]	; (8006bf4 <FLASH_FlushCaches+0x88>)
 8006be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006be6:	6013      	str	r3, [r2, #0]
  }
}
 8006be8:	bf00      	nop
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	40023c00 	.word	0x40023c00

08006bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b089      	sub	sp, #36	; 0x24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006c02:	2300      	movs	r3, #0
 8006c04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006c06:	2300      	movs	r3, #0
 8006c08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c0e:	2300      	movs	r3, #0
 8006c10:	61fb      	str	r3, [r7, #28]
 8006c12:	e16b      	b.n	8006eec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006c14:	2201      	movs	r2, #1
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	fa02 f303 	lsl.w	r3, r2, r3
 8006c1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	4013      	ands	r3, r2
 8006c26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	f040 815a 	bne.w	8006ee6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d00b      	beq.n	8006c52 <HAL_GPIO_Init+0x5a>
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d007      	beq.n	8006c52 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006c46:	2b11      	cmp	r3, #17
 8006c48:	d003      	beq.n	8006c52 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	2b12      	cmp	r3, #18
 8006c50:	d130      	bne.n	8006cb4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	005b      	lsls	r3, r3, #1
 8006c5c:	2203      	movs	r2, #3
 8006c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c62:	43db      	mvns	r3, r3
 8006c64:	69ba      	ldr	r2, [r7, #24]
 8006c66:	4013      	ands	r3, r2
 8006c68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	68da      	ldr	r2, [r3, #12]
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	005b      	lsls	r3, r3, #1
 8006c72:	fa02 f303 	lsl.w	r3, r2, r3
 8006c76:	69ba      	ldr	r2, [r7, #24]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006c88:	2201      	movs	r2, #1
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c90:	43db      	mvns	r3, r3
 8006c92:	69ba      	ldr	r2, [r7, #24]
 8006c94:	4013      	ands	r3, r2
 8006c96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	091b      	lsrs	r3, r3, #4
 8006c9e:	f003 0201 	and.w	r2, r3, #1
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca8:	69ba      	ldr	r2, [r7, #24]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	69ba      	ldr	r2, [r7, #24]
 8006cb2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	005b      	lsls	r3, r3, #1
 8006cbe:	2203      	movs	r2, #3
 8006cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc4:	43db      	mvns	r3, r3
 8006cc6:	69ba      	ldr	r2, [r7, #24]
 8006cc8:	4013      	ands	r3, r2
 8006cca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	689a      	ldr	r2, [r3, #8]
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	005b      	lsls	r3, r3, #1
 8006cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd8:	69ba      	ldr	r2, [r7, #24]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	69ba      	ldr	r2, [r7, #24]
 8006ce2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d003      	beq.n	8006cf4 <HAL_GPIO_Init+0xfc>
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	2b12      	cmp	r3, #18
 8006cf2:	d123      	bne.n	8006d3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	08da      	lsrs	r2, r3, #3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	3208      	adds	r2, #8
 8006cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	f003 0307 	and.w	r3, r3, #7
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	220f      	movs	r2, #15
 8006d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d10:	43db      	mvns	r3, r3
 8006d12:	69ba      	ldr	r2, [r7, #24]
 8006d14:	4013      	ands	r3, r2
 8006d16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	691a      	ldr	r2, [r3, #16]
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	f003 0307 	and.w	r3, r3, #7
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	fa02 f303 	lsl.w	r3, r2, r3
 8006d28:	69ba      	ldr	r2, [r7, #24]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	08da      	lsrs	r2, r3, #3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	3208      	adds	r2, #8
 8006d36:	69b9      	ldr	r1, [r7, #24]
 8006d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	2203      	movs	r2, #3
 8006d48:	fa02 f303 	lsl.w	r3, r2, r3
 8006d4c:	43db      	mvns	r3, r3
 8006d4e:	69ba      	ldr	r2, [r7, #24]
 8006d50:	4013      	ands	r3, r2
 8006d52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f003 0203 	and.w	r2, r3, #3
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	005b      	lsls	r3, r3, #1
 8006d60:	fa02 f303 	lsl.w	r3, r2, r3
 8006d64:	69ba      	ldr	r2, [r7, #24]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f000 80b4 	beq.w	8006ee6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d7e:	2300      	movs	r3, #0
 8006d80:	60fb      	str	r3, [r7, #12]
 8006d82:	4b5f      	ldr	r3, [pc, #380]	; (8006f00 <HAL_GPIO_Init+0x308>)
 8006d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d86:	4a5e      	ldr	r2, [pc, #376]	; (8006f00 <HAL_GPIO_Init+0x308>)
 8006d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8006d8e:	4b5c      	ldr	r3, [pc, #368]	; (8006f00 <HAL_GPIO_Init+0x308>)
 8006d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d96:	60fb      	str	r3, [r7, #12]
 8006d98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006d9a:	4a5a      	ldr	r2, [pc, #360]	; (8006f04 <HAL_GPIO_Init+0x30c>)
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	089b      	lsrs	r3, r3, #2
 8006da0:	3302      	adds	r3, #2
 8006da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	f003 0303 	and.w	r3, r3, #3
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	220f      	movs	r2, #15
 8006db2:	fa02 f303 	lsl.w	r3, r2, r3
 8006db6:	43db      	mvns	r3, r3
 8006db8:	69ba      	ldr	r2, [r7, #24]
 8006dba:	4013      	ands	r3, r2
 8006dbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a51      	ldr	r2, [pc, #324]	; (8006f08 <HAL_GPIO_Init+0x310>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d02b      	beq.n	8006e1e <HAL_GPIO_Init+0x226>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a50      	ldr	r2, [pc, #320]	; (8006f0c <HAL_GPIO_Init+0x314>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d025      	beq.n	8006e1a <HAL_GPIO_Init+0x222>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a4f      	ldr	r2, [pc, #316]	; (8006f10 <HAL_GPIO_Init+0x318>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d01f      	beq.n	8006e16 <HAL_GPIO_Init+0x21e>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a4e      	ldr	r2, [pc, #312]	; (8006f14 <HAL_GPIO_Init+0x31c>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d019      	beq.n	8006e12 <HAL_GPIO_Init+0x21a>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a4d      	ldr	r2, [pc, #308]	; (8006f18 <HAL_GPIO_Init+0x320>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d013      	beq.n	8006e0e <HAL_GPIO_Init+0x216>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a4c      	ldr	r2, [pc, #304]	; (8006f1c <HAL_GPIO_Init+0x324>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d00d      	beq.n	8006e0a <HAL_GPIO_Init+0x212>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a4b      	ldr	r2, [pc, #300]	; (8006f20 <HAL_GPIO_Init+0x328>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d007      	beq.n	8006e06 <HAL_GPIO_Init+0x20e>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a4a      	ldr	r2, [pc, #296]	; (8006f24 <HAL_GPIO_Init+0x32c>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d101      	bne.n	8006e02 <HAL_GPIO_Init+0x20a>
 8006dfe:	2307      	movs	r3, #7
 8006e00:	e00e      	b.n	8006e20 <HAL_GPIO_Init+0x228>
 8006e02:	2308      	movs	r3, #8
 8006e04:	e00c      	b.n	8006e20 <HAL_GPIO_Init+0x228>
 8006e06:	2306      	movs	r3, #6
 8006e08:	e00a      	b.n	8006e20 <HAL_GPIO_Init+0x228>
 8006e0a:	2305      	movs	r3, #5
 8006e0c:	e008      	b.n	8006e20 <HAL_GPIO_Init+0x228>
 8006e0e:	2304      	movs	r3, #4
 8006e10:	e006      	b.n	8006e20 <HAL_GPIO_Init+0x228>
 8006e12:	2303      	movs	r3, #3
 8006e14:	e004      	b.n	8006e20 <HAL_GPIO_Init+0x228>
 8006e16:	2302      	movs	r3, #2
 8006e18:	e002      	b.n	8006e20 <HAL_GPIO_Init+0x228>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e000      	b.n	8006e20 <HAL_GPIO_Init+0x228>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	69fa      	ldr	r2, [r7, #28]
 8006e22:	f002 0203 	and.w	r2, r2, #3
 8006e26:	0092      	lsls	r2, r2, #2
 8006e28:	4093      	lsls	r3, r2
 8006e2a:	69ba      	ldr	r2, [r7, #24]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e30:	4934      	ldr	r1, [pc, #208]	; (8006f04 <HAL_GPIO_Init+0x30c>)
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	089b      	lsrs	r3, r3, #2
 8006e36:	3302      	adds	r3, #2
 8006e38:	69ba      	ldr	r2, [r7, #24]
 8006e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006e3e:	4b3a      	ldr	r3, [pc, #232]	; (8006f28 <HAL_GPIO_Init+0x330>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	43db      	mvns	r3, r3
 8006e48:	69ba      	ldr	r2, [r7, #24]
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d003      	beq.n	8006e62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006e5a:	69ba      	ldr	r2, [r7, #24]
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006e62:	4a31      	ldr	r2, [pc, #196]	; (8006f28 <HAL_GPIO_Init+0x330>)
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006e68:	4b2f      	ldr	r3, [pc, #188]	; (8006f28 <HAL_GPIO_Init+0x330>)
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	43db      	mvns	r3, r3
 8006e72:	69ba      	ldr	r2, [r7, #24]
 8006e74:	4013      	ands	r3, r2
 8006e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d003      	beq.n	8006e8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006e84:	69ba      	ldr	r2, [r7, #24]
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006e8c:	4a26      	ldr	r2, [pc, #152]	; (8006f28 <HAL_GPIO_Init+0x330>)
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006e92:	4b25      	ldr	r3, [pc, #148]	; (8006f28 <HAL_GPIO_Init+0x330>)
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	43db      	mvns	r3, r3
 8006e9c:	69ba      	ldr	r2, [r7, #24]
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d003      	beq.n	8006eb6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006eae:	69ba      	ldr	r2, [r7, #24]
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006eb6:	4a1c      	ldr	r2, [pc, #112]	; (8006f28 <HAL_GPIO_Init+0x330>)
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006ebc:	4b1a      	ldr	r3, [pc, #104]	; (8006f28 <HAL_GPIO_Init+0x330>)
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	43db      	mvns	r3, r3
 8006ec6:	69ba      	ldr	r2, [r7, #24]
 8006ec8:	4013      	ands	r3, r2
 8006eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d003      	beq.n	8006ee0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006ed8:	69ba      	ldr	r2, [r7, #24]
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006ee0:	4a11      	ldr	r2, [pc, #68]	; (8006f28 <HAL_GPIO_Init+0x330>)
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	61fb      	str	r3, [r7, #28]
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	2b0f      	cmp	r3, #15
 8006ef0:	f67f ae90 	bls.w	8006c14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006ef4:	bf00      	nop
 8006ef6:	3724      	adds	r7, #36	; 0x24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr
 8006f00:	40023800 	.word	0x40023800
 8006f04:	40013800 	.word	0x40013800
 8006f08:	40020000 	.word	0x40020000
 8006f0c:	40020400 	.word	0x40020400
 8006f10:	40020800 	.word	0x40020800
 8006f14:	40020c00 	.word	0x40020c00
 8006f18:	40021000 	.word	0x40021000
 8006f1c:	40021400 	.word	0x40021400
 8006f20:	40021800 	.word	0x40021800
 8006f24:	40021c00 	.word	0x40021c00
 8006f28:	40013c00 	.word	0x40013c00

08006f2c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b087      	sub	sp, #28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006f36:	2300      	movs	r3, #0
 8006f38:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f42:	2300      	movs	r3, #0
 8006f44:	617b      	str	r3, [r7, #20]
 8006f46:	e0cd      	b.n	80070e4 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006f48:	2201      	movs	r2, #1
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f50:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006f52:	683a      	ldr	r2, [r7, #0]
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	4013      	ands	r3, r2
 8006f58:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	f040 80bd 	bne.w	80070de <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006f64:	4a64      	ldr	r2, [pc, #400]	; (80070f8 <HAL_GPIO_DeInit+0x1cc>)
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	089b      	lsrs	r3, r3, #2
 8006f6a:	3302      	adds	r3, #2
 8006f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f70:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f003 0303 	and.w	r3, r3, #3
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	220f      	movs	r2, #15
 8006f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	4013      	ands	r3, r2
 8006f84:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a5c      	ldr	r2, [pc, #368]	; (80070fc <HAL_GPIO_DeInit+0x1d0>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d02b      	beq.n	8006fe6 <HAL_GPIO_DeInit+0xba>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a5b      	ldr	r2, [pc, #364]	; (8007100 <HAL_GPIO_DeInit+0x1d4>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d025      	beq.n	8006fe2 <HAL_GPIO_DeInit+0xb6>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a5a      	ldr	r2, [pc, #360]	; (8007104 <HAL_GPIO_DeInit+0x1d8>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d01f      	beq.n	8006fde <HAL_GPIO_DeInit+0xb2>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a59      	ldr	r2, [pc, #356]	; (8007108 <HAL_GPIO_DeInit+0x1dc>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d019      	beq.n	8006fda <HAL_GPIO_DeInit+0xae>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a58      	ldr	r2, [pc, #352]	; (800710c <HAL_GPIO_DeInit+0x1e0>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d013      	beq.n	8006fd6 <HAL_GPIO_DeInit+0xaa>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a57      	ldr	r2, [pc, #348]	; (8007110 <HAL_GPIO_DeInit+0x1e4>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d00d      	beq.n	8006fd2 <HAL_GPIO_DeInit+0xa6>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a56      	ldr	r2, [pc, #344]	; (8007114 <HAL_GPIO_DeInit+0x1e8>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d007      	beq.n	8006fce <HAL_GPIO_DeInit+0xa2>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a55      	ldr	r2, [pc, #340]	; (8007118 <HAL_GPIO_DeInit+0x1ec>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d101      	bne.n	8006fca <HAL_GPIO_DeInit+0x9e>
 8006fc6:	2307      	movs	r3, #7
 8006fc8:	e00e      	b.n	8006fe8 <HAL_GPIO_DeInit+0xbc>
 8006fca:	2308      	movs	r3, #8
 8006fcc:	e00c      	b.n	8006fe8 <HAL_GPIO_DeInit+0xbc>
 8006fce:	2306      	movs	r3, #6
 8006fd0:	e00a      	b.n	8006fe8 <HAL_GPIO_DeInit+0xbc>
 8006fd2:	2305      	movs	r3, #5
 8006fd4:	e008      	b.n	8006fe8 <HAL_GPIO_DeInit+0xbc>
 8006fd6:	2304      	movs	r3, #4
 8006fd8:	e006      	b.n	8006fe8 <HAL_GPIO_DeInit+0xbc>
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e004      	b.n	8006fe8 <HAL_GPIO_DeInit+0xbc>
 8006fde:	2302      	movs	r3, #2
 8006fe0:	e002      	b.n	8006fe8 <HAL_GPIO_DeInit+0xbc>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e000      	b.n	8006fe8 <HAL_GPIO_DeInit+0xbc>
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	f002 0203 	and.w	r2, r2, #3
 8006fee:	0092      	lsls	r2, r2, #2
 8006ff0:	4093      	lsls	r3, r2
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d132      	bne.n	800705e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006ff8:	4b48      	ldr	r3, [pc, #288]	; (800711c <HAL_GPIO_DeInit+0x1f0>)
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	43db      	mvns	r3, r3
 8007000:	4946      	ldr	r1, [pc, #280]	; (800711c <HAL_GPIO_DeInit+0x1f0>)
 8007002:	4013      	ands	r3, r2
 8007004:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007006:	4b45      	ldr	r3, [pc, #276]	; (800711c <HAL_GPIO_DeInit+0x1f0>)
 8007008:	685a      	ldr	r2, [r3, #4]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	43db      	mvns	r3, r3
 800700e:	4943      	ldr	r1, [pc, #268]	; (800711c <HAL_GPIO_DeInit+0x1f0>)
 8007010:	4013      	ands	r3, r2
 8007012:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007014:	4b41      	ldr	r3, [pc, #260]	; (800711c <HAL_GPIO_DeInit+0x1f0>)
 8007016:	689a      	ldr	r2, [r3, #8]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	43db      	mvns	r3, r3
 800701c:	493f      	ldr	r1, [pc, #252]	; (800711c <HAL_GPIO_DeInit+0x1f0>)
 800701e:	4013      	ands	r3, r2
 8007020:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007022:	4b3e      	ldr	r3, [pc, #248]	; (800711c <HAL_GPIO_DeInit+0x1f0>)
 8007024:	68da      	ldr	r2, [r3, #12]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	43db      	mvns	r3, r3
 800702a:	493c      	ldr	r1, [pc, #240]	; (800711c <HAL_GPIO_DeInit+0x1f0>)
 800702c:	4013      	ands	r3, r2
 800702e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	f003 0303 	and.w	r3, r3, #3
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	220f      	movs	r2, #15
 800703a:	fa02 f303 	lsl.w	r3, r2, r3
 800703e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007040:	4a2d      	ldr	r2, [pc, #180]	; (80070f8 <HAL_GPIO_DeInit+0x1cc>)
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	089b      	lsrs	r3, r3, #2
 8007046:	3302      	adds	r3, #2
 8007048:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	43da      	mvns	r2, r3
 8007050:	4829      	ldr	r0, [pc, #164]	; (80070f8 <HAL_GPIO_DeInit+0x1cc>)
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	089b      	lsrs	r3, r3, #2
 8007056:	400a      	ands	r2, r1
 8007058:	3302      	adds	r3, #2
 800705a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	2103      	movs	r1, #3
 8007068:	fa01 f303 	lsl.w	r3, r1, r3
 800706c:	43db      	mvns	r3, r3
 800706e:	401a      	ands	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	08da      	lsrs	r2, r3, #3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	3208      	adds	r2, #8
 800707c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	f003 0307 	and.w	r3, r3, #7
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	220f      	movs	r2, #15
 800708a:	fa02 f303 	lsl.w	r3, r2, r3
 800708e:	43db      	mvns	r3, r3
 8007090:	697a      	ldr	r2, [r7, #20]
 8007092:	08d2      	lsrs	r2, r2, #3
 8007094:	4019      	ands	r1, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	3208      	adds	r2, #8
 800709a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	2103      	movs	r1, #3
 80070a8:	fa01 f303 	lsl.w	r3, r1, r3
 80070ac:	43db      	mvns	r3, r3
 80070ae:	401a      	ands	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685a      	ldr	r2, [r3, #4]
 80070b8:	2101      	movs	r1, #1
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	fa01 f303 	lsl.w	r3, r1, r3
 80070c0:	43db      	mvns	r3, r3
 80070c2:	401a      	ands	r2, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	689a      	ldr	r2, [r3, #8]
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	005b      	lsls	r3, r3, #1
 80070d0:	2103      	movs	r1, #3
 80070d2:	fa01 f303 	lsl.w	r3, r1, r3
 80070d6:	43db      	mvns	r3, r3
 80070d8:	401a      	ands	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	3301      	adds	r3, #1
 80070e2:	617b      	str	r3, [r7, #20]
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	2b0f      	cmp	r3, #15
 80070e8:	f67f af2e 	bls.w	8006f48 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80070ec:	bf00      	nop
 80070ee:	371c      	adds	r7, #28
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr
 80070f8:	40013800 	.word	0x40013800
 80070fc:	40020000 	.word	0x40020000
 8007100:	40020400 	.word	0x40020400
 8007104:	40020800 	.word	0x40020800
 8007108:	40020c00 	.word	0x40020c00
 800710c:	40021000 	.word	0x40021000
 8007110:	40021400 	.word	0x40021400
 8007114:	40021800 	.word	0x40021800
 8007118:	40021c00 	.word	0x40021c00
 800711c:	40013c00 	.word	0x40013c00

08007120 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	460b      	mov	r3, r1
 800712a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	691a      	ldr	r2, [r3, #16]
 8007130:	887b      	ldrh	r3, [r7, #2]
 8007132:	4013      	ands	r3, r2
 8007134:	2b00      	cmp	r3, #0
 8007136:	d002      	beq.n	800713e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007138:	2301      	movs	r3, #1
 800713a:	73fb      	strb	r3, [r7, #15]
 800713c:	e001      	b.n	8007142 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800713e:	2300      	movs	r3, #0
 8007140:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007142:	7bfb      	ldrb	r3, [r7, #15]
}
 8007144:	4618      	mov	r0, r3
 8007146:	3714      	adds	r7, #20
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	460b      	mov	r3, r1
 800715a:	807b      	strh	r3, [r7, #2]
 800715c:	4613      	mov	r3, r2
 800715e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007160:	787b      	ldrb	r3, [r7, #1]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d003      	beq.n	800716e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007166:	887a      	ldrh	r2, [r7, #2]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800716c:	e003      	b.n	8007176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800716e:	887b      	ldrh	r3, [r7, #2]
 8007170:	041a      	lsls	r2, r3, #16
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	619a      	str	r2, [r3, #24]
}
 8007176:	bf00      	nop
 8007178:	370c      	adds	r7, #12
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr

08007182 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007182:	b480      	push	{r7}
 8007184:	b083      	sub	sp, #12
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
 800718a:	460b      	mov	r3, r1
 800718c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	695a      	ldr	r2, [r3, #20]
 8007192:	887b      	ldrh	r3, [r7, #2]
 8007194:	401a      	ands	r2, r3
 8007196:	887b      	ldrh	r3, [r7, #2]
 8007198:	429a      	cmp	r2, r3
 800719a:	d104      	bne.n	80071a6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800719c:	887b      	ldrh	r3, [r7, #2]
 800719e:	041a      	lsls	r2, r3, #16
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80071a4:	e002      	b.n	80071ac <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80071a6:	887a      	ldrh	r2, [r7, #2]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	619a      	str	r2, [r3, #24]
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d101      	bne.n	80071ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e11f      	b.n	800740a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d106      	bne.n	80071e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7fe fe1a 	bl	8005e18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2224      	movs	r2, #36	; 0x24
 80071e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f022 0201 	bic.w	r2, r2, #1
 80071fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800720a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800721a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800721c:	f001 fcc6 	bl	8008bac <HAL_RCC_GetPCLK1Freq>
 8007220:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	4a7b      	ldr	r2, [pc, #492]	; (8007414 <HAL_I2C_Init+0x25c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d807      	bhi.n	800723c <HAL_I2C_Init+0x84>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	4a7a      	ldr	r2, [pc, #488]	; (8007418 <HAL_I2C_Init+0x260>)
 8007230:	4293      	cmp	r3, r2
 8007232:	bf94      	ite	ls
 8007234:	2301      	movls	r3, #1
 8007236:	2300      	movhi	r3, #0
 8007238:	b2db      	uxtb	r3, r3
 800723a:	e006      	b.n	800724a <HAL_I2C_Init+0x92>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4a77      	ldr	r2, [pc, #476]	; (800741c <HAL_I2C_Init+0x264>)
 8007240:	4293      	cmp	r3, r2
 8007242:	bf94      	ite	ls
 8007244:	2301      	movls	r3, #1
 8007246:	2300      	movhi	r3, #0
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b00      	cmp	r3, #0
 800724c:	d001      	beq.n	8007252 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e0db      	b.n	800740a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	4a72      	ldr	r2, [pc, #456]	; (8007420 <HAL_I2C_Init+0x268>)
 8007256:	fba2 2303 	umull	r2, r3, r2, r3
 800725a:	0c9b      	lsrs	r3, r3, #18
 800725c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	430a      	orrs	r2, r1
 8007270:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	6a1b      	ldr	r3, [r3, #32]
 8007278:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	4a64      	ldr	r2, [pc, #400]	; (8007414 <HAL_I2C_Init+0x25c>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d802      	bhi.n	800728c <HAL_I2C_Init+0xd4>
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	3301      	adds	r3, #1
 800728a:	e009      	b.n	80072a0 <HAL_I2C_Init+0xe8>
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007292:	fb02 f303 	mul.w	r3, r2, r3
 8007296:	4a63      	ldr	r2, [pc, #396]	; (8007424 <HAL_I2C_Init+0x26c>)
 8007298:	fba2 2303 	umull	r2, r3, r2, r3
 800729c:	099b      	lsrs	r3, r3, #6
 800729e:	3301      	adds	r3, #1
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	6812      	ldr	r2, [r2, #0]
 80072a4:	430b      	orrs	r3, r1
 80072a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	69db      	ldr	r3, [r3, #28]
 80072ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80072b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	4956      	ldr	r1, [pc, #344]	; (8007414 <HAL_I2C_Init+0x25c>)
 80072bc:	428b      	cmp	r3, r1
 80072be:	d80d      	bhi.n	80072dc <HAL_I2C_Init+0x124>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	1e59      	subs	r1, r3, #1
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	005b      	lsls	r3, r3, #1
 80072ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80072ce:	3301      	adds	r3, #1
 80072d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072d4:	2b04      	cmp	r3, #4
 80072d6:	bf38      	it	cc
 80072d8:	2304      	movcc	r3, #4
 80072da:	e04f      	b.n	800737c <HAL_I2C_Init+0x1c4>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d111      	bne.n	8007308 <HAL_I2C_Init+0x150>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	1e58      	subs	r0, r3, #1
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6859      	ldr	r1, [r3, #4]
 80072ec:	460b      	mov	r3, r1
 80072ee:	005b      	lsls	r3, r3, #1
 80072f0:	440b      	add	r3, r1
 80072f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80072f6:	3301      	adds	r3, #1
 80072f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	bf0c      	ite	eq
 8007300:	2301      	moveq	r3, #1
 8007302:	2300      	movne	r3, #0
 8007304:	b2db      	uxtb	r3, r3
 8007306:	e012      	b.n	800732e <HAL_I2C_Init+0x176>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	1e58      	subs	r0, r3, #1
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6859      	ldr	r1, [r3, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	440b      	add	r3, r1
 8007316:	0099      	lsls	r1, r3, #2
 8007318:	440b      	add	r3, r1
 800731a:	fbb0 f3f3 	udiv	r3, r0, r3
 800731e:	3301      	adds	r3, #1
 8007320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007324:	2b00      	cmp	r3, #0
 8007326:	bf0c      	ite	eq
 8007328:	2301      	moveq	r3, #1
 800732a:	2300      	movne	r3, #0
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b00      	cmp	r3, #0
 8007330:	d001      	beq.n	8007336 <HAL_I2C_Init+0x17e>
 8007332:	2301      	movs	r3, #1
 8007334:	e022      	b.n	800737c <HAL_I2C_Init+0x1c4>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10e      	bne.n	800735c <HAL_I2C_Init+0x1a4>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	1e58      	subs	r0, r3, #1
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6859      	ldr	r1, [r3, #4]
 8007346:	460b      	mov	r3, r1
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	440b      	add	r3, r1
 800734c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007350:	3301      	adds	r3, #1
 8007352:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800735a:	e00f      	b.n	800737c <HAL_I2C_Init+0x1c4>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	1e58      	subs	r0, r3, #1
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6859      	ldr	r1, [r3, #4]
 8007364:	460b      	mov	r3, r1
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	440b      	add	r3, r1
 800736a:	0099      	lsls	r1, r3, #2
 800736c:	440b      	add	r3, r1
 800736e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007372:	3301      	adds	r3, #1
 8007374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007378:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800737c:	6879      	ldr	r1, [r7, #4]
 800737e:	6809      	ldr	r1, [r1, #0]
 8007380:	4313      	orrs	r3, r2
 8007382:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	69da      	ldr	r2, [r3, #28]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	431a      	orrs	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	430a      	orrs	r2, r1
 800739e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80073aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	6911      	ldr	r1, [r2, #16]
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	68d2      	ldr	r2, [r2, #12]
 80073b6:	4311      	orrs	r1, r2
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	6812      	ldr	r2, [r2, #0]
 80073bc:	430b      	orrs	r3, r1
 80073be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	695a      	ldr	r2, [r3, #20]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	431a      	orrs	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	430a      	orrs	r2, r1
 80073da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f042 0201 	orr.w	r2, r2, #1
 80073ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2220      	movs	r2, #32
 80073f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	000186a0 	.word	0x000186a0
 8007418:	001e847f 	.word	0x001e847f
 800741c:	003d08ff 	.word	0x003d08ff
 8007420:	431bde83 	.word	0x431bde83
 8007424:	10624dd3 	.word	0x10624dd3

08007428 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d101      	bne.n	800743a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e021      	b.n	800747e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2224      	movs	r2, #36	; 0x24
 800743e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f022 0201 	bic.w	r2, r2, #1
 8007450:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7fe fd28 	bl	8005ea8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3708      	adds	r7, #8
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
	...

08007488 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b088      	sub	sp, #32
 800748c:	af02      	add	r7, sp, #8
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	607a      	str	r2, [r7, #4]
 8007492:	461a      	mov	r2, r3
 8007494:	460b      	mov	r3, r1
 8007496:	817b      	strh	r3, [r7, #10]
 8007498:	4613      	mov	r3, r2
 800749a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800749c:	f7fe ffa4 	bl	80063e8 <HAL_GetTick>
 80074a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	2b20      	cmp	r3, #32
 80074ac:	f040 80e0 	bne.w	8007670 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	9300      	str	r3, [sp, #0]
 80074b4:	2319      	movs	r3, #25
 80074b6:	2201      	movs	r2, #1
 80074b8:	4970      	ldr	r1, [pc, #448]	; (800767c <HAL_I2C_Master_Transmit+0x1f4>)
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f000 fd84 	bl	8007fc8 <I2C_WaitOnFlagUntilTimeout>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80074c6:	2302      	movs	r3, #2
 80074c8:	e0d3      	b.n	8007672 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d101      	bne.n	80074d8 <HAL_I2C_Master_Transmit+0x50>
 80074d4:	2302      	movs	r3, #2
 80074d6:	e0cc      	b.n	8007672 <HAL_I2C_Master_Transmit+0x1ea>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0301 	and.w	r3, r3, #1
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d007      	beq.n	80074fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f042 0201 	orr.w	r2, r2, #1
 80074fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800750c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2221      	movs	r2, #33	; 0x21
 8007512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2210      	movs	r2, #16
 800751a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	893a      	ldrh	r2, [r7, #8]
 800752e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007534:	b29a      	uxth	r2, r3
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	4a50      	ldr	r2, [pc, #320]	; (8007680 <HAL_I2C_Master_Transmit+0x1f8>)
 800753e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007540:	8979      	ldrh	r1, [r7, #10]
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	6a3a      	ldr	r2, [r7, #32]
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f000 fbf0 	bl	8007d2c <I2C_MasterRequestWrite>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e08d      	b.n	8007672 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007556:	2300      	movs	r3, #0
 8007558:	613b      	str	r3, [r7, #16]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	613b      	str	r3, [r7, #16]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	699b      	ldr	r3, [r3, #24]
 8007568:	613b      	str	r3, [r7, #16]
 800756a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800756c:	e066      	b.n	800763c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	6a39      	ldr	r1, [r7, #32]
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f000 fdfe 	bl	8008174 <I2C_WaitOnTXEFlagUntilTimeout>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00d      	beq.n	800759a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007582:	2b04      	cmp	r3, #4
 8007584:	d107      	bne.n	8007596 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007594:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e06b      	b.n	8007672 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759e:	781a      	ldrb	r2, [r3, #0]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075aa:	1c5a      	adds	r2, r3, #1
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	3b01      	subs	r3, #1
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075c2:	3b01      	subs	r3, #1
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	f003 0304 	and.w	r3, r3, #4
 80075d4:	2b04      	cmp	r3, #4
 80075d6:	d11b      	bne.n	8007610 <HAL_I2C_Master_Transmit+0x188>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d017      	beq.n	8007610 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e4:	781a      	ldrb	r2, [r3, #0]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f0:	1c5a      	adds	r2, r3, #1
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	3b01      	subs	r3, #1
 80075fe:	b29a      	uxth	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007608:	3b01      	subs	r3, #1
 800760a:	b29a      	uxth	r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007610:	697a      	ldr	r2, [r7, #20]
 8007612:	6a39      	ldr	r1, [r7, #32]
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f000 fdee 	bl	80081f6 <I2C_WaitOnBTFFlagUntilTimeout>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00d      	beq.n	800763c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007624:	2b04      	cmp	r3, #4
 8007626:	d107      	bne.n	8007638 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007636:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	e01a      	b.n	8007672 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007640:	2b00      	cmp	r3, #0
 8007642:	d194      	bne.n	800756e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007652:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2220      	movs	r2, #32
 8007658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800766c:	2300      	movs	r3, #0
 800766e:	e000      	b.n	8007672 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007670:	2302      	movs	r3, #2
  }
}
 8007672:	4618      	mov	r0, r3
 8007674:	3718      	adds	r7, #24
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	00100002 	.word	0x00100002
 8007680:	ffff0000 	.word	0xffff0000

08007684 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b08c      	sub	sp, #48	; 0x30
 8007688:	af02      	add	r7, sp, #8
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	607a      	str	r2, [r7, #4]
 800768e:	461a      	mov	r2, r3
 8007690:	460b      	mov	r3, r1
 8007692:	817b      	strh	r3, [r7, #10]
 8007694:	4613      	mov	r3, r2
 8007696:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007698:	f7fe fea6 	bl	80063e8 <HAL_GetTick>
 800769c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b20      	cmp	r3, #32
 80076a8:	f040 820b 	bne.w	8007ac2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80076ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ae:	9300      	str	r3, [sp, #0]
 80076b0:	2319      	movs	r3, #25
 80076b2:	2201      	movs	r2, #1
 80076b4:	497c      	ldr	r1, [pc, #496]	; (80078a8 <HAL_I2C_Master_Receive+0x224>)
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f000 fc86 	bl	8007fc8 <I2C_WaitOnFlagUntilTimeout>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d001      	beq.n	80076c6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80076c2:	2302      	movs	r3, #2
 80076c4:	e1fe      	b.n	8007ac4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d101      	bne.n	80076d4 <HAL_I2C_Master_Receive+0x50>
 80076d0:	2302      	movs	r3, #2
 80076d2:	e1f7      	b.n	8007ac4 <HAL_I2C_Master_Receive+0x440>
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d007      	beq.n	80076fa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f042 0201 	orr.w	r2, r2, #1
 80076f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007708:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2222      	movs	r2, #34	; 0x22
 800770e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2210      	movs	r2, #16
 8007716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	893a      	ldrh	r2, [r7, #8]
 800772a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007730:	b29a      	uxth	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	4a5c      	ldr	r2, [pc, #368]	; (80078ac <HAL_I2C_Master_Receive+0x228>)
 800773a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800773c:	8979      	ldrh	r1, [r7, #10]
 800773e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f000 fb74 	bl	8007e30 <I2C_MasterRequestRead>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d001      	beq.n	8007752 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e1b8      	b.n	8007ac4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007756:	2b00      	cmp	r3, #0
 8007758:	d113      	bne.n	8007782 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800775a:	2300      	movs	r3, #0
 800775c:	623b      	str	r3, [r7, #32]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	695b      	ldr	r3, [r3, #20]
 8007764:	623b      	str	r3, [r7, #32]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	623b      	str	r3, [r7, #32]
 800776e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800777e:	601a      	str	r2, [r3, #0]
 8007780:	e18c      	b.n	8007a9c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007786:	2b01      	cmp	r3, #1
 8007788:	d11b      	bne.n	80077c2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007798:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800779a:	2300      	movs	r3, #0
 800779c:	61fb      	str	r3, [r7, #28]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	61fb      	str	r3, [r7, #28]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	61fb      	str	r3, [r7, #28]
 80077ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077be:	601a      	str	r2, [r3, #0]
 80077c0:	e16c      	b.n	8007a9c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d11b      	bne.n	8007802 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077ea:	2300      	movs	r3, #0
 80077ec:	61bb      	str	r3, [r7, #24]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	695b      	ldr	r3, [r3, #20]
 80077f4:	61bb      	str	r3, [r7, #24]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	61bb      	str	r3, [r7, #24]
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	e14c      	b.n	8007a9c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007810:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007812:	2300      	movs	r3, #0
 8007814:	617b      	str	r3, [r7, #20]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	695b      	ldr	r3, [r3, #20]
 800781c:	617b      	str	r3, [r7, #20]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	699b      	ldr	r3, [r3, #24]
 8007824:	617b      	str	r3, [r7, #20]
 8007826:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007828:	e138      	b.n	8007a9c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800782e:	2b03      	cmp	r3, #3
 8007830:	f200 80f1 	bhi.w	8007a16 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007838:	2b01      	cmp	r3, #1
 800783a:	d123      	bne.n	8007884 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800783c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800783e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	f000 fd19 	bl	8008278 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d001      	beq.n	8007850 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	e139      	b.n	8007ac4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	691a      	ldr	r2, [r3, #16]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785a:	b2d2      	uxtb	r2, r2
 800785c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007862:	1c5a      	adds	r2, r3, #1
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800786c:	3b01      	subs	r3, #1
 800786e:	b29a      	uxth	r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007878:	b29b      	uxth	r3, r3
 800787a:	3b01      	subs	r3, #1
 800787c:	b29a      	uxth	r2, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007882:	e10b      	b.n	8007a9c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007888:	2b02      	cmp	r3, #2
 800788a:	d14e      	bne.n	800792a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800788c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788e:	9300      	str	r3, [sp, #0]
 8007890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007892:	2200      	movs	r2, #0
 8007894:	4906      	ldr	r1, [pc, #24]	; (80078b0 <HAL_I2C_Master_Receive+0x22c>)
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f000 fb96 	bl	8007fc8 <I2C_WaitOnFlagUntilTimeout>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d008      	beq.n	80078b4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e10e      	b.n	8007ac4 <HAL_I2C_Master_Receive+0x440>
 80078a6:	bf00      	nop
 80078a8:	00100002 	.word	0x00100002
 80078ac:	ffff0000 	.word	0xffff0000
 80078b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	691a      	ldr	r2, [r3, #16]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ce:	b2d2      	uxtb	r2, r2
 80078d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d6:	1c5a      	adds	r2, r3, #1
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078e0:	3b01      	subs	r3, #1
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	3b01      	subs	r3, #1
 80078f0:	b29a      	uxth	r2, r3
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	691a      	ldr	r2, [r3, #16]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007900:	b2d2      	uxtb	r2, r2
 8007902:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007908:	1c5a      	adds	r2, r3, #1
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007912:	3b01      	subs	r3, #1
 8007914:	b29a      	uxth	r2, r3
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800791e:	b29b      	uxth	r3, r3
 8007920:	3b01      	subs	r3, #1
 8007922:	b29a      	uxth	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007928:	e0b8      	b.n	8007a9c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007930:	2200      	movs	r2, #0
 8007932:	4966      	ldr	r1, [pc, #408]	; (8007acc <HAL_I2C_Master_Receive+0x448>)
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f000 fb47 	bl	8007fc8 <I2C_WaitOnFlagUntilTimeout>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d001      	beq.n	8007944 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	e0bf      	b.n	8007ac4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007952:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	691a      	ldr	r2, [r3, #16]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795e:	b2d2      	uxtb	r2, r2
 8007960:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007966:	1c5a      	adds	r2, r3, #1
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007970:	3b01      	subs	r3, #1
 8007972:	b29a      	uxth	r2, r3
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800797c:	b29b      	uxth	r3, r3
 800797e:	3b01      	subs	r3, #1
 8007980:	b29a      	uxth	r2, r3
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798c:	2200      	movs	r2, #0
 800798e:	494f      	ldr	r1, [pc, #316]	; (8007acc <HAL_I2C_Master_Receive+0x448>)
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f000 fb19 	bl	8007fc8 <I2C_WaitOnFlagUntilTimeout>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d001      	beq.n	80079a0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e091      	b.n	8007ac4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	691a      	ldr	r2, [r3, #16]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ba:	b2d2      	uxtb	r2, r2
 80079bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c2:	1c5a      	adds	r2, r3, #1
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079cc:	3b01      	subs	r3, #1
 80079ce:	b29a      	uxth	r2, r3
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079d8:	b29b      	uxth	r3, r3
 80079da:	3b01      	subs	r3, #1
 80079dc:	b29a      	uxth	r2, r3
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	691a      	ldr	r2, [r3, #16]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ec:	b2d2      	uxtb	r2, r2
 80079ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f4:	1c5a      	adds	r2, r3, #1
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079fe:	3b01      	subs	r3, #1
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	b29a      	uxth	r2, r3
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a14:	e042      	b.n	8007a9c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f000 fc2c 	bl	8008278 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d001      	beq.n	8007a2a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e04c      	b.n	8007ac4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	691a      	ldr	r2, [r3, #16]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a34:	b2d2      	uxtb	r2, r2
 8007a36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3c:	1c5a      	adds	r2, r3, #1
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a46:	3b01      	subs	r3, #1
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	3b01      	subs	r3, #1
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	695b      	ldr	r3, [r3, #20]
 8007a62:	f003 0304 	and.w	r3, r3, #4
 8007a66:	2b04      	cmp	r3, #4
 8007a68:	d118      	bne.n	8007a9c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	691a      	ldr	r2, [r3, #16]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a74:	b2d2      	uxtb	r2, r2
 8007a76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7c:	1c5a      	adds	r2, r3, #1
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a86:	3b01      	subs	r3, #1
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	3b01      	subs	r3, #1
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f47f aec2 	bne.w	800782a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2220      	movs	r2, #32
 8007aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	e000      	b.n	8007ac4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007ac2:	2302      	movs	r3, #2
  }
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3728      	adds	r7, #40	; 0x28
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	00010004 	.word	0x00010004

08007ad0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b08a      	sub	sp, #40	; 0x28
 8007ad4:	af02      	add	r7, sp, #8
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	607a      	str	r2, [r7, #4]
 8007ada:	603b      	str	r3, [r7, #0]
 8007adc:	460b      	mov	r3, r1
 8007ade:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8007ae0:	f7fe fc82 	bl	80063e8 <HAL_GetTick>
 8007ae4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	2b20      	cmp	r3, #32
 8007af4:	f040 8110 	bne.w	8007d18 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	2319      	movs	r3, #25
 8007afe:	2201      	movs	r2, #1
 8007b00:	4988      	ldr	r1, [pc, #544]	; (8007d24 <HAL_I2C_IsDeviceReady+0x254>)
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f000 fa60 	bl	8007fc8 <I2C_WaitOnFlagUntilTimeout>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d001      	beq.n	8007b12 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8007b0e:	2302      	movs	r3, #2
 8007b10:	e103      	b.n	8007d1a <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d101      	bne.n	8007b20 <HAL_I2C_IsDeviceReady+0x50>
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	e0fc      	b.n	8007d1a <HAL_I2C_IsDeviceReady+0x24a>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f003 0301 	and.w	r3, r3, #1
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d007      	beq.n	8007b46 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f042 0201 	orr.w	r2, r2, #1
 8007b44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2224      	movs	r2, #36	; 0x24
 8007b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	4a70      	ldr	r2, [pc, #448]	; (8007d28 <HAL_I2C_IsDeviceReady+0x258>)
 8007b68:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b78:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	9300      	str	r3, [sp, #0]
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f000 fa1e 	bl	8007fc8 <I2C_WaitOnFlagUntilTimeout>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00c      	beq.n	8007bac <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d003      	beq.n	8007ba8 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ba6:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	e0b6      	b.n	8007d1a <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007bac:	897b      	ldrh	r3, [r7, #10]
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007bba:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8007bbc:	f7fe fc14 	bl	80063e8 <HAL_GetTick>
 8007bc0:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	695b      	ldr	r3, [r3, #20]
 8007bc8:	f003 0302 	and.w	r3, r3, #2
 8007bcc:	2b02      	cmp	r3, #2
 8007bce:	bf0c      	ite	eq
 8007bd0:	2301      	moveq	r3, #1
 8007bd2:	2300      	movne	r3, #0
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007be6:	bf0c      	ite	eq
 8007be8:	2301      	moveq	r3, #1
 8007bea:	2300      	movne	r3, #0
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007bf0:	e025      	b.n	8007c3e <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007bf2:	f7fe fbf9 	bl	80063e8 <HAL_GetTick>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	1ad3      	subs	r3, r2, r3
 8007bfc:	683a      	ldr	r2, [r7, #0]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d302      	bcc.n	8007c08 <HAL_I2C_IsDeviceReady+0x138>
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d103      	bne.n	8007c10 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	22a0      	movs	r2, #160	; 0xa0
 8007c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	695b      	ldr	r3, [r3, #20]
 8007c16:	f003 0302 	and.w	r3, r3, #2
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	bf0c      	ite	eq
 8007c1e:	2301      	moveq	r3, #1
 8007c20:	2300      	movne	r3, #0
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	695b      	ldr	r3, [r3, #20]
 8007c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c34:	bf0c      	ite	eq
 8007c36:	2301      	moveq	r3, #1
 8007c38:	2300      	movne	r3, #0
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2ba0      	cmp	r3, #160	; 0xa0
 8007c48:	d005      	beq.n	8007c56 <HAL_I2C_IsDeviceReady+0x186>
 8007c4a:	7dfb      	ldrb	r3, [r7, #23]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d102      	bne.n	8007c56 <HAL_I2C_IsDeviceReady+0x186>
 8007c50:	7dbb      	ldrb	r3, [r7, #22]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d0cd      	beq.n	8007bf2 <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2220      	movs	r2, #32
 8007c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	695b      	ldr	r3, [r3, #20]
 8007c64:	f003 0302 	and.w	r3, r3, #2
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d129      	bne.n	8007cc0 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c7a:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	613b      	str	r3, [r7, #16]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	695b      	ldr	r3, [r3, #20]
 8007c86:	613b      	str	r3, [r7, #16]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	613b      	str	r3, [r7, #16]
 8007c90:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	2319      	movs	r3, #25
 8007c98:	2201      	movs	r2, #1
 8007c9a:	4922      	ldr	r1, [pc, #136]	; (8007d24 <HAL_I2C_IsDeviceReady+0x254>)
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f000 f993 	bl	8007fc8 <I2C_WaitOnFlagUntilTimeout>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d001      	beq.n	8007cac <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e036      	b.n	8007d1a <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2220      	movs	r2, #32
 8007cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	e02c      	b.n	8007d1a <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cce:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007cd8:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	9300      	str	r3, [sp, #0]
 8007cde:	2319      	movs	r3, #25
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	4910      	ldr	r1, [pc, #64]	; (8007d24 <HAL_I2C_IsDeviceReady+0x254>)
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f000 f96f 	bl	8007fc8 <I2C_WaitOnFlagUntilTimeout>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d001      	beq.n	8007cf4 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e012      	b.n	8007d1a <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007cfa:	69ba      	ldr	r2, [r7, #24]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	f4ff af33 	bcc.w	8007b6a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2220      	movs	r2, #32
 8007d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e000      	b.n	8007d1a <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8007d18:	2302      	movs	r3, #2
  }
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3720      	adds	r7, #32
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	00100002 	.word	0x00100002
 8007d28:	ffff0000 	.word	0xffff0000

08007d2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b088      	sub	sp, #32
 8007d30:	af02      	add	r7, sp, #8
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	607a      	str	r2, [r7, #4]
 8007d36:	603b      	str	r3, [r7, #0]
 8007d38:	460b      	mov	r3, r1
 8007d3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	2b08      	cmp	r3, #8
 8007d46:	d006      	beq.n	8007d56 <I2C_MasterRequestWrite+0x2a>
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d003      	beq.n	8007d56 <I2C_MasterRequestWrite+0x2a>
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007d54:	d108      	bne.n	8007d68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d64:	601a      	str	r2, [r3, #0]
 8007d66:	e00b      	b.n	8007d80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d6c:	2b12      	cmp	r3, #18
 8007d6e:	d107      	bne.n	8007d80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	9300      	str	r3, [sp, #0]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f000 f91b 	bl	8007fc8 <I2C_WaitOnFlagUntilTimeout>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00c      	beq.n	8007db2 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d003      	beq.n	8007dae <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007dae:	2303      	movs	r3, #3
 8007db0:	e035      	b.n	8007e1e <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dba:	d108      	bne.n	8007dce <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007dbc:	897b      	ldrh	r3, [r7, #10]
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007dca:	611a      	str	r2, [r3, #16]
 8007dcc:	e01b      	b.n	8007e06 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007dce:	897b      	ldrh	r3, [r7, #10]
 8007dd0:	11db      	asrs	r3, r3, #7
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	f003 0306 	and.w	r3, r3, #6
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	f063 030f 	orn	r3, r3, #15
 8007dde:	b2da      	uxtb	r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	490f      	ldr	r1, [pc, #60]	; (8007e28 <I2C_MasterRequestWrite+0xfc>)
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f000 f942 	bl	8008076 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d001      	beq.n	8007dfc <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e010      	b.n	8007e1e <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007dfc:	897b      	ldrh	r3, [r7, #10]
 8007dfe:	b2da      	uxtb	r2, r3
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	4908      	ldr	r1, [pc, #32]	; (8007e2c <I2C_MasterRequestWrite+0x100>)
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f000 f932 	bl	8008076 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d001      	beq.n	8007e1c <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e000      	b.n	8007e1e <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3718      	adds	r7, #24
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	00010008 	.word	0x00010008
 8007e2c:	00010002 	.word	0x00010002

08007e30 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b088      	sub	sp, #32
 8007e34:	af02      	add	r7, sp, #8
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	607a      	str	r2, [r7, #4]
 8007e3a:	603b      	str	r3, [r7, #0]
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e44:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e54:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	2b08      	cmp	r3, #8
 8007e5a:	d006      	beq.n	8007e6a <I2C_MasterRequestRead+0x3a>
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d003      	beq.n	8007e6a <I2C_MasterRequestRead+0x3a>
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007e68:	d108      	bne.n	8007e7c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e78:	601a      	str	r2, [r3, #0]
 8007e7a:	e00b      	b.n	8007e94 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e80:	2b11      	cmp	r3, #17
 8007e82:	d107      	bne.n	8007e94 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f000 f891 	bl	8007fc8 <I2C_WaitOnFlagUntilTimeout>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00c      	beq.n	8007ec6 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d003      	beq.n	8007ec2 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ec0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e078      	b.n	8007fb8 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ece:	d108      	bne.n	8007ee2 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007ed0:	897b      	ldrh	r3, [r7, #10]
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	f043 0301 	orr.w	r3, r3, #1
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	611a      	str	r2, [r3, #16]
 8007ee0:	e05e      	b.n	8007fa0 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007ee2:	897b      	ldrh	r3, [r7, #10]
 8007ee4:	11db      	asrs	r3, r3, #7
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	f003 0306 	and.w	r3, r3, #6
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	f063 030f 	orn	r3, r3, #15
 8007ef2:	b2da      	uxtb	r2, r3
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	4930      	ldr	r1, [pc, #192]	; (8007fc0 <I2C_MasterRequestRead+0x190>)
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f000 f8b8 	bl	8008076 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d001      	beq.n	8007f10 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e053      	b.n	8007fb8 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007f10:	897b      	ldrh	r3, [r7, #10]
 8007f12:	b2da      	uxtb	r2, r3
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	4929      	ldr	r1, [pc, #164]	; (8007fc4 <I2C_MasterRequestRead+0x194>)
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f000 f8a8 	bl	8008076 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d001      	beq.n	8007f30 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e043      	b.n	8007fb8 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f30:	2300      	movs	r3, #0
 8007f32:	613b      	str	r3, [r7, #16]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	613b      	str	r3, [r7, #16]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	699b      	ldr	r3, [r3, #24]
 8007f42:	613b      	str	r3, [r7, #16]
 8007f44:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f54:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f000 f830 	bl	8007fc8 <I2C_WaitOnFlagUntilTimeout>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00c      	beq.n	8007f88 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d003      	beq.n	8007f84 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f82:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007f84:	2303      	movs	r3, #3
 8007f86:	e017      	b.n	8007fb8 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007f88:	897b      	ldrh	r3, [r7, #10]
 8007f8a:	11db      	asrs	r3, r3, #7
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	f003 0306 	and.w	r3, r3, #6
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	f063 030e 	orn	r3, r3, #14
 8007f98:	b2da      	uxtb	r2, r3
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	4907      	ldr	r1, [pc, #28]	; (8007fc4 <I2C_MasterRequestRead+0x194>)
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f000 f865 	bl	8008076 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d001      	beq.n	8007fb6 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e000      	b.n	8007fb8 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3718      	adds	r7, #24
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	00010008 	.word	0x00010008
 8007fc4:	00010002 	.word	0x00010002

08007fc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	603b      	str	r3, [r7, #0]
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007fd8:	e025      	b.n	8008026 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fe0:	d021      	beq.n	8008026 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fe2:	f7fe fa01 	bl	80063e8 <HAL_GetTick>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	683a      	ldr	r2, [r7, #0]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d302      	bcc.n	8007ff8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d116      	bne.n	8008026 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2220      	movs	r2, #32
 8008002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008012:	f043 0220 	orr.w	r2, r3, #32
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2200      	movs	r2, #0
 800801e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	e023      	b.n	800806e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	0c1b      	lsrs	r3, r3, #16
 800802a:	b2db      	uxtb	r3, r3
 800802c:	2b01      	cmp	r3, #1
 800802e:	d10d      	bne.n	800804c <I2C_WaitOnFlagUntilTimeout+0x84>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	695b      	ldr	r3, [r3, #20]
 8008036:	43da      	mvns	r2, r3
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	4013      	ands	r3, r2
 800803c:	b29b      	uxth	r3, r3
 800803e:	2b00      	cmp	r3, #0
 8008040:	bf0c      	ite	eq
 8008042:	2301      	moveq	r3, #1
 8008044:	2300      	movne	r3, #0
 8008046:	b2db      	uxtb	r3, r3
 8008048:	461a      	mov	r2, r3
 800804a:	e00c      	b.n	8008066 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	43da      	mvns	r2, r3
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	4013      	ands	r3, r2
 8008058:	b29b      	uxth	r3, r3
 800805a:	2b00      	cmp	r3, #0
 800805c:	bf0c      	ite	eq
 800805e:	2301      	moveq	r3, #1
 8008060:	2300      	movne	r3, #0
 8008062:	b2db      	uxtb	r3, r3
 8008064:	461a      	mov	r2, r3
 8008066:	79fb      	ldrb	r3, [r7, #7]
 8008068:	429a      	cmp	r2, r3
 800806a:	d0b6      	beq.n	8007fda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b084      	sub	sp, #16
 800807a:	af00      	add	r7, sp, #0
 800807c:	60f8      	str	r0, [r7, #12]
 800807e:	60b9      	str	r1, [r7, #8]
 8008080:	607a      	str	r2, [r7, #4]
 8008082:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008084:	e051      	b.n	800812a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	695b      	ldr	r3, [r3, #20]
 800808c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008094:	d123      	bne.n	80080de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80080ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2200      	movs	r2, #0
 80080b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2220      	movs	r2, #32
 80080ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ca:	f043 0204 	orr.w	r2, r3, #4
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e046      	b.n	800816c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080e4:	d021      	beq.n	800812a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080e6:	f7fe f97f 	bl	80063e8 <HAL_GetTick>
 80080ea:	4602      	mov	r2, r0
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	1ad3      	subs	r3, r2, r3
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d302      	bcc.n	80080fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d116      	bne.n	800812a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2220      	movs	r2, #32
 8008106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2200      	movs	r2, #0
 800810e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008116:	f043 0220 	orr.w	r2, r3, #32
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2200      	movs	r2, #0
 8008122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e020      	b.n	800816c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	0c1b      	lsrs	r3, r3, #16
 800812e:	b2db      	uxtb	r3, r3
 8008130:	2b01      	cmp	r3, #1
 8008132:	d10c      	bne.n	800814e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	43da      	mvns	r2, r3
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	4013      	ands	r3, r2
 8008140:	b29b      	uxth	r3, r3
 8008142:	2b00      	cmp	r3, #0
 8008144:	bf14      	ite	ne
 8008146:	2301      	movne	r3, #1
 8008148:	2300      	moveq	r3, #0
 800814a:	b2db      	uxtb	r3, r3
 800814c:	e00b      	b.n	8008166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	43da      	mvns	r2, r3
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	4013      	ands	r3, r2
 800815a:	b29b      	uxth	r3, r3
 800815c:	2b00      	cmp	r3, #0
 800815e:	bf14      	ite	ne
 8008160:	2301      	movne	r3, #1
 8008162:	2300      	moveq	r3, #0
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2b00      	cmp	r3, #0
 8008168:	d18d      	bne.n	8008086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008180:	e02d      	b.n	80081de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f000 f8ce 	bl	8008324 <I2C_IsAcknowledgeFailed>
 8008188:	4603      	mov	r3, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d001      	beq.n	8008192 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e02d      	b.n	80081ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008198:	d021      	beq.n	80081de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800819a:	f7fe f925 	bl	80063e8 <HAL_GetTick>
 800819e:	4602      	mov	r2, r0
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	1ad3      	subs	r3, r2, r3
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d302      	bcc.n	80081b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d116      	bne.n	80081de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2200      	movs	r2, #0
 80081b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2220      	movs	r2, #32
 80081ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ca:	f043 0220 	orr.w	r2, r3, #32
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	e007      	b.n	80081ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	695b      	ldr	r3, [r3, #20]
 80081e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081e8:	2b80      	cmp	r3, #128	; 0x80
 80081ea:	d1ca      	bne.n	8008182 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b084      	sub	sp, #16
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	60f8      	str	r0, [r7, #12]
 80081fe:	60b9      	str	r1, [r7, #8]
 8008200:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008202:	e02d      	b.n	8008260 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f000 f88d 	bl	8008324 <I2C_IsAcknowledgeFailed>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d001      	beq.n	8008214 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	e02d      	b.n	8008270 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800821a:	d021      	beq.n	8008260 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800821c:	f7fe f8e4 	bl	80063e8 <HAL_GetTick>
 8008220:	4602      	mov	r2, r0
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	429a      	cmp	r2, r3
 800822a:	d302      	bcc.n	8008232 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d116      	bne.n	8008260 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2200      	movs	r2, #0
 8008236:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2220      	movs	r2, #32
 800823c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2200      	movs	r2, #0
 8008244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824c:	f043 0220 	orr.w	r2, r3, #32
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	e007      	b.n	8008270 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	695b      	ldr	r3, [r3, #20]
 8008266:	f003 0304 	and.w	r3, r3, #4
 800826a:	2b04      	cmp	r3, #4
 800826c:	d1ca      	bne.n	8008204 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008284:	e042      	b.n	800830c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	695b      	ldr	r3, [r3, #20]
 800828c:	f003 0310 	and.w	r3, r3, #16
 8008290:	2b10      	cmp	r3, #16
 8008292:	d119      	bne.n	80082c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f06f 0210 	mvn.w	r2, #16
 800829c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2220      	movs	r2, #32
 80082a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	e029      	b.n	800831c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082c8:	f7fe f88e 	bl	80063e8 <HAL_GetTick>
 80082cc:	4602      	mov	r2, r0
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	1ad3      	subs	r3, r2, r3
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d302      	bcc.n	80082de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d116      	bne.n	800830c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2200      	movs	r2, #0
 80082e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2220      	movs	r2, #32
 80082e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f8:	f043 0220 	orr.w	r2, r3, #32
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2200      	movs	r2, #0
 8008304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	e007      	b.n	800831c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	695b      	ldr	r3, [r3, #20]
 8008312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008316:	2b40      	cmp	r3, #64	; 0x40
 8008318:	d1b5      	bne.n	8008286 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	695b      	ldr	r3, [r3, #20]
 8008332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800833a:	d11b      	bne.n	8008374 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008344:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2220      	movs	r2, #32
 8008350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008360:	f043 0204 	orr.w	r2, r3, #4
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	e000      	b.n	8008376 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
	...

08008384 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b086      	sub	sp, #24
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d101      	bne.n	8008396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e25b      	b.n	800884e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 0301 	and.w	r3, r3, #1
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d075      	beq.n	800848e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80083a2:	4ba3      	ldr	r3, [pc, #652]	; (8008630 <HAL_RCC_OscConfig+0x2ac>)
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	f003 030c 	and.w	r3, r3, #12
 80083aa:	2b04      	cmp	r3, #4
 80083ac:	d00c      	beq.n	80083c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80083ae:	4ba0      	ldr	r3, [pc, #640]	; (8008630 <HAL_RCC_OscConfig+0x2ac>)
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80083b6:	2b08      	cmp	r3, #8
 80083b8:	d112      	bne.n	80083e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80083ba:	4b9d      	ldr	r3, [pc, #628]	; (8008630 <HAL_RCC_OscConfig+0x2ac>)
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083c6:	d10b      	bne.n	80083e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083c8:	4b99      	ldr	r3, [pc, #612]	; (8008630 <HAL_RCC_OscConfig+0x2ac>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d05b      	beq.n	800848c <HAL_RCC_OscConfig+0x108>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d157      	bne.n	800848c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	e236      	b.n	800884e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083e8:	d106      	bne.n	80083f8 <HAL_RCC_OscConfig+0x74>
 80083ea:	4b91      	ldr	r3, [pc, #580]	; (8008630 <HAL_RCC_OscConfig+0x2ac>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a90      	ldr	r2, [pc, #576]	; (8008630 <HAL_RCC_OscConfig+0x2ac>)
 80083f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083f4:	6013      	str	r3, [r2, #0]
 80083f6:	e01d      	b.n	8008434 <HAL_RCC_OscConfig+0xb0>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008400:	d10c      	bne.n	800841c <HAL_RCC_OscConfig+0x98>
 8008402:	4b8b      	ldr	r3, [pc, #556]	; (8008630 <HAL_RCC_OscConfig+0x2ac>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a8a      	ldr	r2, [pc, #552]	; (8008630 <HAL_RCC_OscConfig+0x2ac>)
 8008408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800840c:	6013      	str	r3, [r2, #0]
 800840e:	4b88      	ldr	r3, [pc, #544]	; (8008630 <HAL_RCC_OscConfig+0x2ac>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a87      	ldr	r2, [pc, #540]	; (8008630 <HAL_RCC_OscConfig+0x2ac>)
 8008414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008418:	6013      	str	r3, [r2, #0]
 800841a:	e00b      	b.n	8008434 <HAL_RCC_OscConfig+0xb0>
 800841c:	4b84      	ldr	r3, [pc, #528]	; (8008630 <HAL_RCC_OscConfig+0x2ac>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a83      	ldr	r2, [pc, #524]	; (8008630 <HAL_RCC_OscConfig+0x2ac>)
 8008422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008426:	6013      	str	r3, [r2, #0]
 8008428:	4b81      	ldr	r3, [pc, #516]	; (8008630 <HAL_RCC_OscConfig+0x2ac>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a80      	ldr	r2, [pc, #512]	; (8008630 <HAL_RCC_OscConfig+0x2ac>)
 800842e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008432:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d013      	beq.n	8008464 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800843c:	f7fd ffd4 	bl	80063e8 <HAL_GetTick>
 8008440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008442:	e008      	b.n	8008456 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008444:	f7fd ffd0 	bl	80063e8 <HAL_GetTick>
 8008448:	4602      	mov	r2, r0
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	1ad3      	subs	r3, r2, r3
 800844e:	2b64      	cmp	r3, #100	; 0x64
 8008450:	d901      	bls.n	8008456 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008452:	2303      	movs	r3, #3
 8008454:	e1fb      	b.n	800884e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008456:	4b76      	ldr	r3, [pc, #472]	; (8008630 <HAL_RCC_OscConfig+0x2ac>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800845e:	2b00      	cmp	r3, #0
 8008460:	d0f0      	beq.n	8008444 <HAL_RCC_OscConfig+0xc0>
 8008462:	e014      	b.n	800848e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008464:	f7fd ffc0 	bl	80063e8 <HAL_GetTick>
 8008468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800846a:	e008      	b.n	800847e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800846c:	f7fd ffbc 	bl	80063e8 <HAL_GetTick>
 8008470:	4602      	mov	r2, r0
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	1ad3      	subs	r3, r2, r3
 8008476:	2b64      	cmp	r3, #100	; 0x64
 8008478:	d901      	bls.n	800847e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800847a:	2303      	movs	r3, #3
 800847c:	e1e7      	b.n	800884e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800847e:	4b6c      	ldr	r3, [pc, #432]	; (8008630 <HAL_RCC_OscConfig+0x2ac>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1f0      	bne.n	800846c <HAL_RCC_OscConfig+0xe8>
 800848a:	e000      	b.n	800848e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800848c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 0302 	and.w	r3, r3, #2
 8008496:	2b00      	cmp	r3, #0
 8008498:	d063      	beq.n	8008562 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800849a:	4b65      	ldr	r3, [pc, #404]	; (8008630 <HAL_RCC_OscConfig+0x2ac>)
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	f003 030c 	and.w	r3, r3, #12
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00b      	beq.n	80084be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084a6:	4b62      	ldr	r3, [pc, #392]	; (8008630 <HAL_RCC_OscConfig+0x2ac>)
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80084ae:	2b08      	cmp	r3, #8
 80084b0:	d11c      	bne.n	80084ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084b2:	4b5f      	ldr	r3, [pc, #380]	; (8008630 <HAL_RCC_OscConfig+0x2ac>)
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d116      	bne.n	80084ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084be:	4b5c      	ldr	r3, [pc, #368]	; (8008630 <HAL_RCC_OscConfig+0x2ac>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 0302 	and.w	r3, r3, #2
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d005      	beq.n	80084d6 <HAL_RCC_OscConfig+0x152>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d001      	beq.n	80084d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	e1bb      	b.n	800884e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084d6:	4b56      	ldr	r3, [pc, #344]	; (8008630 <HAL_RCC_OscConfig+0x2ac>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	00db      	lsls	r3, r3, #3
 80084e4:	4952      	ldr	r1, [pc, #328]	; (8008630 <HAL_RCC_OscConfig+0x2ac>)
 80084e6:	4313      	orrs	r3, r2
 80084e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084ea:	e03a      	b.n	8008562 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d020      	beq.n	8008536 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80084f4:	4b4f      	ldr	r3, [pc, #316]	; (8008634 <HAL_RCC_OscConfig+0x2b0>)
 80084f6:	2201      	movs	r2, #1
 80084f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084fa:	f7fd ff75 	bl	80063e8 <HAL_GetTick>
 80084fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008500:	e008      	b.n	8008514 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008502:	f7fd ff71 	bl	80063e8 <HAL_GetTick>
 8008506:	4602      	mov	r2, r0
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	2b02      	cmp	r3, #2
 800850e:	d901      	bls.n	8008514 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008510:	2303      	movs	r3, #3
 8008512:	e19c      	b.n	800884e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008514:	4b46      	ldr	r3, [pc, #280]	; (8008630 <HAL_RCC_OscConfig+0x2ac>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 0302 	and.w	r3, r3, #2
 800851c:	2b00      	cmp	r3, #0
 800851e:	d0f0      	beq.n	8008502 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008520:	4b43      	ldr	r3, [pc, #268]	; (8008630 <HAL_RCC_OscConfig+0x2ac>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	691b      	ldr	r3, [r3, #16]
 800852c:	00db      	lsls	r3, r3, #3
 800852e:	4940      	ldr	r1, [pc, #256]	; (8008630 <HAL_RCC_OscConfig+0x2ac>)
 8008530:	4313      	orrs	r3, r2
 8008532:	600b      	str	r3, [r1, #0]
 8008534:	e015      	b.n	8008562 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008536:	4b3f      	ldr	r3, [pc, #252]	; (8008634 <HAL_RCC_OscConfig+0x2b0>)
 8008538:	2200      	movs	r2, #0
 800853a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800853c:	f7fd ff54 	bl	80063e8 <HAL_GetTick>
 8008540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008542:	e008      	b.n	8008556 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008544:	f7fd ff50 	bl	80063e8 <HAL_GetTick>
 8008548:	4602      	mov	r2, r0
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	1ad3      	subs	r3, r2, r3
 800854e:	2b02      	cmp	r3, #2
 8008550:	d901      	bls.n	8008556 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008552:	2303      	movs	r3, #3
 8008554:	e17b      	b.n	800884e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008556:	4b36      	ldr	r3, [pc, #216]	; (8008630 <HAL_RCC_OscConfig+0x2ac>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f003 0302 	and.w	r3, r3, #2
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1f0      	bne.n	8008544 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f003 0308 	and.w	r3, r3, #8
 800856a:	2b00      	cmp	r3, #0
 800856c:	d030      	beq.n	80085d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d016      	beq.n	80085a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008576:	4b30      	ldr	r3, [pc, #192]	; (8008638 <HAL_RCC_OscConfig+0x2b4>)
 8008578:	2201      	movs	r2, #1
 800857a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800857c:	f7fd ff34 	bl	80063e8 <HAL_GetTick>
 8008580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008582:	e008      	b.n	8008596 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008584:	f7fd ff30 	bl	80063e8 <HAL_GetTick>
 8008588:	4602      	mov	r2, r0
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	1ad3      	subs	r3, r2, r3
 800858e:	2b02      	cmp	r3, #2
 8008590:	d901      	bls.n	8008596 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008592:	2303      	movs	r3, #3
 8008594:	e15b      	b.n	800884e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008596:	4b26      	ldr	r3, [pc, #152]	; (8008630 <HAL_RCC_OscConfig+0x2ac>)
 8008598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800859a:	f003 0302 	and.w	r3, r3, #2
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d0f0      	beq.n	8008584 <HAL_RCC_OscConfig+0x200>
 80085a2:	e015      	b.n	80085d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80085a4:	4b24      	ldr	r3, [pc, #144]	; (8008638 <HAL_RCC_OscConfig+0x2b4>)
 80085a6:	2200      	movs	r2, #0
 80085a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085aa:	f7fd ff1d 	bl	80063e8 <HAL_GetTick>
 80085ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085b0:	e008      	b.n	80085c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80085b2:	f7fd ff19 	bl	80063e8 <HAL_GetTick>
 80085b6:	4602      	mov	r2, r0
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	1ad3      	subs	r3, r2, r3
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d901      	bls.n	80085c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80085c0:	2303      	movs	r3, #3
 80085c2:	e144      	b.n	800884e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085c4:	4b1a      	ldr	r3, [pc, #104]	; (8008630 <HAL_RCC_OscConfig+0x2ac>)
 80085c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085c8:	f003 0302 	and.w	r3, r3, #2
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1f0      	bne.n	80085b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 0304 	and.w	r3, r3, #4
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f000 80a0 	beq.w	800871e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80085de:	2300      	movs	r3, #0
 80085e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80085e2:	4b13      	ldr	r3, [pc, #76]	; (8008630 <HAL_RCC_OscConfig+0x2ac>)
 80085e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d10f      	bne.n	800860e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80085ee:	2300      	movs	r3, #0
 80085f0:	60bb      	str	r3, [r7, #8]
 80085f2:	4b0f      	ldr	r3, [pc, #60]	; (8008630 <HAL_RCC_OscConfig+0x2ac>)
 80085f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f6:	4a0e      	ldr	r2, [pc, #56]	; (8008630 <HAL_RCC_OscConfig+0x2ac>)
 80085f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085fc:	6413      	str	r3, [r2, #64]	; 0x40
 80085fe:	4b0c      	ldr	r3, [pc, #48]	; (8008630 <HAL_RCC_OscConfig+0x2ac>)
 8008600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008606:	60bb      	str	r3, [r7, #8]
 8008608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800860a:	2301      	movs	r3, #1
 800860c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800860e:	4b0b      	ldr	r3, [pc, #44]	; (800863c <HAL_RCC_OscConfig+0x2b8>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008616:	2b00      	cmp	r3, #0
 8008618:	d121      	bne.n	800865e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800861a:	4b08      	ldr	r3, [pc, #32]	; (800863c <HAL_RCC_OscConfig+0x2b8>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a07      	ldr	r2, [pc, #28]	; (800863c <HAL_RCC_OscConfig+0x2b8>)
 8008620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008626:	f7fd fedf 	bl	80063e8 <HAL_GetTick>
 800862a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800862c:	e011      	b.n	8008652 <HAL_RCC_OscConfig+0x2ce>
 800862e:	bf00      	nop
 8008630:	40023800 	.word	0x40023800
 8008634:	42470000 	.word	0x42470000
 8008638:	42470e80 	.word	0x42470e80
 800863c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008640:	f7fd fed2 	bl	80063e8 <HAL_GetTick>
 8008644:	4602      	mov	r2, r0
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	1ad3      	subs	r3, r2, r3
 800864a:	2b02      	cmp	r3, #2
 800864c:	d901      	bls.n	8008652 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800864e:	2303      	movs	r3, #3
 8008650:	e0fd      	b.n	800884e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008652:	4b81      	ldr	r3, [pc, #516]	; (8008858 <HAL_RCC_OscConfig+0x4d4>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800865a:	2b00      	cmp	r3, #0
 800865c:	d0f0      	beq.n	8008640 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	2b01      	cmp	r3, #1
 8008664:	d106      	bne.n	8008674 <HAL_RCC_OscConfig+0x2f0>
 8008666:	4b7d      	ldr	r3, [pc, #500]	; (800885c <HAL_RCC_OscConfig+0x4d8>)
 8008668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800866a:	4a7c      	ldr	r2, [pc, #496]	; (800885c <HAL_RCC_OscConfig+0x4d8>)
 800866c:	f043 0301 	orr.w	r3, r3, #1
 8008670:	6713      	str	r3, [r2, #112]	; 0x70
 8008672:	e01c      	b.n	80086ae <HAL_RCC_OscConfig+0x32a>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	2b05      	cmp	r3, #5
 800867a:	d10c      	bne.n	8008696 <HAL_RCC_OscConfig+0x312>
 800867c:	4b77      	ldr	r3, [pc, #476]	; (800885c <HAL_RCC_OscConfig+0x4d8>)
 800867e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008680:	4a76      	ldr	r2, [pc, #472]	; (800885c <HAL_RCC_OscConfig+0x4d8>)
 8008682:	f043 0304 	orr.w	r3, r3, #4
 8008686:	6713      	str	r3, [r2, #112]	; 0x70
 8008688:	4b74      	ldr	r3, [pc, #464]	; (800885c <HAL_RCC_OscConfig+0x4d8>)
 800868a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800868c:	4a73      	ldr	r2, [pc, #460]	; (800885c <HAL_RCC_OscConfig+0x4d8>)
 800868e:	f043 0301 	orr.w	r3, r3, #1
 8008692:	6713      	str	r3, [r2, #112]	; 0x70
 8008694:	e00b      	b.n	80086ae <HAL_RCC_OscConfig+0x32a>
 8008696:	4b71      	ldr	r3, [pc, #452]	; (800885c <HAL_RCC_OscConfig+0x4d8>)
 8008698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800869a:	4a70      	ldr	r2, [pc, #448]	; (800885c <HAL_RCC_OscConfig+0x4d8>)
 800869c:	f023 0301 	bic.w	r3, r3, #1
 80086a0:	6713      	str	r3, [r2, #112]	; 0x70
 80086a2:	4b6e      	ldr	r3, [pc, #440]	; (800885c <HAL_RCC_OscConfig+0x4d8>)
 80086a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086a6:	4a6d      	ldr	r2, [pc, #436]	; (800885c <HAL_RCC_OscConfig+0x4d8>)
 80086a8:	f023 0304 	bic.w	r3, r3, #4
 80086ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d015      	beq.n	80086e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086b6:	f7fd fe97 	bl	80063e8 <HAL_GetTick>
 80086ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086bc:	e00a      	b.n	80086d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086be:	f7fd fe93 	bl	80063e8 <HAL_GetTick>
 80086c2:	4602      	mov	r2, r0
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d901      	bls.n	80086d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80086d0:	2303      	movs	r3, #3
 80086d2:	e0bc      	b.n	800884e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086d4:	4b61      	ldr	r3, [pc, #388]	; (800885c <HAL_RCC_OscConfig+0x4d8>)
 80086d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086d8:	f003 0302 	and.w	r3, r3, #2
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d0ee      	beq.n	80086be <HAL_RCC_OscConfig+0x33a>
 80086e0:	e014      	b.n	800870c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086e2:	f7fd fe81 	bl	80063e8 <HAL_GetTick>
 80086e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086e8:	e00a      	b.n	8008700 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086ea:	f7fd fe7d 	bl	80063e8 <HAL_GetTick>
 80086ee:	4602      	mov	r2, r0
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	1ad3      	subs	r3, r2, r3
 80086f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d901      	bls.n	8008700 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80086fc:	2303      	movs	r3, #3
 80086fe:	e0a6      	b.n	800884e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008700:	4b56      	ldr	r3, [pc, #344]	; (800885c <HAL_RCC_OscConfig+0x4d8>)
 8008702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008704:	f003 0302 	and.w	r3, r3, #2
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1ee      	bne.n	80086ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800870c:	7dfb      	ldrb	r3, [r7, #23]
 800870e:	2b01      	cmp	r3, #1
 8008710:	d105      	bne.n	800871e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008712:	4b52      	ldr	r3, [pc, #328]	; (800885c <HAL_RCC_OscConfig+0x4d8>)
 8008714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008716:	4a51      	ldr	r2, [pc, #324]	; (800885c <HAL_RCC_OscConfig+0x4d8>)
 8008718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800871c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	699b      	ldr	r3, [r3, #24]
 8008722:	2b00      	cmp	r3, #0
 8008724:	f000 8092 	beq.w	800884c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008728:	4b4c      	ldr	r3, [pc, #304]	; (800885c <HAL_RCC_OscConfig+0x4d8>)
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	f003 030c 	and.w	r3, r3, #12
 8008730:	2b08      	cmp	r3, #8
 8008732:	d05c      	beq.n	80087ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	699b      	ldr	r3, [r3, #24]
 8008738:	2b02      	cmp	r3, #2
 800873a:	d141      	bne.n	80087c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800873c:	4b48      	ldr	r3, [pc, #288]	; (8008860 <HAL_RCC_OscConfig+0x4dc>)
 800873e:	2200      	movs	r2, #0
 8008740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008742:	f7fd fe51 	bl	80063e8 <HAL_GetTick>
 8008746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008748:	e008      	b.n	800875c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800874a:	f7fd fe4d 	bl	80063e8 <HAL_GetTick>
 800874e:	4602      	mov	r2, r0
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	1ad3      	subs	r3, r2, r3
 8008754:	2b02      	cmp	r3, #2
 8008756:	d901      	bls.n	800875c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008758:	2303      	movs	r3, #3
 800875a:	e078      	b.n	800884e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800875c:	4b3f      	ldr	r3, [pc, #252]	; (800885c <HAL_RCC_OscConfig+0x4d8>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1f0      	bne.n	800874a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	69da      	ldr	r2, [r3, #28]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6a1b      	ldr	r3, [r3, #32]
 8008770:	431a      	orrs	r2, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008776:	019b      	lsls	r3, r3, #6
 8008778:	431a      	orrs	r2, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800877e:	085b      	lsrs	r3, r3, #1
 8008780:	3b01      	subs	r3, #1
 8008782:	041b      	lsls	r3, r3, #16
 8008784:	431a      	orrs	r2, r3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878a:	061b      	lsls	r3, r3, #24
 800878c:	4933      	ldr	r1, [pc, #204]	; (800885c <HAL_RCC_OscConfig+0x4d8>)
 800878e:	4313      	orrs	r3, r2
 8008790:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008792:	4b33      	ldr	r3, [pc, #204]	; (8008860 <HAL_RCC_OscConfig+0x4dc>)
 8008794:	2201      	movs	r2, #1
 8008796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008798:	f7fd fe26 	bl	80063e8 <HAL_GetTick>
 800879c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800879e:	e008      	b.n	80087b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087a0:	f7fd fe22 	bl	80063e8 <HAL_GetTick>
 80087a4:	4602      	mov	r2, r0
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	2b02      	cmp	r3, #2
 80087ac:	d901      	bls.n	80087b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80087ae:	2303      	movs	r3, #3
 80087b0:	e04d      	b.n	800884e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087b2:	4b2a      	ldr	r3, [pc, #168]	; (800885c <HAL_RCC_OscConfig+0x4d8>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d0f0      	beq.n	80087a0 <HAL_RCC_OscConfig+0x41c>
 80087be:	e045      	b.n	800884c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087c0:	4b27      	ldr	r3, [pc, #156]	; (8008860 <HAL_RCC_OscConfig+0x4dc>)
 80087c2:	2200      	movs	r2, #0
 80087c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087c6:	f7fd fe0f 	bl	80063e8 <HAL_GetTick>
 80087ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087cc:	e008      	b.n	80087e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087ce:	f7fd fe0b 	bl	80063e8 <HAL_GetTick>
 80087d2:	4602      	mov	r2, r0
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	1ad3      	subs	r3, r2, r3
 80087d8:	2b02      	cmp	r3, #2
 80087da:	d901      	bls.n	80087e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80087dc:	2303      	movs	r3, #3
 80087de:	e036      	b.n	800884e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087e0:	4b1e      	ldr	r3, [pc, #120]	; (800885c <HAL_RCC_OscConfig+0x4d8>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d1f0      	bne.n	80087ce <HAL_RCC_OscConfig+0x44a>
 80087ec:	e02e      	b.n	800884c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	699b      	ldr	r3, [r3, #24]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d101      	bne.n	80087fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	e029      	b.n	800884e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80087fa:	4b18      	ldr	r3, [pc, #96]	; (800885c <HAL_RCC_OscConfig+0x4d8>)
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	69db      	ldr	r3, [r3, #28]
 800880a:	429a      	cmp	r2, r3
 800880c:	d11c      	bne.n	8008848 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008818:	429a      	cmp	r2, r3
 800881a:	d115      	bne.n	8008848 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008822:	4013      	ands	r3, r2
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008828:	4293      	cmp	r3, r2
 800882a:	d10d      	bne.n	8008848 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008836:	429a      	cmp	r2, r3
 8008838:	d106      	bne.n	8008848 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008844:	429a      	cmp	r2, r3
 8008846:	d001      	beq.n	800884c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008848:	2301      	movs	r3, #1
 800884a:	e000      	b.n	800884e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3718      	adds	r7, #24
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	40007000 	.word	0x40007000
 800885c:	40023800 	.word	0x40023800
 8008860:	42470060 	.word	0x42470060

08008864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d101      	bne.n	8008878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	e0cc      	b.n	8008a12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008878:	4b68      	ldr	r3, [pc, #416]	; (8008a1c <HAL_RCC_ClockConfig+0x1b8>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 030f 	and.w	r3, r3, #15
 8008880:	683a      	ldr	r2, [r7, #0]
 8008882:	429a      	cmp	r2, r3
 8008884:	d90c      	bls.n	80088a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008886:	4b65      	ldr	r3, [pc, #404]	; (8008a1c <HAL_RCC_ClockConfig+0x1b8>)
 8008888:	683a      	ldr	r2, [r7, #0]
 800888a:	b2d2      	uxtb	r2, r2
 800888c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800888e:	4b63      	ldr	r3, [pc, #396]	; (8008a1c <HAL_RCC_ClockConfig+0x1b8>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f003 030f 	and.w	r3, r3, #15
 8008896:	683a      	ldr	r2, [r7, #0]
 8008898:	429a      	cmp	r2, r3
 800889a:	d001      	beq.n	80088a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	e0b8      	b.n	8008a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 0302 	and.w	r3, r3, #2
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d020      	beq.n	80088ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 0304 	and.w	r3, r3, #4
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d005      	beq.n	80088c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80088b8:	4b59      	ldr	r3, [pc, #356]	; (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	4a58      	ldr	r2, [pc, #352]	; (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 80088be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80088c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 0308 	and.w	r3, r3, #8
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d005      	beq.n	80088dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80088d0:	4b53      	ldr	r3, [pc, #332]	; (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	4a52      	ldr	r2, [pc, #328]	; (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 80088d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80088da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088dc:	4b50      	ldr	r3, [pc, #320]	; (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	494d      	ldr	r1, [pc, #308]	; (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 80088ea:	4313      	orrs	r3, r2
 80088ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f003 0301 	and.w	r3, r3, #1
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d044      	beq.n	8008984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d107      	bne.n	8008912 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008902:	4b47      	ldr	r3, [pc, #284]	; (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800890a:	2b00      	cmp	r3, #0
 800890c:	d119      	bne.n	8008942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	e07f      	b.n	8008a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	2b02      	cmp	r3, #2
 8008918:	d003      	beq.n	8008922 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800891e:	2b03      	cmp	r3, #3
 8008920:	d107      	bne.n	8008932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008922:	4b3f      	ldr	r3, [pc, #252]	; (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800892a:	2b00      	cmp	r3, #0
 800892c:	d109      	bne.n	8008942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e06f      	b.n	8008a12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008932:	4b3b      	ldr	r3, [pc, #236]	; (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f003 0302 	and.w	r3, r3, #2
 800893a:	2b00      	cmp	r3, #0
 800893c:	d101      	bne.n	8008942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	e067      	b.n	8008a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008942:	4b37      	ldr	r3, [pc, #220]	; (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	f023 0203 	bic.w	r2, r3, #3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	4934      	ldr	r1, [pc, #208]	; (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 8008950:	4313      	orrs	r3, r2
 8008952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008954:	f7fd fd48 	bl	80063e8 <HAL_GetTick>
 8008958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800895a:	e00a      	b.n	8008972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800895c:	f7fd fd44 	bl	80063e8 <HAL_GetTick>
 8008960:	4602      	mov	r2, r0
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	1ad3      	subs	r3, r2, r3
 8008966:	f241 3288 	movw	r2, #5000	; 0x1388
 800896a:	4293      	cmp	r3, r2
 800896c:	d901      	bls.n	8008972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800896e:	2303      	movs	r3, #3
 8008970:	e04f      	b.n	8008a12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008972:	4b2b      	ldr	r3, [pc, #172]	; (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	f003 020c 	and.w	r2, r3, #12
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	429a      	cmp	r2, r3
 8008982:	d1eb      	bne.n	800895c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008984:	4b25      	ldr	r3, [pc, #148]	; (8008a1c <HAL_RCC_ClockConfig+0x1b8>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 030f 	and.w	r3, r3, #15
 800898c:	683a      	ldr	r2, [r7, #0]
 800898e:	429a      	cmp	r2, r3
 8008990:	d20c      	bcs.n	80089ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008992:	4b22      	ldr	r3, [pc, #136]	; (8008a1c <HAL_RCC_ClockConfig+0x1b8>)
 8008994:	683a      	ldr	r2, [r7, #0]
 8008996:	b2d2      	uxtb	r2, r2
 8008998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800899a:	4b20      	ldr	r3, [pc, #128]	; (8008a1c <HAL_RCC_ClockConfig+0x1b8>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f003 030f 	and.w	r3, r3, #15
 80089a2:	683a      	ldr	r2, [r7, #0]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d001      	beq.n	80089ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	e032      	b.n	8008a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 0304 	and.w	r3, r3, #4
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d008      	beq.n	80089ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80089b8:	4b19      	ldr	r3, [pc, #100]	; (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	4916      	ldr	r1, [pc, #88]	; (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 80089c6:	4313      	orrs	r3, r2
 80089c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f003 0308 	and.w	r3, r3, #8
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d009      	beq.n	80089ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80089d6:	4b12      	ldr	r3, [pc, #72]	; (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	00db      	lsls	r3, r3, #3
 80089e4:	490e      	ldr	r1, [pc, #56]	; (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 80089e6:	4313      	orrs	r3, r2
 80089e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80089ea:	f000 f821 	bl	8008a30 <HAL_RCC_GetSysClockFreq>
 80089ee:	4601      	mov	r1, r0
 80089f0:	4b0b      	ldr	r3, [pc, #44]	; (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	091b      	lsrs	r3, r3, #4
 80089f6:	f003 030f 	and.w	r3, r3, #15
 80089fa:	4a0a      	ldr	r2, [pc, #40]	; (8008a24 <HAL_RCC_ClockConfig+0x1c0>)
 80089fc:	5cd3      	ldrb	r3, [r2, r3]
 80089fe:	fa21 f303 	lsr.w	r3, r1, r3
 8008a02:	4a09      	ldr	r2, [pc, #36]	; (8008a28 <HAL_RCC_ClockConfig+0x1c4>)
 8008a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008a06:	4b09      	ldr	r3, [pc, #36]	; (8008a2c <HAL_RCC_ClockConfig+0x1c8>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fd fbc4 	bl	8006198 <HAL_InitTick>

  return HAL_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	40023c00 	.word	0x40023c00
 8008a20:	40023800 	.word	0x40023800
 8008a24:	0800dd78 	.word	0x0800dd78
 8008a28:	200000a0 	.word	0x200000a0
 8008a2c:	200000a4 	.word	0x200000a4

08008a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008a36:	2300      	movs	r3, #0
 8008a38:	607b      	str	r3, [r7, #4]
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	60fb      	str	r3, [r7, #12]
 8008a3e:	2300      	movs	r3, #0
 8008a40:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008a42:	2300      	movs	r3, #0
 8008a44:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a46:	4b50      	ldr	r3, [pc, #320]	; (8008b88 <HAL_RCC_GetSysClockFreq+0x158>)
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	f003 030c 	and.w	r3, r3, #12
 8008a4e:	2b04      	cmp	r3, #4
 8008a50:	d007      	beq.n	8008a62 <HAL_RCC_GetSysClockFreq+0x32>
 8008a52:	2b08      	cmp	r3, #8
 8008a54:	d008      	beq.n	8008a68 <HAL_RCC_GetSysClockFreq+0x38>
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f040 808d 	bne.w	8008b76 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008a5c:	4b4b      	ldr	r3, [pc, #300]	; (8008b8c <HAL_RCC_GetSysClockFreq+0x15c>)
 8008a5e:	60bb      	str	r3, [r7, #8]
       break;
 8008a60:	e08c      	b.n	8008b7c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008a62:	4b4b      	ldr	r3, [pc, #300]	; (8008b90 <HAL_RCC_GetSysClockFreq+0x160>)
 8008a64:	60bb      	str	r3, [r7, #8]
      break;
 8008a66:	e089      	b.n	8008b7c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008a68:	4b47      	ldr	r3, [pc, #284]	; (8008b88 <HAL_RCC_GetSysClockFreq+0x158>)
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a70:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008a72:	4b45      	ldr	r3, [pc, #276]	; (8008b88 <HAL_RCC_GetSysClockFreq+0x158>)
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d023      	beq.n	8008ac6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a7e:	4b42      	ldr	r3, [pc, #264]	; (8008b88 <HAL_RCC_GetSysClockFreq+0x158>)
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	099b      	lsrs	r3, r3, #6
 8008a84:	f04f 0400 	mov.w	r4, #0
 8008a88:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008a8c:	f04f 0200 	mov.w	r2, #0
 8008a90:	ea03 0501 	and.w	r5, r3, r1
 8008a94:	ea04 0602 	and.w	r6, r4, r2
 8008a98:	4a3d      	ldr	r2, [pc, #244]	; (8008b90 <HAL_RCC_GetSysClockFreq+0x160>)
 8008a9a:	fb02 f106 	mul.w	r1, r2, r6
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	fb02 f205 	mul.w	r2, r2, r5
 8008aa4:	440a      	add	r2, r1
 8008aa6:	493a      	ldr	r1, [pc, #232]	; (8008b90 <HAL_RCC_GetSysClockFreq+0x160>)
 8008aa8:	fba5 0101 	umull	r0, r1, r5, r1
 8008aac:	1853      	adds	r3, r2, r1
 8008aae:	4619      	mov	r1, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f04f 0400 	mov.w	r4, #0
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	4623      	mov	r3, r4
 8008aba:	f7f8 f87f 	bl	8000bbc <__aeabi_uldivmod>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	460c      	mov	r4, r1
 8008ac2:	60fb      	str	r3, [r7, #12]
 8008ac4:	e049      	b.n	8008b5a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ac6:	4b30      	ldr	r3, [pc, #192]	; (8008b88 <HAL_RCC_GetSysClockFreq+0x158>)
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	099b      	lsrs	r3, r3, #6
 8008acc:	f04f 0400 	mov.w	r4, #0
 8008ad0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008ad4:	f04f 0200 	mov.w	r2, #0
 8008ad8:	ea03 0501 	and.w	r5, r3, r1
 8008adc:	ea04 0602 	and.w	r6, r4, r2
 8008ae0:	4629      	mov	r1, r5
 8008ae2:	4632      	mov	r2, r6
 8008ae4:	f04f 0300 	mov.w	r3, #0
 8008ae8:	f04f 0400 	mov.w	r4, #0
 8008aec:	0154      	lsls	r4, r2, #5
 8008aee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008af2:	014b      	lsls	r3, r1, #5
 8008af4:	4619      	mov	r1, r3
 8008af6:	4622      	mov	r2, r4
 8008af8:	1b49      	subs	r1, r1, r5
 8008afa:	eb62 0206 	sbc.w	r2, r2, r6
 8008afe:	f04f 0300 	mov.w	r3, #0
 8008b02:	f04f 0400 	mov.w	r4, #0
 8008b06:	0194      	lsls	r4, r2, #6
 8008b08:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008b0c:	018b      	lsls	r3, r1, #6
 8008b0e:	1a5b      	subs	r3, r3, r1
 8008b10:	eb64 0402 	sbc.w	r4, r4, r2
 8008b14:	f04f 0100 	mov.w	r1, #0
 8008b18:	f04f 0200 	mov.w	r2, #0
 8008b1c:	00e2      	lsls	r2, r4, #3
 8008b1e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008b22:	00d9      	lsls	r1, r3, #3
 8008b24:	460b      	mov	r3, r1
 8008b26:	4614      	mov	r4, r2
 8008b28:	195b      	adds	r3, r3, r5
 8008b2a:	eb44 0406 	adc.w	r4, r4, r6
 8008b2e:	f04f 0100 	mov.w	r1, #0
 8008b32:	f04f 0200 	mov.w	r2, #0
 8008b36:	02a2      	lsls	r2, r4, #10
 8008b38:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008b3c:	0299      	lsls	r1, r3, #10
 8008b3e:	460b      	mov	r3, r1
 8008b40:	4614      	mov	r4, r2
 8008b42:	4618      	mov	r0, r3
 8008b44:	4621      	mov	r1, r4
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f04f 0400 	mov.w	r4, #0
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	4623      	mov	r3, r4
 8008b50:	f7f8 f834 	bl	8000bbc <__aeabi_uldivmod>
 8008b54:	4603      	mov	r3, r0
 8008b56:	460c      	mov	r4, r1
 8008b58:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008b5a:	4b0b      	ldr	r3, [pc, #44]	; (8008b88 <HAL_RCC_GetSysClockFreq+0x158>)
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	0c1b      	lsrs	r3, r3, #16
 8008b60:	f003 0303 	and.w	r3, r3, #3
 8008b64:	3301      	adds	r3, #1
 8008b66:	005b      	lsls	r3, r3, #1
 8008b68:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008b6a:	68fa      	ldr	r2, [r7, #12]
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b72:	60bb      	str	r3, [r7, #8]
      break;
 8008b74:	e002      	b.n	8008b7c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008b76:	4b05      	ldr	r3, [pc, #20]	; (8008b8c <HAL_RCC_GetSysClockFreq+0x15c>)
 8008b78:	60bb      	str	r3, [r7, #8]
      break;
 8008b7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008b7c:	68bb      	ldr	r3, [r7, #8]
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3714      	adds	r7, #20
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b86:	bf00      	nop
 8008b88:	40023800 	.word	0x40023800
 8008b8c:	00f42400 	.word	0x00f42400
 8008b90:	00b71b00 	.word	0x00b71b00

08008b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b94:	b480      	push	{r7}
 8008b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b98:	4b03      	ldr	r3, [pc, #12]	; (8008ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop
 8008ba8:	200000a0 	.word	0x200000a0

08008bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008bb0:	f7ff fff0 	bl	8008b94 <HAL_RCC_GetHCLKFreq>
 8008bb4:	4601      	mov	r1, r0
 8008bb6:	4b05      	ldr	r3, [pc, #20]	; (8008bcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	0a9b      	lsrs	r3, r3, #10
 8008bbc:	f003 0307 	and.w	r3, r3, #7
 8008bc0:	4a03      	ldr	r2, [pc, #12]	; (8008bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008bc2:	5cd3      	ldrb	r3, [r2, r3]
 8008bc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	40023800 	.word	0x40023800
 8008bd0:	0800dd88 	.word	0x0800dd88

08008bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008bd8:	f7ff ffdc 	bl	8008b94 <HAL_RCC_GetHCLKFreq>
 8008bdc:	4601      	mov	r1, r0
 8008bde:	4b05      	ldr	r3, [pc, #20]	; (8008bf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	0b5b      	lsrs	r3, r3, #13
 8008be4:	f003 0307 	and.w	r3, r3, #7
 8008be8:	4a03      	ldr	r2, [pc, #12]	; (8008bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008bea:	5cd3      	ldrb	r3, [r2, r3]
 8008bec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	40023800 	.word	0x40023800
 8008bf8:	0800dd88 	.word	0x0800dd88

08008bfc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	220f      	movs	r2, #15
 8008c0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008c0c:	4b12      	ldr	r3, [pc, #72]	; (8008c58 <HAL_RCC_GetClockConfig+0x5c>)
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	f003 0203 	and.w	r2, r3, #3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008c18:	4b0f      	ldr	r3, [pc, #60]	; (8008c58 <HAL_RCC_GetClockConfig+0x5c>)
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008c24:	4b0c      	ldr	r3, [pc, #48]	; (8008c58 <HAL_RCC_GetClockConfig+0x5c>)
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008c30:	4b09      	ldr	r3, [pc, #36]	; (8008c58 <HAL_RCC_GetClockConfig+0x5c>)
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	08db      	lsrs	r3, r3, #3
 8008c36:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008c3e:	4b07      	ldr	r3, [pc, #28]	; (8008c5c <HAL_RCC_GetClockConfig+0x60>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f003 020f 	and.w	r2, r3, #15
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	601a      	str	r2, [r3, #0]
}
 8008c4a:	bf00      	nop
 8008c4c:	370c      	adds	r7, #12
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	40023800 	.word	0x40023800
 8008c5c:	40023c00 	.word	0x40023c00

08008c60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d101      	bne.n	8008c72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e056      	b.n	8008d20 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d106      	bne.n	8008c92 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f7fd f929 	bl	8005ee4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2202      	movs	r2, #2
 8008c96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ca8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	685a      	ldr	r2, [r3, #4]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	431a      	orrs	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	431a      	orrs	r2, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	431a      	orrs	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	695b      	ldr	r3, [r3, #20]
 8008cc4:	431a      	orrs	r2, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008cce:	431a      	orrs	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	69db      	ldr	r3, [r3, #28]
 8008cd4:	431a      	orrs	r2, r3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6a1b      	ldr	r3, [r3, #32]
 8008cda:	ea42 0103 	orr.w	r1, r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	430a      	orrs	r2, r1
 8008ce8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	699b      	ldr	r3, [r3, #24]
 8008cee:	0c1b      	lsrs	r3, r3, #16
 8008cf0:	f003 0104 	and.w	r1, r3, #4
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	430a      	orrs	r2, r1
 8008cfe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	69da      	ldr	r2, [r3, #28]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d0e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b08c      	sub	sp, #48	; 0x30
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
 8008d34:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008d36:	2301      	movs	r3, #1
 8008d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d101      	bne.n	8008d4e <HAL_SPI_TransmitReceive+0x26>
 8008d4a:	2302      	movs	r3, #2
 8008d4c:	e18a      	b.n	8009064 <HAL_SPI_TransmitReceive+0x33c>
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2201      	movs	r2, #1
 8008d52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d56:	f7fd fb47 	bl	80063e8 <HAL_GetTick>
 8008d5a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008d6c:	887b      	ldrh	r3, [r7, #2]
 8008d6e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008d70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d00f      	beq.n	8008d98 <HAL_SPI_TransmitReceive+0x70>
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d7e:	d107      	bne.n	8008d90 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d103      	bne.n	8008d90 <HAL_SPI_TransmitReceive+0x68>
 8008d88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d8c:	2b04      	cmp	r3, #4
 8008d8e:	d003      	beq.n	8008d98 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008d90:	2302      	movs	r3, #2
 8008d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008d96:	e15b      	b.n	8009050 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d005      	beq.n	8008daa <HAL_SPI_TransmitReceive+0x82>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d002      	beq.n	8008daa <HAL_SPI_TransmitReceive+0x82>
 8008da4:	887b      	ldrh	r3, [r7, #2]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d103      	bne.n	8008db2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008db0:	e14e      	b.n	8009050 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	2b04      	cmp	r3, #4
 8008dbc:	d003      	beq.n	8008dc6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2205      	movs	r2, #5
 8008dc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	887a      	ldrh	r2, [r7, #2]
 8008dd6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	887a      	ldrh	r2, [r7, #2]
 8008ddc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	68ba      	ldr	r2, [r7, #8]
 8008de2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	887a      	ldrh	r2, [r7, #2]
 8008de8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	887a      	ldrh	r2, [r7, #2]
 8008dee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2200      	movs	r2, #0
 8008df4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e06:	2b40      	cmp	r3, #64	; 0x40
 8008e08:	d007      	beq.n	8008e1a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e22:	d178      	bne.n	8008f16 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d002      	beq.n	8008e32 <HAL_SPI_TransmitReceive+0x10a>
 8008e2c:	8b7b      	ldrh	r3, [r7, #26]
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d166      	bne.n	8008f00 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e36:	881a      	ldrh	r2, [r3, #0]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e42:	1c9a      	adds	r2, r3, #2
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e56:	e053      	b.n	8008f00 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	f003 0302 	and.w	r3, r3, #2
 8008e62:	2b02      	cmp	r3, #2
 8008e64:	d11b      	bne.n	8008e9e <HAL_SPI_TransmitReceive+0x176>
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d016      	beq.n	8008e9e <HAL_SPI_TransmitReceive+0x176>
 8008e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d113      	bne.n	8008e9e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e7a:	881a      	ldrh	r2, [r3, #0]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e86:	1c9a      	adds	r2, r3, #2
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	3b01      	subs	r3, #1
 8008e94:	b29a      	uxth	r2, r3
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	f003 0301 	and.w	r3, r3, #1
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d119      	bne.n	8008ee0 <HAL_SPI_TransmitReceive+0x1b8>
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d014      	beq.n	8008ee0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	68da      	ldr	r2, [r3, #12]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec0:	b292      	uxth	r2, r2
 8008ec2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec8:	1c9a      	adds	r2, r3, #2
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	3b01      	subs	r3, #1
 8008ed6:	b29a      	uxth	r2, r3
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008edc:	2301      	movs	r3, #1
 8008ede:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008ee0:	f7fd fa82 	bl	80063e8 <HAL_GetTick>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee8:	1ad3      	subs	r3, r2, r3
 8008eea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d807      	bhi.n	8008f00 <HAL_SPI_TransmitReceive+0x1d8>
 8008ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ef6:	d003      	beq.n	8008f00 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008ef8:	2303      	movs	r3, #3
 8008efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008efe:	e0a7      	b.n	8009050 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1a6      	bne.n	8008e58 <HAL_SPI_TransmitReceive+0x130>
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d1a1      	bne.n	8008e58 <HAL_SPI_TransmitReceive+0x130>
 8008f14:	e07c      	b.n	8009010 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d002      	beq.n	8008f24 <HAL_SPI_TransmitReceive+0x1fc>
 8008f1e:	8b7b      	ldrh	r3, [r7, #26]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d16b      	bne.n	8008ffc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	330c      	adds	r3, #12
 8008f2e:	7812      	ldrb	r2, [r2, #0]
 8008f30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f36:	1c5a      	adds	r2, r3, #1
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	3b01      	subs	r3, #1
 8008f44:	b29a      	uxth	r2, r3
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f4a:	e057      	b.n	8008ffc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	f003 0302 	and.w	r3, r3, #2
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d11c      	bne.n	8008f94 <HAL_SPI_TransmitReceive+0x26c>
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d017      	beq.n	8008f94 <HAL_SPI_TransmitReceive+0x26c>
 8008f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d114      	bne.n	8008f94 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	330c      	adds	r3, #12
 8008f74:	7812      	ldrb	r2, [r2, #0]
 8008f76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f7c:	1c5a      	adds	r2, r3, #1
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	3b01      	subs	r3, #1
 8008f8a:	b29a      	uxth	r2, r3
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008f90:	2300      	movs	r3, #0
 8008f92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	f003 0301 	and.w	r3, r3, #1
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d119      	bne.n	8008fd6 <HAL_SPI_TransmitReceive+0x2ae>
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d014      	beq.n	8008fd6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68da      	ldr	r2, [r3, #12]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb6:	b2d2      	uxtb	r2, r2
 8008fb8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fbe:	1c5a      	adds	r2, r3, #1
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	b29a      	uxth	r2, r3
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008fd6:	f7fd fa07 	bl	80063e8 <HAL_GetTick>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fde:	1ad3      	subs	r3, r2, r3
 8008fe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d803      	bhi.n	8008fee <HAL_SPI_TransmitReceive+0x2c6>
 8008fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fec:	d102      	bne.n	8008ff4 <HAL_SPI_TransmitReceive+0x2cc>
 8008fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d103      	bne.n	8008ffc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008ff4:	2303      	movs	r3, #3
 8008ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008ffa:	e029      	b.n	8009050 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009000:	b29b      	uxth	r3, r3
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1a2      	bne.n	8008f4c <HAL_SPI_TransmitReceive+0x224>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800900a:	b29b      	uxth	r3, r3
 800900c:	2b00      	cmp	r3, #0
 800900e:	d19d      	bne.n	8008f4c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009012:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009014:	68f8      	ldr	r0, [r7, #12]
 8009016:	f000 f893 	bl	8009140 <SPI_EndRxTxTransaction>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d006      	beq.n	800902e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2220      	movs	r2, #32
 800902a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800902c:	e010      	b.n	8009050 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d10b      	bne.n	800904e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009036:	2300      	movs	r3, #0
 8009038:	617b      	str	r3, [r7, #20]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	617b      	str	r3, [r7, #20]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	617b      	str	r3, [r7, #20]
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	e000      	b.n	8009050 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800904e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2201      	movs	r2, #1
 8009054:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009060:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009064:	4618      	mov	r0, r3
 8009066:	3730      	adds	r7, #48	; 0x30
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	603b      	str	r3, [r7, #0]
 8009078:	4613      	mov	r3, r2
 800907a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800907c:	e04c      	b.n	8009118 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009084:	d048      	beq.n	8009118 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009086:	f7fd f9af 	bl	80063e8 <HAL_GetTick>
 800908a:	4602      	mov	r2, r0
 800908c:	69bb      	ldr	r3, [r7, #24]
 800908e:	1ad3      	subs	r3, r2, r3
 8009090:	683a      	ldr	r2, [r7, #0]
 8009092:	429a      	cmp	r2, r3
 8009094:	d902      	bls.n	800909c <SPI_WaitFlagStateUntilTimeout+0x30>
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d13d      	bne.n	8009118 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	685a      	ldr	r2, [r3, #4]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80090aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090b4:	d111      	bne.n	80090da <SPI_WaitFlagStateUntilTimeout+0x6e>
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090be:	d004      	beq.n	80090ca <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090c8:	d107      	bne.n	80090da <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090e2:	d10f      	bne.n	8009104 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80090f2:	601a      	str	r2, [r3, #0]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009102:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2200      	movs	r2, #0
 8009110:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009114:	2303      	movs	r3, #3
 8009116:	e00f      	b.n	8009138 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	689a      	ldr	r2, [r3, #8]
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	4013      	ands	r3, r2
 8009122:	68ba      	ldr	r2, [r7, #8]
 8009124:	429a      	cmp	r2, r3
 8009126:	bf0c      	ite	eq
 8009128:	2301      	moveq	r3, #1
 800912a:	2300      	movne	r3, #0
 800912c:	b2db      	uxtb	r3, r3
 800912e:	461a      	mov	r2, r3
 8009130:	79fb      	ldrb	r3, [r7, #7]
 8009132:	429a      	cmp	r2, r3
 8009134:	d1a3      	bne.n	800907e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3710      	adds	r7, #16
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b088      	sub	sp, #32
 8009144:	af02      	add	r7, sp, #8
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800914c:	4b1b      	ldr	r3, [pc, #108]	; (80091bc <SPI_EndRxTxTransaction+0x7c>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a1b      	ldr	r2, [pc, #108]	; (80091c0 <SPI_EndRxTxTransaction+0x80>)
 8009152:	fba2 2303 	umull	r2, r3, r2, r3
 8009156:	0d5b      	lsrs	r3, r3, #21
 8009158:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800915c:	fb02 f303 	mul.w	r3, r2, r3
 8009160:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800916a:	d112      	bne.n	8009192 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	9300      	str	r3, [sp, #0]
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	2200      	movs	r2, #0
 8009174:	2180      	movs	r1, #128	; 0x80
 8009176:	68f8      	ldr	r0, [r7, #12]
 8009178:	f7ff ff78 	bl	800906c <SPI_WaitFlagStateUntilTimeout>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d016      	beq.n	80091b0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009186:	f043 0220 	orr.w	r2, r3, #32
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800918e:	2303      	movs	r3, #3
 8009190:	e00f      	b.n	80091b2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00a      	beq.n	80091ae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	3b01      	subs	r3, #1
 800919c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091a8:	2b80      	cmp	r3, #128	; 0x80
 80091aa:	d0f2      	beq.n	8009192 <SPI_EndRxTxTransaction+0x52>
 80091ac:	e000      	b.n	80091b0 <SPI_EndRxTxTransaction+0x70>
        break;
 80091ae:	bf00      	nop
  }

  return HAL_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3718      	adds	r7, #24
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	200000a0 	.word	0x200000a0
 80091c0:	165e9f81 	.word	0x165e9f81

080091c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d101      	bne.n	80091d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	e01d      	b.n	8009212 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d106      	bne.n	80091f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f7fc fec2 	bl	8005f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2202      	movs	r2, #2
 80091f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	3304      	adds	r3, #4
 8009200:	4619      	mov	r1, r3
 8009202:	4610      	mov	r0, r2
 8009204:	f000 fb72 	bl	80098ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800921a:	b480      	push	{r7}
 800921c:	b085      	sub	sp, #20
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2202      	movs	r2, #2
 8009226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	f003 0307 	and.w	r3, r3, #7
 8009234:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2b06      	cmp	r3, #6
 800923a:	d007      	beq.n	800924c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f042 0201 	orr.w	r2, r2, #1
 800924a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2201      	movs	r2, #1
 8009250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3714      	adds	r7, #20
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr

08009262 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009262:	b480      	push	{r7}
 8009264:	b085      	sub	sp, #20
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	68da      	ldr	r2, [r3, #12]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f042 0201 	orr.w	r2, r2, #1
 8009278:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	f003 0307 	and.w	r3, r3, #7
 8009284:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2b06      	cmp	r3, #6
 800928a:	d007      	beq.n	800929c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f042 0201 	orr.w	r2, r2, #1
 800929a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800929c:	2300      	movs	r3, #0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3714      	adds	r7, #20
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr

080092aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b082      	sub	sp, #8
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d101      	bne.n	80092bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	e01d      	b.n	80092f8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d106      	bne.n	80092d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2200      	movs	r2, #0
 80092cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 f815 	bl	8009300 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2202      	movs	r2, #2
 80092da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	3304      	adds	r3, #4
 80092e6:	4619      	mov	r1, r3
 80092e8:	4610      	mov	r0, r2
 80092ea:	f000 faff 	bl	80098ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2201      	movs	r2, #1
 80092f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3708      	adds	r7, #8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009308:	bf00      	nop
 800930a:	370c      	adds	r7, #12
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2201      	movs	r2, #1
 8009324:	6839      	ldr	r1, [r7, #0]
 8009326:	4618      	mov	r0, r3
 8009328:	f000 fdca 	bl	8009ec0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a15      	ldr	r2, [pc, #84]	; (8009388 <HAL_TIM_PWM_Start+0x74>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d004      	beq.n	8009340 <HAL_TIM_PWM_Start+0x2c>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a14      	ldr	r2, [pc, #80]	; (800938c <HAL_TIM_PWM_Start+0x78>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d101      	bne.n	8009344 <HAL_TIM_PWM_Start+0x30>
 8009340:	2301      	movs	r3, #1
 8009342:	e000      	b.n	8009346 <HAL_TIM_PWM_Start+0x32>
 8009344:	2300      	movs	r3, #0
 8009346:	2b00      	cmp	r3, #0
 8009348:	d007      	beq.n	800935a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009358:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	f003 0307 	and.w	r3, r3, #7
 8009364:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2b06      	cmp	r3, #6
 800936a:	d007      	beq.n	800937c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f042 0201 	orr.w	r2, r2, #1
 800937a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800937c:	2300      	movs	r3, #0
}
 800937e:	4618      	mov	r0, r3
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	40010000 	.word	0x40010000
 800938c:	40010400 	.word	0x40010400

08009390 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	f003 0302 	and.w	r3, r3, #2
 80093a2:	2b02      	cmp	r3, #2
 80093a4:	d122      	bne.n	80093ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	f003 0302 	and.w	r3, r3, #2
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	d11b      	bne.n	80093ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f06f 0202 	mvn.w	r2, #2
 80093bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2201      	movs	r2, #1
 80093c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	699b      	ldr	r3, [r3, #24]
 80093ca:	f003 0303 	and.w	r3, r3, #3
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d003      	beq.n	80093da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 fa6b 	bl	80098ae <HAL_TIM_IC_CaptureCallback>
 80093d8:	e005      	b.n	80093e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 fa5d 	bl	800989a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 fa6e 	bl	80098c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	691b      	ldr	r3, [r3, #16]
 80093f2:	f003 0304 	and.w	r3, r3, #4
 80093f6:	2b04      	cmp	r3, #4
 80093f8:	d122      	bne.n	8009440 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	f003 0304 	and.w	r3, r3, #4
 8009404:	2b04      	cmp	r3, #4
 8009406:	d11b      	bne.n	8009440 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f06f 0204 	mvn.w	r2, #4
 8009410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2202      	movs	r2, #2
 8009416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	699b      	ldr	r3, [r3, #24]
 800941e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009422:	2b00      	cmp	r3, #0
 8009424:	d003      	beq.n	800942e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 fa41 	bl	80098ae <HAL_TIM_IC_CaptureCallback>
 800942c:	e005      	b.n	800943a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 fa33 	bl	800989a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 fa44 	bl	80098c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2200      	movs	r2, #0
 800943e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	691b      	ldr	r3, [r3, #16]
 8009446:	f003 0308 	and.w	r3, r3, #8
 800944a:	2b08      	cmp	r3, #8
 800944c:	d122      	bne.n	8009494 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	f003 0308 	and.w	r3, r3, #8
 8009458:	2b08      	cmp	r3, #8
 800945a:	d11b      	bne.n	8009494 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f06f 0208 	mvn.w	r2, #8
 8009464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2204      	movs	r2, #4
 800946a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	69db      	ldr	r3, [r3, #28]
 8009472:	f003 0303 	and.w	r3, r3, #3
 8009476:	2b00      	cmp	r3, #0
 8009478:	d003      	beq.n	8009482 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 fa17 	bl	80098ae <HAL_TIM_IC_CaptureCallback>
 8009480:	e005      	b.n	800948e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fa09 	bl	800989a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 fa1a 	bl	80098c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	691b      	ldr	r3, [r3, #16]
 800949a:	f003 0310 	and.w	r3, r3, #16
 800949e:	2b10      	cmp	r3, #16
 80094a0:	d122      	bne.n	80094e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	f003 0310 	and.w	r3, r3, #16
 80094ac:	2b10      	cmp	r3, #16
 80094ae:	d11b      	bne.n	80094e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f06f 0210 	mvn.w	r2, #16
 80094b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2208      	movs	r2, #8
 80094be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	69db      	ldr	r3, [r3, #28]
 80094c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d003      	beq.n	80094d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f9ed 	bl	80098ae <HAL_TIM_IC_CaptureCallback>
 80094d4:	e005      	b.n	80094e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 f9df 	bl	800989a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 f9f0 	bl	80098c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	f003 0301 	and.w	r3, r3, #1
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d10e      	bne.n	8009514 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	f003 0301 	and.w	r3, r3, #1
 8009500:	2b01      	cmp	r3, #1
 8009502:	d107      	bne.n	8009514 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f06f 0201 	mvn.w	r2, #1
 800950c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f7fb ff6c 	bl	80053ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800951e:	2b80      	cmp	r3, #128	; 0x80
 8009520:	d10e      	bne.n	8009540 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800952c:	2b80      	cmp	r3, #128	; 0x80
 800952e:	d107      	bne.n	8009540 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 fdbe 	bl	800a0bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800954a:	2b40      	cmp	r3, #64	; 0x40
 800954c:	d10e      	bne.n	800956c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009558:	2b40      	cmp	r3, #64	; 0x40
 800955a:	d107      	bne.n	800956c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 f9b5 	bl	80098d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	691b      	ldr	r3, [r3, #16]
 8009572:	f003 0320 	and.w	r3, r3, #32
 8009576:	2b20      	cmp	r3, #32
 8009578:	d10e      	bne.n	8009598 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	f003 0320 	and.w	r3, r3, #32
 8009584:	2b20      	cmp	r3, #32
 8009586:	d107      	bne.n	8009598 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f06f 0220 	mvn.w	r2, #32
 8009590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 fd88 	bl	800a0a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009598:	bf00      	nop
 800959a:	3708      	adds	r7, #8
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d101      	bne.n	80095ba <HAL_TIM_PWM_ConfigChannel+0x1a>
 80095b6:	2302      	movs	r3, #2
 80095b8:	e0b4      	b.n	8009724 <HAL_TIM_PWM_ConfigChannel+0x184>
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2201      	movs	r2, #1
 80095be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2202      	movs	r2, #2
 80095c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2b0c      	cmp	r3, #12
 80095ce:	f200 809f 	bhi.w	8009710 <HAL_TIM_PWM_ConfigChannel+0x170>
 80095d2:	a201      	add	r2, pc, #4	; (adr r2, 80095d8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80095d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d8:	0800960d 	.word	0x0800960d
 80095dc:	08009711 	.word	0x08009711
 80095e0:	08009711 	.word	0x08009711
 80095e4:	08009711 	.word	0x08009711
 80095e8:	0800964d 	.word	0x0800964d
 80095ec:	08009711 	.word	0x08009711
 80095f0:	08009711 	.word	0x08009711
 80095f4:	08009711 	.word	0x08009711
 80095f8:	0800968f 	.word	0x0800968f
 80095fc:	08009711 	.word	0x08009711
 8009600:	08009711 	.word	0x08009711
 8009604:	08009711 	.word	0x08009711
 8009608:	080096cf 	.word	0x080096cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	68b9      	ldr	r1, [r7, #8]
 8009612:	4618      	mov	r0, r3
 8009614:	f000 fa0a 	bl	8009a2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	699a      	ldr	r2, [r3, #24]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f042 0208 	orr.w	r2, r2, #8
 8009626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	699a      	ldr	r2, [r3, #24]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f022 0204 	bic.w	r2, r2, #4
 8009636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	6999      	ldr	r1, [r3, #24]
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	691a      	ldr	r2, [r3, #16]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	430a      	orrs	r2, r1
 8009648:	619a      	str	r2, [r3, #24]
      break;
 800964a:	e062      	b.n	8009712 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	68b9      	ldr	r1, [r7, #8]
 8009652:	4618      	mov	r0, r3
 8009654:	f000 fa5a 	bl	8009b0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	699a      	ldr	r2, [r3, #24]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	699a      	ldr	r2, [r3, #24]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	6999      	ldr	r1, [r3, #24]
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	691b      	ldr	r3, [r3, #16]
 8009682:	021a      	lsls	r2, r3, #8
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	430a      	orrs	r2, r1
 800968a:	619a      	str	r2, [r3, #24]
      break;
 800968c:	e041      	b.n	8009712 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	68b9      	ldr	r1, [r7, #8]
 8009694:	4618      	mov	r0, r3
 8009696:	f000 faaf 	bl	8009bf8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	69da      	ldr	r2, [r3, #28]
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f042 0208 	orr.w	r2, r2, #8
 80096a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	69da      	ldr	r2, [r3, #28]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f022 0204 	bic.w	r2, r2, #4
 80096b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	69d9      	ldr	r1, [r3, #28]
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	691a      	ldr	r2, [r3, #16]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	430a      	orrs	r2, r1
 80096ca:	61da      	str	r2, [r3, #28]
      break;
 80096cc:	e021      	b.n	8009712 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	68b9      	ldr	r1, [r7, #8]
 80096d4:	4618      	mov	r0, r3
 80096d6:	f000 fb03 	bl	8009ce0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	69da      	ldr	r2, [r3, #28]
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	69da      	ldr	r2, [r3, #28]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	69d9      	ldr	r1, [r3, #28]
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	691b      	ldr	r3, [r3, #16]
 8009704:	021a      	lsls	r2, r3, #8
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	430a      	orrs	r2, r1
 800970c:	61da      	str	r2, [r3, #28]
      break;
 800970e:	e000      	b.n	8009712 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8009710:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2201      	movs	r2, #1
 8009716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2200      	movs	r2, #0
 800971e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	3710      	adds	r7, #16
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800973c:	2b01      	cmp	r3, #1
 800973e:	d101      	bne.n	8009744 <HAL_TIM_ConfigClockSource+0x18>
 8009740:	2302      	movs	r3, #2
 8009742:	e0a6      	b.n	8009892 <HAL_TIM_ConfigClockSource+0x166>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2202      	movs	r2, #2
 8009750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009762:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800976a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	68fa      	ldr	r2, [r7, #12]
 8009772:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2b40      	cmp	r3, #64	; 0x40
 800977a:	d067      	beq.n	800984c <HAL_TIM_ConfigClockSource+0x120>
 800977c:	2b40      	cmp	r3, #64	; 0x40
 800977e:	d80b      	bhi.n	8009798 <HAL_TIM_ConfigClockSource+0x6c>
 8009780:	2b10      	cmp	r3, #16
 8009782:	d073      	beq.n	800986c <HAL_TIM_ConfigClockSource+0x140>
 8009784:	2b10      	cmp	r3, #16
 8009786:	d802      	bhi.n	800978e <HAL_TIM_ConfigClockSource+0x62>
 8009788:	2b00      	cmp	r3, #0
 800978a:	d06f      	beq.n	800986c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800978c:	e078      	b.n	8009880 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800978e:	2b20      	cmp	r3, #32
 8009790:	d06c      	beq.n	800986c <HAL_TIM_ConfigClockSource+0x140>
 8009792:	2b30      	cmp	r3, #48	; 0x30
 8009794:	d06a      	beq.n	800986c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009796:	e073      	b.n	8009880 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009798:	2b70      	cmp	r3, #112	; 0x70
 800979a:	d00d      	beq.n	80097b8 <HAL_TIM_ConfigClockSource+0x8c>
 800979c:	2b70      	cmp	r3, #112	; 0x70
 800979e:	d804      	bhi.n	80097aa <HAL_TIM_ConfigClockSource+0x7e>
 80097a0:	2b50      	cmp	r3, #80	; 0x50
 80097a2:	d033      	beq.n	800980c <HAL_TIM_ConfigClockSource+0xe0>
 80097a4:	2b60      	cmp	r3, #96	; 0x60
 80097a6:	d041      	beq.n	800982c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80097a8:	e06a      	b.n	8009880 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80097aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097ae:	d066      	beq.n	800987e <HAL_TIM_ConfigClockSource+0x152>
 80097b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097b4:	d017      	beq.n	80097e6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80097b6:	e063      	b.n	8009880 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6818      	ldr	r0, [r3, #0]
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	6899      	ldr	r1, [r3, #8]
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	685a      	ldr	r2, [r3, #4]
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	f000 fb5a 	bl	8009e80 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80097da:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	68fa      	ldr	r2, [r7, #12]
 80097e2:	609a      	str	r2, [r3, #8]
      break;
 80097e4:	e04c      	b.n	8009880 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6818      	ldr	r0, [r3, #0]
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	6899      	ldr	r1, [r3, #8]
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	685a      	ldr	r2, [r3, #4]
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	f000 fb43 	bl	8009e80 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	689a      	ldr	r2, [r3, #8]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009808:	609a      	str	r2, [r3, #8]
      break;
 800980a:	e039      	b.n	8009880 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6818      	ldr	r0, [r3, #0]
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	6859      	ldr	r1, [r3, #4]
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	461a      	mov	r2, r3
 800981a:	f000 fab7 	bl	8009d8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	2150      	movs	r1, #80	; 0x50
 8009824:	4618      	mov	r0, r3
 8009826:	f000 fb10 	bl	8009e4a <TIM_ITRx_SetConfig>
      break;
 800982a:	e029      	b.n	8009880 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6818      	ldr	r0, [r3, #0]
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	6859      	ldr	r1, [r3, #4]
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	461a      	mov	r2, r3
 800983a:	f000 fad6 	bl	8009dea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2160      	movs	r1, #96	; 0x60
 8009844:	4618      	mov	r0, r3
 8009846:	f000 fb00 	bl	8009e4a <TIM_ITRx_SetConfig>
      break;
 800984a:	e019      	b.n	8009880 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6818      	ldr	r0, [r3, #0]
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	6859      	ldr	r1, [r3, #4]
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	461a      	mov	r2, r3
 800985a:	f000 fa97 	bl	8009d8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	2140      	movs	r1, #64	; 0x40
 8009864:	4618      	mov	r0, r3
 8009866:	f000 faf0 	bl	8009e4a <TIM_ITRx_SetConfig>
      break;
 800986a:	e009      	b.n	8009880 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4619      	mov	r1, r3
 8009876:	4610      	mov	r0, r2
 8009878:	f000 fae7 	bl	8009e4a <TIM_ITRx_SetConfig>
      break;
 800987c:	e000      	b.n	8009880 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800987e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2201      	movs	r2, #1
 8009884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009890:	2300      	movs	r3, #0
}
 8009892:	4618      	mov	r0, r3
 8009894:	3710      	adds	r7, #16
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800989a:	b480      	push	{r7}
 800989c:	b083      	sub	sp, #12
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80098a2:	bf00      	nop
 80098a4:	370c      	adds	r7, #12
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr

080098ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80098ae:	b480      	push	{r7}
 80098b0:	b083      	sub	sp, #12
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80098b6:	bf00      	nop
 80098b8:	370c      	adds	r7, #12
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr

080098c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80098c2:	b480      	push	{r7}
 80098c4:	b083      	sub	sp, #12
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80098ca:	bf00      	nop
 80098cc:	370c      	adds	r7, #12
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr

080098d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80098d6:	b480      	push	{r7}
 80098d8:	b083      	sub	sp, #12
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80098de:	bf00      	nop
 80098e0:	370c      	adds	r7, #12
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr
	...

080098ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	4a40      	ldr	r2, [pc, #256]	; (8009a00 <TIM_Base_SetConfig+0x114>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d013      	beq.n	800992c <TIM_Base_SetConfig+0x40>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800990a:	d00f      	beq.n	800992c <TIM_Base_SetConfig+0x40>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	4a3d      	ldr	r2, [pc, #244]	; (8009a04 <TIM_Base_SetConfig+0x118>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d00b      	beq.n	800992c <TIM_Base_SetConfig+0x40>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4a3c      	ldr	r2, [pc, #240]	; (8009a08 <TIM_Base_SetConfig+0x11c>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d007      	beq.n	800992c <TIM_Base_SetConfig+0x40>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4a3b      	ldr	r2, [pc, #236]	; (8009a0c <TIM_Base_SetConfig+0x120>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d003      	beq.n	800992c <TIM_Base_SetConfig+0x40>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a3a      	ldr	r2, [pc, #232]	; (8009a10 <TIM_Base_SetConfig+0x124>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d108      	bne.n	800993e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009932:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	68fa      	ldr	r2, [r7, #12]
 800993a:	4313      	orrs	r3, r2
 800993c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	4a2f      	ldr	r2, [pc, #188]	; (8009a00 <TIM_Base_SetConfig+0x114>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d02b      	beq.n	800999e <TIM_Base_SetConfig+0xb2>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800994c:	d027      	beq.n	800999e <TIM_Base_SetConfig+0xb2>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	4a2c      	ldr	r2, [pc, #176]	; (8009a04 <TIM_Base_SetConfig+0x118>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d023      	beq.n	800999e <TIM_Base_SetConfig+0xb2>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	4a2b      	ldr	r2, [pc, #172]	; (8009a08 <TIM_Base_SetConfig+0x11c>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d01f      	beq.n	800999e <TIM_Base_SetConfig+0xb2>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	4a2a      	ldr	r2, [pc, #168]	; (8009a0c <TIM_Base_SetConfig+0x120>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d01b      	beq.n	800999e <TIM_Base_SetConfig+0xb2>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	4a29      	ldr	r2, [pc, #164]	; (8009a10 <TIM_Base_SetConfig+0x124>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d017      	beq.n	800999e <TIM_Base_SetConfig+0xb2>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	4a28      	ldr	r2, [pc, #160]	; (8009a14 <TIM_Base_SetConfig+0x128>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d013      	beq.n	800999e <TIM_Base_SetConfig+0xb2>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	4a27      	ldr	r2, [pc, #156]	; (8009a18 <TIM_Base_SetConfig+0x12c>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d00f      	beq.n	800999e <TIM_Base_SetConfig+0xb2>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	4a26      	ldr	r2, [pc, #152]	; (8009a1c <TIM_Base_SetConfig+0x130>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d00b      	beq.n	800999e <TIM_Base_SetConfig+0xb2>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	4a25      	ldr	r2, [pc, #148]	; (8009a20 <TIM_Base_SetConfig+0x134>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d007      	beq.n	800999e <TIM_Base_SetConfig+0xb2>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	4a24      	ldr	r2, [pc, #144]	; (8009a24 <TIM_Base_SetConfig+0x138>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d003      	beq.n	800999e <TIM_Base_SetConfig+0xb2>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	4a23      	ldr	r2, [pc, #140]	; (8009a28 <TIM_Base_SetConfig+0x13c>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d108      	bne.n	80099b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	68fa      	ldr	r2, [r7, #12]
 80099ac:	4313      	orrs	r3, r2
 80099ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	695b      	ldr	r3, [r3, #20]
 80099ba:	4313      	orrs	r3, r2
 80099bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	689a      	ldr	r2, [r3, #8]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	4a0a      	ldr	r2, [pc, #40]	; (8009a00 <TIM_Base_SetConfig+0x114>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d003      	beq.n	80099e4 <TIM_Base_SetConfig+0xf8>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	4a0c      	ldr	r2, [pc, #48]	; (8009a10 <TIM_Base_SetConfig+0x124>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d103      	bne.n	80099ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	691a      	ldr	r2, [r3, #16]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	615a      	str	r2, [r3, #20]
}
 80099f2:	bf00      	nop
 80099f4:	3714      	adds	r7, #20
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop
 8009a00:	40010000 	.word	0x40010000
 8009a04:	40000400 	.word	0x40000400
 8009a08:	40000800 	.word	0x40000800
 8009a0c:	40000c00 	.word	0x40000c00
 8009a10:	40010400 	.word	0x40010400
 8009a14:	40014000 	.word	0x40014000
 8009a18:	40014400 	.word	0x40014400
 8009a1c:	40014800 	.word	0x40014800
 8009a20:	40001800 	.word	0x40001800
 8009a24:	40001c00 	.word	0x40001c00
 8009a28:	40002000 	.word	0x40002000

08009a2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b087      	sub	sp, #28
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a1b      	ldr	r3, [r3, #32]
 8009a3a:	f023 0201 	bic.w	r2, r3, #1
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6a1b      	ldr	r3, [r3, #32]
 8009a46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	699b      	ldr	r3, [r3, #24]
 8009a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f023 0303 	bic.w	r3, r3, #3
 8009a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	68fa      	ldr	r2, [r7, #12]
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	f023 0302 	bic.w	r3, r3, #2
 8009a74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	697a      	ldr	r2, [r7, #20]
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4a20      	ldr	r2, [pc, #128]	; (8009b04 <TIM_OC1_SetConfig+0xd8>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d003      	beq.n	8009a90 <TIM_OC1_SetConfig+0x64>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	4a1f      	ldr	r2, [pc, #124]	; (8009b08 <TIM_OC1_SetConfig+0xdc>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d10c      	bne.n	8009aaa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	f023 0308 	bic.w	r3, r3, #8
 8009a96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	697a      	ldr	r2, [r7, #20]
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	f023 0304 	bic.w	r3, r3, #4
 8009aa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4a15      	ldr	r2, [pc, #84]	; (8009b04 <TIM_OC1_SetConfig+0xd8>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d003      	beq.n	8009aba <TIM_OC1_SetConfig+0x8e>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	4a14      	ldr	r2, [pc, #80]	; (8009b08 <TIM_OC1_SetConfig+0xdc>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d111      	bne.n	8009ade <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	695b      	ldr	r3, [r3, #20]
 8009ace:	693a      	ldr	r2, [r7, #16]
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	699b      	ldr	r3, [r3, #24]
 8009ad8:	693a      	ldr	r2, [r7, #16]
 8009ada:	4313      	orrs	r3, r2
 8009adc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	693a      	ldr	r2, [r7, #16]
 8009ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	68fa      	ldr	r2, [r7, #12]
 8009ae8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	685a      	ldr	r2, [r3, #4]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	697a      	ldr	r2, [r7, #20]
 8009af6:	621a      	str	r2, [r3, #32]
}
 8009af8:	bf00      	nop
 8009afa:	371c      	adds	r7, #28
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr
 8009b04:	40010000 	.word	0x40010000
 8009b08:	40010400 	.word	0x40010400

08009b0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b087      	sub	sp, #28
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a1b      	ldr	r3, [r3, #32]
 8009b1a:	f023 0210 	bic.w	r2, r3, #16
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6a1b      	ldr	r3, [r3, #32]
 8009b26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	699b      	ldr	r3, [r3, #24]
 8009b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	021b      	lsls	r3, r3, #8
 8009b4a:	68fa      	ldr	r2, [r7, #12]
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	f023 0320 	bic.w	r3, r3, #32
 8009b56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	011b      	lsls	r3, r3, #4
 8009b5e:	697a      	ldr	r2, [r7, #20]
 8009b60:	4313      	orrs	r3, r2
 8009b62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	4a22      	ldr	r2, [pc, #136]	; (8009bf0 <TIM_OC2_SetConfig+0xe4>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d003      	beq.n	8009b74 <TIM_OC2_SetConfig+0x68>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	4a21      	ldr	r2, [pc, #132]	; (8009bf4 <TIM_OC2_SetConfig+0xe8>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d10d      	bne.n	8009b90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	68db      	ldr	r3, [r3, #12]
 8009b80:	011b      	lsls	r3, r3, #4
 8009b82:	697a      	ldr	r2, [r7, #20]
 8009b84:	4313      	orrs	r3, r2
 8009b86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	4a17      	ldr	r2, [pc, #92]	; (8009bf0 <TIM_OC2_SetConfig+0xe4>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d003      	beq.n	8009ba0 <TIM_OC2_SetConfig+0x94>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	4a16      	ldr	r2, [pc, #88]	; (8009bf4 <TIM_OC2_SetConfig+0xe8>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d113      	bne.n	8009bc8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ba6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009bae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	695b      	ldr	r3, [r3, #20]
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	693a      	ldr	r2, [r7, #16]
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	699b      	ldr	r3, [r3, #24]
 8009bc0:	009b      	lsls	r3, r3, #2
 8009bc2:	693a      	ldr	r2, [r7, #16]
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	693a      	ldr	r2, [r7, #16]
 8009bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	68fa      	ldr	r2, [r7, #12]
 8009bd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	685a      	ldr	r2, [r3, #4]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	697a      	ldr	r2, [r7, #20]
 8009be0:	621a      	str	r2, [r3, #32]
}
 8009be2:	bf00      	nop
 8009be4:	371c      	adds	r7, #28
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr
 8009bee:	bf00      	nop
 8009bf0:	40010000 	.word	0x40010000
 8009bf4:	40010400 	.word	0x40010400

08009bf8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b087      	sub	sp, #28
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6a1b      	ldr	r3, [r3, #32]
 8009c06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6a1b      	ldr	r3, [r3, #32]
 8009c12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	69db      	ldr	r3, [r3, #28]
 8009c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f023 0303 	bic.w	r3, r3, #3
 8009c2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	68fa      	ldr	r2, [r7, #12]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	021b      	lsls	r3, r3, #8
 8009c48:	697a      	ldr	r2, [r7, #20]
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a21      	ldr	r2, [pc, #132]	; (8009cd8 <TIM_OC3_SetConfig+0xe0>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d003      	beq.n	8009c5e <TIM_OC3_SetConfig+0x66>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4a20      	ldr	r2, [pc, #128]	; (8009cdc <TIM_OC3_SetConfig+0xe4>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d10d      	bne.n	8009c7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	68db      	ldr	r3, [r3, #12]
 8009c6a:	021b      	lsls	r3, r3, #8
 8009c6c:	697a      	ldr	r2, [r7, #20]
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4a16      	ldr	r2, [pc, #88]	; (8009cd8 <TIM_OC3_SetConfig+0xe0>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d003      	beq.n	8009c8a <TIM_OC3_SetConfig+0x92>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4a15      	ldr	r2, [pc, #84]	; (8009cdc <TIM_OC3_SetConfig+0xe4>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d113      	bne.n	8009cb2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	695b      	ldr	r3, [r3, #20]
 8009c9e:	011b      	lsls	r3, r3, #4
 8009ca0:	693a      	ldr	r2, [r7, #16]
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	699b      	ldr	r3, [r3, #24]
 8009caa:	011b      	lsls	r3, r3, #4
 8009cac:	693a      	ldr	r2, [r7, #16]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	693a      	ldr	r2, [r7, #16]
 8009cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	685a      	ldr	r2, [r3, #4]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	697a      	ldr	r2, [r7, #20]
 8009cca:	621a      	str	r2, [r3, #32]
}
 8009ccc:	bf00      	nop
 8009cce:	371c      	adds	r7, #28
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr
 8009cd8:	40010000 	.word	0x40010000
 8009cdc:	40010400 	.word	0x40010400

08009ce0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b087      	sub	sp, #28
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6a1b      	ldr	r3, [r3, #32]
 8009cee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6a1b      	ldr	r3, [r3, #32]
 8009cfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	69db      	ldr	r3, [r3, #28]
 8009d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	021b      	lsls	r3, r3, #8
 8009d1e:	68fa      	ldr	r2, [r7, #12]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	031b      	lsls	r3, r3, #12
 8009d32:	693a      	ldr	r2, [r7, #16]
 8009d34:	4313      	orrs	r3, r2
 8009d36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4a12      	ldr	r2, [pc, #72]	; (8009d84 <TIM_OC4_SetConfig+0xa4>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d003      	beq.n	8009d48 <TIM_OC4_SetConfig+0x68>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a11      	ldr	r2, [pc, #68]	; (8009d88 <TIM_OC4_SetConfig+0xa8>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d109      	bne.n	8009d5c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	695b      	ldr	r3, [r3, #20]
 8009d54:	019b      	lsls	r3, r3, #6
 8009d56:	697a      	ldr	r2, [r7, #20]
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	697a      	ldr	r2, [r7, #20]
 8009d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	68fa      	ldr	r2, [r7, #12]
 8009d66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	685a      	ldr	r2, [r3, #4]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	693a      	ldr	r2, [r7, #16]
 8009d74:	621a      	str	r2, [r3, #32]
}
 8009d76:	bf00      	nop
 8009d78:	371c      	adds	r7, #28
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop
 8009d84:	40010000 	.word	0x40010000
 8009d88:	40010400 	.word	0x40010400

08009d8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b087      	sub	sp, #28
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	6a1b      	ldr	r3, [r3, #32]
 8009d9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	6a1b      	ldr	r3, [r3, #32]
 8009da2:	f023 0201 	bic.w	r2, r3, #1
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	699b      	ldr	r3, [r3, #24]
 8009dae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009db6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	011b      	lsls	r3, r3, #4
 8009dbc:	693a      	ldr	r2, [r7, #16]
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	f023 030a 	bic.w	r3, r3, #10
 8009dc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009dca:	697a      	ldr	r2, [r7, #20]
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	693a      	ldr	r2, [r7, #16]
 8009dd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	697a      	ldr	r2, [r7, #20]
 8009ddc:	621a      	str	r2, [r3, #32]
}
 8009dde:	bf00      	nop
 8009de0:	371c      	adds	r7, #28
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr

08009dea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009dea:	b480      	push	{r7}
 8009dec:	b087      	sub	sp, #28
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	60f8      	str	r0, [r7, #12]
 8009df2:	60b9      	str	r1, [r7, #8]
 8009df4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6a1b      	ldr	r3, [r3, #32]
 8009dfa:	f023 0210 	bic.w	r2, r3, #16
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	699b      	ldr	r3, [r3, #24]
 8009e06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	6a1b      	ldr	r3, [r3, #32]
 8009e0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	031b      	lsls	r3, r3, #12
 8009e1a:	697a      	ldr	r2, [r7, #20]
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009e26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	011b      	lsls	r3, r3, #4
 8009e2c:	693a      	ldr	r2, [r7, #16]
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	697a      	ldr	r2, [r7, #20]
 8009e36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	693a      	ldr	r2, [r7, #16]
 8009e3c:	621a      	str	r2, [r3, #32]
}
 8009e3e:	bf00      	nop
 8009e40:	371c      	adds	r7, #28
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr

08009e4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e4a:	b480      	push	{r7}
 8009e4c:	b085      	sub	sp, #20
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
 8009e52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e62:	683a      	ldr	r2, [r7, #0]
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	4313      	orrs	r3, r2
 8009e68:	f043 0307 	orr.w	r3, r3, #7
 8009e6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	68fa      	ldr	r2, [r7, #12]
 8009e72:	609a      	str	r2, [r3, #8]
}
 8009e74:	bf00      	nop
 8009e76:	3714      	adds	r7, #20
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr

08009e80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b087      	sub	sp, #28
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	607a      	str	r2, [r7, #4]
 8009e8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	689b      	ldr	r3, [r3, #8]
 8009e92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	021a      	lsls	r2, r3, #8
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	431a      	orrs	r2, r3
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	697a      	ldr	r2, [r7, #20]
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	697a      	ldr	r2, [r7, #20]
 8009eb2:	609a      	str	r2, [r3, #8]
}
 8009eb4:	bf00      	nop
 8009eb6:	371c      	adds	r7, #28
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b087      	sub	sp, #28
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	60b9      	str	r1, [r7, #8]
 8009eca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	f003 031f 	and.w	r3, r3, #31
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ed8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	6a1a      	ldr	r2, [r3, #32]
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	43db      	mvns	r3, r3
 8009ee2:	401a      	ands	r2, r3
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6a1a      	ldr	r2, [r3, #32]
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	f003 031f 	and.w	r3, r3, #31
 8009ef2:	6879      	ldr	r1, [r7, #4]
 8009ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ef8:	431a      	orrs	r2, r3
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	621a      	str	r2, [r3, #32]
}
 8009efe:	bf00      	nop
 8009f00:	371c      	adds	r7, #28
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr
	...

08009f0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b085      	sub	sp, #20
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d101      	bne.n	8009f24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f20:	2302      	movs	r3, #2
 8009f22:	e05a      	b.n	8009fda <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2201      	movs	r2, #1
 8009f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2202      	movs	r2, #2
 8009f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	68fa      	ldr	r2, [r7, #12]
 8009f52:	4313      	orrs	r3, r2
 8009f54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	68fa      	ldr	r2, [r7, #12]
 8009f5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4a21      	ldr	r2, [pc, #132]	; (8009fe8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d022      	beq.n	8009fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f70:	d01d      	beq.n	8009fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4a1d      	ldr	r2, [pc, #116]	; (8009fec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d018      	beq.n	8009fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a1b      	ldr	r2, [pc, #108]	; (8009ff0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d013      	beq.n	8009fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a1a      	ldr	r2, [pc, #104]	; (8009ff4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d00e      	beq.n	8009fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a18      	ldr	r2, [pc, #96]	; (8009ff8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d009      	beq.n	8009fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a17      	ldr	r2, [pc, #92]	; (8009ffc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d004      	beq.n	8009fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a15      	ldr	r2, [pc, #84]	; (800a000 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d10c      	bne.n	8009fc8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	68ba      	ldr	r2, [r7, #8]
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	68ba      	ldr	r2, [r7, #8]
 8009fc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2201      	movs	r2, #1
 8009fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3714      	adds	r7, #20
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr
 8009fe6:	bf00      	nop
 8009fe8:	40010000 	.word	0x40010000
 8009fec:	40000400 	.word	0x40000400
 8009ff0:	40000800 	.word	0x40000800
 8009ff4:	40000c00 	.word	0x40000c00
 8009ff8:	40010400 	.word	0x40010400
 8009ffc:	40014000 	.word	0x40014000
 800a000:	40001800 	.word	0x40001800

0800a004 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a004:	b480      	push	{r7}
 800a006:	b085      	sub	sp, #20
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a00e:	2300      	movs	r3, #0
 800a010:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d101      	bne.n	800a020 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a01c:	2302      	movs	r3, #2
 800a01e:	e03d      	b.n	800a09c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2201      	movs	r2, #1
 800a024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	68db      	ldr	r3, [r3, #12]
 800a032:	4313      	orrs	r3, r2
 800a034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	4313      	orrs	r3, r2
 800a042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	4313      	orrs	r3, r2
 800a050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4313      	orrs	r3, r2
 800a05e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	691b      	ldr	r3, [r3, #16]
 800a06a:	4313      	orrs	r3, r2
 800a06c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	695b      	ldr	r3, [r3, #20]
 800a078:	4313      	orrs	r3, r2
 800a07a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	69db      	ldr	r3, [r3, #28]
 800a086:	4313      	orrs	r3, r2
 800a088:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	68fa      	ldr	r2, [r7, #12]
 800a090:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a09a:	2300      	movs	r3, #0
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3714      	adds	r7, #20
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b083      	sub	sp, #12
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a0b0:	bf00      	nop
 800a0b2:	370c      	adds	r7, #12
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr

0800a0bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a0c4:	bf00      	nop
 800a0c6:	370c      	adds	r7, #12
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d101      	bne.n	800a0e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e03f      	b.n	800a162 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d106      	bne.n	800a0fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f7fb ffca 	bl	8006090 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2224      	movs	r2, #36	; 0x24
 800a100:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	68da      	ldr	r2, [r3, #12]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a112:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 fb97 	bl	800a848 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	691a      	ldr	r2, [r3, #16]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a128:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	695a      	ldr	r2, [r3, #20]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a138:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	68da      	ldr	r2, [r3, #12]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a148:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2220      	movs	r2, #32
 800a154:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2220      	movs	r2, #32
 800a15c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a160:	2300      	movs	r3, #0
}
 800a162:	4618      	mov	r0, r3
 800a164:	3708      	adds	r7, #8
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b088      	sub	sp, #32
 800a16e:	af02      	add	r7, sp, #8
 800a170:	60f8      	str	r0, [r7, #12]
 800a172:	60b9      	str	r1, [r7, #8]
 800a174:	603b      	str	r3, [r7, #0]
 800a176:	4613      	mov	r3, r2
 800a178:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800a17a:	2300      	movs	r3, #0
 800a17c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a184:	b2db      	uxtb	r3, r3
 800a186:	2b20      	cmp	r3, #32
 800a188:	f040 8083 	bne.w	800a292 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d002      	beq.n	800a198 <HAL_UART_Transmit+0x2e>
 800a192:	88fb      	ldrh	r3, [r7, #6]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d101      	bne.n	800a19c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	e07b      	b.n	800a294 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d101      	bne.n	800a1aa <HAL_UART_Transmit+0x40>
 800a1a6:	2302      	movs	r3, #2
 800a1a8:	e074      	b.n	800a294 <HAL_UART_Transmit+0x12a>
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2221      	movs	r2, #33	; 0x21
 800a1bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a1c0:	f7fc f912 	bl	80063e8 <HAL_GetTick>
 800a1c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	88fa      	ldrh	r2, [r7, #6]
 800a1ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	88fa      	ldrh	r2, [r7, #6]
 800a1d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800a1da:	e042      	b.n	800a262 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	3b01      	subs	r3, #1
 800a1e4:	b29a      	uxth	r2, r3
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	689b      	ldr	r3, [r3, #8]
 800a1ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1f2:	d122      	bne.n	800a23a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	9300      	str	r3, [sp, #0]
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	2180      	movs	r1, #128	; 0x80
 800a1fe:	68f8      	ldr	r0, [r7, #12]
 800a200:	f000 f9b6 	bl	800a570 <UART_WaitOnFlagUntilTimeout>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	d001      	beq.n	800a20e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800a20a:	2303      	movs	r3, #3
 800a20c:	e042      	b.n	800a294 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	881b      	ldrh	r3, [r3, #0]
 800a216:	461a      	mov	r2, r3
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a220:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	691b      	ldr	r3, [r3, #16]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d103      	bne.n	800a232 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	3302      	adds	r3, #2
 800a22e:	60bb      	str	r3, [r7, #8]
 800a230:	e017      	b.n	800a262 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	3301      	adds	r3, #1
 800a236:	60bb      	str	r3, [r7, #8]
 800a238:	e013      	b.n	800a262 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	9300      	str	r3, [sp, #0]
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	2200      	movs	r2, #0
 800a242:	2180      	movs	r1, #128	; 0x80
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	f000 f993 	bl	800a570 <UART_WaitOnFlagUntilTimeout>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d001      	beq.n	800a254 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800a250:	2303      	movs	r3, #3
 800a252:	e01f      	b.n	800a294 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	1c5a      	adds	r2, r3, #1
 800a258:	60ba      	str	r2, [r7, #8]
 800a25a:	781a      	ldrb	r2, [r3, #0]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a266:	b29b      	uxth	r3, r3
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d1b7      	bne.n	800a1dc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	9300      	str	r3, [sp, #0]
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	2200      	movs	r2, #0
 800a274:	2140      	movs	r1, #64	; 0x40
 800a276:	68f8      	ldr	r0, [r7, #12]
 800a278:	f000 f97a 	bl	800a570 <UART_WaitOnFlagUntilTimeout>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d001      	beq.n	800a286 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800a282:	2303      	movs	r3, #3
 800a284:	e006      	b.n	800a294 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2220      	movs	r2, #32
 800a28a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800a28e:	2300      	movs	r3, #0
 800a290:	e000      	b.n	800a294 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800a292:	2302      	movs	r3, #2
  }
}
 800a294:	4618      	mov	r0, r3
 800a296:	3718      	adds	r7, #24
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	4613      	mov	r3, r2
 800a2a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	2b20      	cmp	r3, #32
 800a2b4:	d140      	bne.n	800a338 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d002      	beq.n	800a2c2 <HAL_UART_Receive_IT+0x26>
 800a2bc:	88fb      	ldrh	r3, [r7, #6]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d101      	bne.n	800a2c6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	e039      	b.n	800a33a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d101      	bne.n	800a2d4 <HAL_UART_Receive_IT+0x38>
 800a2d0:	2302      	movs	r3, #2
 800a2d2:	e032      	b.n	800a33a <HAL_UART_Receive_IT+0x9e>
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	68ba      	ldr	r2, [r7, #8]
 800a2e0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	88fa      	ldrh	r2, [r7, #6]
 800a2e6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	88fa      	ldrh	r2, [r7, #6]
 800a2ec:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2222      	movs	r2, #34	; 0x22
 800a2f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2200      	movs	r2, #0
 800a300:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	68da      	ldr	r2, [r3, #12]
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a312:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	695a      	ldr	r2, [r3, #20]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f042 0201 	orr.w	r2, r2, #1
 800a322:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	68da      	ldr	r2, [r3, #12]
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f042 0220 	orr.w	r2, r2, #32
 800a332:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a334:	2300      	movs	r3, #0
 800a336:	e000      	b.n	800a33a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a338:	2302      	movs	r3, #2
  }
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3714      	adds	r7, #20
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr
	...

0800a348 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b088      	sub	sp, #32
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	695b      	ldr	r3, [r3, #20]
 800a366:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800a368:	2300      	movs	r3, #0
 800a36a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800a36c:	2300      	movs	r3, #0
 800a36e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a370:	69fb      	ldr	r3, [r7, #28]
 800a372:	f003 030f 	and.w	r3, r3, #15
 800a376:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d10d      	bne.n	800a39a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a37e:	69fb      	ldr	r3, [r7, #28]
 800a380:	f003 0320 	and.w	r3, r3, #32
 800a384:	2b00      	cmp	r3, #0
 800a386:	d008      	beq.n	800a39a <HAL_UART_IRQHandler+0x52>
 800a388:	69bb      	ldr	r3, [r7, #24]
 800a38a:	f003 0320 	and.w	r3, r3, #32
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d003      	beq.n	800a39a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f000 f9d6 	bl	800a744 <UART_Receive_IT>
      return;
 800a398:	e0d1      	b.n	800a53e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f000 80b0 	beq.w	800a502 <HAL_UART_IRQHandler+0x1ba>
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	f003 0301 	and.w	r3, r3, #1
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d105      	bne.n	800a3b8 <HAL_UART_IRQHandler+0x70>
 800a3ac:	69bb      	ldr	r3, [r7, #24]
 800a3ae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	f000 80a5 	beq.w	800a502 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a3b8:	69fb      	ldr	r3, [r7, #28]
 800a3ba:	f003 0301 	and.w	r3, r3, #1
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00a      	beq.n	800a3d8 <HAL_UART_IRQHandler+0x90>
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d005      	beq.n	800a3d8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3d0:	f043 0201 	orr.w	r2, r3, #1
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	f003 0304 	and.w	r3, r3, #4
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d00a      	beq.n	800a3f8 <HAL_UART_IRQHandler+0xb0>
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	f003 0301 	and.w	r3, r3, #1
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d005      	beq.n	800a3f8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3f0:	f043 0202 	orr.w	r2, r3, #2
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a3f8:	69fb      	ldr	r3, [r7, #28]
 800a3fa:	f003 0302 	and.w	r3, r3, #2
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d00a      	beq.n	800a418 <HAL_UART_IRQHandler+0xd0>
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	f003 0301 	and.w	r3, r3, #1
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d005      	beq.n	800a418 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a410:	f043 0204 	orr.w	r2, r3, #4
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a418:	69fb      	ldr	r3, [r7, #28]
 800a41a:	f003 0308 	and.w	r3, r3, #8
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d00f      	beq.n	800a442 <HAL_UART_IRQHandler+0xfa>
 800a422:	69bb      	ldr	r3, [r7, #24]
 800a424:	f003 0320 	and.w	r3, r3, #32
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d104      	bne.n	800a436 <HAL_UART_IRQHandler+0xee>
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	f003 0301 	and.w	r3, r3, #1
 800a432:	2b00      	cmp	r3, #0
 800a434:	d005      	beq.n	800a442 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a43a:	f043 0208 	orr.w	r2, r3, #8
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a446:	2b00      	cmp	r3, #0
 800a448:	d078      	beq.n	800a53c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a44a:	69fb      	ldr	r3, [r7, #28]
 800a44c:	f003 0320 	and.w	r3, r3, #32
 800a450:	2b00      	cmp	r3, #0
 800a452:	d007      	beq.n	800a464 <HAL_UART_IRQHandler+0x11c>
 800a454:	69bb      	ldr	r3, [r7, #24]
 800a456:	f003 0320 	and.w	r3, r3, #32
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d002      	beq.n	800a464 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 f970 	bl	800a744 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	695b      	ldr	r3, [r3, #20]
 800a46a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a46e:	2b40      	cmp	r3, #64	; 0x40
 800a470:	bf0c      	ite	eq
 800a472:	2301      	moveq	r3, #1
 800a474:	2300      	movne	r3, #0
 800a476:	b2db      	uxtb	r3, r3
 800a478:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a47e:	f003 0308 	and.w	r3, r3, #8
 800a482:	2b00      	cmp	r3, #0
 800a484:	d102      	bne.n	800a48c <HAL_UART_IRQHandler+0x144>
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d031      	beq.n	800a4f0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f000 f8b9 	bl	800a604 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	695b      	ldr	r3, [r3, #20]
 800a498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a49c:	2b40      	cmp	r3, #64	; 0x40
 800a49e:	d123      	bne.n	800a4e8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	695a      	ldr	r2, [r3, #20]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4ae:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d013      	beq.n	800a4e0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4bc:	4a21      	ldr	r2, [pc, #132]	; (800a544 <HAL_UART_IRQHandler+0x1fc>)
 800a4be:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f7fc f89f 	bl	8006608 <HAL_DMA_Abort_IT>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d016      	beq.n	800a4fe <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a4da:	4610      	mov	r0, r2
 800a4dc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4de:	e00e      	b.n	800a4fe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 f83b 	bl	800a55c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4e6:	e00a      	b.n	800a4fe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f000 f837 	bl	800a55c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4ee:	e006      	b.n	800a4fe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 f833 	bl	800a55c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800a4fc:	e01e      	b.n	800a53c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4fe:	bf00      	nop
    return;
 800a500:	e01c      	b.n	800a53c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a502:	69fb      	ldr	r3, [r7, #28]
 800a504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d008      	beq.n	800a51e <HAL_UART_IRQHandler+0x1d6>
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a512:	2b00      	cmp	r3, #0
 800a514:	d003      	beq.n	800a51e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 f8a6 	bl	800a668 <UART_Transmit_IT>
    return;
 800a51c:	e00f      	b.n	800a53e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a51e:	69fb      	ldr	r3, [r7, #28]
 800a520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a524:	2b00      	cmp	r3, #0
 800a526:	d00a      	beq.n	800a53e <HAL_UART_IRQHandler+0x1f6>
 800a528:	69bb      	ldr	r3, [r7, #24]
 800a52a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d005      	beq.n	800a53e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 f8ee 	bl	800a714 <UART_EndTransmit_IT>
    return;
 800a538:	bf00      	nop
 800a53a:	e000      	b.n	800a53e <HAL_UART_IRQHandler+0x1f6>
    return;
 800a53c:	bf00      	nop
  }
}
 800a53e:	3720      	adds	r7, #32
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}
 800a544:	0800a641 	.word	0x0800a641

0800a548 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a550:	bf00      	nop
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a564:	bf00      	nop
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	603b      	str	r3, [r7, #0]
 800a57c:	4613      	mov	r3, r2
 800a57e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a580:	e02c      	b.n	800a5dc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a582:	69bb      	ldr	r3, [r7, #24]
 800a584:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a588:	d028      	beq.n	800a5dc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a58a:	69bb      	ldr	r3, [r7, #24]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d007      	beq.n	800a5a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a590:	f7fb ff2a 	bl	80063e8 <HAL_GetTick>
 800a594:	4602      	mov	r2, r0
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	1ad3      	subs	r3, r2, r3
 800a59a:	69ba      	ldr	r2, [r7, #24]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d21d      	bcs.n	800a5dc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	68da      	ldr	r2, [r3, #12]
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a5ae:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	695a      	ldr	r2, [r3, #20]
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f022 0201 	bic.w	r2, r2, #1
 800a5be:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2220      	movs	r2, #32
 800a5c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2220      	movs	r2, #32
 800a5cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800a5d8:	2303      	movs	r3, #3
 800a5da:	e00f      	b.n	800a5fc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	681a      	ldr	r2, [r3, #0]
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	4013      	ands	r3, r2
 800a5e6:	68ba      	ldr	r2, [r7, #8]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	bf0c      	ite	eq
 800a5ec:	2301      	moveq	r3, #1
 800a5ee:	2300      	movne	r3, #0
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	79fb      	ldrb	r3, [r7, #7]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d0c3      	beq.n	800a582 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a5fa:	2300      	movs	r3, #0
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3710      	adds	r7, #16
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	68da      	ldr	r2, [r3, #12]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a61a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	695a      	ldr	r2, [r3, #20]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f022 0201 	bic.w	r2, r2, #1
 800a62a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2220      	movs	r2, #32
 800a630:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a634:	bf00      	nop
 800a636:	370c      	adds	r7, #12
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr

0800a640 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a64c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2200      	movs	r2, #0
 800a652:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2200      	movs	r2, #0
 800a658:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	f7ff ff7e 	bl	800a55c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a660:	bf00      	nop
 800a662:	3710      	adds	r7, #16
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a676:	b2db      	uxtb	r3, r3
 800a678:	2b21      	cmp	r3, #33	; 0x21
 800a67a:	d144      	bne.n	800a706 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	689b      	ldr	r3, [r3, #8]
 800a680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a684:	d11a      	bne.n	800a6bc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6a1b      	ldr	r3, [r3, #32]
 800a68a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	881b      	ldrh	r3, [r3, #0]
 800a690:	461a      	mov	r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a69a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	691b      	ldr	r3, [r3, #16]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d105      	bne.n	800a6b0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6a1b      	ldr	r3, [r3, #32]
 800a6a8:	1c9a      	adds	r2, r3, #2
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	621a      	str	r2, [r3, #32]
 800a6ae:	e00e      	b.n	800a6ce <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6a1b      	ldr	r3, [r3, #32]
 800a6b4:	1c5a      	adds	r2, r3, #1
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	621a      	str	r2, [r3, #32]
 800a6ba:	e008      	b.n	800a6ce <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6a1b      	ldr	r3, [r3, #32]
 800a6c0:	1c59      	adds	r1, r3, #1
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	6211      	str	r1, [r2, #32]
 800a6c6:	781a      	ldrb	r2, [r3, #0]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	3b01      	subs	r3, #1
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	687a      	ldr	r2, [r7, #4]
 800a6da:	4619      	mov	r1, r3
 800a6dc:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d10f      	bne.n	800a702 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	68da      	ldr	r2, [r3, #12]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a6f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	68da      	ldr	r2, [r3, #12]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a700:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a702:	2300      	movs	r3, #0
 800a704:	e000      	b.n	800a708 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a706:	2302      	movs	r3, #2
  }
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3714      	adds	r7, #20
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr

0800a714 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	68da      	ldr	r2, [r3, #12]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a72a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2220      	movs	r2, #32
 800a730:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f7ff ff07 	bl	800a548 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a73a:	2300      	movs	r3, #0
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3708      	adds	r7, #8
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a752:	b2db      	uxtb	r3, r3
 800a754:	2b22      	cmp	r3, #34	; 0x22
 800a756:	d171      	bne.n	800a83c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	689b      	ldr	r3, [r3, #8]
 800a75c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a760:	d123      	bne.n	800a7aa <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a766:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	691b      	ldr	r3, [r3, #16]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d10e      	bne.n	800a78e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	b29b      	uxth	r3, r3
 800a778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a77c:	b29a      	uxth	r2, r3
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a786:	1c9a      	adds	r2, r3, #2
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	629a      	str	r2, [r3, #40]	; 0x28
 800a78c:	e029      	b.n	800a7e2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	b29b      	uxth	r3, r3
 800a796:	b2db      	uxtb	r3, r3
 800a798:	b29a      	uxth	r2, r3
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7a2:	1c5a      	adds	r2, r3, #1
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	629a      	str	r2, [r3, #40]	; 0x28
 800a7a8:	e01b      	b.n	800a7e2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d10a      	bne.n	800a7c8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	6858      	ldr	r0, [r3, #4]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7bc:	1c59      	adds	r1, r3, #1
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	6291      	str	r1, [r2, #40]	; 0x28
 800a7c2:	b2c2      	uxtb	r2, r0
 800a7c4:	701a      	strb	r2, [r3, #0]
 800a7c6:	e00c      	b.n	800a7e2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	b2da      	uxtb	r2, r3
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7d4:	1c58      	adds	r0, r3, #1
 800a7d6:	6879      	ldr	r1, [r7, #4]
 800a7d8:	6288      	str	r0, [r1, #40]	; 0x28
 800a7da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a7de:	b2d2      	uxtb	r2, r2
 800a7e0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	3b01      	subs	r3, #1
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d120      	bne.n	800a838 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	68da      	ldr	r2, [r3, #12]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f022 0220 	bic.w	r2, r2, #32
 800a804:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	68da      	ldr	r2, [r3, #12]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a814:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	695a      	ldr	r2, [r3, #20]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f022 0201 	bic.w	r2, r2, #1
 800a824:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2220      	movs	r2, #32
 800a82a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f7fa fdfc 	bl	800542c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800a834:	2300      	movs	r3, #0
 800a836:	e002      	b.n	800a83e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800a838:	2300      	movs	r3, #0
 800a83a:	e000      	b.n	800a83e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800a83c:	2302      	movs	r3, #2
  }
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3710      	adds	r7, #16
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
	...

0800a848 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a84c:	b085      	sub	sp, #20
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	691b      	ldr	r3, [r3, #16]
 800a858:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	68da      	ldr	r2, [r3, #12]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	430a      	orrs	r2, r1
 800a866:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	689a      	ldr	r2, [r3, #8]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	691b      	ldr	r3, [r3, #16]
 800a870:	431a      	orrs	r2, r3
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	695b      	ldr	r3, [r3, #20]
 800a876:	431a      	orrs	r2, r3
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	69db      	ldr	r3, [r3, #28]
 800a87c:	4313      	orrs	r3, r2
 800a87e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	68db      	ldr	r3, [r3, #12]
 800a886:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a88a:	f023 030c 	bic.w	r3, r3, #12
 800a88e:	687a      	ldr	r2, [r7, #4]
 800a890:	6812      	ldr	r2, [r2, #0]
 800a892:	68f9      	ldr	r1, [r7, #12]
 800a894:	430b      	orrs	r3, r1
 800a896:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	695b      	ldr	r3, [r3, #20]
 800a89e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	699a      	ldr	r2, [r3, #24]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	430a      	orrs	r2, r1
 800a8ac:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	69db      	ldr	r3, [r3, #28]
 800a8b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8b6:	f040 818b 	bne.w	800abd0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4ac1      	ldr	r2, [pc, #772]	; (800abc4 <UART_SetConfig+0x37c>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d005      	beq.n	800a8d0 <UART_SetConfig+0x88>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4abf      	ldr	r2, [pc, #764]	; (800abc8 <UART_SetConfig+0x380>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	f040 80bd 	bne.w	800aa4a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a8d0:	f7fe f980 	bl	8008bd4 <HAL_RCC_GetPCLK2Freq>
 800a8d4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	461d      	mov	r5, r3
 800a8da:	f04f 0600 	mov.w	r6, #0
 800a8de:	46a8      	mov	r8, r5
 800a8e0:	46b1      	mov	r9, r6
 800a8e2:	eb18 0308 	adds.w	r3, r8, r8
 800a8e6:	eb49 0409 	adc.w	r4, r9, r9
 800a8ea:	4698      	mov	r8, r3
 800a8ec:	46a1      	mov	r9, r4
 800a8ee:	eb18 0805 	adds.w	r8, r8, r5
 800a8f2:	eb49 0906 	adc.w	r9, r9, r6
 800a8f6:	f04f 0100 	mov.w	r1, #0
 800a8fa:	f04f 0200 	mov.w	r2, #0
 800a8fe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a902:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a906:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a90a:	4688      	mov	r8, r1
 800a90c:	4691      	mov	r9, r2
 800a90e:	eb18 0005 	adds.w	r0, r8, r5
 800a912:	eb49 0106 	adc.w	r1, r9, r6
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	461d      	mov	r5, r3
 800a91c:	f04f 0600 	mov.w	r6, #0
 800a920:	196b      	adds	r3, r5, r5
 800a922:	eb46 0406 	adc.w	r4, r6, r6
 800a926:	461a      	mov	r2, r3
 800a928:	4623      	mov	r3, r4
 800a92a:	f7f6 f947 	bl	8000bbc <__aeabi_uldivmod>
 800a92e:	4603      	mov	r3, r0
 800a930:	460c      	mov	r4, r1
 800a932:	461a      	mov	r2, r3
 800a934:	4ba5      	ldr	r3, [pc, #660]	; (800abcc <UART_SetConfig+0x384>)
 800a936:	fba3 2302 	umull	r2, r3, r3, r2
 800a93a:	095b      	lsrs	r3, r3, #5
 800a93c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	461d      	mov	r5, r3
 800a944:	f04f 0600 	mov.w	r6, #0
 800a948:	46a9      	mov	r9, r5
 800a94a:	46b2      	mov	sl, r6
 800a94c:	eb19 0309 	adds.w	r3, r9, r9
 800a950:	eb4a 040a 	adc.w	r4, sl, sl
 800a954:	4699      	mov	r9, r3
 800a956:	46a2      	mov	sl, r4
 800a958:	eb19 0905 	adds.w	r9, r9, r5
 800a95c:	eb4a 0a06 	adc.w	sl, sl, r6
 800a960:	f04f 0100 	mov.w	r1, #0
 800a964:	f04f 0200 	mov.w	r2, #0
 800a968:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a96c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a970:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a974:	4689      	mov	r9, r1
 800a976:	4692      	mov	sl, r2
 800a978:	eb19 0005 	adds.w	r0, r9, r5
 800a97c:	eb4a 0106 	adc.w	r1, sl, r6
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	461d      	mov	r5, r3
 800a986:	f04f 0600 	mov.w	r6, #0
 800a98a:	196b      	adds	r3, r5, r5
 800a98c:	eb46 0406 	adc.w	r4, r6, r6
 800a990:	461a      	mov	r2, r3
 800a992:	4623      	mov	r3, r4
 800a994:	f7f6 f912 	bl	8000bbc <__aeabi_uldivmod>
 800a998:	4603      	mov	r3, r0
 800a99a:	460c      	mov	r4, r1
 800a99c:	461a      	mov	r2, r3
 800a99e:	4b8b      	ldr	r3, [pc, #556]	; (800abcc <UART_SetConfig+0x384>)
 800a9a0:	fba3 1302 	umull	r1, r3, r3, r2
 800a9a4:	095b      	lsrs	r3, r3, #5
 800a9a6:	2164      	movs	r1, #100	; 0x64
 800a9a8:	fb01 f303 	mul.w	r3, r1, r3
 800a9ac:	1ad3      	subs	r3, r2, r3
 800a9ae:	00db      	lsls	r3, r3, #3
 800a9b0:	3332      	adds	r3, #50	; 0x32
 800a9b2:	4a86      	ldr	r2, [pc, #536]	; (800abcc <UART_SetConfig+0x384>)
 800a9b4:	fba2 2303 	umull	r2, r3, r2, r3
 800a9b8:	095b      	lsrs	r3, r3, #5
 800a9ba:	005b      	lsls	r3, r3, #1
 800a9bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a9c0:	4498      	add	r8, r3
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	461d      	mov	r5, r3
 800a9c6:	f04f 0600 	mov.w	r6, #0
 800a9ca:	46a9      	mov	r9, r5
 800a9cc:	46b2      	mov	sl, r6
 800a9ce:	eb19 0309 	adds.w	r3, r9, r9
 800a9d2:	eb4a 040a 	adc.w	r4, sl, sl
 800a9d6:	4699      	mov	r9, r3
 800a9d8:	46a2      	mov	sl, r4
 800a9da:	eb19 0905 	adds.w	r9, r9, r5
 800a9de:	eb4a 0a06 	adc.w	sl, sl, r6
 800a9e2:	f04f 0100 	mov.w	r1, #0
 800a9e6:	f04f 0200 	mov.w	r2, #0
 800a9ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a9ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a9f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a9f6:	4689      	mov	r9, r1
 800a9f8:	4692      	mov	sl, r2
 800a9fa:	eb19 0005 	adds.w	r0, r9, r5
 800a9fe:	eb4a 0106 	adc.w	r1, sl, r6
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	461d      	mov	r5, r3
 800aa08:	f04f 0600 	mov.w	r6, #0
 800aa0c:	196b      	adds	r3, r5, r5
 800aa0e:	eb46 0406 	adc.w	r4, r6, r6
 800aa12:	461a      	mov	r2, r3
 800aa14:	4623      	mov	r3, r4
 800aa16:	f7f6 f8d1 	bl	8000bbc <__aeabi_uldivmod>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	460c      	mov	r4, r1
 800aa1e:	461a      	mov	r2, r3
 800aa20:	4b6a      	ldr	r3, [pc, #424]	; (800abcc <UART_SetConfig+0x384>)
 800aa22:	fba3 1302 	umull	r1, r3, r3, r2
 800aa26:	095b      	lsrs	r3, r3, #5
 800aa28:	2164      	movs	r1, #100	; 0x64
 800aa2a:	fb01 f303 	mul.w	r3, r1, r3
 800aa2e:	1ad3      	subs	r3, r2, r3
 800aa30:	00db      	lsls	r3, r3, #3
 800aa32:	3332      	adds	r3, #50	; 0x32
 800aa34:	4a65      	ldr	r2, [pc, #404]	; (800abcc <UART_SetConfig+0x384>)
 800aa36:	fba2 2303 	umull	r2, r3, r2, r3
 800aa3a:	095b      	lsrs	r3, r3, #5
 800aa3c:	f003 0207 	and.w	r2, r3, #7
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4442      	add	r2, r8
 800aa46:	609a      	str	r2, [r3, #8]
 800aa48:	e26f      	b.n	800af2a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800aa4a:	f7fe f8af 	bl	8008bac <HAL_RCC_GetPCLK1Freq>
 800aa4e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	461d      	mov	r5, r3
 800aa54:	f04f 0600 	mov.w	r6, #0
 800aa58:	46a8      	mov	r8, r5
 800aa5a:	46b1      	mov	r9, r6
 800aa5c:	eb18 0308 	adds.w	r3, r8, r8
 800aa60:	eb49 0409 	adc.w	r4, r9, r9
 800aa64:	4698      	mov	r8, r3
 800aa66:	46a1      	mov	r9, r4
 800aa68:	eb18 0805 	adds.w	r8, r8, r5
 800aa6c:	eb49 0906 	adc.w	r9, r9, r6
 800aa70:	f04f 0100 	mov.w	r1, #0
 800aa74:	f04f 0200 	mov.w	r2, #0
 800aa78:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800aa7c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800aa80:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800aa84:	4688      	mov	r8, r1
 800aa86:	4691      	mov	r9, r2
 800aa88:	eb18 0005 	adds.w	r0, r8, r5
 800aa8c:	eb49 0106 	adc.w	r1, r9, r6
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	461d      	mov	r5, r3
 800aa96:	f04f 0600 	mov.w	r6, #0
 800aa9a:	196b      	adds	r3, r5, r5
 800aa9c:	eb46 0406 	adc.w	r4, r6, r6
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	4623      	mov	r3, r4
 800aaa4:	f7f6 f88a 	bl	8000bbc <__aeabi_uldivmod>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	460c      	mov	r4, r1
 800aaac:	461a      	mov	r2, r3
 800aaae:	4b47      	ldr	r3, [pc, #284]	; (800abcc <UART_SetConfig+0x384>)
 800aab0:	fba3 2302 	umull	r2, r3, r3, r2
 800aab4:	095b      	lsrs	r3, r3, #5
 800aab6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	461d      	mov	r5, r3
 800aabe:	f04f 0600 	mov.w	r6, #0
 800aac2:	46a9      	mov	r9, r5
 800aac4:	46b2      	mov	sl, r6
 800aac6:	eb19 0309 	adds.w	r3, r9, r9
 800aaca:	eb4a 040a 	adc.w	r4, sl, sl
 800aace:	4699      	mov	r9, r3
 800aad0:	46a2      	mov	sl, r4
 800aad2:	eb19 0905 	adds.w	r9, r9, r5
 800aad6:	eb4a 0a06 	adc.w	sl, sl, r6
 800aada:	f04f 0100 	mov.w	r1, #0
 800aade:	f04f 0200 	mov.w	r2, #0
 800aae2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aae6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800aaea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aaee:	4689      	mov	r9, r1
 800aaf0:	4692      	mov	sl, r2
 800aaf2:	eb19 0005 	adds.w	r0, r9, r5
 800aaf6:	eb4a 0106 	adc.w	r1, sl, r6
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	461d      	mov	r5, r3
 800ab00:	f04f 0600 	mov.w	r6, #0
 800ab04:	196b      	adds	r3, r5, r5
 800ab06:	eb46 0406 	adc.w	r4, r6, r6
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	4623      	mov	r3, r4
 800ab0e:	f7f6 f855 	bl	8000bbc <__aeabi_uldivmod>
 800ab12:	4603      	mov	r3, r0
 800ab14:	460c      	mov	r4, r1
 800ab16:	461a      	mov	r2, r3
 800ab18:	4b2c      	ldr	r3, [pc, #176]	; (800abcc <UART_SetConfig+0x384>)
 800ab1a:	fba3 1302 	umull	r1, r3, r3, r2
 800ab1e:	095b      	lsrs	r3, r3, #5
 800ab20:	2164      	movs	r1, #100	; 0x64
 800ab22:	fb01 f303 	mul.w	r3, r1, r3
 800ab26:	1ad3      	subs	r3, r2, r3
 800ab28:	00db      	lsls	r3, r3, #3
 800ab2a:	3332      	adds	r3, #50	; 0x32
 800ab2c:	4a27      	ldr	r2, [pc, #156]	; (800abcc <UART_SetConfig+0x384>)
 800ab2e:	fba2 2303 	umull	r2, r3, r2, r3
 800ab32:	095b      	lsrs	r3, r3, #5
 800ab34:	005b      	lsls	r3, r3, #1
 800ab36:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ab3a:	4498      	add	r8, r3
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	461d      	mov	r5, r3
 800ab40:	f04f 0600 	mov.w	r6, #0
 800ab44:	46a9      	mov	r9, r5
 800ab46:	46b2      	mov	sl, r6
 800ab48:	eb19 0309 	adds.w	r3, r9, r9
 800ab4c:	eb4a 040a 	adc.w	r4, sl, sl
 800ab50:	4699      	mov	r9, r3
 800ab52:	46a2      	mov	sl, r4
 800ab54:	eb19 0905 	adds.w	r9, r9, r5
 800ab58:	eb4a 0a06 	adc.w	sl, sl, r6
 800ab5c:	f04f 0100 	mov.w	r1, #0
 800ab60:	f04f 0200 	mov.w	r2, #0
 800ab64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ab68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ab6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ab70:	4689      	mov	r9, r1
 800ab72:	4692      	mov	sl, r2
 800ab74:	eb19 0005 	adds.w	r0, r9, r5
 800ab78:	eb4a 0106 	adc.w	r1, sl, r6
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	461d      	mov	r5, r3
 800ab82:	f04f 0600 	mov.w	r6, #0
 800ab86:	196b      	adds	r3, r5, r5
 800ab88:	eb46 0406 	adc.w	r4, r6, r6
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	4623      	mov	r3, r4
 800ab90:	f7f6 f814 	bl	8000bbc <__aeabi_uldivmod>
 800ab94:	4603      	mov	r3, r0
 800ab96:	460c      	mov	r4, r1
 800ab98:	461a      	mov	r2, r3
 800ab9a:	4b0c      	ldr	r3, [pc, #48]	; (800abcc <UART_SetConfig+0x384>)
 800ab9c:	fba3 1302 	umull	r1, r3, r3, r2
 800aba0:	095b      	lsrs	r3, r3, #5
 800aba2:	2164      	movs	r1, #100	; 0x64
 800aba4:	fb01 f303 	mul.w	r3, r1, r3
 800aba8:	1ad3      	subs	r3, r2, r3
 800abaa:	00db      	lsls	r3, r3, #3
 800abac:	3332      	adds	r3, #50	; 0x32
 800abae:	4a07      	ldr	r2, [pc, #28]	; (800abcc <UART_SetConfig+0x384>)
 800abb0:	fba2 2303 	umull	r2, r3, r2, r3
 800abb4:	095b      	lsrs	r3, r3, #5
 800abb6:	f003 0207 	and.w	r2, r3, #7
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4442      	add	r2, r8
 800abc0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800abc2:	e1b2      	b.n	800af2a <UART_SetConfig+0x6e2>
 800abc4:	40011000 	.word	0x40011000
 800abc8:	40011400 	.word	0x40011400
 800abcc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4ad7      	ldr	r2, [pc, #860]	; (800af34 <UART_SetConfig+0x6ec>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d005      	beq.n	800abe6 <UART_SetConfig+0x39e>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4ad6      	ldr	r2, [pc, #856]	; (800af38 <UART_SetConfig+0x6f0>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	f040 80d1 	bne.w	800ad88 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800abe6:	f7fd fff5 	bl	8008bd4 <HAL_RCC_GetPCLK2Freq>
 800abea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	469a      	mov	sl, r3
 800abf0:	f04f 0b00 	mov.w	fp, #0
 800abf4:	46d0      	mov	r8, sl
 800abf6:	46d9      	mov	r9, fp
 800abf8:	eb18 0308 	adds.w	r3, r8, r8
 800abfc:	eb49 0409 	adc.w	r4, r9, r9
 800ac00:	4698      	mov	r8, r3
 800ac02:	46a1      	mov	r9, r4
 800ac04:	eb18 080a 	adds.w	r8, r8, sl
 800ac08:	eb49 090b 	adc.w	r9, r9, fp
 800ac0c:	f04f 0100 	mov.w	r1, #0
 800ac10:	f04f 0200 	mov.w	r2, #0
 800ac14:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ac18:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ac1c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ac20:	4688      	mov	r8, r1
 800ac22:	4691      	mov	r9, r2
 800ac24:	eb1a 0508 	adds.w	r5, sl, r8
 800ac28:	eb4b 0609 	adc.w	r6, fp, r9
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	685b      	ldr	r3, [r3, #4]
 800ac30:	4619      	mov	r1, r3
 800ac32:	f04f 0200 	mov.w	r2, #0
 800ac36:	f04f 0300 	mov.w	r3, #0
 800ac3a:	f04f 0400 	mov.w	r4, #0
 800ac3e:	0094      	lsls	r4, r2, #2
 800ac40:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ac44:	008b      	lsls	r3, r1, #2
 800ac46:	461a      	mov	r2, r3
 800ac48:	4623      	mov	r3, r4
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	4631      	mov	r1, r6
 800ac4e:	f7f5 ffb5 	bl	8000bbc <__aeabi_uldivmod>
 800ac52:	4603      	mov	r3, r0
 800ac54:	460c      	mov	r4, r1
 800ac56:	461a      	mov	r2, r3
 800ac58:	4bb8      	ldr	r3, [pc, #736]	; (800af3c <UART_SetConfig+0x6f4>)
 800ac5a:	fba3 2302 	umull	r2, r3, r3, r2
 800ac5e:	095b      	lsrs	r3, r3, #5
 800ac60:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	469b      	mov	fp, r3
 800ac68:	f04f 0c00 	mov.w	ip, #0
 800ac6c:	46d9      	mov	r9, fp
 800ac6e:	46e2      	mov	sl, ip
 800ac70:	eb19 0309 	adds.w	r3, r9, r9
 800ac74:	eb4a 040a 	adc.w	r4, sl, sl
 800ac78:	4699      	mov	r9, r3
 800ac7a:	46a2      	mov	sl, r4
 800ac7c:	eb19 090b 	adds.w	r9, r9, fp
 800ac80:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ac84:	f04f 0100 	mov.w	r1, #0
 800ac88:	f04f 0200 	mov.w	r2, #0
 800ac8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ac90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ac94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ac98:	4689      	mov	r9, r1
 800ac9a:	4692      	mov	sl, r2
 800ac9c:	eb1b 0509 	adds.w	r5, fp, r9
 800aca0:	eb4c 060a 	adc.w	r6, ip, sl
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	4619      	mov	r1, r3
 800acaa:	f04f 0200 	mov.w	r2, #0
 800acae:	f04f 0300 	mov.w	r3, #0
 800acb2:	f04f 0400 	mov.w	r4, #0
 800acb6:	0094      	lsls	r4, r2, #2
 800acb8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800acbc:	008b      	lsls	r3, r1, #2
 800acbe:	461a      	mov	r2, r3
 800acc0:	4623      	mov	r3, r4
 800acc2:	4628      	mov	r0, r5
 800acc4:	4631      	mov	r1, r6
 800acc6:	f7f5 ff79 	bl	8000bbc <__aeabi_uldivmod>
 800acca:	4603      	mov	r3, r0
 800accc:	460c      	mov	r4, r1
 800acce:	461a      	mov	r2, r3
 800acd0:	4b9a      	ldr	r3, [pc, #616]	; (800af3c <UART_SetConfig+0x6f4>)
 800acd2:	fba3 1302 	umull	r1, r3, r3, r2
 800acd6:	095b      	lsrs	r3, r3, #5
 800acd8:	2164      	movs	r1, #100	; 0x64
 800acda:	fb01 f303 	mul.w	r3, r1, r3
 800acde:	1ad3      	subs	r3, r2, r3
 800ace0:	011b      	lsls	r3, r3, #4
 800ace2:	3332      	adds	r3, #50	; 0x32
 800ace4:	4a95      	ldr	r2, [pc, #596]	; (800af3c <UART_SetConfig+0x6f4>)
 800ace6:	fba2 2303 	umull	r2, r3, r2, r3
 800acea:	095b      	lsrs	r3, r3, #5
 800acec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800acf0:	4498      	add	r8, r3
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	469b      	mov	fp, r3
 800acf6:	f04f 0c00 	mov.w	ip, #0
 800acfa:	46d9      	mov	r9, fp
 800acfc:	46e2      	mov	sl, ip
 800acfe:	eb19 0309 	adds.w	r3, r9, r9
 800ad02:	eb4a 040a 	adc.w	r4, sl, sl
 800ad06:	4699      	mov	r9, r3
 800ad08:	46a2      	mov	sl, r4
 800ad0a:	eb19 090b 	adds.w	r9, r9, fp
 800ad0e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ad12:	f04f 0100 	mov.w	r1, #0
 800ad16:	f04f 0200 	mov.w	r2, #0
 800ad1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ad1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ad22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ad26:	4689      	mov	r9, r1
 800ad28:	4692      	mov	sl, r2
 800ad2a:	eb1b 0509 	adds.w	r5, fp, r9
 800ad2e:	eb4c 060a 	adc.w	r6, ip, sl
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	4619      	mov	r1, r3
 800ad38:	f04f 0200 	mov.w	r2, #0
 800ad3c:	f04f 0300 	mov.w	r3, #0
 800ad40:	f04f 0400 	mov.w	r4, #0
 800ad44:	0094      	lsls	r4, r2, #2
 800ad46:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ad4a:	008b      	lsls	r3, r1, #2
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	4623      	mov	r3, r4
 800ad50:	4628      	mov	r0, r5
 800ad52:	4631      	mov	r1, r6
 800ad54:	f7f5 ff32 	bl	8000bbc <__aeabi_uldivmod>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	460c      	mov	r4, r1
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	4b77      	ldr	r3, [pc, #476]	; (800af3c <UART_SetConfig+0x6f4>)
 800ad60:	fba3 1302 	umull	r1, r3, r3, r2
 800ad64:	095b      	lsrs	r3, r3, #5
 800ad66:	2164      	movs	r1, #100	; 0x64
 800ad68:	fb01 f303 	mul.w	r3, r1, r3
 800ad6c:	1ad3      	subs	r3, r2, r3
 800ad6e:	011b      	lsls	r3, r3, #4
 800ad70:	3332      	adds	r3, #50	; 0x32
 800ad72:	4a72      	ldr	r2, [pc, #456]	; (800af3c <UART_SetConfig+0x6f4>)
 800ad74:	fba2 2303 	umull	r2, r3, r2, r3
 800ad78:	095b      	lsrs	r3, r3, #5
 800ad7a:	f003 020f 	and.w	r2, r3, #15
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4442      	add	r2, r8
 800ad84:	609a      	str	r2, [r3, #8]
 800ad86:	e0d0      	b.n	800af2a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800ad88:	f7fd ff10 	bl	8008bac <HAL_RCC_GetPCLK1Freq>
 800ad8c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	469a      	mov	sl, r3
 800ad92:	f04f 0b00 	mov.w	fp, #0
 800ad96:	46d0      	mov	r8, sl
 800ad98:	46d9      	mov	r9, fp
 800ad9a:	eb18 0308 	adds.w	r3, r8, r8
 800ad9e:	eb49 0409 	adc.w	r4, r9, r9
 800ada2:	4698      	mov	r8, r3
 800ada4:	46a1      	mov	r9, r4
 800ada6:	eb18 080a 	adds.w	r8, r8, sl
 800adaa:	eb49 090b 	adc.w	r9, r9, fp
 800adae:	f04f 0100 	mov.w	r1, #0
 800adb2:	f04f 0200 	mov.w	r2, #0
 800adb6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800adba:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800adbe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800adc2:	4688      	mov	r8, r1
 800adc4:	4691      	mov	r9, r2
 800adc6:	eb1a 0508 	adds.w	r5, sl, r8
 800adca:	eb4b 0609 	adc.w	r6, fp, r9
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	4619      	mov	r1, r3
 800add4:	f04f 0200 	mov.w	r2, #0
 800add8:	f04f 0300 	mov.w	r3, #0
 800addc:	f04f 0400 	mov.w	r4, #0
 800ade0:	0094      	lsls	r4, r2, #2
 800ade2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ade6:	008b      	lsls	r3, r1, #2
 800ade8:	461a      	mov	r2, r3
 800adea:	4623      	mov	r3, r4
 800adec:	4628      	mov	r0, r5
 800adee:	4631      	mov	r1, r6
 800adf0:	f7f5 fee4 	bl	8000bbc <__aeabi_uldivmod>
 800adf4:	4603      	mov	r3, r0
 800adf6:	460c      	mov	r4, r1
 800adf8:	461a      	mov	r2, r3
 800adfa:	4b50      	ldr	r3, [pc, #320]	; (800af3c <UART_SetConfig+0x6f4>)
 800adfc:	fba3 2302 	umull	r2, r3, r3, r2
 800ae00:	095b      	lsrs	r3, r3, #5
 800ae02:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	469b      	mov	fp, r3
 800ae0a:	f04f 0c00 	mov.w	ip, #0
 800ae0e:	46d9      	mov	r9, fp
 800ae10:	46e2      	mov	sl, ip
 800ae12:	eb19 0309 	adds.w	r3, r9, r9
 800ae16:	eb4a 040a 	adc.w	r4, sl, sl
 800ae1a:	4699      	mov	r9, r3
 800ae1c:	46a2      	mov	sl, r4
 800ae1e:	eb19 090b 	adds.w	r9, r9, fp
 800ae22:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ae26:	f04f 0100 	mov.w	r1, #0
 800ae2a:	f04f 0200 	mov.w	r2, #0
 800ae2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ae32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ae36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ae3a:	4689      	mov	r9, r1
 800ae3c:	4692      	mov	sl, r2
 800ae3e:	eb1b 0509 	adds.w	r5, fp, r9
 800ae42:	eb4c 060a 	adc.w	r6, ip, sl
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	f04f 0200 	mov.w	r2, #0
 800ae50:	f04f 0300 	mov.w	r3, #0
 800ae54:	f04f 0400 	mov.w	r4, #0
 800ae58:	0094      	lsls	r4, r2, #2
 800ae5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ae5e:	008b      	lsls	r3, r1, #2
 800ae60:	461a      	mov	r2, r3
 800ae62:	4623      	mov	r3, r4
 800ae64:	4628      	mov	r0, r5
 800ae66:	4631      	mov	r1, r6
 800ae68:	f7f5 fea8 	bl	8000bbc <__aeabi_uldivmod>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	460c      	mov	r4, r1
 800ae70:	461a      	mov	r2, r3
 800ae72:	4b32      	ldr	r3, [pc, #200]	; (800af3c <UART_SetConfig+0x6f4>)
 800ae74:	fba3 1302 	umull	r1, r3, r3, r2
 800ae78:	095b      	lsrs	r3, r3, #5
 800ae7a:	2164      	movs	r1, #100	; 0x64
 800ae7c:	fb01 f303 	mul.w	r3, r1, r3
 800ae80:	1ad3      	subs	r3, r2, r3
 800ae82:	011b      	lsls	r3, r3, #4
 800ae84:	3332      	adds	r3, #50	; 0x32
 800ae86:	4a2d      	ldr	r2, [pc, #180]	; (800af3c <UART_SetConfig+0x6f4>)
 800ae88:	fba2 2303 	umull	r2, r3, r2, r3
 800ae8c:	095b      	lsrs	r3, r3, #5
 800ae8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae92:	4498      	add	r8, r3
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	469b      	mov	fp, r3
 800ae98:	f04f 0c00 	mov.w	ip, #0
 800ae9c:	46d9      	mov	r9, fp
 800ae9e:	46e2      	mov	sl, ip
 800aea0:	eb19 0309 	adds.w	r3, r9, r9
 800aea4:	eb4a 040a 	adc.w	r4, sl, sl
 800aea8:	4699      	mov	r9, r3
 800aeaa:	46a2      	mov	sl, r4
 800aeac:	eb19 090b 	adds.w	r9, r9, fp
 800aeb0:	eb4a 0a0c 	adc.w	sl, sl, ip
 800aeb4:	f04f 0100 	mov.w	r1, #0
 800aeb8:	f04f 0200 	mov.w	r2, #0
 800aebc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aec0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800aec4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aec8:	4689      	mov	r9, r1
 800aeca:	4692      	mov	sl, r2
 800aecc:	eb1b 0509 	adds.w	r5, fp, r9
 800aed0:	eb4c 060a 	adc.w	r6, ip, sl
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	4619      	mov	r1, r3
 800aeda:	f04f 0200 	mov.w	r2, #0
 800aede:	f04f 0300 	mov.w	r3, #0
 800aee2:	f04f 0400 	mov.w	r4, #0
 800aee6:	0094      	lsls	r4, r2, #2
 800aee8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800aeec:	008b      	lsls	r3, r1, #2
 800aeee:	461a      	mov	r2, r3
 800aef0:	4623      	mov	r3, r4
 800aef2:	4628      	mov	r0, r5
 800aef4:	4631      	mov	r1, r6
 800aef6:	f7f5 fe61 	bl	8000bbc <__aeabi_uldivmod>
 800aefa:	4603      	mov	r3, r0
 800aefc:	460c      	mov	r4, r1
 800aefe:	461a      	mov	r2, r3
 800af00:	4b0e      	ldr	r3, [pc, #56]	; (800af3c <UART_SetConfig+0x6f4>)
 800af02:	fba3 1302 	umull	r1, r3, r3, r2
 800af06:	095b      	lsrs	r3, r3, #5
 800af08:	2164      	movs	r1, #100	; 0x64
 800af0a:	fb01 f303 	mul.w	r3, r1, r3
 800af0e:	1ad3      	subs	r3, r2, r3
 800af10:	011b      	lsls	r3, r3, #4
 800af12:	3332      	adds	r3, #50	; 0x32
 800af14:	4a09      	ldr	r2, [pc, #36]	; (800af3c <UART_SetConfig+0x6f4>)
 800af16:	fba2 2303 	umull	r2, r3, r2, r3
 800af1a:	095b      	lsrs	r3, r3, #5
 800af1c:	f003 020f 	and.w	r2, r3, #15
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4442      	add	r2, r8
 800af26:	609a      	str	r2, [r3, #8]
}
 800af28:	e7ff      	b.n	800af2a <UART_SetConfig+0x6e2>
 800af2a:	bf00      	nop
 800af2c:	3714      	adds	r7, #20
 800af2e:	46bd      	mov	sp, r7
 800af30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af34:	40011000 	.word	0x40011000
 800af38:	40011400 	.word	0x40011400
 800af3c:	51eb851f 	.word	0x51eb851f

0800af40 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800af40:	b480      	push	{r7}
 800af42:	b085      	sub	sp, #20
 800af44:	af00      	add	r7, sp, #0
 800af46:	4603      	mov	r3, r0
 800af48:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800af4a:	2300      	movs	r3, #0
 800af4c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800af4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800af52:	2b84      	cmp	r3, #132	; 0x84
 800af54:	d005      	beq.n	800af62 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800af56:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	4413      	add	r3, r2
 800af5e:	3303      	adds	r3, #3
 800af60:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800af62:	68fb      	ldr	r3, [r7, #12]
}
 800af64:	4618      	mov	r0, r3
 800af66:	3714      	adds	r7, #20
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr

0800af70 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800af70:	b480      	push	{r7}
 800af72:	b083      	sub	sp, #12
 800af74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af76:	f3ef 8305 	mrs	r3, IPSR
 800af7a:	607b      	str	r3, [r7, #4]
  return(result);
 800af7c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800af7e:	2b00      	cmp	r3, #0
 800af80:	bf14      	ite	ne
 800af82:	2301      	movne	r3, #1
 800af84:	2300      	moveq	r3, #0
 800af86:	b2db      	uxtb	r3, r3
}
 800af88:	4618      	mov	r0, r3
 800af8a:	370c      	adds	r7, #12
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr

0800af94 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800af98:	f001 f92a 	bl	800c1f0 <vTaskStartScheduler>
  
  return osOK;
 800af9c:	2300      	movs	r3, #0
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800afa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afa4:	b089      	sub	sp, #36	; 0x24
 800afa6:	af04      	add	r7, sp, #16
 800afa8:	6078      	str	r0, [r7, #4]
 800afaa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	695b      	ldr	r3, [r3, #20]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d020      	beq.n	800aff6 <osThreadCreate+0x54>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	699b      	ldr	r3, [r3, #24]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d01c      	beq.n	800aff6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	685c      	ldr	r4, [r3, #4]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681d      	ldr	r5, [r3, #0]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	691e      	ldr	r6, [r3, #16]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800afce:	4618      	mov	r0, r3
 800afd0:	f7ff ffb6 	bl	800af40 <makeFreeRtosPriority>
 800afd4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	695b      	ldr	r3, [r3, #20]
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800afde:	9202      	str	r2, [sp, #8]
 800afe0:	9301      	str	r3, [sp, #4]
 800afe2:	9100      	str	r1, [sp, #0]
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	4632      	mov	r2, r6
 800afe8:	4629      	mov	r1, r5
 800afea:	4620      	mov	r0, r4
 800afec:	f000 ff2e 	bl	800be4c <xTaskCreateStatic>
 800aff0:	4603      	mov	r3, r0
 800aff2:	60fb      	str	r3, [r7, #12]
 800aff4:	e01c      	b.n	800b030 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	685c      	ldr	r4, [r3, #4]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b002:	b29e      	uxth	r6, r3
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7ff ff98 	bl	800af40 <makeFreeRtosPriority>
 800b010:	4602      	mov	r2, r0
 800b012:	f107 030c 	add.w	r3, r7, #12
 800b016:	9301      	str	r3, [sp, #4]
 800b018:	9200      	str	r2, [sp, #0]
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	4632      	mov	r2, r6
 800b01e:	4629      	mov	r1, r5
 800b020:	4620      	mov	r0, r4
 800b022:	f000 ff6d 	bl	800bf00 <xTaskCreate>
 800b026:	4603      	mov	r3, r0
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d001      	beq.n	800b030 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b02c:	2300      	movs	r3, #0
 800b02e:	e000      	b.n	800b032 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b030:	68fb      	ldr	r3, [r7, #12]
}
 800b032:	4618      	mov	r0, r3
 800b034:	3714      	adds	r7, #20
 800b036:	46bd      	mov	sp, r7
 800b038:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b03a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b03a:	b580      	push	{r7, lr}
 800b03c:	b084      	sub	sp, #16
 800b03e:	af00      	add	r7, sp, #0
 800b040:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d001      	beq.n	800b050 <osDelay+0x16>
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	e000      	b.n	800b052 <osDelay+0x18>
 800b050:	2301      	movs	r3, #1
 800b052:	4618      	mov	r0, r3
 800b054:	f001 f898 	bl	800c188 <vTaskDelay>
  
  return osOK;
 800b058:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3710      	adds	r7, #16
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}

0800b062 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b062:	b590      	push	{r4, r7, lr}
 800b064:	b085      	sub	sp, #20
 800b066:	af02      	add	r7, sp, #8
 800b068:	6078      	str	r0, [r7, #4]
 800b06a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	689b      	ldr	r3, [r3, #8]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d012      	beq.n	800b09a <osMessageCreate+0x38>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d00e      	beq.n	800b09a <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6818      	ldr	r0, [r3, #0]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6859      	ldr	r1, [r3, #4]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	689a      	ldr	r2, [r3, #8]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	68dc      	ldr	r4, [r3, #12]
 800b08c:	2300      	movs	r3, #0
 800b08e:	9300      	str	r3, [sp, #0]
 800b090:	4623      	mov	r3, r4
 800b092:	f000 f9df 	bl	800b454 <xQueueGenericCreateStatic>
 800b096:	4603      	mov	r3, r0
 800b098:	e008      	b.n	800b0ac <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6818      	ldr	r0, [r3, #0]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	f000 fa48 	bl	800b53a <xQueueGenericCreate>
 800b0aa:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	370c      	adds	r7, #12
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd90      	pop	{r4, r7, pc}

0800b0b4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b086      	sub	sp, #24
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d101      	bne.n	800b0d2 <osMessagePut+0x1e>
    ticks = 1;
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b0d2:	f7ff ff4d 	bl	800af70 <inHandlerMode>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d018      	beq.n	800b10e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b0dc:	f107 0210 	add.w	r2, r7, #16
 800b0e0:	f107 0108 	add.w	r1, r7, #8
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	68f8      	ldr	r0, [r7, #12]
 800b0e8:	f000 fb84 	bl	800b7f4 <xQueueGenericSendFromISR>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	2b01      	cmp	r3, #1
 800b0f0:	d001      	beq.n	800b0f6 <osMessagePut+0x42>
      return osErrorOS;
 800b0f2:	23ff      	movs	r3, #255	; 0xff
 800b0f4:	e018      	b.n	800b128 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d014      	beq.n	800b126 <osMessagePut+0x72>
 800b0fc:	4b0c      	ldr	r3, [pc, #48]	; (800b130 <osMessagePut+0x7c>)
 800b0fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b102:	601a      	str	r2, [r3, #0]
 800b104:	f3bf 8f4f 	dsb	sy
 800b108:	f3bf 8f6f 	isb	sy
 800b10c:	e00b      	b.n	800b126 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b10e:	f107 0108 	add.w	r1, r7, #8
 800b112:	2300      	movs	r3, #0
 800b114:	697a      	ldr	r2, [r7, #20]
 800b116:	68f8      	ldr	r0, [r7, #12]
 800b118:	f000 fa72 	bl	800b600 <xQueueGenericSend>
 800b11c:	4603      	mov	r3, r0
 800b11e:	2b01      	cmp	r3, #1
 800b120:	d001      	beq.n	800b126 <osMessagePut+0x72>
      return osErrorOS;
 800b122:	23ff      	movs	r3, #255	; 0xff
 800b124:	e000      	b.n	800b128 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b126:	2300      	movs	r3, #0
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3718      	adds	r7, #24
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}
 800b130:	e000ed04 	.word	0xe000ed04

0800b134 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b134:	b590      	push	{r4, r7, lr}
 800b136:	b08b      	sub	sp, #44	; 0x2c
 800b138:	af00      	add	r7, sp, #0
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	60b9      	str	r1, [r7, #8]
 800b13e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b144:	2300      	movs	r3, #0
 800b146:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d10a      	bne.n	800b164 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b14e:	2380      	movs	r3, #128	; 0x80
 800b150:	617b      	str	r3, [r7, #20]
    return event;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	461c      	mov	r4, r3
 800b156:	f107 0314 	add.w	r3, r7, #20
 800b15a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b15e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b162:	e054      	b.n	800b20e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b164:	2300      	movs	r3, #0
 800b166:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b168:	2300      	movs	r3, #0
 800b16a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b172:	d103      	bne.n	800b17c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b174:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b178:	627b      	str	r3, [r7, #36]	; 0x24
 800b17a:	e009      	b.n	800b190 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d006      	beq.n	800b190 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800b186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d101      	bne.n	800b190 <osMessageGet+0x5c>
      ticks = 1;
 800b18c:	2301      	movs	r3, #1
 800b18e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b190:	f7ff feee 	bl	800af70 <inHandlerMode>
 800b194:	4603      	mov	r3, r0
 800b196:	2b00      	cmp	r3, #0
 800b198:	d01c      	beq.n	800b1d4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b19a:	f107 0220 	add.w	r2, r7, #32
 800b19e:	f107 0314 	add.w	r3, r7, #20
 800b1a2:	3304      	adds	r3, #4
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	68b8      	ldr	r0, [r7, #8]
 800b1a8:	f000 fc94 	bl	800bad4 <xQueueReceiveFromISR>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	2b01      	cmp	r3, #1
 800b1b0:	d102      	bne.n	800b1b8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b1b2:	2310      	movs	r3, #16
 800b1b4:	617b      	str	r3, [r7, #20]
 800b1b6:	e001      	b.n	800b1bc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b1bc:	6a3b      	ldr	r3, [r7, #32]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d01d      	beq.n	800b1fe <osMessageGet+0xca>
 800b1c2:	4b15      	ldr	r3, [pc, #84]	; (800b218 <osMessageGet+0xe4>)
 800b1c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1c8:	601a      	str	r2, [r3, #0]
 800b1ca:	f3bf 8f4f 	dsb	sy
 800b1ce:	f3bf 8f6f 	isb	sy
 800b1d2:	e014      	b.n	800b1fe <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b1d4:	f107 0314 	add.w	r3, r7, #20
 800b1d8:	3304      	adds	r3, #4
 800b1da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1dc:	4619      	mov	r1, r3
 800b1de:	68b8      	ldr	r0, [r7, #8]
 800b1e0:	f000 fb9c 	bl	800b91c <xQueueReceive>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	d102      	bne.n	800b1f0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b1ea:	2310      	movs	r3, #16
 800b1ec:	617b      	str	r3, [r7, #20]
 800b1ee:	e006      	b.n	800b1fe <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d101      	bne.n	800b1fa <osMessageGet+0xc6>
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	e000      	b.n	800b1fc <osMessageGet+0xc8>
 800b1fa:	2340      	movs	r3, #64	; 0x40
 800b1fc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	461c      	mov	r4, r3
 800b202:	f107 0314 	add.w	r3, r7, #20
 800b206:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b20a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b20e:	68f8      	ldr	r0, [r7, #12]
 800b210:	372c      	adds	r7, #44	; 0x2c
 800b212:	46bd      	mov	sp, r7
 800b214:	bd90      	pop	{r4, r7, pc}
 800b216:	bf00      	nop
 800b218:	e000ed04 	.word	0xe000ed04

0800b21c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f103 0208 	add.w	r2, r3, #8
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b234:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f103 0208 	add.w	r2, r3, #8
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f103 0208 	add.w	r2, r3, #8
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b250:	bf00      	nop
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b25c:	b480      	push	{r7}
 800b25e:	b083      	sub	sp, #12
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2200      	movs	r2, #0
 800b268:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b26a:	bf00      	nop
 800b26c:	370c      	adds	r7, #12
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr

0800b276 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b276:	b480      	push	{r7}
 800b278:	b085      	sub	sp, #20
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	6078      	str	r0, [r7, #4]
 800b27e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	68fa      	ldr	r2, [r7, #12]
 800b28a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	689a      	ldr	r2, [r3, #8]
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	689b      	ldr	r3, [r3, #8]
 800b298:	683a      	ldr	r2, [r7, #0]
 800b29a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	683a      	ldr	r2, [r7, #0]
 800b2a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	687a      	ldr	r2, [r7, #4]
 800b2a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	1c5a      	adds	r2, r3, #1
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	601a      	str	r2, [r3, #0]
}
 800b2b2:	bf00      	nop
 800b2b4:	3714      	adds	r7, #20
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr

0800b2be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b2be:	b480      	push	{r7}
 800b2c0:	b085      	sub	sp, #20
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
 800b2c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2d4:	d103      	bne.n	800b2de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	691b      	ldr	r3, [r3, #16]
 800b2da:	60fb      	str	r3, [r7, #12]
 800b2dc:	e00c      	b.n	800b2f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	3308      	adds	r3, #8
 800b2e2:	60fb      	str	r3, [r7, #12]
 800b2e4:	e002      	b.n	800b2ec <vListInsert+0x2e>
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	60fb      	str	r3, [r7, #12]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	68ba      	ldr	r2, [r7, #8]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d2f6      	bcs.n	800b2e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	685a      	ldr	r2, [r3, #4]
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	683a      	ldr	r2, [r7, #0]
 800b306:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	68fa      	ldr	r2, [r7, #12]
 800b30c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	683a      	ldr	r2, [r7, #0]
 800b312:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	1c5a      	adds	r2, r3, #1
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	601a      	str	r2, [r3, #0]
}
 800b324:	bf00      	nop
 800b326:	3714      	adds	r7, #20
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr

0800b330 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b330:	b480      	push	{r7}
 800b332:	b085      	sub	sp, #20
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	691b      	ldr	r3, [r3, #16]
 800b33c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	687a      	ldr	r2, [r7, #4]
 800b344:	6892      	ldr	r2, [r2, #8]
 800b346:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	689b      	ldr	r3, [r3, #8]
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	6852      	ldr	r2, [r2, #4]
 800b350:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	687a      	ldr	r2, [r7, #4]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d103      	bne.n	800b364 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	689a      	ldr	r2, [r3, #8]
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2200      	movs	r2, #0
 800b368:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	1e5a      	subs	r2, r3, #1
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3714      	adds	r7, #20
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr

0800b384 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d109      	bne.n	800b3ac <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39c:	f383 8811 	msr	BASEPRI, r3
 800b3a0:	f3bf 8f6f 	isb	sy
 800b3a4:	f3bf 8f4f 	dsb	sy
 800b3a8:	60bb      	str	r3, [r7, #8]
 800b3aa:	e7fe      	b.n	800b3aa <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800b3ac:	f001 fd76 	bl	800ce9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681a      	ldr	r2, [r3, #0]
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3b8:	68f9      	ldr	r1, [r7, #12]
 800b3ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b3bc:	fb01 f303 	mul.w	r3, r1, r3
 800b3c0:	441a      	add	r2, r3
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681a      	ldr	r2, [r3, #0]
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3dc:	3b01      	subs	r3, #1
 800b3de:	68f9      	ldr	r1, [r7, #12]
 800b3e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b3e2:	fb01 f303 	mul.w	r3, r1, r3
 800b3e6:	441a      	add	r2, r3
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	22ff      	movs	r2, #255	; 0xff
 800b3f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	22ff      	movs	r2, #255	; 0xff
 800b3f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d114      	bne.n	800b42c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	691b      	ldr	r3, [r3, #16]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d01a      	beq.n	800b440 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	3310      	adds	r3, #16
 800b40e:	4618      	mov	r0, r3
 800b410:	f001 f94c 	bl	800c6ac <xTaskRemoveFromEventList>
 800b414:	4603      	mov	r3, r0
 800b416:	2b00      	cmp	r3, #0
 800b418:	d012      	beq.n	800b440 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b41a:	4b0d      	ldr	r3, [pc, #52]	; (800b450 <xQueueGenericReset+0xcc>)
 800b41c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b420:	601a      	str	r2, [r3, #0]
 800b422:	f3bf 8f4f 	dsb	sy
 800b426:	f3bf 8f6f 	isb	sy
 800b42a:	e009      	b.n	800b440 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	3310      	adds	r3, #16
 800b430:	4618      	mov	r0, r3
 800b432:	f7ff fef3 	bl	800b21c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	3324      	adds	r3, #36	; 0x24
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7ff feee 	bl	800b21c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b440:	f001 fd5a 	bl	800cef8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b444:	2301      	movs	r3, #1
}
 800b446:	4618      	mov	r0, r3
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	e000ed04 	.word	0xe000ed04

0800b454 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b454:	b580      	push	{r7, lr}
 800b456:	b08e      	sub	sp, #56	; 0x38
 800b458:	af02      	add	r7, sp, #8
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	607a      	str	r2, [r7, #4]
 800b460:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d109      	bne.n	800b47c <xQueueGenericCreateStatic+0x28>
 800b468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b46c:	f383 8811 	msr	BASEPRI, r3
 800b470:	f3bf 8f6f 	isb	sy
 800b474:	f3bf 8f4f 	dsb	sy
 800b478:	62bb      	str	r3, [r7, #40]	; 0x28
 800b47a:	e7fe      	b.n	800b47a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d109      	bne.n	800b496 <xQueueGenericCreateStatic+0x42>
 800b482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b486:	f383 8811 	msr	BASEPRI, r3
 800b48a:	f3bf 8f6f 	isb	sy
 800b48e:	f3bf 8f4f 	dsb	sy
 800b492:	627b      	str	r3, [r7, #36]	; 0x24
 800b494:	e7fe      	b.n	800b494 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d002      	beq.n	800b4a2 <xQueueGenericCreateStatic+0x4e>
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d001      	beq.n	800b4a6 <xQueueGenericCreateStatic+0x52>
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	e000      	b.n	800b4a8 <xQueueGenericCreateStatic+0x54>
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d109      	bne.n	800b4c0 <xQueueGenericCreateStatic+0x6c>
 800b4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b0:	f383 8811 	msr	BASEPRI, r3
 800b4b4:	f3bf 8f6f 	isb	sy
 800b4b8:	f3bf 8f4f 	dsb	sy
 800b4bc:	623b      	str	r3, [r7, #32]
 800b4be:	e7fe      	b.n	800b4be <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d102      	bne.n	800b4cc <xQueueGenericCreateStatic+0x78>
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d101      	bne.n	800b4d0 <xQueueGenericCreateStatic+0x7c>
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	e000      	b.n	800b4d2 <xQueueGenericCreateStatic+0x7e>
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d109      	bne.n	800b4ea <xQueueGenericCreateStatic+0x96>
 800b4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4da:	f383 8811 	msr	BASEPRI, r3
 800b4de:	f3bf 8f6f 	isb	sy
 800b4e2:	f3bf 8f4f 	dsb	sy
 800b4e6:	61fb      	str	r3, [r7, #28]
 800b4e8:	e7fe      	b.n	800b4e8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b4ea:	2350      	movs	r3, #80	; 0x50
 800b4ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	2b50      	cmp	r3, #80	; 0x50
 800b4f2:	d009      	beq.n	800b508 <xQueueGenericCreateStatic+0xb4>
 800b4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f8:	f383 8811 	msr	BASEPRI, r3
 800b4fc:	f3bf 8f6f 	isb	sy
 800b500:	f3bf 8f4f 	dsb	sy
 800b504:	61bb      	str	r3, [r7, #24]
 800b506:	e7fe      	b.n	800b506 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b508:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b510:	2b00      	cmp	r3, #0
 800b512:	d00d      	beq.n	800b530 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b516:	2201      	movs	r2, #1
 800b518:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b51c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b522:	9300      	str	r3, [sp, #0]
 800b524:	4613      	mov	r3, r2
 800b526:	687a      	ldr	r2, [r7, #4]
 800b528:	68b9      	ldr	r1, [r7, #8]
 800b52a:	68f8      	ldr	r0, [r7, #12]
 800b52c:	f000 f844 	bl	800b5b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b532:	4618      	mov	r0, r3
 800b534:	3730      	adds	r7, #48	; 0x30
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}

0800b53a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b53a:	b580      	push	{r7, lr}
 800b53c:	b08a      	sub	sp, #40	; 0x28
 800b53e:	af02      	add	r7, sp, #8
 800b540:	60f8      	str	r0, [r7, #12]
 800b542:	60b9      	str	r1, [r7, #8]
 800b544:	4613      	mov	r3, r2
 800b546:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d109      	bne.n	800b562 <xQueueGenericCreate+0x28>
 800b54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b552:	f383 8811 	msr	BASEPRI, r3
 800b556:	f3bf 8f6f 	isb	sy
 800b55a:	f3bf 8f4f 	dsb	sy
 800b55e:	613b      	str	r3, [r7, #16]
 800b560:	e7fe      	b.n	800b560 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d102      	bne.n	800b56e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b568:	2300      	movs	r3, #0
 800b56a:	61fb      	str	r3, [r7, #28]
 800b56c:	e004      	b.n	800b578 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	68ba      	ldr	r2, [r7, #8]
 800b572:	fb02 f303 	mul.w	r3, r2, r3
 800b576:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b578:	69fb      	ldr	r3, [r7, #28]
 800b57a:	3350      	adds	r3, #80	; 0x50
 800b57c:	4618      	mov	r0, r3
 800b57e:	f001 fda7 	bl	800d0d0 <pvPortMalloc>
 800b582:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b584:	69bb      	ldr	r3, [r7, #24]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d011      	beq.n	800b5ae <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b58a:	69bb      	ldr	r3, [r7, #24]
 800b58c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	3350      	adds	r3, #80	; 0x50
 800b592:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b594:	69bb      	ldr	r3, [r7, #24]
 800b596:	2200      	movs	r2, #0
 800b598:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b59c:	79fa      	ldrb	r2, [r7, #7]
 800b59e:	69bb      	ldr	r3, [r7, #24]
 800b5a0:	9300      	str	r3, [sp, #0]
 800b5a2:	4613      	mov	r3, r2
 800b5a4:	697a      	ldr	r2, [r7, #20]
 800b5a6:	68b9      	ldr	r1, [r7, #8]
 800b5a8:	68f8      	ldr	r0, [r7, #12]
 800b5aa:	f000 f805 	bl	800b5b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b5ae:	69bb      	ldr	r3, [r7, #24]
	}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3720      	adds	r7, #32
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	60f8      	str	r0, [r7, #12]
 800b5c0:	60b9      	str	r1, [r7, #8]
 800b5c2:	607a      	str	r2, [r7, #4]
 800b5c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d103      	bne.n	800b5d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b5cc:	69bb      	ldr	r3, [r7, #24]
 800b5ce:	69ba      	ldr	r2, [r7, #24]
 800b5d0:	601a      	str	r2, [r3, #0]
 800b5d2:	e002      	b.n	800b5da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b5d4:	69bb      	ldr	r3, [r7, #24]
 800b5d6:	687a      	ldr	r2, [r7, #4]
 800b5d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b5da:	69bb      	ldr	r3, [r7, #24]
 800b5dc:	68fa      	ldr	r2, [r7, #12]
 800b5de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b5e0:	69bb      	ldr	r3, [r7, #24]
 800b5e2:	68ba      	ldr	r2, [r7, #8]
 800b5e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b5e6:	2101      	movs	r1, #1
 800b5e8:	69b8      	ldr	r0, [r7, #24]
 800b5ea:	f7ff fecb 	bl	800b384 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b5ee:	69bb      	ldr	r3, [r7, #24]
 800b5f0:	78fa      	ldrb	r2, [r7, #3]
 800b5f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b5f6:	bf00      	nop
 800b5f8:	3710      	adds	r7, #16
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
	...

0800b600 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b08e      	sub	sp, #56	; 0x38
 800b604:	af00      	add	r7, sp, #0
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	60b9      	str	r1, [r7, #8]
 800b60a:	607a      	str	r2, [r7, #4]
 800b60c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b60e:	2300      	movs	r3, #0
 800b610:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d109      	bne.n	800b630 <xQueueGenericSend+0x30>
 800b61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b620:	f383 8811 	msr	BASEPRI, r3
 800b624:	f3bf 8f6f 	isb	sy
 800b628:	f3bf 8f4f 	dsb	sy
 800b62c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b62e:	e7fe      	b.n	800b62e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d103      	bne.n	800b63e <xQueueGenericSend+0x3e>
 800b636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d101      	bne.n	800b642 <xQueueGenericSend+0x42>
 800b63e:	2301      	movs	r3, #1
 800b640:	e000      	b.n	800b644 <xQueueGenericSend+0x44>
 800b642:	2300      	movs	r3, #0
 800b644:	2b00      	cmp	r3, #0
 800b646:	d109      	bne.n	800b65c <xQueueGenericSend+0x5c>
 800b648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64c:	f383 8811 	msr	BASEPRI, r3
 800b650:	f3bf 8f6f 	isb	sy
 800b654:	f3bf 8f4f 	dsb	sy
 800b658:	627b      	str	r3, [r7, #36]	; 0x24
 800b65a:	e7fe      	b.n	800b65a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	2b02      	cmp	r3, #2
 800b660:	d103      	bne.n	800b66a <xQueueGenericSend+0x6a>
 800b662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b666:	2b01      	cmp	r3, #1
 800b668:	d101      	bne.n	800b66e <xQueueGenericSend+0x6e>
 800b66a:	2301      	movs	r3, #1
 800b66c:	e000      	b.n	800b670 <xQueueGenericSend+0x70>
 800b66e:	2300      	movs	r3, #0
 800b670:	2b00      	cmp	r3, #0
 800b672:	d109      	bne.n	800b688 <xQueueGenericSend+0x88>
 800b674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b678:	f383 8811 	msr	BASEPRI, r3
 800b67c:	f3bf 8f6f 	isb	sy
 800b680:	f3bf 8f4f 	dsb	sy
 800b684:	623b      	str	r3, [r7, #32]
 800b686:	e7fe      	b.n	800b686 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b688:	f001 f9c6 	bl	800ca18 <xTaskGetSchedulerState>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d102      	bne.n	800b698 <xQueueGenericSend+0x98>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d101      	bne.n	800b69c <xQueueGenericSend+0x9c>
 800b698:	2301      	movs	r3, #1
 800b69a:	e000      	b.n	800b69e <xQueueGenericSend+0x9e>
 800b69c:	2300      	movs	r3, #0
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d109      	bne.n	800b6b6 <xQueueGenericSend+0xb6>
 800b6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a6:	f383 8811 	msr	BASEPRI, r3
 800b6aa:	f3bf 8f6f 	isb	sy
 800b6ae:	f3bf 8f4f 	dsb	sy
 800b6b2:	61fb      	str	r3, [r7, #28]
 800b6b4:	e7fe      	b.n	800b6b4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b6b6:	f001 fbf1 	bl	800ce9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d302      	bcc.n	800b6cc <xQueueGenericSend+0xcc>
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	2b02      	cmp	r3, #2
 800b6ca:	d129      	bne.n	800b720 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b6cc:	683a      	ldr	r2, [r7, #0]
 800b6ce:	68b9      	ldr	r1, [r7, #8]
 800b6d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6d2:	f000 fa7c 	bl	800bbce <prvCopyDataToQueue>
 800b6d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d010      	beq.n	800b702 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e2:	3324      	adds	r3, #36	; 0x24
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f000 ffe1 	bl	800c6ac <xTaskRemoveFromEventList>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d013      	beq.n	800b718 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b6f0:	4b3f      	ldr	r3, [pc, #252]	; (800b7f0 <xQueueGenericSend+0x1f0>)
 800b6f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6f6:	601a      	str	r2, [r3, #0]
 800b6f8:	f3bf 8f4f 	dsb	sy
 800b6fc:	f3bf 8f6f 	isb	sy
 800b700:	e00a      	b.n	800b718 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b704:	2b00      	cmp	r3, #0
 800b706:	d007      	beq.n	800b718 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b708:	4b39      	ldr	r3, [pc, #228]	; (800b7f0 <xQueueGenericSend+0x1f0>)
 800b70a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b70e:	601a      	str	r2, [r3, #0]
 800b710:	f3bf 8f4f 	dsb	sy
 800b714:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b718:	f001 fbee 	bl	800cef8 <vPortExitCritical>
				return pdPASS;
 800b71c:	2301      	movs	r3, #1
 800b71e:	e063      	b.n	800b7e8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d103      	bne.n	800b72e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b726:	f001 fbe7 	bl	800cef8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b72a:	2300      	movs	r3, #0
 800b72c:	e05c      	b.n	800b7e8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b72e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b730:	2b00      	cmp	r3, #0
 800b732:	d106      	bne.n	800b742 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b734:	f107 0314 	add.w	r3, r7, #20
 800b738:	4618      	mov	r0, r3
 800b73a:	f001 f819 	bl	800c770 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b73e:	2301      	movs	r3, #1
 800b740:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b742:	f001 fbd9 	bl	800cef8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b746:	f000 fdb3 	bl	800c2b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b74a:	f001 fba7 	bl	800ce9c <vPortEnterCritical>
 800b74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b750:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b754:	b25b      	sxtb	r3, r3
 800b756:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b75a:	d103      	bne.n	800b764 <xQueueGenericSend+0x164>
 800b75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75e:	2200      	movs	r2, #0
 800b760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b766:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b76a:	b25b      	sxtb	r3, r3
 800b76c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b770:	d103      	bne.n	800b77a <xQueueGenericSend+0x17a>
 800b772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b774:	2200      	movs	r2, #0
 800b776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b77a:	f001 fbbd 	bl	800cef8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b77e:	1d3a      	adds	r2, r7, #4
 800b780:	f107 0314 	add.w	r3, r7, #20
 800b784:	4611      	mov	r1, r2
 800b786:	4618      	mov	r0, r3
 800b788:	f001 f808 	bl	800c79c <xTaskCheckForTimeOut>
 800b78c:	4603      	mov	r3, r0
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d124      	bne.n	800b7dc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b792:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b794:	f000 fb13 	bl	800bdbe <prvIsQueueFull>
 800b798:	4603      	mov	r3, r0
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d018      	beq.n	800b7d0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a0:	3310      	adds	r3, #16
 800b7a2:	687a      	ldr	r2, [r7, #4]
 800b7a4:	4611      	mov	r1, r2
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f000 ff5c 	bl	800c664 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b7ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7ae:	f000 fa9e 	bl	800bcee <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b7b2:	f000 fd8b 	bl	800c2cc <xTaskResumeAll>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	f47f af7c 	bne.w	800b6b6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800b7be:	4b0c      	ldr	r3, [pc, #48]	; (800b7f0 <xQueueGenericSend+0x1f0>)
 800b7c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7c4:	601a      	str	r2, [r3, #0]
 800b7c6:	f3bf 8f4f 	dsb	sy
 800b7ca:	f3bf 8f6f 	isb	sy
 800b7ce:	e772      	b.n	800b6b6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b7d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7d2:	f000 fa8c 	bl	800bcee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b7d6:	f000 fd79 	bl	800c2cc <xTaskResumeAll>
 800b7da:	e76c      	b.n	800b6b6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b7dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7de:	f000 fa86 	bl	800bcee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b7e2:	f000 fd73 	bl	800c2cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b7e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3738      	adds	r7, #56	; 0x38
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	e000ed04 	.word	0xe000ed04

0800b7f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b08e      	sub	sp, #56	; 0x38
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	60f8      	str	r0, [r7, #12]
 800b7fc:	60b9      	str	r1, [r7, #8]
 800b7fe:	607a      	str	r2, [r7, #4]
 800b800:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d109      	bne.n	800b820 <xQueueGenericSendFromISR+0x2c>
 800b80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b810:	f383 8811 	msr	BASEPRI, r3
 800b814:	f3bf 8f6f 	isb	sy
 800b818:	f3bf 8f4f 	dsb	sy
 800b81c:	627b      	str	r3, [r7, #36]	; 0x24
 800b81e:	e7fe      	b.n	800b81e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d103      	bne.n	800b82e <xQueueGenericSendFromISR+0x3a>
 800b826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d101      	bne.n	800b832 <xQueueGenericSendFromISR+0x3e>
 800b82e:	2301      	movs	r3, #1
 800b830:	e000      	b.n	800b834 <xQueueGenericSendFromISR+0x40>
 800b832:	2300      	movs	r3, #0
 800b834:	2b00      	cmp	r3, #0
 800b836:	d109      	bne.n	800b84c <xQueueGenericSendFromISR+0x58>
 800b838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b83c:	f383 8811 	msr	BASEPRI, r3
 800b840:	f3bf 8f6f 	isb	sy
 800b844:	f3bf 8f4f 	dsb	sy
 800b848:	623b      	str	r3, [r7, #32]
 800b84a:	e7fe      	b.n	800b84a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	2b02      	cmp	r3, #2
 800b850:	d103      	bne.n	800b85a <xQueueGenericSendFromISR+0x66>
 800b852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b856:	2b01      	cmp	r3, #1
 800b858:	d101      	bne.n	800b85e <xQueueGenericSendFromISR+0x6a>
 800b85a:	2301      	movs	r3, #1
 800b85c:	e000      	b.n	800b860 <xQueueGenericSendFromISR+0x6c>
 800b85e:	2300      	movs	r3, #0
 800b860:	2b00      	cmp	r3, #0
 800b862:	d109      	bne.n	800b878 <xQueueGenericSendFromISR+0x84>
 800b864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b868:	f383 8811 	msr	BASEPRI, r3
 800b86c:	f3bf 8f6f 	isb	sy
 800b870:	f3bf 8f4f 	dsb	sy
 800b874:	61fb      	str	r3, [r7, #28]
 800b876:	e7fe      	b.n	800b876 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b878:	f001 fbec 	bl	800d054 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b87c:	f3ef 8211 	mrs	r2, BASEPRI
 800b880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b884:	f383 8811 	msr	BASEPRI, r3
 800b888:	f3bf 8f6f 	isb	sy
 800b88c:	f3bf 8f4f 	dsb	sy
 800b890:	61ba      	str	r2, [r7, #24]
 800b892:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b894:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b896:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b89a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b89e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	d302      	bcc.n	800b8aa <xQueueGenericSendFromISR+0xb6>
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	2b02      	cmp	r3, #2
 800b8a8:	d12c      	bne.n	800b904 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b8b4:	683a      	ldr	r2, [r7, #0]
 800b8b6:	68b9      	ldr	r1, [r7, #8]
 800b8b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8ba:	f000 f988 	bl	800bbce <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b8be:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b8c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8c6:	d112      	bne.n	800b8ee <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d016      	beq.n	800b8fe <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d2:	3324      	adds	r3, #36	; 0x24
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f000 fee9 	bl	800c6ac <xTaskRemoveFromEventList>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d00e      	beq.n	800b8fe <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d00b      	beq.n	800b8fe <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	601a      	str	r2, [r3, #0]
 800b8ec:	e007      	b.n	800b8fe <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b8ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	b25a      	sxtb	r2, r3
 800b8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b8fe:	2301      	movs	r3, #1
 800b900:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b902:	e001      	b.n	800b908 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b904:	2300      	movs	r3, #0
 800b906:	637b      	str	r3, [r7, #52]	; 0x34
 800b908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b90a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b914:	4618      	mov	r0, r3
 800b916:	3738      	adds	r7, #56	; 0x38
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}

0800b91c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b08c      	sub	sp, #48	; 0x30
 800b920:	af00      	add	r7, sp, #0
 800b922:	60f8      	str	r0, [r7, #12]
 800b924:	60b9      	str	r1, [r7, #8]
 800b926:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b928:	2300      	movs	r3, #0
 800b92a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b932:	2b00      	cmp	r3, #0
 800b934:	d109      	bne.n	800b94a <xQueueReceive+0x2e>
	__asm volatile
 800b936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93a:	f383 8811 	msr	BASEPRI, r3
 800b93e:	f3bf 8f6f 	isb	sy
 800b942:	f3bf 8f4f 	dsb	sy
 800b946:	623b      	str	r3, [r7, #32]
 800b948:	e7fe      	b.n	800b948 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d103      	bne.n	800b958 <xQueueReceive+0x3c>
 800b950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b954:	2b00      	cmp	r3, #0
 800b956:	d101      	bne.n	800b95c <xQueueReceive+0x40>
 800b958:	2301      	movs	r3, #1
 800b95a:	e000      	b.n	800b95e <xQueueReceive+0x42>
 800b95c:	2300      	movs	r3, #0
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d109      	bne.n	800b976 <xQueueReceive+0x5a>
 800b962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b966:	f383 8811 	msr	BASEPRI, r3
 800b96a:	f3bf 8f6f 	isb	sy
 800b96e:	f3bf 8f4f 	dsb	sy
 800b972:	61fb      	str	r3, [r7, #28]
 800b974:	e7fe      	b.n	800b974 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b976:	f001 f84f 	bl	800ca18 <xTaskGetSchedulerState>
 800b97a:	4603      	mov	r3, r0
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d102      	bne.n	800b986 <xQueueReceive+0x6a>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d101      	bne.n	800b98a <xQueueReceive+0x6e>
 800b986:	2301      	movs	r3, #1
 800b988:	e000      	b.n	800b98c <xQueueReceive+0x70>
 800b98a:	2300      	movs	r3, #0
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d109      	bne.n	800b9a4 <xQueueReceive+0x88>
 800b990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b994:	f383 8811 	msr	BASEPRI, r3
 800b998:	f3bf 8f6f 	isb	sy
 800b99c:	f3bf 8f4f 	dsb	sy
 800b9a0:	61bb      	str	r3, [r7, #24]
 800b9a2:	e7fe      	b.n	800b9a2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b9a4:	f001 fa7a 	bl	800ce9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ac:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d01f      	beq.n	800b9f4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b9b4:	68b9      	ldr	r1, [r7, #8]
 800b9b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9b8:	f000 f973 	bl	800bca2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9be:	1e5a      	subs	r2, r3, #1
 800b9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c6:	691b      	ldr	r3, [r3, #16]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d00f      	beq.n	800b9ec <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ce:	3310      	adds	r3, #16
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f000 fe6b 	bl	800c6ac <xTaskRemoveFromEventList>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d007      	beq.n	800b9ec <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b9dc:	4b3c      	ldr	r3, [pc, #240]	; (800bad0 <xQueueReceive+0x1b4>)
 800b9de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9e2:	601a      	str	r2, [r3, #0]
 800b9e4:	f3bf 8f4f 	dsb	sy
 800b9e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b9ec:	f001 fa84 	bl	800cef8 <vPortExitCritical>
				return pdPASS;
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	e069      	b.n	800bac8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d103      	bne.n	800ba02 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b9fa:	f001 fa7d 	bl	800cef8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	e062      	b.n	800bac8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d106      	bne.n	800ba16 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba08:	f107 0310 	add.w	r3, r7, #16
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f000 feaf 	bl	800c770 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba12:	2301      	movs	r3, #1
 800ba14:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba16:	f001 fa6f 	bl	800cef8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba1a:	f000 fc49 	bl	800c2b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba1e:	f001 fa3d 	bl	800ce9c <vPortEnterCritical>
 800ba22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba28:	b25b      	sxtb	r3, r3
 800ba2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba2e:	d103      	bne.n	800ba38 <xQueueReceive+0x11c>
 800ba30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba32:	2200      	movs	r2, #0
 800ba34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba3e:	b25b      	sxtb	r3, r3
 800ba40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba44:	d103      	bne.n	800ba4e <xQueueReceive+0x132>
 800ba46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba48:	2200      	movs	r2, #0
 800ba4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba4e:	f001 fa53 	bl	800cef8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba52:	1d3a      	adds	r2, r7, #4
 800ba54:	f107 0310 	add.w	r3, r7, #16
 800ba58:	4611      	mov	r1, r2
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f000 fe9e 	bl	800c79c <xTaskCheckForTimeOut>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d123      	bne.n	800baae <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba68:	f000 f993 	bl	800bd92 <prvIsQueueEmpty>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d017      	beq.n	800baa2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ba72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba74:	3324      	adds	r3, #36	; 0x24
 800ba76:	687a      	ldr	r2, [r7, #4]
 800ba78:	4611      	mov	r1, r2
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f000 fdf2 	bl	800c664 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ba80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba82:	f000 f934 	bl	800bcee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ba86:	f000 fc21 	bl	800c2cc <xTaskResumeAll>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d189      	bne.n	800b9a4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800ba90:	4b0f      	ldr	r3, [pc, #60]	; (800bad0 <xQueueReceive+0x1b4>)
 800ba92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba96:	601a      	str	r2, [r3, #0]
 800ba98:	f3bf 8f4f 	dsb	sy
 800ba9c:	f3bf 8f6f 	isb	sy
 800baa0:	e780      	b.n	800b9a4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800baa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800baa4:	f000 f923 	bl	800bcee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800baa8:	f000 fc10 	bl	800c2cc <xTaskResumeAll>
 800baac:	e77a      	b.n	800b9a4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800baae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bab0:	f000 f91d 	bl	800bcee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bab4:	f000 fc0a 	bl	800c2cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bab8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800baba:	f000 f96a 	bl	800bd92 <prvIsQueueEmpty>
 800babe:	4603      	mov	r3, r0
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	f43f af6f 	beq.w	800b9a4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bac6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3730      	adds	r7, #48	; 0x30
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	e000ed04 	.word	0xe000ed04

0800bad4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b08e      	sub	sp, #56	; 0x38
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d109      	bne.n	800bafe <xQueueReceiveFromISR+0x2a>
 800baea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baee:	f383 8811 	msr	BASEPRI, r3
 800baf2:	f3bf 8f6f 	isb	sy
 800baf6:	f3bf 8f4f 	dsb	sy
 800bafa:	623b      	str	r3, [r7, #32]
 800bafc:	e7fe      	b.n	800bafc <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d103      	bne.n	800bb0c <xQueueReceiveFromISR+0x38>
 800bb04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d101      	bne.n	800bb10 <xQueueReceiveFromISR+0x3c>
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	e000      	b.n	800bb12 <xQueueReceiveFromISR+0x3e>
 800bb10:	2300      	movs	r3, #0
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d109      	bne.n	800bb2a <xQueueReceiveFromISR+0x56>
 800bb16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb1a:	f383 8811 	msr	BASEPRI, r3
 800bb1e:	f3bf 8f6f 	isb	sy
 800bb22:	f3bf 8f4f 	dsb	sy
 800bb26:	61fb      	str	r3, [r7, #28]
 800bb28:	e7fe      	b.n	800bb28 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb2a:	f001 fa93 	bl	800d054 <vPortValidateInterruptPriority>
	__asm volatile
 800bb2e:	f3ef 8211 	mrs	r2, BASEPRI
 800bb32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb36:	f383 8811 	msr	BASEPRI, r3
 800bb3a:	f3bf 8f6f 	isb	sy
 800bb3e:	f3bf 8f4f 	dsb	sy
 800bb42:	61ba      	str	r2, [r7, #24]
 800bb44:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bb46:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bb48:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb4e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d02f      	beq.n	800bbb6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bb60:	68b9      	ldr	r1, [r7, #8]
 800bb62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb64:	f000 f89d 	bl	800bca2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb6a:	1e5a      	subs	r2, r3, #1
 800bb6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb6e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bb70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bb74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb78:	d112      	bne.n	800bba0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb7c:	691b      	ldr	r3, [r3, #16]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d016      	beq.n	800bbb0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb84:	3310      	adds	r3, #16
 800bb86:	4618      	mov	r0, r3
 800bb88:	f000 fd90 	bl	800c6ac <xTaskRemoveFromEventList>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d00e      	beq.n	800bbb0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d00b      	beq.n	800bbb0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	601a      	str	r2, [r3, #0]
 800bb9e:	e007      	b.n	800bbb0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bba0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bba4:	3301      	adds	r3, #1
 800bba6:	b2db      	uxtb	r3, r3
 800bba8:	b25a      	sxtb	r2, r3
 800bbaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	637b      	str	r3, [r7, #52]	; 0x34
 800bbb4:	e001      	b.n	800bbba <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	637b      	str	r3, [r7, #52]	; 0x34
 800bbba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbbc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bbc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3738      	adds	r7, #56	; 0x38
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}

0800bbce <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bbce:	b580      	push	{r7, lr}
 800bbd0:	b086      	sub	sp, #24
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	60f8      	str	r0, [r7, #12]
 800bbd6:	60b9      	str	r1, [r7, #8]
 800bbd8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbe2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d10d      	bne.n	800bc08 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d14d      	bne.n	800bc90 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	689b      	ldr	r3, [r3, #8]
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f000 ff2b 	bl	800ca54 <xTaskPriorityDisinherit>
 800bbfe:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2200      	movs	r2, #0
 800bc04:	609a      	str	r2, [r3, #8]
 800bc06:	e043      	b.n	800bc90 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d119      	bne.n	800bc42 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	6858      	ldr	r0, [r3, #4]
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc16:	461a      	mov	r2, r3
 800bc18:	68b9      	ldr	r1, [r7, #8]
 800bc1a:	f001 ff93 	bl	800db44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	685a      	ldr	r2, [r3, #4]
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc26:	441a      	add	r2, r3
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	685a      	ldr	r2, [r3, #4]
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	689b      	ldr	r3, [r3, #8]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d32b      	bcc.n	800bc90 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	605a      	str	r2, [r3, #4]
 800bc40:	e026      	b.n	800bc90 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	68d8      	ldr	r0, [r3, #12]
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	68b9      	ldr	r1, [r7, #8]
 800bc4e:	f001 ff79 	bl	800db44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	68da      	ldr	r2, [r3, #12]
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc5a:	425b      	negs	r3, r3
 800bc5c:	441a      	add	r2, r3
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	68da      	ldr	r2, [r3, #12]
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d207      	bcs.n	800bc7e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	689a      	ldr	r2, [r3, #8]
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc76:	425b      	negs	r3, r3
 800bc78:	441a      	add	r2, r3
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2b02      	cmp	r3, #2
 800bc82:	d105      	bne.n	800bc90 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d002      	beq.n	800bc90 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	3b01      	subs	r3, #1
 800bc8e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	1c5a      	adds	r2, r3, #1
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bc98:	697b      	ldr	r3, [r7, #20]
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3718      	adds	r7, #24
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}

0800bca2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bca2:	b580      	push	{r7, lr}
 800bca4:	b082      	sub	sp, #8
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	6078      	str	r0, [r7, #4]
 800bcaa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d018      	beq.n	800bce6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	68da      	ldr	r2, [r3, #12]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcbc:	441a      	add	r2, r3
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	68da      	ldr	r2, [r3, #12]
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	689b      	ldr	r3, [r3, #8]
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d303      	bcc.n	800bcd6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681a      	ldr	r2, [r3, #0]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	68d9      	ldr	r1, [r3, #12]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcde:	461a      	mov	r2, r3
 800bce0:	6838      	ldr	r0, [r7, #0]
 800bce2:	f001 ff2f 	bl	800db44 <memcpy>
	}
}
 800bce6:	bf00      	nop
 800bce8:	3708      	adds	r7, #8
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b084      	sub	sp, #16
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bcf6:	f001 f8d1 	bl	800ce9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd00:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bd02:	e011      	b.n	800bd28 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d012      	beq.n	800bd32 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	3324      	adds	r3, #36	; 0x24
 800bd10:	4618      	mov	r0, r3
 800bd12:	f000 fccb 	bl	800c6ac <xTaskRemoveFromEventList>
 800bd16:	4603      	mov	r3, r0
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d001      	beq.n	800bd20 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bd1c:	f000 fd9e 	bl	800c85c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bd20:	7bfb      	ldrb	r3, [r7, #15]
 800bd22:	3b01      	subs	r3, #1
 800bd24:	b2db      	uxtb	r3, r3
 800bd26:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bd28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	dce9      	bgt.n	800bd04 <prvUnlockQueue+0x16>
 800bd30:	e000      	b.n	800bd34 <prvUnlockQueue+0x46>
					break;
 800bd32:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	22ff      	movs	r2, #255	; 0xff
 800bd38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bd3c:	f001 f8dc 	bl	800cef8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bd40:	f001 f8ac 	bl	800ce9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd4a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bd4c:	e011      	b.n	800bd72 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	691b      	ldr	r3, [r3, #16]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d012      	beq.n	800bd7c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	3310      	adds	r3, #16
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f000 fca6 	bl	800c6ac <xTaskRemoveFromEventList>
 800bd60:	4603      	mov	r3, r0
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d001      	beq.n	800bd6a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bd66:	f000 fd79 	bl	800c85c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bd6a:	7bbb      	ldrb	r3, [r7, #14]
 800bd6c:	3b01      	subs	r3, #1
 800bd6e:	b2db      	uxtb	r3, r3
 800bd70:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bd72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	dce9      	bgt.n	800bd4e <prvUnlockQueue+0x60>
 800bd7a:	e000      	b.n	800bd7e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bd7c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	22ff      	movs	r2, #255	; 0xff
 800bd82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bd86:	f001 f8b7 	bl	800cef8 <vPortExitCritical>
}
 800bd8a:	bf00      	nop
 800bd8c:	3710      	adds	r7, #16
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}

0800bd92 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bd92:	b580      	push	{r7, lr}
 800bd94:	b084      	sub	sp, #16
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bd9a:	f001 f87f 	bl	800ce9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d102      	bne.n	800bdac <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bda6:	2301      	movs	r3, #1
 800bda8:	60fb      	str	r3, [r7, #12]
 800bdaa:	e001      	b.n	800bdb0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bdac:	2300      	movs	r3, #0
 800bdae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bdb0:	f001 f8a2 	bl	800cef8 <vPortExitCritical>

	return xReturn;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3710      	adds	r7, #16
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}

0800bdbe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bdbe:	b580      	push	{r7, lr}
 800bdc0:	b084      	sub	sp, #16
 800bdc2:	af00      	add	r7, sp, #0
 800bdc4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bdc6:	f001 f869 	bl	800ce9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d102      	bne.n	800bddc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	60fb      	str	r3, [r7, #12]
 800bdda:	e001      	b.n	800bde0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bddc:	2300      	movs	r3, #0
 800bdde:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bde0:	f001 f88a 	bl	800cef8 <vPortExitCritical>

	return xReturn;
 800bde4:	68fb      	ldr	r3, [r7, #12]
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3710      	adds	r7, #16
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
	...

0800bdf0 <MX_TIM7_Init>:
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bdf6:	463b      	mov	r3, r7
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	601a      	str	r2, [r3, #0]
 800bdfc:	605a      	str	r2, [r3, #4]
  htim7.Instance = TIM7;
 800bdfe:	4b11      	ldr	r3, [pc, #68]	; (800be44 <MX_TIM7_Init+0x54>)
 800be00:	4a11      	ldr	r2, [pc, #68]	; (800be48 <MX_TIM7_Init+0x58>)
 800be02:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 167;
 800be04:	4b0f      	ldr	r3, [pc, #60]	; (800be44 <MX_TIM7_Init+0x54>)
 800be06:	22a7      	movs	r2, #167	; 0xa7
 800be08:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800be0a:	4b0e      	ldr	r3, [pc, #56]	; (800be44 <MX_TIM7_Init+0x54>)
 800be0c:	2200      	movs	r2, #0
 800be0e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100;
 800be10:	4b0c      	ldr	r3, [pc, #48]	; (800be44 <MX_TIM7_Init+0x54>)
 800be12:	2264      	movs	r2, #100	; 0x64
 800be14:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800be16:	4b0b      	ldr	r3, [pc, #44]	; (800be44 <MX_TIM7_Init+0x54>)
 800be18:	2200      	movs	r2, #0
 800be1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800be1c:	4809      	ldr	r0, [pc, #36]	; (800be44 <MX_TIM7_Init+0x54>)
 800be1e:	f7fd f9d1 	bl	80091c4 <HAL_TIM_Base_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800be22:	2300      	movs	r3, #0
 800be24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800be26:	2300      	movs	r3, #0
 800be28:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800be2a:	463b      	mov	r3, r7
 800be2c:	4619      	mov	r1, r3
 800be2e:	4805      	ldr	r0, [pc, #20]	; (800be44 <MX_TIM7_Init+0x54>)
 800be30:	f7fe f86c 	bl	8009f0c <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Base_Start_IT(&htim7);
 800be34:	4803      	ldr	r0, [pc, #12]	; (800be44 <MX_TIM7_Init+0x54>)
 800be36:	f7fd fa14 	bl	8009262 <HAL_TIM_Base_Start_IT>
}
 800be3a:	bf00      	nop
 800be3c:	3708      	adds	r7, #8
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop
 800be44:	20000554 	.word	0x20000554
 800be48:	40001400 	.word	0x40001400

0800be4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b08e      	sub	sp, #56	; 0x38
 800be50:	af04      	add	r7, sp, #16
 800be52:	60f8      	str	r0, [r7, #12]
 800be54:	60b9      	str	r1, [r7, #8]
 800be56:	607a      	str	r2, [r7, #4]
 800be58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800be5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d109      	bne.n	800be74 <xTaskCreateStatic+0x28>
	__asm volatile
 800be60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be64:	f383 8811 	msr	BASEPRI, r3
 800be68:	f3bf 8f6f 	isb	sy
 800be6c:	f3bf 8f4f 	dsb	sy
 800be70:	623b      	str	r3, [r7, #32]
 800be72:	e7fe      	b.n	800be72 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800be74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be76:	2b00      	cmp	r3, #0
 800be78:	d109      	bne.n	800be8e <xTaskCreateStatic+0x42>
 800be7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be7e:	f383 8811 	msr	BASEPRI, r3
 800be82:	f3bf 8f6f 	isb	sy
 800be86:	f3bf 8f4f 	dsb	sy
 800be8a:	61fb      	str	r3, [r7, #28]
 800be8c:	e7fe      	b.n	800be8c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800be8e:	2360      	movs	r3, #96	; 0x60
 800be90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	2b60      	cmp	r3, #96	; 0x60
 800be96:	d009      	beq.n	800beac <xTaskCreateStatic+0x60>
 800be98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be9c:	f383 8811 	msr	BASEPRI, r3
 800bea0:	f3bf 8f6f 	isb	sy
 800bea4:	f3bf 8f4f 	dsb	sy
 800bea8:	61bb      	str	r3, [r7, #24]
 800beaa:	e7fe      	b.n	800beaa <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800beac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800beae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d01e      	beq.n	800bef2 <xTaskCreateStatic+0xa6>
 800beb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d01b      	beq.n	800bef2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800beba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bebc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bec2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec6:	2202      	movs	r2, #2
 800bec8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800becc:	2300      	movs	r3, #0
 800bece:	9303      	str	r3, [sp, #12]
 800bed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed2:	9302      	str	r3, [sp, #8]
 800bed4:	f107 0314 	add.w	r3, r7, #20
 800bed8:	9301      	str	r3, [sp, #4]
 800beda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bedc:	9300      	str	r3, [sp, #0]
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	687a      	ldr	r2, [r7, #4]
 800bee2:	68b9      	ldr	r1, [r7, #8]
 800bee4:	68f8      	ldr	r0, [r7, #12]
 800bee6:	f000 f850 	bl	800bf8a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800beea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800beec:	f000 f8de 	bl	800c0ac <prvAddNewTaskToReadyList>
 800bef0:	e001      	b.n	800bef6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800bef2:	2300      	movs	r3, #0
 800bef4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bef6:	697b      	ldr	r3, [r7, #20]
	}
 800bef8:	4618      	mov	r0, r3
 800befa:	3728      	adds	r7, #40	; 0x28
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b08c      	sub	sp, #48	; 0x30
 800bf04:	af04      	add	r7, sp, #16
 800bf06:	60f8      	str	r0, [r7, #12]
 800bf08:	60b9      	str	r1, [r7, #8]
 800bf0a:	603b      	str	r3, [r7, #0]
 800bf0c:	4613      	mov	r3, r2
 800bf0e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bf10:	88fb      	ldrh	r3, [r7, #6]
 800bf12:	009b      	lsls	r3, r3, #2
 800bf14:	4618      	mov	r0, r3
 800bf16:	f001 f8db 	bl	800d0d0 <pvPortMalloc>
 800bf1a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d00e      	beq.n	800bf40 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bf22:	2060      	movs	r0, #96	; 0x60
 800bf24:	f001 f8d4 	bl	800d0d0 <pvPortMalloc>
 800bf28:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bf2a:	69fb      	ldr	r3, [r7, #28]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d003      	beq.n	800bf38 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bf30:	69fb      	ldr	r3, [r7, #28]
 800bf32:	697a      	ldr	r2, [r7, #20]
 800bf34:	631a      	str	r2, [r3, #48]	; 0x30
 800bf36:	e005      	b.n	800bf44 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bf38:	6978      	ldr	r0, [r7, #20]
 800bf3a:	f001 f98b 	bl	800d254 <vPortFree>
 800bf3e:	e001      	b.n	800bf44 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bf40:	2300      	movs	r3, #0
 800bf42:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bf44:	69fb      	ldr	r3, [r7, #28]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d017      	beq.n	800bf7a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bf4a:	69fb      	ldr	r3, [r7, #28]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bf52:	88fa      	ldrh	r2, [r7, #6]
 800bf54:	2300      	movs	r3, #0
 800bf56:	9303      	str	r3, [sp, #12]
 800bf58:	69fb      	ldr	r3, [r7, #28]
 800bf5a:	9302      	str	r3, [sp, #8]
 800bf5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf5e:	9301      	str	r3, [sp, #4]
 800bf60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf62:	9300      	str	r3, [sp, #0]
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	68b9      	ldr	r1, [r7, #8]
 800bf68:	68f8      	ldr	r0, [r7, #12]
 800bf6a:	f000 f80e 	bl	800bf8a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bf6e:	69f8      	ldr	r0, [r7, #28]
 800bf70:	f000 f89c 	bl	800c0ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bf74:	2301      	movs	r3, #1
 800bf76:	61bb      	str	r3, [r7, #24]
 800bf78:	e002      	b.n	800bf80 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bf7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf7e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bf80:	69bb      	ldr	r3, [r7, #24]
	}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3720      	adds	r7, #32
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}

0800bf8a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bf8a:	b580      	push	{r7, lr}
 800bf8c:	b088      	sub	sp, #32
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	60f8      	str	r0, [r7, #12]
 800bf92:	60b9      	str	r1, [r7, #8]
 800bf94:	607a      	str	r2, [r7, #4]
 800bf96:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bf98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf9a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	009b      	lsls	r3, r3, #2
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	21a5      	movs	r1, #165	; 0xa5
 800bfa4:	f001 fdd9 	bl	800db5a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bfa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bfb2:	3b01      	subs	r3, #1
 800bfb4:	009b      	lsls	r3, r3, #2
 800bfb6:	4413      	add	r3, r2
 800bfb8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bfba:	69bb      	ldr	r3, [r7, #24]
 800bfbc:	f023 0307 	bic.w	r3, r3, #7
 800bfc0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bfc2:	69bb      	ldr	r3, [r7, #24]
 800bfc4:	f003 0307 	and.w	r3, r3, #7
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d009      	beq.n	800bfe0 <prvInitialiseNewTask+0x56>
 800bfcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd0:	f383 8811 	msr	BASEPRI, r3
 800bfd4:	f3bf 8f6f 	isb	sy
 800bfd8:	f3bf 8f4f 	dsb	sy
 800bfdc:	617b      	str	r3, [r7, #20]
 800bfde:	e7fe      	b.n	800bfde <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d01f      	beq.n	800c026 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	61fb      	str	r3, [r7, #28]
 800bfea:	e012      	b.n	800c012 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bfec:	68ba      	ldr	r2, [r7, #8]
 800bfee:	69fb      	ldr	r3, [r7, #28]
 800bff0:	4413      	add	r3, r2
 800bff2:	7819      	ldrb	r1, [r3, #0]
 800bff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bff6:	69fb      	ldr	r3, [r7, #28]
 800bff8:	4413      	add	r3, r2
 800bffa:	3334      	adds	r3, #52	; 0x34
 800bffc:	460a      	mov	r2, r1
 800bffe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c000:	68ba      	ldr	r2, [r7, #8]
 800c002:	69fb      	ldr	r3, [r7, #28]
 800c004:	4413      	add	r3, r2
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d006      	beq.n	800c01a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c00c:	69fb      	ldr	r3, [r7, #28]
 800c00e:	3301      	adds	r3, #1
 800c010:	61fb      	str	r3, [r7, #28]
 800c012:	69fb      	ldr	r3, [r7, #28]
 800c014:	2b0f      	cmp	r3, #15
 800c016:	d9e9      	bls.n	800bfec <prvInitialiseNewTask+0x62>
 800c018:	e000      	b.n	800c01c <prvInitialiseNewTask+0x92>
			{
				break;
 800c01a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01e:	2200      	movs	r2, #0
 800c020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c024:	e003      	b.n	800c02e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c028:	2200      	movs	r2, #0
 800c02a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c030:	2b06      	cmp	r3, #6
 800c032:	d901      	bls.n	800c038 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c034:	2306      	movs	r3, #6
 800c036:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c03a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c03c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c042:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c046:	2200      	movs	r2, #0
 800c048:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04c:	3304      	adds	r3, #4
 800c04e:	4618      	mov	r0, r3
 800c050:	f7ff f904 	bl	800b25c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c056:	3318      	adds	r3, #24
 800c058:	4618      	mov	r0, r3
 800c05a:	f7ff f8ff 	bl	800b25c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c062:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c066:	f1c3 0207 	rsb	r2, r3, #7
 800c06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c072:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800c074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c076:	2200      	movs	r2, #0
 800c078:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07c:	2200      	movs	r2, #0
 800c07e:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c082:	2200      	movs	r2, #0
 800c084:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c088:	683a      	ldr	r2, [r7, #0]
 800c08a:	68f9      	ldr	r1, [r7, #12]
 800c08c:	69b8      	ldr	r0, [r7, #24]
 800c08e:	f000 fdcb 	bl	800cc28 <pxPortInitialiseStack>
 800c092:	4602      	mov	r2, r0
 800c094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c096:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d002      	beq.n	800c0a4 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c0a4:	bf00      	nop
 800c0a6:	3720      	adds	r7, #32
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}

0800c0ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c0b4:	f000 fef2 	bl	800ce9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c0b8:	4b2c      	ldr	r3, [pc, #176]	; (800c16c <prvAddNewTaskToReadyList+0xc0>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	3301      	adds	r3, #1
 800c0be:	4a2b      	ldr	r2, [pc, #172]	; (800c16c <prvAddNewTaskToReadyList+0xc0>)
 800c0c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c0c2:	4b2b      	ldr	r3, [pc, #172]	; (800c170 <prvAddNewTaskToReadyList+0xc4>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d109      	bne.n	800c0de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c0ca:	4a29      	ldr	r2, [pc, #164]	; (800c170 <prvAddNewTaskToReadyList+0xc4>)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c0d0:	4b26      	ldr	r3, [pc, #152]	; (800c16c <prvAddNewTaskToReadyList+0xc0>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d110      	bne.n	800c0fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c0d8:	f000 fbe4 	bl	800c8a4 <prvInitialiseTaskLists>
 800c0dc:	e00d      	b.n	800c0fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c0de:	4b25      	ldr	r3, [pc, #148]	; (800c174 <prvAddNewTaskToReadyList+0xc8>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d109      	bne.n	800c0fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c0e6:	4b22      	ldr	r3, [pc, #136]	; (800c170 <prvAddNewTaskToReadyList+0xc4>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d802      	bhi.n	800c0fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c0f4:	4a1e      	ldr	r2, [pc, #120]	; (800c170 <prvAddNewTaskToReadyList+0xc4>)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c0fa:	4b1f      	ldr	r3, [pc, #124]	; (800c178 <prvAddNewTaskToReadyList+0xcc>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	3301      	adds	r3, #1
 800c100:	4a1d      	ldr	r2, [pc, #116]	; (800c178 <prvAddNewTaskToReadyList+0xcc>)
 800c102:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c104:	4b1c      	ldr	r3, [pc, #112]	; (800c178 <prvAddNewTaskToReadyList+0xcc>)
 800c106:	681a      	ldr	r2, [r3, #0]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c110:	2201      	movs	r2, #1
 800c112:	409a      	lsls	r2, r3
 800c114:	4b19      	ldr	r3, [pc, #100]	; (800c17c <prvAddNewTaskToReadyList+0xd0>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	4313      	orrs	r3, r2
 800c11a:	4a18      	ldr	r2, [pc, #96]	; (800c17c <prvAddNewTaskToReadyList+0xd0>)
 800c11c:	6013      	str	r3, [r2, #0]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c122:	4613      	mov	r3, r2
 800c124:	009b      	lsls	r3, r3, #2
 800c126:	4413      	add	r3, r2
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	4a15      	ldr	r2, [pc, #84]	; (800c180 <prvAddNewTaskToReadyList+0xd4>)
 800c12c:	441a      	add	r2, r3
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	3304      	adds	r3, #4
 800c132:	4619      	mov	r1, r3
 800c134:	4610      	mov	r0, r2
 800c136:	f7ff f89e 	bl	800b276 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c13a:	f000 fedd 	bl	800cef8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c13e:	4b0d      	ldr	r3, [pc, #52]	; (800c174 <prvAddNewTaskToReadyList+0xc8>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d00e      	beq.n	800c164 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c146:	4b0a      	ldr	r3, [pc, #40]	; (800c170 <prvAddNewTaskToReadyList+0xc4>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c150:	429a      	cmp	r2, r3
 800c152:	d207      	bcs.n	800c164 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c154:	4b0b      	ldr	r3, [pc, #44]	; (800c184 <prvAddNewTaskToReadyList+0xd8>)
 800c156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c15a:	601a      	str	r2, [r3, #0]
 800c15c:	f3bf 8f4f 	dsb	sy
 800c160:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c164:	bf00      	nop
 800c166:	3708      	adds	r7, #8
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}
 800c16c:	20000f94 	.word	0x20000f94
 800c170:	20000e94 	.word	0x20000e94
 800c174:	20000fa0 	.word	0x20000fa0
 800c178:	20000fb0 	.word	0x20000fb0
 800c17c:	20000f9c 	.word	0x20000f9c
 800c180:	20000e98 	.word	0x20000e98
 800c184:	e000ed04 	.word	0xe000ed04

0800c188 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b084      	sub	sp, #16
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c190:	2300      	movs	r3, #0
 800c192:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d016      	beq.n	800c1c8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c19a:	4b13      	ldr	r3, [pc, #76]	; (800c1e8 <vTaskDelay+0x60>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d009      	beq.n	800c1b6 <vTaskDelay+0x2e>
 800c1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a6:	f383 8811 	msr	BASEPRI, r3
 800c1aa:	f3bf 8f6f 	isb	sy
 800c1ae:	f3bf 8f4f 	dsb	sy
 800c1b2:	60bb      	str	r3, [r7, #8]
 800c1b4:	e7fe      	b.n	800c1b4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800c1b6:	f000 f87b 	bl	800c2b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c1ba:	2100      	movs	r1, #0
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f000 fccd 	bl	800cb5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c1c2:	f000 f883 	bl	800c2cc <xTaskResumeAll>
 800c1c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d107      	bne.n	800c1de <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800c1ce:	4b07      	ldr	r3, [pc, #28]	; (800c1ec <vTaskDelay+0x64>)
 800c1d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1d4:	601a      	str	r2, [r3, #0]
 800c1d6:	f3bf 8f4f 	dsb	sy
 800c1da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c1de:	bf00      	nop
 800c1e0:	3710      	adds	r7, #16
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	20000fbc 	.word	0x20000fbc
 800c1ec:	e000ed04 	.word	0xe000ed04

0800c1f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b08a      	sub	sp, #40	; 0x28
 800c1f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c1fe:	463a      	mov	r2, r7
 800c200:	1d39      	adds	r1, r7, #4
 800c202:	f107 0308 	add.w	r3, r7, #8
 800c206:	4618      	mov	r0, r3
 800c208:	f7f4 fe58 	bl	8000ebc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c20c:	6839      	ldr	r1, [r7, #0]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	68ba      	ldr	r2, [r7, #8]
 800c212:	9202      	str	r2, [sp, #8]
 800c214:	9301      	str	r3, [sp, #4]
 800c216:	2300      	movs	r3, #0
 800c218:	9300      	str	r3, [sp, #0]
 800c21a:	2300      	movs	r3, #0
 800c21c:	460a      	mov	r2, r1
 800c21e:	491e      	ldr	r1, [pc, #120]	; (800c298 <vTaskStartScheduler+0xa8>)
 800c220:	481e      	ldr	r0, [pc, #120]	; (800c29c <vTaskStartScheduler+0xac>)
 800c222:	f7ff fe13 	bl	800be4c <xTaskCreateStatic>
 800c226:	4602      	mov	r2, r0
 800c228:	4b1d      	ldr	r3, [pc, #116]	; (800c2a0 <vTaskStartScheduler+0xb0>)
 800c22a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c22c:	4b1c      	ldr	r3, [pc, #112]	; (800c2a0 <vTaskStartScheduler+0xb0>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d002      	beq.n	800c23a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c234:	2301      	movs	r3, #1
 800c236:	617b      	str	r3, [r7, #20]
 800c238:	e001      	b.n	800c23e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c23a:	2300      	movs	r3, #0
 800c23c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	2b01      	cmp	r3, #1
 800c242:	d117      	bne.n	800c274 <vTaskStartScheduler+0x84>
 800c244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c248:	f383 8811 	msr	BASEPRI, r3
 800c24c:	f3bf 8f6f 	isb	sy
 800c250:	f3bf 8f4f 	dsb	sy
 800c254:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c256:	4b13      	ldr	r3, [pc, #76]	; (800c2a4 <vTaskStartScheduler+0xb4>)
 800c258:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c25c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c25e:	4b12      	ldr	r3, [pc, #72]	; (800c2a8 <vTaskStartScheduler+0xb8>)
 800c260:	2201      	movs	r2, #1
 800c262:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c264:	4b11      	ldr	r3, [pc, #68]	; (800c2ac <vTaskStartScheduler+0xbc>)
 800c266:	2200      	movs	r2, #0
 800c268:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800c26a:	f7ff fdc1 	bl	800bdf0 <MX_TIM7_Init>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c26e:	f000 fd67 	bl	800cd40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c272:	e00d      	b.n	800c290 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c27a:	d109      	bne.n	800c290 <vTaskStartScheduler+0xa0>
 800c27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c280:	f383 8811 	msr	BASEPRI, r3
 800c284:	f3bf 8f6f 	isb	sy
 800c288:	f3bf 8f4f 	dsb	sy
 800c28c:	60fb      	str	r3, [r7, #12]
 800c28e:	e7fe      	b.n	800c28e <vTaskStartScheduler+0x9e>
}
 800c290:	bf00      	nop
 800c292:	3718      	adds	r7, #24
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}
 800c298:	0800dcfc 	.word	0x0800dcfc
 800c29c:	0800c875 	.word	0x0800c875
 800c2a0:	20000fb8 	.word	0x20000fb8
 800c2a4:	20000fb4 	.word	0x20000fb4
 800c2a8:	20000fa0 	.word	0x20000fa0
 800c2ac:	20000f98 	.word	0x20000f98

0800c2b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c2b4:	4b04      	ldr	r3, [pc, #16]	; (800c2c8 <vTaskSuspendAll+0x18>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	4a03      	ldr	r2, [pc, #12]	; (800c2c8 <vTaskSuspendAll+0x18>)
 800c2bc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c2be:	bf00      	nop
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr
 800c2c8:	20000fbc 	.word	0x20000fbc

0800c2cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b084      	sub	sp, #16
 800c2d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c2da:	4b41      	ldr	r3, [pc, #260]	; (800c3e0 <xTaskResumeAll+0x114>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d109      	bne.n	800c2f6 <xTaskResumeAll+0x2a>
 800c2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e6:	f383 8811 	msr	BASEPRI, r3
 800c2ea:	f3bf 8f6f 	isb	sy
 800c2ee:	f3bf 8f4f 	dsb	sy
 800c2f2:	603b      	str	r3, [r7, #0]
 800c2f4:	e7fe      	b.n	800c2f4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c2f6:	f000 fdd1 	bl	800ce9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c2fa:	4b39      	ldr	r3, [pc, #228]	; (800c3e0 <xTaskResumeAll+0x114>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	3b01      	subs	r3, #1
 800c300:	4a37      	ldr	r2, [pc, #220]	; (800c3e0 <xTaskResumeAll+0x114>)
 800c302:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c304:	4b36      	ldr	r3, [pc, #216]	; (800c3e0 <xTaskResumeAll+0x114>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d161      	bne.n	800c3d0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c30c:	4b35      	ldr	r3, [pc, #212]	; (800c3e4 <xTaskResumeAll+0x118>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d05d      	beq.n	800c3d0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c314:	e02e      	b.n	800c374 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c316:	4b34      	ldr	r3, [pc, #208]	; (800c3e8 <xTaskResumeAll+0x11c>)
 800c318:	68db      	ldr	r3, [r3, #12]
 800c31a:	68db      	ldr	r3, [r3, #12]
 800c31c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	3318      	adds	r3, #24
 800c322:	4618      	mov	r0, r3
 800c324:	f7ff f804 	bl	800b330 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	3304      	adds	r3, #4
 800c32c:	4618      	mov	r0, r3
 800c32e:	f7fe ffff 	bl	800b330 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c336:	2201      	movs	r2, #1
 800c338:	409a      	lsls	r2, r3
 800c33a:	4b2c      	ldr	r3, [pc, #176]	; (800c3ec <xTaskResumeAll+0x120>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	4313      	orrs	r3, r2
 800c340:	4a2a      	ldr	r2, [pc, #168]	; (800c3ec <xTaskResumeAll+0x120>)
 800c342:	6013      	str	r3, [r2, #0]
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c348:	4613      	mov	r3, r2
 800c34a:	009b      	lsls	r3, r3, #2
 800c34c:	4413      	add	r3, r2
 800c34e:	009b      	lsls	r3, r3, #2
 800c350:	4a27      	ldr	r2, [pc, #156]	; (800c3f0 <xTaskResumeAll+0x124>)
 800c352:	441a      	add	r2, r3
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	3304      	adds	r3, #4
 800c358:	4619      	mov	r1, r3
 800c35a:	4610      	mov	r0, r2
 800c35c:	f7fe ff8b 	bl	800b276 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c364:	4b23      	ldr	r3, [pc, #140]	; (800c3f4 <xTaskResumeAll+0x128>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d302      	bcc.n	800c374 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800c36e:	4b22      	ldr	r3, [pc, #136]	; (800c3f8 <xTaskResumeAll+0x12c>)
 800c370:	2201      	movs	r2, #1
 800c372:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c374:	4b1c      	ldr	r3, [pc, #112]	; (800c3e8 <xTaskResumeAll+0x11c>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d1cc      	bne.n	800c316 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d001      	beq.n	800c386 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c382:	f000 fb29 	bl	800c9d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c386:	4b1d      	ldr	r3, [pc, #116]	; (800c3fc <xTaskResumeAll+0x130>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d010      	beq.n	800c3b4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c392:	f000 f837 	bl	800c404 <xTaskIncrementTick>
 800c396:	4603      	mov	r3, r0
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d002      	beq.n	800c3a2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800c39c:	4b16      	ldr	r3, [pc, #88]	; (800c3f8 <xTaskResumeAll+0x12c>)
 800c39e:	2201      	movs	r2, #1
 800c3a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	3b01      	subs	r3, #1
 800c3a6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d1f1      	bne.n	800c392 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800c3ae:	4b13      	ldr	r3, [pc, #76]	; (800c3fc <xTaskResumeAll+0x130>)
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c3b4:	4b10      	ldr	r3, [pc, #64]	; (800c3f8 <xTaskResumeAll+0x12c>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d009      	beq.n	800c3d0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c3bc:	2301      	movs	r3, #1
 800c3be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c3c0:	4b0f      	ldr	r3, [pc, #60]	; (800c400 <xTaskResumeAll+0x134>)
 800c3c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3c6:	601a      	str	r2, [r3, #0]
 800c3c8:	f3bf 8f4f 	dsb	sy
 800c3cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c3d0:	f000 fd92 	bl	800cef8 <vPortExitCritical>

	return xAlreadyYielded;
 800c3d4:	68bb      	ldr	r3, [r7, #8]
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3710      	adds	r7, #16
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
 800c3de:	bf00      	nop
 800c3e0:	20000fbc 	.word	0x20000fbc
 800c3e4:	20000f94 	.word	0x20000f94
 800c3e8:	20000f54 	.word	0x20000f54
 800c3ec:	20000f9c 	.word	0x20000f9c
 800c3f0:	20000e98 	.word	0x20000e98
 800c3f4:	20000e94 	.word	0x20000e94
 800c3f8:	20000fa8 	.word	0x20000fa8
 800c3fc:	20000fa4 	.word	0x20000fa4
 800c400:	e000ed04 	.word	0xe000ed04

0800c404 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b086      	sub	sp, #24
 800c408:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c40a:	2300      	movs	r3, #0
 800c40c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c40e:	4b4e      	ldr	r3, [pc, #312]	; (800c548 <xTaskIncrementTick+0x144>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	2b00      	cmp	r3, #0
 800c414:	f040 8087 	bne.w	800c526 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c418:	4b4c      	ldr	r3, [pc, #304]	; (800c54c <xTaskIncrementTick+0x148>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	3301      	adds	r3, #1
 800c41e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c420:	4a4a      	ldr	r2, [pc, #296]	; (800c54c <xTaskIncrementTick+0x148>)
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d11f      	bne.n	800c46c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800c42c:	4b48      	ldr	r3, [pc, #288]	; (800c550 <xTaskIncrementTick+0x14c>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d009      	beq.n	800c44a <xTaskIncrementTick+0x46>
 800c436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43a:	f383 8811 	msr	BASEPRI, r3
 800c43e:	f3bf 8f6f 	isb	sy
 800c442:	f3bf 8f4f 	dsb	sy
 800c446:	603b      	str	r3, [r7, #0]
 800c448:	e7fe      	b.n	800c448 <xTaskIncrementTick+0x44>
 800c44a:	4b41      	ldr	r3, [pc, #260]	; (800c550 <xTaskIncrementTick+0x14c>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	60fb      	str	r3, [r7, #12]
 800c450:	4b40      	ldr	r3, [pc, #256]	; (800c554 <xTaskIncrementTick+0x150>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4a3e      	ldr	r2, [pc, #248]	; (800c550 <xTaskIncrementTick+0x14c>)
 800c456:	6013      	str	r3, [r2, #0]
 800c458:	4a3e      	ldr	r2, [pc, #248]	; (800c554 <xTaskIncrementTick+0x150>)
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	6013      	str	r3, [r2, #0]
 800c45e:	4b3e      	ldr	r3, [pc, #248]	; (800c558 <xTaskIncrementTick+0x154>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	3301      	adds	r3, #1
 800c464:	4a3c      	ldr	r2, [pc, #240]	; (800c558 <xTaskIncrementTick+0x154>)
 800c466:	6013      	str	r3, [r2, #0]
 800c468:	f000 fab6 	bl	800c9d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c46c:	4b3b      	ldr	r3, [pc, #236]	; (800c55c <xTaskIncrementTick+0x158>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	693a      	ldr	r2, [r7, #16]
 800c472:	429a      	cmp	r2, r3
 800c474:	d348      	bcc.n	800c508 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c476:	4b36      	ldr	r3, [pc, #216]	; (800c550 <xTaskIncrementTick+0x14c>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d104      	bne.n	800c48a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c480:	4b36      	ldr	r3, [pc, #216]	; (800c55c <xTaskIncrementTick+0x158>)
 800c482:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c486:	601a      	str	r2, [r3, #0]
					break;
 800c488:	e03e      	b.n	800c508 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c48a:	4b31      	ldr	r3, [pc, #196]	; (800c550 <xTaskIncrementTick+0x14c>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	68db      	ldr	r3, [r3, #12]
 800c490:	68db      	ldr	r3, [r3, #12]
 800c492:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	685b      	ldr	r3, [r3, #4]
 800c498:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c49a:	693a      	ldr	r2, [r7, #16]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	d203      	bcs.n	800c4aa <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c4a2:	4a2e      	ldr	r2, [pc, #184]	; (800c55c <xTaskIncrementTick+0x158>)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c4a8:	e02e      	b.n	800c508 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	3304      	adds	r3, #4
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f7fe ff3e 	bl	800b330 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d004      	beq.n	800c4c6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	3318      	adds	r3, #24
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f7fe ff35 	bl	800b330 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	409a      	lsls	r2, r3
 800c4ce:	4b24      	ldr	r3, [pc, #144]	; (800c560 <xTaskIncrementTick+0x15c>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	4a22      	ldr	r2, [pc, #136]	; (800c560 <xTaskIncrementTick+0x15c>)
 800c4d6:	6013      	str	r3, [r2, #0]
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4dc:	4613      	mov	r3, r2
 800c4de:	009b      	lsls	r3, r3, #2
 800c4e0:	4413      	add	r3, r2
 800c4e2:	009b      	lsls	r3, r3, #2
 800c4e4:	4a1f      	ldr	r2, [pc, #124]	; (800c564 <xTaskIncrementTick+0x160>)
 800c4e6:	441a      	add	r2, r3
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	3304      	adds	r3, #4
 800c4ec:	4619      	mov	r1, r3
 800c4ee:	4610      	mov	r0, r2
 800c4f0:	f7fe fec1 	bl	800b276 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4f8:	4b1b      	ldr	r3, [pc, #108]	; (800c568 <xTaskIncrementTick+0x164>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4fe:	429a      	cmp	r2, r3
 800c500:	d3b9      	bcc.n	800c476 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800c502:	2301      	movs	r3, #1
 800c504:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c506:	e7b6      	b.n	800c476 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c508:	4b17      	ldr	r3, [pc, #92]	; (800c568 <xTaskIncrementTick+0x164>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c50e:	4915      	ldr	r1, [pc, #84]	; (800c564 <xTaskIncrementTick+0x160>)
 800c510:	4613      	mov	r3, r2
 800c512:	009b      	lsls	r3, r3, #2
 800c514:	4413      	add	r3, r2
 800c516:	009b      	lsls	r3, r3, #2
 800c518:	440b      	add	r3, r1
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	2b01      	cmp	r3, #1
 800c51e:	d907      	bls.n	800c530 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800c520:	2301      	movs	r3, #1
 800c522:	617b      	str	r3, [r7, #20]
 800c524:	e004      	b.n	800c530 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c526:	4b11      	ldr	r3, [pc, #68]	; (800c56c <xTaskIncrementTick+0x168>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	3301      	adds	r3, #1
 800c52c:	4a0f      	ldr	r2, [pc, #60]	; (800c56c <xTaskIncrementTick+0x168>)
 800c52e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c530:	4b0f      	ldr	r3, [pc, #60]	; (800c570 <xTaskIncrementTick+0x16c>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d001      	beq.n	800c53c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800c538:	2301      	movs	r3, #1
 800c53a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c53c:	697b      	ldr	r3, [r7, #20]
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3718      	adds	r7, #24
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	20000fbc 	.word	0x20000fbc
 800c54c:	20000f98 	.word	0x20000f98
 800c550:	20000f4c 	.word	0x20000f4c
 800c554:	20000f50 	.word	0x20000f50
 800c558:	20000fac 	.word	0x20000fac
 800c55c:	20000fb4 	.word	0x20000fb4
 800c560:	20000f9c 	.word	0x20000f9c
 800c564:	20000e98 	.word	0x20000e98
 800c568:	20000e94 	.word	0x20000e94
 800c56c:	20000fa4 	.word	0x20000fa4
 800c570:	20000fa8 	.word	0x20000fa8

0800c574 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c574:	b480      	push	{r7}
 800c576:	b087      	sub	sp, #28
 800c578:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c57a:	4b32      	ldr	r3, [pc, #200]	; (800c644 <vTaskSwitchContext+0xd0>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d003      	beq.n	800c58a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c582:	4b31      	ldr	r3, [pc, #196]	; (800c648 <vTaskSwitchContext+0xd4>)
 800c584:	2201      	movs	r2, #1
 800c586:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c588:	e056      	b.n	800c638 <vTaskSwitchContext+0xc4>
		xYieldPending = pdFALSE;
 800c58a:	4b2f      	ldr	r3, [pc, #188]	; (800c648 <vTaskSwitchContext+0xd4>)
 800c58c:	2200      	movs	r2, #0
 800c58e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800c590:	4b2e      	ldr	r3, [pc, #184]	; (800c64c <vTaskSwitchContext+0xd8>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	4a2e      	ldr	r2, [pc, #184]	; (800c650 <vTaskSwitchContext+0xdc>)
 800c596:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800c598:	4b2d      	ldr	r3, [pc, #180]	; (800c650 <vTaskSwitchContext+0xdc>)
 800c59a:	681a      	ldr	r2, [r3, #0]
 800c59c:	4b2d      	ldr	r3, [pc, #180]	; (800c654 <vTaskSwitchContext+0xe0>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d909      	bls.n	800c5b8 <vTaskSwitchContext+0x44>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800c5a4:	4b2c      	ldr	r3, [pc, #176]	; (800c658 <vTaskSwitchContext+0xe4>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c5aa:	4a29      	ldr	r2, [pc, #164]	; (800c650 <vTaskSwitchContext+0xdc>)
 800c5ac:	6810      	ldr	r0, [r2, #0]
 800c5ae:	4a29      	ldr	r2, [pc, #164]	; (800c654 <vTaskSwitchContext+0xe0>)
 800c5b0:	6812      	ldr	r2, [r2, #0]
 800c5b2:	1a82      	subs	r2, r0, r2
 800c5b4:	440a      	add	r2, r1
 800c5b6:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800c5b8:	4b25      	ldr	r3, [pc, #148]	; (800c650 <vTaskSwitchContext+0xdc>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	4a25      	ldr	r2, [pc, #148]	; (800c654 <vTaskSwitchContext+0xe0>)
 800c5be:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5c0:	4b26      	ldr	r3, [pc, #152]	; (800c65c <vTaskSwitchContext+0xe8>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	fab3 f383 	clz	r3, r3
 800c5cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c5ce:	7afb      	ldrb	r3, [r7, #11]
 800c5d0:	f1c3 031f 	rsb	r3, r3, #31
 800c5d4:	617b      	str	r3, [r7, #20]
 800c5d6:	4922      	ldr	r1, [pc, #136]	; (800c660 <vTaskSwitchContext+0xec>)
 800c5d8:	697a      	ldr	r2, [r7, #20]
 800c5da:	4613      	mov	r3, r2
 800c5dc:	009b      	lsls	r3, r3, #2
 800c5de:	4413      	add	r3, r2
 800c5e0:	009b      	lsls	r3, r3, #2
 800c5e2:	440b      	add	r3, r1
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d109      	bne.n	800c5fe <vTaskSwitchContext+0x8a>
	__asm volatile
 800c5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ee:	f383 8811 	msr	BASEPRI, r3
 800c5f2:	f3bf 8f6f 	isb	sy
 800c5f6:	f3bf 8f4f 	dsb	sy
 800c5fa:	607b      	str	r3, [r7, #4]
 800c5fc:	e7fe      	b.n	800c5fc <vTaskSwitchContext+0x88>
 800c5fe:	697a      	ldr	r2, [r7, #20]
 800c600:	4613      	mov	r3, r2
 800c602:	009b      	lsls	r3, r3, #2
 800c604:	4413      	add	r3, r2
 800c606:	009b      	lsls	r3, r3, #2
 800c608:	4a15      	ldr	r2, [pc, #84]	; (800c660 <vTaskSwitchContext+0xec>)
 800c60a:	4413      	add	r3, r2
 800c60c:	613b      	str	r3, [r7, #16]
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	685b      	ldr	r3, [r3, #4]
 800c612:	685a      	ldr	r2, [r3, #4]
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	605a      	str	r2, [r3, #4]
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	685a      	ldr	r2, [r3, #4]
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	3308      	adds	r3, #8
 800c620:	429a      	cmp	r2, r3
 800c622:	d104      	bne.n	800c62e <vTaskSwitchContext+0xba>
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	685b      	ldr	r3, [r3, #4]
 800c628:	685a      	ldr	r2, [r3, #4]
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	605a      	str	r2, [r3, #4]
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	685b      	ldr	r3, [r3, #4]
 800c632:	68db      	ldr	r3, [r3, #12]
 800c634:	4a08      	ldr	r2, [pc, #32]	; (800c658 <vTaskSwitchContext+0xe4>)
 800c636:	6013      	str	r3, [r2, #0]
}
 800c638:	bf00      	nop
 800c63a:	371c      	adds	r7, #28
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr
 800c644:	20000fbc 	.word	0x20000fbc
 800c648:	20000fa8 	.word	0x20000fa8
 800c64c:	20000594 	.word	0x20000594
 800c650:	20000fc4 	.word	0x20000fc4
 800c654:	20000fc0 	.word	0x20000fc0
 800c658:	20000e94 	.word	0x20000e94
 800c65c:	20000f9c 	.word	0x20000f9c
 800c660:	20000e98 	.word	0x20000e98

0800c664 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b084      	sub	sp, #16
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d109      	bne.n	800c688 <vTaskPlaceOnEventList+0x24>
 800c674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c678:	f383 8811 	msr	BASEPRI, r3
 800c67c:	f3bf 8f6f 	isb	sy
 800c680:	f3bf 8f4f 	dsb	sy
 800c684:	60fb      	str	r3, [r7, #12]
 800c686:	e7fe      	b.n	800c686 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c688:	4b07      	ldr	r3, [pc, #28]	; (800c6a8 <vTaskPlaceOnEventList+0x44>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	3318      	adds	r3, #24
 800c68e:	4619      	mov	r1, r3
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f7fe fe14 	bl	800b2be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c696:	2101      	movs	r1, #1
 800c698:	6838      	ldr	r0, [r7, #0]
 800c69a:	f000 fa5f 	bl	800cb5c <prvAddCurrentTaskToDelayedList>
}
 800c69e:	bf00      	nop
 800c6a0:	3710      	adds	r7, #16
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
 800c6a6:	bf00      	nop
 800c6a8:	20000e94 	.word	0x20000e94

0800c6ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b086      	sub	sp, #24
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	68db      	ldr	r3, [r3, #12]
 800c6b8:	68db      	ldr	r3, [r3, #12]
 800c6ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d109      	bne.n	800c6d6 <xTaskRemoveFromEventList+0x2a>
 800c6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c6:	f383 8811 	msr	BASEPRI, r3
 800c6ca:	f3bf 8f6f 	isb	sy
 800c6ce:	f3bf 8f4f 	dsb	sy
 800c6d2:	60fb      	str	r3, [r7, #12]
 800c6d4:	e7fe      	b.n	800c6d4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	3318      	adds	r3, #24
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f7fe fe28 	bl	800b330 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6e0:	4b1d      	ldr	r3, [pc, #116]	; (800c758 <xTaskRemoveFromEventList+0xac>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d11c      	bne.n	800c722 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	3304      	adds	r3, #4
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f7fe fe1f 	bl	800b330 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	409a      	lsls	r2, r3
 800c6fa:	4b18      	ldr	r3, [pc, #96]	; (800c75c <xTaskRemoveFromEventList+0xb0>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	4313      	orrs	r3, r2
 800c700:	4a16      	ldr	r2, [pc, #88]	; (800c75c <xTaskRemoveFromEventList+0xb0>)
 800c702:	6013      	str	r3, [r2, #0]
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c708:	4613      	mov	r3, r2
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	4413      	add	r3, r2
 800c70e:	009b      	lsls	r3, r3, #2
 800c710:	4a13      	ldr	r2, [pc, #76]	; (800c760 <xTaskRemoveFromEventList+0xb4>)
 800c712:	441a      	add	r2, r3
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	3304      	adds	r3, #4
 800c718:	4619      	mov	r1, r3
 800c71a:	4610      	mov	r0, r2
 800c71c:	f7fe fdab 	bl	800b276 <vListInsertEnd>
 800c720:	e005      	b.n	800c72e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	3318      	adds	r3, #24
 800c726:	4619      	mov	r1, r3
 800c728:	480e      	ldr	r0, [pc, #56]	; (800c764 <xTaskRemoveFromEventList+0xb8>)
 800c72a:	f7fe fda4 	bl	800b276 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c732:	4b0d      	ldr	r3, [pc, #52]	; (800c768 <xTaskRemoveFromEventList+0xbc>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c738:	429a      	cmp	r2, r3
 800c73a:	d905      	bls.n	800c748 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c73c:	2301      	movs	r3, #1
 800c73e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c740:	4b0a      	ldr	r3, [pc, #40]	; (800c76c <xTaskRemoveFromEventList+0xc0>)
 800c742:	2201      	movs	r2, #1
 800c744:	601a      	str	r2, [r3, #0]
 800c746:	e001      	b.n	800c74c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800c748:	2300      	movs	r3, #0
 800c74a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c74c:	697b      	ldr	r3, [r7, #20]
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3718      	adds	r7, #24
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	20000fbc 	.word	0x20000fbc
 800c75c:	20000f9c 	.word	0x20000f9c
 800c760:	20000e98 	.word	0x20000e98
 800c764:	20000f54 	.word	0x20000f54
 800c768:	20000e94 	.word	0x20000e94
 800c76c:	20000fa8 	.word	0x20000fa8

0800c770 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c770:	b480      	push	{r7}
 800c772:	b083      	sub	sp, #12
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c778:	4b06      	ldr	r3, [pc, #24]	; (800c794 <vTaskInternalSetTimeOutState+0x24>)
 800c77a:	681a      	ldr	r2, [r3, #0]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c780:	4b05      	ldr	r3, [pc, #20]	; (800c798 <vTaskInternalSetTimeOutState+0x28>)
 800c782:	681a      	ldr	r2, [r3, #0]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	605a      	str	r2, [r3, #4]
}
 800c788:	bf00      	nop
 800c78a:	370c      	adds	r7, #12
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr
 800c794:	20000fac 	.word	0x20000fac
 800c798:	20000f98 	.word	0x20000f98

0800c79c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b088      	sub	sp, #32
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d109      	bne.n	800c7c0 <xTaskCheckForTimeOut+0x24>
 800c7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b0:	f383 8811 	msr	BASEPRI, r3
 800c7b4:	f3bf 8f6f 	isb	sy
 800c7b8:	f3bf 8f4f 	dsb	sy
 800c7bc:	613b      	str	r3, [r7, #16]
 800c7be:	e7fe      	b.n	800c7be <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d109      	bne.n	800c7da <xTaskCheckForTimeOut+0x3e>
 800c7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ca:	f383 8811 	msr	BASEPRI, r3
 800c7ce:	f3bf 8f6f 	isb	sy
 800c7d2:	f3bf 8f4f 	dsb	sy
 800c7d6:	60fb      	str	r3, [r7, #12]
 800c7d8:	e7fe      	b.n	800c7d8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800c7da:	f000 fb5f 	bl	800ce9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c7de:	4b1d      	ldr	r3, [pc, #116]	; (800c854 <xTaskCheckForTimeOut+0xb8>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	69ba      	ldr	r2, [r7, #24]
 800c7ea:	1ad3      	subs	r3, r2, r3
 800c7ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7f6:	d102      	bne.n	800c7fe <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	61fb      	str	r3, [r7, #28]
 800c7fc:	e023      	b.n	800c846 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681a      	ldr	r2, [r3, #0]
 800c802:	4b15      	ldr	r3, [pc, #84]	; (800c858 <xTaskCheckForTimeOut+0xbc>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	429a      	cmp	r2, r3
 800c808:	d007      	beq.n	800c81a <xTaskCheckForTimeOut+0x7e>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	685b      	ldr	r3, [r3, #4]
 800c80e:	69ba      	ldr	r2, [r7, #24]
 800c810:	429a      	cmp	r2, r3
 800c812:	d302      	bcc.n	800c81a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c814:	2301      	movs	r3, #1
 800c816:	61fb      	str	r3, [r7, #28]
 800c818:	e015      	b.n	800c846 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	697a      	ldr	r2, [r7, #20]
 800c820:	429a      	cmp	r2, r3
 800c822:	d20b      	bcs.n	800c83c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	681a      	ldr	r2, [r3, #0]
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	1ad2      	subs	r2, r2, r3
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f7ff ff9d 	bl	800c770 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c836:	2300      	movs	r3, #0
 800c838:	61fb      	str	r3, [r7, #28]
 800c83a:	e004      	b.n	800c846 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	2200      	movs	r2, #0
 800c840:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c842:	2301      	movs	r3, #1
 800c844:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c846:	f000 fb57 	bl	800cef8 <vPortExitCritical>

	return xReturn;
 800c84a:	69fb      	ldr	r3, [r7, #28]
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	3720      	adds	r7, #32
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}
 800c854:	20000f98 	.word	0x20000f98
 800c858:	20000fac 	.word	0x20000fac

0800c85c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c85c:	b480      	push	{r7}
 800c85e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c860:	4b03      	ldr	r3, [pc, #12]	; (800c870 <vTaskMissedYield+0x14>)
 800c862:	2201      	movs	r2, #1
 800c864:	601a      	str	r2, [r3, #0]
}
 800c866:	bf00      	nop
 800c868:	46bd      	mov	sp, r7
 800c86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86e:	4770      	bx	lr
 800c870:	20000fa8 	.word	0x20000fa8

0800c874 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b082      	sub	sp, #8
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c87c:	f000 f852 	bl	800c924 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c880:	4b06      	ldr	r3, [pc, #24]	; (800c89c <prvIdleTask+0x28>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	2b01      	cmp	r3, #1
 800c886:	d9f9      	bls.n	800c87c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c888:	4b05      	ldr	r3, [pc, #20]	; (800c8a0 <prvIdleTask+0x2c>)
 800c88a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c88e:	601a      	str	r2, [r3, #0]
 800c890:	f3bf 8f4f 	dsb	sy
 800c894:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c898:	e7f0      	b.n	800c87c <prvIdleTask+0x8>
 800c89a:	bf00      	nop
 800c89c:	20000e98 	.word	0x20000e98
 800c8a0:	e000ed04 	.word	0xe000ed04

0800c8a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b082      	sub	sp, #8
 800c8a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	607b      	str	r3, [r7, #4]
 800c8ae:	e00c      	b.n	800c8ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c8b0:	687a      	ldr	r2, [r7, #4]
 800c8b2:	4613      	mov	r3, r2
 800c8b4:	009b      	lsls	r3, r3, #2
 800c8b6:	4413      	add	r3, r2
 800c8b8:	009b      	lsls	r3, r3, #2
 800c8ba:	4a12      	ldr	r2, [pc, #72]	; (800c904 <prvInitialiseTaskLists+0x60>)
 800c8bc:	4413      	add	r3, r2
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7fe fcac 	bl	800b21c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	607b      	str	r3, [r7, #4]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2b06      	cmp	r3, #6
 800c8ce:	d9ef      	bls.n	800c8b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c8d0:	480d      	ldr	r0, [pc, #52]	; (800c908 <prvInitialiseTaskLists+0x64>)
 800c8d2:	f7fe fca3 	bl	800b21c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c8d6:	480d      	ldr	r0, [pc, #52]	; (800c90c <prvInitialiseTaskLists+0x68>)
 800c8d8:	f7fe fca0 	bl	800b21c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c8dc:	480c      	ldr	r0, [pc, #48]	; (800c910 <prvInitialiseTaskLists+0x6c>)
 800c8de:	f7fe fc9d 	bl	800b21c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c8e2:	480c      	ldr	r0, [pc, #48]	; (800c914 <prvInitialiseTaskLists+0x70>)
 800c8e4:	f7fe fc9a 	bl	800b21c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c8e8:	480b      	ldr	r0, [pc, #44]	; (800c918 <prvInitialiseTaskLists+0x74>)
 800c8ea:	f7fe fc97 	bl	800b21c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c8ee:	4b0b      	ldr	r3, [pc, #44]	; (800c91c <prvInitialiseTaskLists+0x78>)
 800c8f0:	4a05      	ldr	r2, [pc, #20]	; (800c908 <prvInitialiseTaskLists+0x64>)
 800c8f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c8f4:	4b0a      	ldr	r3, [pc, #40]	; (800c920 <prvInitialiseTaskLists+0x7c>)
 800c8f6:	4a05      	ldr	r2, [pc, #20]	; (800c90c <prvInitialiseTaskLists+0x68>)
 800c8f8:	601a      	str	r2, [r3, #0]
}
 800c8fa:	bf00      	nop
 800c8fc:	3708      	adds	r7, #8
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
 800c902:	bf00      	nop
 800c904:	20000e98 	.word	0x20000e98
 800c908:	20000f24 	.word	0x20000f24
 800c90c:	20000f38 	.word	0x20000f38
 800c910:	20000f54 	.word	0x20000f54
 800c914:	20000f68 	.word	0x20000f68
 800c918:	20000f80 	.word	0x20000f80
 800c91c:	20000f4c 	.word	0x20000f4c
 800c920:	20000f50 	.word	0x20000f50

0800c924 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b082      	sub	sp, #8
 800c928:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c92a:	e019      	b.n	800c960 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c92c:	f000 fab6 	bl	800ce9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c930:	4b0f      	ldr	r3, [pc, #60]	; (800c970 <prvCheckTasksWaitingTermination+0x4c>)
 800c932:	68db      	ldr	r3, [r3, #12]
 800c934:	68db      	ldr	r3, [r3, #12]
 800c936:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	3304      	adds	r3, #4
 800c93c:	4618      	mov	r0, r3
 800c93e:	f7fe fcf7 	bl	800b330 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c942:	4b0c      	ldr	r3, [pc, #48]	; (800c974 <prvCheckTasksWaitingTermination+0x50>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	3b01      	subs	r3, #1
 800c948:	4a0a      	ldr	r2, [pc, #40]	; (800c974 <prvCheckTasksWaitingTermination+0x50>)
 800c94a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c94c:	4b0a      	ldr	r3, [pc, #40]	; (800c978 <prvCheckTasksWaitingTermination+0x54>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	3b01      	subs	r3, #1
 800c952:	4a09      	ldr	r2, [pc, #36]	; (800c978 <prvCheckTasksWaitingTermination+0x54>)
 800c954:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c956:	f000 facf 	bl	800cef8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f000 f80e 	bl	800c97c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c960:	4b05      	ldr	r3, [pc, #20]	; (800c978 <prvCheckTasksWaitingTermination+0x54>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d1e1      	bne.n	800c92c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c968:	bf00      	nop
 800c96a:	3708      	adds	r7, #8
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}
 800c970:	20000f68 	.word	0x20000f68
 800c974:	20000f94 	.word	0x20000f94
 800c978:	20000f7c 	.word	0x20000f7c

0800c97c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d108      	bne.n	800c9a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c992:	4618      	mov	r0, r3
 800c994:	f000 fc5e 	bl	800d254 <vPortFree>
				vPortFree( pxTCB );
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f000 fc5b 	bl	800d254 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c99e:	e017      	b.n	800c9d0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c9a6:	2b01      	cmp	r3, #1
 800c9a8:	d103      	bne.n	800c9b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f000 fc52 	bl	800d254 <vPortFree>
	}
 800c9b0:	e00e      	b.n	800c9d0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c9b8:	2b02      	cmp	r3, #2
 800c9ba:	d009      	beq.n	800c9d0 <prvDeleteTCB+0x54>
 800c9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c0:	f383 8811 	msr	BASEPRI, r3
 800c9c4:	f3bf 8f6f 	isb	sy
 800c9c8:	f3bf 8f4f 	dsb	sy
 800c9cc:	60fb      	str	r3, [r7, #12]
 800c9ce:	e7fe      	b.n	800c9ce <prvDeleteTCB+0x52>
	}
 800c9d0:	bf00      	nop
 800c9d2:	3710      	adds	r7, #16
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}

0800c9d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b083      	sub	sp, #12
 800c9dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c9de:	4b0c      	ldr	r3, [pc, #48]	; (800ca10 <prvResetNextTaskUnblockTime+0x38>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d104      	bne.n	800c9f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c9e8:	4b0a      	ldr	r3, [pc, #40]	; (800ca14 <prvResetNextTaskUnblockTime+0x3c>)
 800c9ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c9f0:	e008      	b.n	800ca04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9f2:	4b07      	ldr	r3, [pc, #28]	; (800ca10 <prvResetNextTaskUnblockTime+0x38>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	68db      	ldr	r3, [r3, #12]
 800c9f8:	68db      	ldr	r3, [r3, #12]
 800c9fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	685b      	ldr	r3, [r3, #4]
 800ca00:	4a04      	ldr	r2, [pc, #16]	; (800ca14 <prvResetNextTaskUnblockTime+0x3c>)
 800ca02:	6013      	str	r3, [r2, #0]
}
 800ca04:	bf00      	nop
 800ca06:	370c      	adds	r7, #12
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0e:	4770      	bx	lr
 800ca10:	20000f4c 	.word	0x20000f4c
 800ca14:	20000fb4 	.word	0x20000fb4

0800ca18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ca18:	b480      	push	{r7}
 800ca1a:	b083      	sub	sp, #12
 800ca1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ca1e:	4b0b      	ldr	r3, [pc, #44]	; (800ca4c <xTaskGetSchedulerState+0x34>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d102      	bne.n	800ca2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ca26:	2301      	movs	r3, #1
 800ca28:	607b      	str	r3, [r7, #4]
 800ca2a:	e008      	b.n	800ca3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca2c:	4b08      	ldr	r3, [pc, #32]	; (800ca50 <xTaskGetSchedulerState+0x38>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d102      	bne.n	800ca3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ca34:	2302      	movs	r3, #2
 800ca36:	607b      	str	r3, [r7, #4]
 800ca38:	e001      	b.n	800ca3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ca3e:	687b      	ldr	r3, [r7, #4]
	}
 800ca40:	4618      	mov	r0, r3
 800ca42:	370c      	adds	r7, #12
 800ca44:	46bd      	mov	sp, r7
 800ca46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4a:	4770      	bx	lr
 800ca4c:	20000fa0 	.word	0x20000fa0
 800ca50:	20000fbc 	.word	0x20000fbc

0800ca54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b086      	sub	sp, #24
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ca60:	2300      	movs	r3, #0
 800ca62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d06c      	beq.n	800cb44 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ca6a:	4b39      	ldr	r3, [pc, #228]	; (800cb50 <xTaskPriorityDisinherit+0xfc>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	693a      	ldr	r2, [r7, #16]
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d009      	beq.n	800ca88 <xTaskPriorityDisinherit+0x34>
 800ca74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca78:	f383 8811 	msr	BASEPRI, r3
 800ca7c:	f3bf 8f6f 	isb	sy
 800ca80:	f3bf 8f4f 	dsb	sy
 800ca84:	60fb      	str	r3, [r7, #12]
 800ca86:	e7fe      	b.n	800ca86 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800ca88:	693b      	ldr	r3, [r7, #16]
 800ca8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d109      	bne.n	800caa4 <xTaskPriorityDisinherit+0x50>
 800ca90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca94:	f383 8811 	msr	BASEPRI, r3
 800ca98:	f3bf 8f6f 	isb	sy
 800ca9c:	f3bf 8f4f 	dsb	sy
 800caa0:	60bb      	str	r3, [r7, #8]
 800caa2:	e7fe      	b.n	800caa2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800caa4:	693b      	ldr	r3, [r7, #16]
 800caa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800caa8:	1e5a      	subs	r2, r3, #1
 800caaa:	693b      	ldr	r3, [r7, #16]
 800caac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cab2:	693b      	ldr	r3, [r7, #16]
 800cab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d044      	beq.n	800cb44 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d140      	bne.n	800cb44 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	3304      	adds	r3, #4
 800cac6:	4618      	mov	r0, r3
 800cac8:	f7fe fc32 	bl	800b330 <uxListRemove>
 800cacc:	4603      	mov	r3, r0
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d115      	bne.n	800cafe <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cad2:	693b      	ldr	r3, [r7, #16]
 800cad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cad6:	491f      	ldr	r1, [pc, #124]	; (800cb54 <xTaskPriorityDisinherit+0x100>)
 800cad8:	4613      	mov	r3, r2
 800cada:	009b      	lsls	r3, r3, #2
 800cadc:	4413      	add	r3, r2
 800cade:	009b      	lsls	r3, r3, #2
 800cae0:	440b      	add	r3, r1
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d10a      	bne.n	800cafe <xTaskPriorityDisinherit+0xaa>
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caec:	2201      	movs	r2, #1
 800caee:	fa02 f303 	lsl.w	r3, r2, r3
 800caf2:	43da      	mvns	r2, r3
 800caf4:	4b18      	ldr	r3, [pc, #96]	; (800cb58 <xTaskPriorityDisinherit+0x104>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	4013      	ands	r3, r2
 800cafa:	4a17      	ldr	r2, [pc, #92]	; (800cb58 <xTaskPriorityDisinherit+0x104>)
 800cafc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb06:	693b      	ldr	r3, [r7, #16]
 800cb08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb0a:	f1c3 0207 	rsb	r2, r3, #7
 800cb0e:	693b      	ldr	r3, [r7, #16]
 800cb10:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb16:	2201      	movs	r2, #1
 800cb18:	409a      	lsls	r2, r3
 800cb1a:	4b0f      	ldr	r3, [pc, #60]	; (800cb58 <xTaskPriorityDisinherit+0x104>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	4313      	orrs	r3, r2
 800cb20:	4a0d      	ldr	r2, [pc, #52]	; (800cb58 <xTaskPriorityDisinherit+0x104>)
 800cb22:	6013      	str	r3, [r2, #0]
 800cb24:	693b      	ldr	r3, [r7, #16]
 800cb26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb28:	4613      	mov	r3, r2
 800cb2a:	009b      	lsls	r3, r3, #2
 800cb2c:	4413      	add	r3, r2
 800cb2e:	009b      	lsls	r3, r3, #2
 800cb30:	4a08      	ldr	r2, [pc, #32]	; (800cb54 <xTaskPriorityDisinherit+0x100>)
 800cb32:	441a      	add	r2, r3
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	3304      	adds	r3, #4
 800cb38:	4619      	mov	r1, r3
 800cb3a:	4610      	mov	r0, r2
 800cb3c:	f7fe fb9b 	bl	800b276 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cb40:	2301      	movs	r3, #1
 800cb42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cb44:	697b      	ldr	r3, [r7, #20]
	}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3718      	adds	r7, #24
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}
 800cb4e:	bf00      	nop
 800cb50:	20000e94 	.word	0x20000e94
 800cb54:	20000e98 	.word	0x20000e98
 800cb58:	20000f9c 	.word	0x20000f9c

0800cb5c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cb66:	4b29      	ldr	r3, [pc, #164]	; (800cc0c <prvAddCurrentTaskToDelayedList+0xb0>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb6c:	4b28      	ldr	r3, [pc, #160]	; (800cc10 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	3304      	adds	r3, #4
 800cb72:	4618      	mov	r0, r3
 800cb74:	f7fe fbdc 	bl	800b330 <uxListRemove>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d10b      	bne.n	800cb96 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800cb7e:	4b24      	ldr	r3, [pc, #144]	; (800cc10 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb84:	2201      	movs	r2, #1
 800cb86:	fa02 f303 	lsl.w	r3, r2, r3
 800cb8a:	43da      	mvns	r2, r3
 800cb8c:	4b21      	ldr	r3, [pc, #132]	; (800cc14 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	4013      	ands	r3, r2
 800cb92:	4a20      	ldr	r2, [pc, #128]	; (800cc14 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cb94:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb9c:	d10a      	bne.n	800cbb4 <prvAddCurrentTaskToDelayedList+0x58>
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d007      	beq.n	800cbb4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cba4:	4b1a      	ldr	r3, [pc, #104]	; (800cc10 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	3304      	adds	r3, #4
 800cbaa:	4619      	mov	r1, r3
 800cbac:	481a      	ldr	r0, [pc, #104]	; (800cc18 <prvAddCurrentTaskToDelayedList+0xbc>)
 800cbae:	f7fe fb62 	bl	800b276 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cbb2:	e026      	b.n	800cc02 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cbb4:	68fa      	ldr	r2, [r7, #12]
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	4413      	add	r3, r2
 800cbba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cbbc:	4b14      	ldr	r3, [pc, #80]	; (800cc10 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	68ba      	ldr	r2, [r7, #8]
 800cbc2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cbc4:	68ba      	ldr	r2, [r7, #8]
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d209      	bcs.n	800cbe0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbcc:	4b13      	ldr	r3, [pc, #76]	; (800cc1c <prvAddCurrentTaskToDelayedList+0xc0>)
 800cbce:	681a      	ldr	r2, [r3, #0]
 800cbd0:	4b0f      	ldr	r3, [pc, #60]	; (800cc10 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	3304      	adds	r3, #4
 800cbd6:	4619      	mov	r1, r3
 800cbd8:	4610      	mov	r0, r2
 800cbda:	f7fe fb70 	bl	800b2be <vListInsert>
}
 800cbde:	e010      	b.n	800cc02 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbe0:	4b0f      	ldr	r3, [pc, #60]	; (800cc20 <prvAddCurrentTaskToDelayedList+0xc4>)
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	4b0a      	ldr	r3, [pc, #40]	; (800cc10 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	3304      	adds	r3, #4
 800cbea:	4619      	mov	r1, r3
 800cbec:	4610      	mov	r0, r2
 800cbee:	f7fe fb66 	bl	800b2be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cbf2:	4b0c      	ldr	r3, [pc, #48]	; (800cc24 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	68ba      	ldr	r2, [r7, #8]
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d202      	bcs.n	800cc02 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cbfc:	4a09      	ldr	r2, [pc, #36]	; (800cc24 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	6013      	str	r3, [r2, #0]
}
 800cc02:	bf00      	nop
 800cc04:	3710      	adds	r7, #16
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	bf00      	nop
 800cc0c:	20000f98 	.word	0x20000f98
 800cc10:	20000e94 	.word	0x20000e94
 800cc14:	20000f9c 	.word	0x20000f9c
 800cc18:	20000f80 	.word	0x20000f80
 800cc1c:	20000f50 	.word	0x20000f50
 800cc20:	20000f4c 	.word	0x20000f4c
 800cc24:	20000fb4 	.word	0x20000fb4

0800cc28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cc28:	b480      	push	{r7}
 800cc2a:	b085      	sub	sp, #20
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	60f8      	str	r0, [r7, #12]
 800cc30:	60b9      	str	r1, [r7, #8]
 800cc32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	3b04      	subs	r3, #4
 800cc38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cc40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	3b04      	subs	r3, #4
 800cc46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	f023 0201 	bic.w	r2, r3, #1
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	3b04      	subs	r3, #4
 800cc56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cc58:	4a0c      	ldr	r2, [pc, #48]	; (800cc8c <pxPortInitialiseStack+0x64>)
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	3b14      	subs	r3, #20
 800cc62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cc64:	687a      	ldr	r2, [r7, #4]
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	3b04      	subs	r3, #4
 800cc6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f06f 0202 	mvn.w	r2, #2
 800cc76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	3b20      	subs	r3, #32
 800cc7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	3714      	adds	r7, #20
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr
 800cc8c:	0800cc91 	.word	0x0800cc91

0800cc90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cc90:	b480      	push	{r7}
 800cc92:	b085      	sub	sp, #20
 800cc94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cc96:	2300      	movs	r3, #0
 800cc98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cc9a:	4b11      	ldr	r3, [pc, #68]	; (800cce0 <prvTaskExitError+0x50>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cca2:	d009      	beq.n	800ccb8 <prvTaskExitError+0x28>
 800cca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca8:	f383 8811 	msr	BASEPRI, r3
 800ccac:	f3bf 8f6f 	isb	sy
 800ccb0:	f3bf 8f4f 	dsb	sy
 800ccb4:	60fb      	str	r3, [r7, #12]
 800ccb6:	e7fe      	b.n	800ccb6 <prvTaskExitError+0x26>
 800ccb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccbc:	f383 8811 	msr	BASEPRI, r3
 800ccc0:	f3bf 8f6f 	isb	sy
 800ccc4:	f3bf 8f4f 	dsb	sy
 800ccc8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ccca:	bf00      	nop
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d0fc      	beq.n	800cccc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ccd2:	bf00      	nop
 800ccd4:	3714      	adds	r7, #20
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccdc:	4770      	bx	lr
 800ccde:	bf00      	nop
 800cce0:	200000ac 	.word	0x200000ac
	...

0800ccf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ccf0:	4b07      	ldr	r3, [pc, #28]	; (800cd10 <pxCurrentTCBConst2>)
 800ccf2:	6819      	ldr	r1, [r3, #0]
 800ccf4:	6808      	ldr	r0, [r1, #0]
 800ccf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccfa:	f380 8809 	msr	PSP, r0
 800ccfe:	f3bf 8f6f 	isb	sy
 800cd02:	f04f 0000 	mov.w	r0, #0
 800cd06:	f380 8811 	msr	BASEPRI, r0
 800cd0a:	4770      	bx	lr
 800cd0c:	f3af 8000 	nop.w

0800cd10 <pxCurrentTCBConst2>:
 800cd10:	20000e94 	.word	0x20000e94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cd14:	bf00      	nop
 800cd16:	bf00      	nop

0800cd18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cd18:	4808      	ldr	r0, [pc, #32]	; (800cd3c <prvPortStartFirstTask+0x24>)
 800cd1a:	6800      	ldr	r0, [r0, #0]
 800cd1c:	6800      	ldr	r0, [r0, #0]
 800cd1e:	f380 8808 	msr	MSP, r0
 800cd22:	f04f 0000 	mov.w	r0, #0
 800cd26:	f380 8814 	msr	CONTROL, r0
 800cd2a:	b662      	cpsie	i
 800cd2c:	b661      	cpsie	f
 800cd2e:	f3bf 8f4f 	dsb	sy
 800cd32:	f3bf 8f6f 	isb	sy
 800cd36:	df00      	svc	0
 800cd38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cd3a:	bf00      	nop
 800cd3c:	e000ed08 	.word	0xe000ed08

0800cd40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b088      	sub	sp, #32
 800cd44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cd46:	4b4c      	ldr	r3, [pc, #304]	; (800ce78 <xPortStartScheduler+0x138>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	4a4c      	ldr	r2, [pc, #304]	; (800ce7c <xPortStartScheduler+0x13c>)
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d109      	bne.n	800cd64 <xPortStartScheduler+0x24>
 800cd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd54:	f383 8811 	msr	BASEPRI, r3
 800cd58:	f3bf 8f6f 	isb	sy
 800cd5c:	f3bf 8f4f 	dsb	sy
 800cd60:	61bb      	str	r3, [r7, #24]
 800cd62:	e7fe      	b.n	800cd62 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cd64:	4b44      	ldr	r3, [pc, #272]	; (800ce78 <xPortStartScheduler+0x138>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	4a45      	ldr	r2, [pc, #276]	; (800ce80 <xPortStartScheduler+0x140>)
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d109      	bne.n	800cd82 <xPortStartScheduler+0x42>
 800cd6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd72:	f383 8811 	msr	BASEPRI, r3
 800cd76:	f3bf 8f6f 	isb	sy
 800cd7a:	f3bf 8f4f 	dsb	sy
 800cd7e:	617b      	str	r3, [r7, #20]
 800cd80:	e7fe      	b.n	800cd80 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cd82:	4b40      	ldr	r3, [pc, #256]	; (800ce84 <xPortStartScheduler+0x144>)
 800cd84:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cd86:	69fb      	ldr	r3, [r7, #28]
 800cd88:	781b      	ldrb	r3, [r3, #0]
 800cd8a:	b2db      	uxtb	r3, r3
 800cd8c:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cd8e:	69fb      	ldr	r3, [r7, #28]
 800cd90:	22ff      	movs	r2, #255	; 0xff
 800cd92:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cd94:	69fb      	ldr	r3, [r7, #28]
 800cd96:	781b      	ldrb	r3, [r3, #0]
 800cd98:	b2db      	uxtb	r3, r3
 800cd9a:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cd9c:	79fb      	ldrb	r3, [r7, #7]
 800cd9e:	b2db      	uxtb	r3, r3
 800cda0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cda4:	b2da      	uxtb	r2, r3
 800cda6:	4b38      	ldr	r3, [pc, #224]	; (800ce88 <xPortStartScheduler+0x148>)
 800cda8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cdaa:	4b38      	ldr	r3, [pc, #224]	; (800ce8c <xPortStartScheduler+0x14c>)
 800cdac:	2207      	movs	r2, #7
 800cdae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cdb0:	e009      	b.n	800cdc6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800cdb2:	4b36      	ldr	r3, [pc, #216]	; (800ce8c <xPortStartScheduler+0x14c>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	3b01      	subs	r3, #1
 800cdb8:	4a34      	ldr	r2, [pc, #208]	; (800ce8c <xPortStartScheduler+0x14c>)
 800cdba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cdbc:	79fb      	ldrb	r3, [r7, #7]
 800cdbe:	b2db      	uxtb	r3, r3
 800cdc0:	005b      	lsls	r3, r3, #1
 800cdc2:	b2db      	uxtb	r3, r3
 800cdc4:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cdc6:	79fb      	ldrb	r3, [r7, #7]
 800cdc8:	b2db      	uxtb	r3, r3
 800cdca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdce:	2b80      	cmp	r3, #128	; 0x80
 800cdd0:	d0ef      	beq.n	800cdb2 <xPortStartScheduler+0x72>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800cdd2:	4b2e      	ldr	r3, [pc, #184]	; (800ce8c <xPortStartScheduler+0x14c>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f1c3 0307 	rsb	r3, r3, #7
 800cdda:	2b04      	cmp	r3, #4
 800cddc:	d009      	beq.n	800cdf2 <xPortStartScheduler+0xb2>
 800cdde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde2:	f383 8811 	msr	BASEPRI, r3
 800cde6:	f3bf 8f6f 	isb	sy
 800cdea:	f3bf 8f4f 	dsb	sy
 800cdee:	613b      	str	r3, [r7, #16]
 800cdf0:	e7fe      	b.n	800cdf0 <xPortStartScheduler+0xb0>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cdf2:	4b26      	ldr	r3, [pc, #152]	; (800ce8c <xPortStartScheduler+0x14c>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f1c3 0307 	rsb	r3, r3, #7
 800cdfa:	2b04      	cmp	r3, #4
 800cdfc:	d009      	beq.n	800ce12 <xPortStartScheduler+0xd2>
 800cdfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce02:	f383 8811 	msr	BASEPRI, r3
 800ce06:	f3bf 8f6f 	isb	sy
 800ce0a:	f3bf 8f4f 	dsb	sy
 800ce0e:	60fb      	str	r3, [r7, #12]
 800ce10:	e7fe      	b.n	800ce10 <xPortStartScheduler+0xd0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ce12:	4b1e      	ldr	r3, [pc, #120]	; (800ce8c <xPortStartScheduler+0x14c>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	021b      	lsls	r3, r3, #8
 800ce18:	4a1c      	ldr	r2, [pc, #112]	; (800ce8c <xPortStartScheduler+0x14c>)
 800ce1a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ce1c:	4b1b      	ldr	r3, [pc, #108]	; (800ce8c <xPortStartScheduler+0x14c>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ce24:	4a19      	ldr	r2, [pc, #100]	; (800ce8c <xPortStartScheduler+0x14c>)
 800ce26:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	b2da      	uxtb	r2, r3
 800ce2c:	69fb      	ldr	r3, [r7, #28]
 800ce2e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ce30:	4b17      	ldr	r3, [pc, #92]	; (800ce90 <xPortStartScheduler+0x150>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	4a16      	ldr	r2, [pc, #88]	; (800ce90 <xPortStartScheduler+0x150>)
 800ce36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ce3a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ce3c:	4b14      	ldr	r3, [pc, #80]	; (800ce90 <xPortStartScheduler+0x150>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4a13      	ldr	r2, [pc, #76]	; (800ce90 <xPortStartScheduler+0x150>)
 800ce42:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ce46:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ce48:	f000 f8d6 	bl	800cff8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ce4c:	4b11      	ldr	r3, [pc, #68]	; (800ce94 <xPortStartScheduler+0x154>)
 800ce4e:	2200      	movs	r2, #0
 800ce50:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ce52:	f000 f8f5 	bl	800d040 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ce56:	4b10      	ldr	r3, [pc, #64]	; (800ce98 <xPortStartScheduler+0x158>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	4a0f      	ldr	r2, [pc, #60]	; (800ce98 <xPortStartScheduler+0x158>)
 800ce5c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ce60:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ce62:	f7ff ff59 	bl	800cd18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ce66:	f7ff fb85 	bl	800c574 <vTaskSwitchContext>
	prvTaskExitError();
 800ce6a:	f7ff ff11 	bl	800cc90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ce6e:	2300      	movs	r3, #0
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3720      	adds	r7, #32
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	e000ed00 	.word	0xe000ed00
 800ce7c:	410fc271 	.word	0x410fc271
 800ce80:	410fc270 	.word	0x410fc270
 800ce84:	e000e400 	.word	0xe000e400
 800ce88:	20000fc8 	.word	0x20000fc8
 800ce8c:	20000fcc 	.word	0x20000fcc
 800ce90:	e000ed20 	.word	0xe000ed20
 800ce94:	200000ac 	.word	0x200000ac
 800ce98:	e000ef34 	.word	0xe000ef34

0800ce9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b083      	sub	sp, #12
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea6:	f383 8811 	msr	BASEPRI, r3
 800ceaa:	f3bf 8f6f 	isb	sy
 800ceae:	f3bf 8f4f 	dsb	sy
 800ceb2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ceb4:	4b0e      	ldr	r3, [pc, #56]	; (800cef0 <vPortEnterCritical+0x54>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	3301      	adds	r3, #1
 800ceba:	4a0d      	ldr	r2, [pc, #52]	; (800cef0 <vPortEnterCritical+0x54>)
 800cebc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cebe:	4b0c      	ldr	r3, [pc, #48]	; (800cef0 <vPortEnterCritical+0x54>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	2b01      	cmp	r3, #1
 800cec4:	d10e      	bne.n	800cee4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cec6:	4b0b      	ldr	r3, [pc, #44]	; (800cef4 <vPortEnterCritical+0x58>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	b2db      	uxtb	r3, r3
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d009      	beq.n	800cee4 <vPortEnterCritical+0x48>
 800ced0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced4:	f383 8811 	msr	BASEPRI, r3
 800ced8:	f3bf 8f6f 	isb	sy
 800cedc:	f3bf 8f4f 	dsb	sy
 800cee0:	603b      	str	r3, [r7, #0]
 800cee2:	e7fe      	b.n	800cee2 <vPortEnterCritical+0x46>
	}
}
 800cee4:	bf00      	nop
 800cee6:	370c      	adds	r7, #12
 800cee8:	46bd      	mov	sp, r7
 800ceea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceee:	4770      	bx	lr
 800cef0:	200000ac 	.word	0x200000ac
 800cef4:	e000ed04 	.word	0xe000ed04

0800cef8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cef8:	b480      	push	{r7}
 800cefa:	b083      	sub	sp, #12
 800cefc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cefe:	4b11      	ldr	r3, [pc, #68]	; (800cf44 <vPortExitCritical+0x4c>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d109      	bne.n	800cf1a <vPortExitCritical+0x22>
 800cf06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf0a:	f383 8811 	msr	BASEPRI, r3
 800cf0e:	f3bf 8f6f 	isb	sy
 800cf12:	f3bf 8f4f 	dsb	sy
 800cf16:	607b      	str	r3, [r7, #4]
 800cf18:	e7fe      	b.n	800cf18 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800cf1a:	4b0a      	ldr	r3, [pc, #40]	; (800cf44 <vPortExitCritical+0x4c>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	3b01      	subs	r3, #1
 800cf20:	4a08      	ldr	r2, [pc, #32]	; (800cf44 <vPortExitCritical+0x4c>)
 800cf22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cf24:	4b07      	ldr	r3, [pc, #28]	; (800cf44 <vPortExitCritical+0x4c>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d104      	bne.n	800cf36 <vPortExitCritical+0x3e>
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800cf36:	bf00      	nop
 800cf38:	370c      	adds	r7, #12
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf40:	4770      	bx	lr
 800cf42:	bf00      	nop
 800cf44:	200000ac 	.word	0x200000ac
	...

0800cf50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cf50:	f3ef 8009 	mrs	r0, PSP
 800cf54:	f3bf 8f6f 	isb	sy
 800cf58:	4b15      	ldr	r3, [pc, #84]	; (800cfb0 <pxCurrentTCBConst>)
 800cf5a:	681a      	ldr	r2, [r3, #0]
 800cf5c:	f01e 0f10 	tst.w	lr, #16
 800cf60:	bf08      	it	eq
 800cf62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cf66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf6a:	6010      	str	r0, [r2, #0]
 800cf6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cf70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cf74:	f380 8811 	msr	BASEPRI, r0
 800cf78:	f3bf 8f4f 	dsb	sy
 800cf7c:	f3bf 8f6f 	isb	sy
 800cf80:	f7ff faf8 	bl	800c574 <vTaskSwitchContext>
 800cf84:	f04f 0000 	mov.w	r0, #0
 800cf88:	f380 8811 	msr	BASEPRI, r0
 800cf8c:	bc09      	pop	{r0, r3}
 800cf8e:	6819      	ldr	r1, [r3, #0]
 800cf90:	6808      	ldr	r0, [r1, #0]
 800cf92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf96:	f01e 0f10 	tst.w	lr, #16
 800cf9a:	bf08      	it	eq
 800cf9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cfa0:	f380 8809 	msr	PSP, r0
 800cfa4:	f3bf 8f6f 	isb	sy
 800cfa8:	4770      	bx	lr
 800cfaa:	bf00      	nop
 800cfac:	f3af 8000 	nop.w

0800cfb0 <pxCurrentTCBConst>:
 800cfb0:	20000e94 	.word	0x20000e94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cfb4:	bf00      	nop
 800cfb6:	bf00      	nop

0800cfb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b082      	sub	sp, #8
 800cfbc:	af00      	add	r7, sp, #0
	__asm volatile
 800cfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc2:	f383 8811 	msr	BASEPRI, r3
 800cfc6:	f3bf 8f6f 	isb	sy
 800cfca:	f3bf 8f4f 	dsb	sy
 800cfce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cfd0:	f7ff fa18 	bl	800c404 <xTaskIncrementTick>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d003      	beq.n	800cfe2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cfda:	4b06      	ldr	r3, [pc, #24]	; (800cff4 <SysTick_Handler+0x3c>)
 800cfdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfe0:	601a      	str	r2, [r3, #0]
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800cfec:	bf00      	nop
 800cfee:	3708      	adds	r7, #8
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}
 800cff4:	e000ed04 	.word	0xe000ed04

0800cff8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cff8:	b480      	push	{r7}
 800cffa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cffc:	4b0b      	ldr	r3, [pc, #44]	; (800d02c <vPortSetupTimerInterrupt+0x34>)
 800cffe:	2200      	movs	r2, #0
 800d000:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d002:	4b0b      	ldr	r3, [pc, #44]	; (800d030 <vPortSetupTimerInterrupt+0x38>)
 800d004:	2200      	movs	r2, #0
 800d006:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d008:	4b0a      	ldr	r3, [pc, #40]	; (800d034 <vPortSetupTimerInterrupt+0x3c>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	4a0a      	ldr	r2, [pc, #40]	; (800d038 <vPortSetupTimerInterrupt+0x40>)
 800d00e:	fba2 2303 	umull	r2, r3, r2, r3
 800d012:	099b      	lsrs	r3, r3, #6
 800d014:	4a09      	ldr	r2, [pc, #36]	; (800d03c <vPortSetupTimerInterrupt+0x44>)
 800d016:	3b01      	subs	r3, #1
 800d018:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d01a:	4b04      	ldr	r3, [pc, #16]	; (800d02c <vPortSetupTimerInterrupt+0x34>)
 800d01c:	2207      	movs	r2, #7
 800d01e:	601a      	str	r2, [r3, #0]
}
 800d020:	bf00      	nop
 800d022:	46bd      	mov	sp, r7
 800d024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d028:	4770      	bx	lr
 800d02a:	bf00      	nop
 800d02c:	e000e010 	.word	0xe000e010
 800d030:	e000e018 	.word	0xe000e018
 800d034:	200000a0 	.word	0x200000a0
 800d038:	10624dd3 	.word	0x10624dd3
 800d03c:	e000e014 	.word	0xe000e014

0800d040 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d040:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d050 <vPortEnableVFP+0x10>
 800d044:	6801      	ldr	r1, [r0, #0]
 800d046:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d04a:	6001      	str	r1, [r0, #0]
 800d04c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d04e:	bf00      	nop
 800d050:	e000ed88 	.word	0xe000ed88

0800d054 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d054:	b480      	push	{r7}
 800d056:	b085      	sub	sp, #20
 800d058:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d05a:	f3ef 8305 	mrs	r3, IPSR
 800d05e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	2b0f      	cmp	r3, #15
 800d064:	d913      	bls.n	800d08e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d066:	4a16      	ldr	r2, [pc, #88]	; (800d0c0 <vPortValidateInterruptPriority+0x6c>)
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	4413      	add	r3, r2
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d070:	4b14      	ldr	r3, [pc, #80]	; (800d0c4 <vPortValidateInterruptPriority+0x70>)
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	7afa      	ldrb	r2, [r7, #11]
 800d076:	429a      	cmp	r2, r3
 800d078:	d209      	bcs.n	800d08e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800d07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d07e:	f383 8811 	msr	BASEPRI, r3
 800d082:	f3bf 8f6f 	isb	sy
 800d086:	f3bf 8f4f 	dsb	sy
 800d08a:	607b      	str	r3, [r7, #4]
 800d08c:	e7fe      	b.n	800d08c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d08e:	4b0e      	ldr	r3, [pc, #56]	; (800d0c8 <vPortValidateInterruptPriority+0x74>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d096:	4b0d      	ldr	r3, [pc, #52]	; (800d0cc <vPortValidateInterruptPriority+0x78>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	429a      	cmp	r2, r3
 800d09c:	d909      	bls.n	800d0b2 <vPortValidateInterruptPriority+0x5e>
 800d09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a2:	f383 8811 	msr	BASEPRI, r3
 800d0a6:	f3bf 8f6f 	isb	sy
 800d0aa:	f3bf 8f4f 	dsb	sy
 800d0ae:	603b      	str	r3, [r7, #0]
 800d0b0:	e7fe      	b.n	800d0b0 <vPortValidateInterruptPriority+0x5c>
	}
 800d0b2:	bf00      	nop
 800d0b4:	3714      	adds	r7, #20
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0bc:	4770      	bx	lr
 800d0be:	bf00      	nop
 800d0c0:	e000e3f0 	.word	0xe000e3f0
 800d0c4:	20000fc8 	.word	0x20000fc8
 800d0c8:	e000ed0c 	.word	0xe000ed0c
 800d0cc:	20000fcc 	.word	0x20000fcc

0800d0d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b08a      	sub	sp, #40	; 0x28
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d0dc:	f7ff f8e8 	bl	800c2b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d0e0:	4b57      	ldr	r3, [pc, #348]	; (800d240 <pvPortMalloc+0x170>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d101      	bne.n	800d0ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d0e8:	f000 f90c 	bl	800d304 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d0ec:	4b55      	ldr	r3, [pc, #340]	; (800d244 <pvPortMalloc+0x174>)
 800d0ee:	681a      	ldr	r2, [r3, #0]
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	4013      	ands	r3, r2
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	f040 808c 	bne.w	800d212 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d01c      	beq.n	800d13a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800d100:	2208      	movs	r2, #8
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	4413      	add	r3, r2
 800d106:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f003 0307 	and.w	r3, r3, #7
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d013      	beq.n	800d13a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f023 0307 	bic.w	r3, r3, #7
 800d118:	3308      	adds	r3, #8
 800d11a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f003 0307 	and.w	r3, r3, #7
 800d122:	2b00      	cmp	r3, #0
 800d124:	d009      	beq.n	800d13a <pvPortMalloc+0x6a>
 800d126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d12a:	f383 8811 	msr	BASEPRI, r3
 800d12e:	f3bf 8f6f 	isb	sy
 800d132:	f3bf 8f4f 	dsb	sy
 800d136:	617b      	str	r3, [r7, #20]
 800d138:	e7fe      	b.n	800d138 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d068      	beq.n	800d212 <pvPortMalloc+0x142>
 800d140:	4b41      	ldr	r3, [pc, #260]	; (800d248 <pvPortMalloc+0x178>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	687a      	ldr	r2, [r7, #4]
 800d146:	429a      	cmp	r2, r3
 800d148:	d863      	bhi.n	800d212 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d14a:	4b40      	ldr	r3, [pc, #256]	; (800d24c <pvPortMalloc+0x17c>)
 800d14c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d14e:	4b3f      	ldr	r3, [pc, #252]	; (800d24c <pvPortMalloc+0x17c>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d154:	e004      	b.n	800d160 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800d156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d158:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d162:	685b      	ldr	r3, [r3, #4]
 800d164:	687a      	ldr	r2, [r7, #4]
 800d166:	429a      	cmp	r2, r3
 800d168:	d903      	bls.n	800d172 <pvPortMalloc+0xa2>
 800d16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d1f1      	bne.n	800d156 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d172:	4b33      	ldr	r3, [pc, #204]	; (800d240 <pvPortMalloc+0x170>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d178:	429a      	cmp	r2, r3
 800d17a:	d04a      	beq.n	800d212 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d17c:	6a3b      	ldr	r3, [r7, #32]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	2208      	movs	r2, #8
 800d182:	4413      	add	r3, r2
 800d184:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d188:	681a      	ldr	r2, [r3, #0]
 800d18a:	6a3b      	ldr	r3, [r7, #32]
 800d18c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d190:	685a      	ldr	r2, [r3, #4]
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	1ad2      	subs	r2, r2, r3
 800d196:	2308      	movs	r3, #8
 800d198:	005b      	lsls	r3, r3, #1
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d91e      	bls.n	800d1dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d19e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	4413      	add	r3, r2
 800d1a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d1a6:	69bb      	ldr	r3, [r7, #24]
 800d1a8:	f003 0307 	and.w	r3, r3, #7
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d009      	beq.n	800d1c4 <pvPortMalloc+0xf4>
 800d1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b4:	f383 8811 	msr	BASEPRI, r3
 800d1b8:	f3bf 8f6f 	isb	sy
 800d1bc:	f3bf 8f4f 	dsb	sy
 800d1c0:	613b      	str	r3, [r7, #16]
 800d1c2:	e7fe      	b.n	800d1c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c6:	685a      	ldr	r2, [r3, #4]
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	1ad2      	subs	r2, r2, r3
 800d1cc:	69bb      	ldr	r3, [r7, #24]
 800d1ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d2:	687a      	ldr	r2, [r7, #4]
 800d1d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d1d6:	69b8      	ldr	r0, [r7, #24]
 800d1d8:	f000 f8f8 	bl	800d3cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d1dc:	4b1a      	ldr	r3, [pc, #104]	; (800d248 <pvPortMalloc+0x178>)
 800d1de:	681a      	ldr	r2, [r3, #0]
 800d1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e2:	685b      	ldr	r3, [r3, #4]
 800d1e4:	1ad3      	subs	r3, r2, r3
 800d1e6:	4a18      	ldr	r2, [pc, #96]	; (800d248 <pvPortMalloc+0x178>)
 800d1e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d1ea:	4b17      	ldr	r3, [pc, #92]	; (800d248 <pvPortMalloc+0x178>)
 800d1ec:	681a      	ldr	r2, [r3, #0]
 800d1ee:	4b18      	ldr	r3, [pc, #96]	; (800d250 <pvPortMalloc+0x180>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d203      	bcs.n	800d1fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d1f6:	4b14      	ldr	r3, [pc, #80]	; (800d248 <pvPortMalloc+0x178>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	4a15      	ldr	r2, [pc, #84]	; (800d250 <pvPortMalloc+0x180>)
 800d1fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d200:	685a      	ldr	r2, [r3, #4]
 800d202:	4b10      	ldr	r3, [pc, #64]	; (800d244 <pvPortMalloc+0x174>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	431a      	orrs	r2, r3
 800d208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20e:	2200      	movs	r2, #0
 800d210:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d212:	f7ff f85b 	bl	800c2cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d216:	69fb      	ldr	r3, [r7, #28]
 800d218:	f003 0307 	and.w	r3, r3, #7
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d009      	beq.n	800d234 <pvPortMalloc+0x164>
 800d220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d224:	f383 8811 	msr	BASEPRI, r3
 800d228:	f3bf 8f6f 	isb	sy
 800d22c:	f3bf 8f4f 	dsb	sy
 800d230:	60fb      	str	r3, [r7, #12]
 800d232:	e7fe      	b.n	800d232 <pvPortMalloc+0x162>
	return pvReturn;
 800d234:	69fb      	ldr	r3, [r7, #28]
}
 800d236:	4618      	mov	r0, r3
 800d238:	3728      	adds	r7, #40	; 0x28
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}
 800d23e:	bf00      	nop
 800d240:	20019678 	.word	0x20019678
 800d244:	20019684 	.word	0x20019684
 800d248:	2001967c 	.word	0x2001967c
 800d24c:	20019670 	.word	0x20019670
 800d250:	20019680 	.word	0x20019680

0800d254 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b086      	sub	sp, #24
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d046      	beq.n	800d2f4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d266:	2308      	movs	r3, #8
 800d268:	425b      	negs	r3, r3
 800d26a:	697a      	ldr	r2, [r7, #20]
 800d26c:	4413      	add	r3, r2
 800d26e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	685a      	ldr	r2, [r3, #4]
 800d278:	4b20      	ldr	r3, [pc, #128]	; (800d2fc <vPortFree+0xa8>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4013      	ands	r3, r2
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d109      	bne.n	800d296 <vPortFree+0x42>
 800d282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d286:	f383 8811 	msr	BASEPRI, r3
 800d28a:	f3bf 8f6f 	isb	sy
 800d28e:	f3bf 8f4f 	dsb	sy
 800d292:	60fb      	str	r3, [r7, #12]
 800d294:	e7fe      	b.n	800d294 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d009      	beq.n	800d2b2 <vPortFree+0x5e>
 800d29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a2:	f383 8811 	msr	BASEPRI, r3
 800d2a6:	f3bf 8f6f 	isb	sy
 800d2aa:	f3bf 8f4f 	dsb	sy
 800d2ae:	60bb      	str	r3, [r7, #8]
 800d2b0:	e7fe      	b.n	800d2b0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	685a      	ldr	r2, [r3, #4]
 800d2b6:	4b11      	ldr	r3, [pc, #68]	; (800d2fc <vPortFree+0xa8>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	4013      	ands	r3, r2
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d019      	beq.n	800d2f4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d115      	bne.n	800d2f4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d2c8:	693b      	ldr	r3, [r7, #16]
 800d2ca:	685a      	ldr	r2, [r3, #4]
 800d2cc:	4b0b      	ldr	r3, [pc, #44]	; (800d2fc <vPortFree+0xa8>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	43db      	mvns	r3, r3
 800d2d2:	401a      	ands	r2, r3
 800d2d4:	693b      	ldr	r3, [r7, #16]
 800d2d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d2d8:	f7fe ffea 	bl	800c2b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	685a      	ldr	r2, [r3, #4]
 800d2e0:	4b07      	ldr	r3, [pc, #28]	; (800d300 <vPortFree+0xac>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	4413      	add	r3, r2
 800d2e6:	4a06      	ldr	r2, [pc, #24]	; (800d300 <vPortFree+0xac>)
 800d2e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d2ea:	6938      	ldr	r0, [r7, #16]
 800d2ec:	f000 f86e 	bl	800d3cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d2f0:	f7fe ffec 	bl	800c2cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d2f4:	bf00      	nop
 800d2f6:	3718      	adds	r7, #24
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}
 800d2fc:	20019684 	.word	0x20019684
 800d300:	2001967c 	.word	0x2001967c

0800d304 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d304:	b480      	push	{r7}
 800d306:	b085      	sub	sp, #20
 800d308:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d30a:	4b29      	ldr	r3, [pc, #164]	; (800d3b0 <prvHeapInit+0xac>)
 800d30c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d30e:	4b29      	ldr	r3, [pc, #164]	; (800d3b4 <prvHeapInit+0xb0>)
 800d310:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	f003 0307 	and.w	r3, r3, #7
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d00c      	beq.n	800d336 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	3307      	adds	r3, #7
 800d320:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	f023 0307 	bic.w	r3, r3, #7
 800d328:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d32a:	68ba      	ldr	r2, [r7, #8]
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	1ad3      	subs	r3, r2, r3
 800d330:	4a20      	ldr	r2, [pc, #128]	; (800d3b4 <prvHeapInit+0xb0>)
 800d332:	4413      	add	r3, r2
 800d334:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d33a:	4a1f      	ldr	r2, [pc, #124]	; (800d3b8 <prvHeapInit+0xb4>)
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d340:	4b1d      	ldr	r3, [pc, #116]	; (800d3b8 <prvHeapInit+0xb4>)
 800d342:	2200      	movs	r2, #0
 800d344:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	68ba      	ldr	r2, [r7, #8]
 800d34a:	4413      	add	r3, r2
 800d34c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d34e:	2208      	movs	r2, #8
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	1a9b      	subs	r3, r3, r2
 800d354:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	f023 0307 	bic.w	r3, r3, #7
 800d35c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	4a16      	ldr	r2, [pc, #88]	; (800d3bc <prvHeapInit+0xb8>)
 800d362:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d364:	4b15      	ldr	r3, [pc, #84]	; (800d3bc <prvHeapInit+0xb8>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	2200      	movs	r2, #0
 800d36a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d36c:	4b13      	ldr	r3, [pc, #76]	; (800d3bc <prvHeapInit+0xb8>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	2200      	movs	r2, #0
 800d372:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	68fa      	ldr	r2, [r7, #12]
 800d37c:	1ad2      	subs	r2, r2, r3
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d382:	4b0e      	ldr	r3, [pc, #56]	; (800d3bc <prvHeapInit+0xb8>)
 800d384:	681a      	ldr	r2, [r3, #0]
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	685b      	ldr	r3, [r3, #4]
 800d38e:	4a0c      	ldr	r2, [pc, #48]	; (800d3c0 <prvHeapInit+0xbc>)
 800d390:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	685b      	ldr	r3, [r3, #4]
 800d396:	4a0b      	ldr	r2, [pc, #44]	; (800d3c4 <prvHeapInit+0xc0>)
 800d398:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d39a:	4b0b      	ldr	r3, [pc, #44]	; (800d3c8 <prvHeapInit+0xc4>)
 800d39c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d3a0:	601a      	str	r2, [r3, #0]
}
 800d3a2:	bf00      	nop
 800d3a4:	3714      	adds	r7, #20
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ac:	4770      	bx	lr
 800d3ae:	bf00      	nop
 800d3b0:	000186a0 	.word	0x000186a0
 800d3b4:	20000fd0 	.word	0x20000fd0
 800d3b8:	20019670 	.word	0x20019670
 800d3bc:	20019678 	.word	0x20019678
 800d3c0:	20019680 	.word	0x20019680
 800d3c4:	2001967c 	.word	0x2001967c
 800d3c8:	20019684 	.word	0x20019684

0800d3cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	b085      	sub	sp, #20
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d3d4:	4b28      	ldr	r3, [pc, #160]	; (800d478 <prvInsertBlockIntoFreeList+0xac>)
 800d3d6:	60fb      	str	r3, [r7, #12]
 800d3d8:	e002      	b.n	800d3e0 <prvInsertBlockIntoFreeList+0x14>
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	60fb      	str	r3, [r7, #12]
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	687a      	ldr	r2, [r7, #4]
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d8f7      	bhi.n	800d3da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	685b      	ldr	r3, [r3, #4]
 800d3f2:	68ba      	ldr	r2, [r7, #8]
 800d3f4:	4413      	add	r3, r2
 800d3f6:	687a      	ldr	r2, [r7, #4]
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	d108      	bne.n	800d40e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	685a      	ldr	r2, [r3, #4]
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	685b      	ldr	r3, [r3, #4]
 800d404:	441a      	add	r2, r3
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	68ba      	ldr	r2, [r7, #8]
 800d418:	441a      	add	r2, r3
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	429a      	cmp	r2, r3
 800d420:	d118      	bne.n	800d454 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	681a      	ldr	r2, [r3, #0]
 800d426:	4b15      	ldr	r3, [pc, #84]	; (800d47c <prvInsertBlockIntoFreeList+0xb0>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d00d      	beq.n	800d44a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	685a      	ldr	r2, [r3, #4]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	685b      	ldr	r3, [r3, #4]
 800d438:	441a      	add	r2, r3
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	681a      	ldr	r2, [r3, #0]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	601a      	str	r2, [r3, #0]
 800d448:	e008      	b.n	800d45c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d44a:	4b0c      	ldr	r3, [pc, #48]	; (800d47c <prvInsertBlockIntoFreeList+0xb0>)
 800d44c:	681a      	ldr	r2, [r3, #0]
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	601a      	str	r2, [r3, #0]
 800d452:	e003      	b.n	800d45c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	681a      	ldr	r2, [r3, #0]
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d45c:	68fa      	ldr	r2, [r7, #12]
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	429a      	cmp	r2, r3
 800d462:	d002      	beq.n	800d46a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	687a      	ldr	r2, [r7, #4]
 800d468:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d46a:	bf00      	nop
 800d46c:	3714      	adds	r7, #20
 800d46e:	46bd      	mov	sp, r7
 800d470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d474:	4770      	bx	lr
 800d476:	bf00      	nop
 800d478:	20019670 	.word	0x20019670
 800d47c:	20019678 	.word	0x20019678

0800d480 <_ZdlPvj>:
 800d480:	f000 b800 	b.w	800d484 <_ZdlPv>

0800d484 <_ZdlPv>:
 800d484:	f000 bb56 	b.w	800db34 <free>

0800d488 <atanf>:
 800d488:	b538      	push	{r3, r4, r5, lr}
 800d48a:	ee10 5a10 	vmov	r5, s0
 800d48e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800d492:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800d496:	eef0 7a40 	vmov.f32	s15, s0
 800d49a:	db10      	blt.n	800d4be <atanf+0x36>
 800d49c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800d4a0:	dd04      	ble.n	800d4ac <atanf+0x24>
 800d4a2:	ee70 7a00 	vadd.f32	s15, s0, s0
 800d4a6:	eeb0 0a67 	vmov.f32	s0, s15
 800d4aa:	bd38      	pop	{r3, r4, r5, pc}
 800d4ac:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800d5e4 <atanf+0x15c>
 800d4b0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800d5e8 <atanf+0x160>
 800d4b4:	2d00      	cmp	r5, #0
 800d4b6:	bfd8      	it	le
 800d4b8:	eef0 7a47 	vmovle.f32	s15, s14
 800d4bc:	e7f3      	b.n	800d4a6 <atanf+0x1e>
 800d4be:	4b4b      	ldr	r3, [pc, #300]	; (800d5ec <atanf+0x164>)
 800d4c0:	429c      	cmp	r4, r3
 800d4c2:	dc10      	bgt.n	800d4e6 <atanf+0x5e>
 800d4c4:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800d4c8:	da0a      	bge.n	800d4e0 <atanf+0x58>
 800d4ca:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800d5f0 <atanf+0x168>
 800d4ce:	ee30 7a07 	vadd.f32	s14, s0, s14
 800d4d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4d6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d4da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4de:	dce2      	bgt.n	800d4a6 <atanf+0x1e>
 800d4e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d4e4:	e013      	b.n	800d50e <atanf+0x86>
 800d4e6:	f000 f8a3 	bl	800d630 <fabsf>
 800d4ea:	4b42      	ldr	r3, [pc, #264]	; (800d5f4 <atanf+0x16c>)
 800d4ec:	429c      	cmp	r4, r3
 800d4ee:	dc4f      	bgt.n	800d590 <atanf+0x108>
 800d4f0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800d4f4:	429c      	cmp	r4, r3
 800d4f6:	dc41      	bgt.n	800d57c <atanf+0xf4>
 800d4f8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800d4fc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d500:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d504:	2300      	movs	r3, #0
 800d506:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d50a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d50e:	1c5a      	adds	r2, r3, #1
 800d510:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800d514:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800d5f8 <atanf+0x170>
 800d518:	eddf 5a38 	vldr	s11, [pc, #224]	; 800d5fc <atanf+0x174>
 800d51c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800d600 <atanf+0x178>
 800d520:	ee66 6a06 	vmul.f32	s13, s12, s12
 800d524:	eee6 5a87 	vfma.f32	s11, s13, s14
 800d528:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800d604 <atanf+0x17c>
 800d52c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d530:	eddf 5a35 	vldr	s11, [pc, #212]	; 800d608 <atanf+0x180>
 800d534:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d538:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800d60c <atanf+0x184>
 800d53c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d540:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d610 <atanf+0x188>
 800d544:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d548:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800d614 <atanf+0x18c>
 800d54c:	eea6 5a87 	vfma.f32	s10, s13, s14
 800d550:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800d618 <atanf+0x190>
 800d554:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d558:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800d61c <atanf+0x194>
 800d55c:	eea7 5a26 	vfma.f32	s10, s14, s13
 800d560:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800d620 <atanf+0x198>
 800d564:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d568:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d56c:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d570:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d574:	d121      	bne.n	800d5ba <atanf+0x132>
 800d576:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d57a:	e794      	b.n	800d4a6 <atanf+0x1e>
 800d57c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d580:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d584:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d588:	2301      	movs	r3, #1
 800d58a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d58e:	e7be      	b.n	800d50e <atanf+0x86>
 800d590:	4b24      	ldr	r3, [pc, #144]	; (800d624 <atanf+0x19c>)
 800d592:	429c      	cmp	r4, r3
 800d594:	dc0b      	bgt.n	800d5ae <atanf+0x126>
 800d596:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800d59a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d59e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d5a2:	2302      	movs	r3, #2
 800d5a4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d5a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d5ac:	e7af      	b.n	800d50e <atanf+0x86>
 800d5ae:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d5b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d5b6:	2303      	movs	r3, #3
 800d5b8:	e7a9      	b.n	800d50e <atanf+0x86>
 800d5ba:	4a1b      	ldr	r2, [pc, #108]	; (800d628 <atanf+0x1a0>)
 800d5bc:	491b      	ldr	r1, [pc, #108]	; (800d62c <atanf+0x1a4>)
 800d5be:	009b      	lsls	r3, r3, #2
 800d5c0:	441a      	add	r2, r3
 800d5c2:	440b      	add	r3, r1
 800d5c4:	edd3 6a00 	vldr	s13, [r3]
 800d5c8:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d5cc:	2d00      	cmp	r5, #0
 800d5ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d5d2:	ed92 7a00 	vldr	s14, [r2]
 800d5d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d5da:	bfb8      	it	lt
 800d5dc:	eef1 7a67 	vneglt.f32	s15, s15
 800d5e0:	e761      	b.n	800d4a6 <atanf+0x1e>
 800d5e2:	bf00      	nop
 800d5e4:	bfc90fdb 	.word	0xbfc90fdb
 800d5e8:	3fc90fdb 	.word	0x3fc90fdb
 800d5ec:	3edfffff 	.word	0x3edfffff
 800d5f0:	7149f2ca 	.word	0x7149f2ca
 800d5f4:	3f97ffff 	.word	0x3f97ffff
 800d5f8:	3c8569d7 	.word	0x3c8569d7
 800d5fc:	3d4bda59 	.word	0x3d4bda59
 800d600:	bd6ef16b 	.word	0xbd6ef16b
 800d604:	3d886b35 	.word	0x3d886b35
 800d608:	3dba2e6e 	.word	0x3dba2e6e
 800d60c:	3e124925 	.word	0x3e124925
 800d610:	3eaaaaab 	.word	0x3eaaaaab
 800d614:	bd15a221 	.word	0xbd15a221
 800d618:	bd9d8795 	.word	0xbd9d8795
 800d61c:	bde38e38 	.word	0xbde38e38
 800d620:	be4ccccd 	.word	0xbe4ccccd
 800d624:	401bffff 	.word	0x401bffff
 800d628:	0800dd90 	.word	0x0800dd90
 800d62c:	0800dda0 	.word	0x0800dda0

0800d630 <fabsf>:
 800d630:	ee10 3a10 	vmov	r3, s0
 800d634:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d638:	ee00 3a10 	vmov	s0, r3
 800d63c:	4770      	bx	lr
	...

0800d640 <asinf>:
 800d640:	b510      	push	{r4, lr}
 800d642:	ed2d 8b02 	vpush	{d8}
 800d646:	4c27      	ldr	r4, [pc, #156]	; (800d6e4 <asinf+0xa4>)
 800d648:	b08a      	sub	sp, #40	; 0x28
 800d64a:	eeb0 8a40 	vmov.f32	s16, s0
 800d64e:	f000 f8a1 	bl	800d794 <__ieee754_asinf>
 800d652:	f994 3000 	ldrsb.w	r3, [r4]
 800d656:	3301      	adds	r3, #1
 800d658:	eef0 8a40 	vmov.f32	s17, s0
 800d65c:	d03c      	beq.n	800d6d8 <asinf+0x98>
 800d65e:	eeb4 8a48 	vcmp.f32	s16, s16
 800d662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d666:	d637      	bvs.n	800d6d8 <asinf+0x98>
 800d668:	eeb0 0a48 	vmov.f32	s0, s16
 800d66c:	f7ff ffe0 	bl	800d630 <fabsf>
 800d670:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d674:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800d678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d67c:	dd2c      	ble.n	800d6d8 <asinf+0x98>
 800d67e:	2301      	movs	r3, #1
 800d680:	9300      	str	r3, [sp, #0]
 800d682:	4b19      	ldr	r3, [pc, #100]	; (800d6e8 <asinf+0xa8>)
 800d684:	9301      	str	r3, [sp, #4]
 800d686:	ee18 0a10 	vmov	r0, s16
 800d68a:	2300      	movs	r3, #0
 800d68c:	9308      	str	r3, [sp, #32]
 800d68e:	f7f2 ff0b 	bl	80004a8 <__aeabi_f2d>
 800d692:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d696:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d69a:	4814      	ldr	r0, [pc, #80]	; (800d6ec <asinf+0xac>)
 800d69c:	f000 fa18 	bl	800dad0 <nan>
 800d6a0:	f994 3000 	ldrsb.w	r3, [r4]
 800d6a4:	2b02      	cmp	r3, #2
 800d6a6:	ed8d 0b06 	vstr	d0, [sp, #24]
 800d6aa:	d104      	bne.n	800d6b6 <asinf+0x76>
 800d6ac:	f000 fa18 	bl	800dae0 <__errno>
 800d6b0:	2321      	movs	r3, #33	; 0x21
 800d6b2:	6003      	str	r3, [r0, #0]
 800d6b4:	e004      	b.n	800d6c0 <asinf+0x80>
 800d6b6:	4668      	mov	r0, sp
 800d6b8:	f000 fa05 	bl	800dac6 <matherr>
 800d6bc:	2800      	cmp	r0, #0
 800d6be:	d0f5      	beq.n	800d6ac <asinf+0x6c>
 800d6c0:	9b08      	ldr	r3, [sp, #32]
 800d6c2:	b11b      	cbz	r3, 800d6cc <asinf+0x8c>
 800d6c4:	f000 fa0c 	bl	800dae0 <__errno>
 800d6c8:	9b08      	ldr	r3, [sp, #32]
 800d6ca:	6003      	str	r3, [r0, #0]
 800d6cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d6d0:	f7f3 fa24 	bl	8000b1c <__aeabi_d2f>
 800d6d4:	ee08 0a90 	vmov	s17, r0
 800d6d8:	eeb0 0a68 	vmov.f32	s0, s17
 800d6dc:	b00a      	add	sp, #40	; 0x28
 800d6de:	ecbd 8b02 	vpop	{d8}
 800d6e2:	bd10      	pop	{r4, pc}
 800d6e4:	200000b0 	.word	0x200000b0
 800d6e8:	0800ddb0 	.word	0x0800ddb0
 800d6ec:	0800ddb5 	.word	0x0800ddb5

0800d6f0 <atan2f>:
 800d6f0:	f000 b938 	b.w	800d964 <__ieee754_atan2f>

0800d6f4 <sqrtf>:
 800d6f4:	b510      	push	{r4, lr}
 800d6f6:	ed2d 8b02 	vpush	{d8}
 800d6fa:	b08a      	sub	sp, #40	; 0x28
 800d6fc:	eeb0 8a40 	vmov.f32	s16, s0
 800d700:	f000 f9de 	bl	800dac0 <__ieee754_sqrtf>
 800d704:	4b21      	ldr	r3, [pc, #132]	; (800d78c <sqrtf+0x98>)
 800d706:	f993 4000 	ldrsb.w	r4, [r3]
 800d70a:	1c63      	adds	r3, r4, #1
 800d70c:	d02c      	beq.n	800d768 <sqrtf+0x74>
 800d70e:	eeb4 8a48 	vcmp.f32	s16, s16
 800d712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d716:	d627      	bvs.n	800d768 <sqrtf+0x74>
 800d718:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d71c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d720:	d522      	bpl.n	800d768 <sqrtf+0x74>
 800d722:	2301      	movs	r3, #1
 800d724:	9300      	str	r3, [sp, #0]
 800d726:	4b1a      	ldr	r3, [pc, #104]	; (800d790 <sqrtf+0x9c>)
 800d728:	9301      	str	r3, [sp, #4]
 800d72a:	ee18 0a10 	vmov	r0, s16
 800d72e:	2300      	movs	r3, #0
 800d730:	9308      	str	r3, [sp, #32]
 800d732:	f7f2 feb9 	bl	80004a8 <__aeabi_f2d>
 800d736:	2200      	movs	r2, #0
 800d738:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d73c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d740:	2300      	movs	r3, #0
 800d742:	b9ac      	cbnz	r4, 800d770 <sqrtf+0x7c>
 800d744:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d748:	4668      	mov	r0, sp
 800d74a:	f000 f9bc 	bl	800dac6 <matherr>
 800d74e:	b1b8      	cbz	r0, 800d780 <sqrtf+0x8c>
 800d750:	9b08      	ldr	r3, [sp, #32]
 800d752:	b11b      	cbz	r3, 800d75c <sqrtf+0x68>
 800d754:	f000 f9c4 	bl	800dae0 <__errno>
 800d758:	9b08      	ldr	r3, [sp, #32]
 800d75a:	6003      	str	r3, [r0, #0]
 800d75c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d760:	f7f3 f9dc 	bl	8000b1c <__aeabi_d2f>
 800d764:	ee00 0a10 	vmov	s0, r0
 800d768:	b00a      	add	sp, #40	; 0x28
 800d76a:	ecbd 8b02 	vpop	{d8}
 800d76e:	bd10      	pop	{r4, pc}
 800d770:	4610      	mov	r0, r2
 800d772:	4619      	mov	r1, r3
 800d774:	f7f3 f81a 	bl	80007ac <__aeabi_ddiv>
 800d778:	2c02      	cmp	r4, #2
 800d77a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d77e:	d1e3      	bne.n	800d748 <sqrtf+0x54>
 800d780:	f000 f9ae 	bl	800dae0 <__errno>
 800d784:	2321      	movs	r3, #33	; 0x21
 800d786:	6003      	str	r3, [r0, #0]
 800d788:	e7e2      	b.n	800d750 <sqrtf+0x5c>
 800d78a:	bf00      	nop
 800d78c:	200000b0 	.word	0x200000b0
 800d790:	0800ddb6 	.word	0x0800ddb6

0800d794 <__ieee754_asinf>:
 800d794:	b538      	push	{r3, r4, r5, lr}
 800d796:	ee10 5a10 	vmov	r5, s0
 800d79a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800d79e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800d7a2:	ed2d 8b04 	vpush	{d8-d9}
 800d7a6:	d10c      	bne.n	800d7c2 <__ieee754_asinf+0x2e>
 800d7a8:	eddf 7a5e 	vldr	s15, [pc, #376]	; 800d924 <__ieee754_asinf+0x190>
 800d7ac:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800d928 <__ieee754_asinf+0x194>
 800d7b0:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d7b4:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d7b8:	eeb0 0a67 	vmov.f32	s0, s15
 800d7bc:	ecbd 8b04 	vpop	{d8-d9}
 800d7c0:	bd38      	pop	{r3, r4, r5, pc}
 800d7c2:	dd04      	ble.n	800d7ce <__ieee754_asinf+0x3a>
 800d7c4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d7c8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800d7cc:	e7f6      	b.n	800d7bc <__ieee754_asinf+0x28>
 800d7ce:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800d7d2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800d7d6:	da0b      	bge.n	800d7f0 <__ieee754_asinf+0x5c>
 800d7d8:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800d7dc:	da52      	bge.n	800d884 <__ieee754_asinf+0xf0>
 800d7de:	eddf 7a53 	vldr	s15, [pc, #332]	; 800d92c <__ieee754_asinf+0x198>
 800d7e2:	ee70 7a27 	vadd.f32	s15, s0, s15
 800d7e6:	eef4 7ae8 	vcmpe.f32	s15, s17
 800d7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7ee:	dce5      	bgt.n	800d7bc <__ieee754_asinf+0x28>
 800d7f0:	f7ff ff1e 	bl	800d630 <fabsf>
 800d7f4:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800d7f8:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800d7fc:	ee20 8a08 	vmul.f32	s16, s0, s16
 800d800:	eddf 7a4b 	vldr	s15, [pc, #300]	; 800d930 <__ieee754_asinf+0x19c>
 800d804:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800d934 <__ieee754_asinf+0x1a0>
 800d808:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 800d938 <__ieee754_asinf+0x1a4>
 800d80c:	eea8 7a27 	vfma.f32	s14, s16, s15
 800d810:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800d93c <__ieee754_asinf+0x1a8>
 800d814:	eee7 7a08 	vfma.f32	s15, s14, s16
 800d818:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800d940 <__ieee754_asinf+0x1ac>
 800d81c:	eea7 7a88 	vfma.f32	s14, s15, s16
 800d820:	eddf 7a48 	vldr	s15, [pc, #288]	; 800d944 <__ieee754_asinf+0x1b0>
 800d824:	eee7 7a08 	vfma.f32	s15, s14, s16
 800d828:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800d948 <__ieee754_asinf+0x1b4>
 800d82c:	eea7 9a88 	vfma.f32	s18, s15, s16
 800d830:	eddf 7a46 	vldr	s15, [pc, #280]	; 800d94c <__ieee754_asinf+0x1b8>
 800d834:	eee8 7a07 	vfma.f32	s15, s16, s14
 800d838:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800d950 <__ieee754_asinf+0x1bc>
 800d83c:	eea7 7a88 	vfma.f32	s14, s15, s16
 800d840:	eddf 7a44 	vldr	s15, [pc, #272]	; 800d954 <__ieee754_asinf+0x1c0>
 800d844:	eee7 7a08 	vfma.f32	s15, s14, s16
 800d848:	eeb0 0a48 	vmov.f32	s0, s16
 800d84c:	eee7 8a88 	vfma.f32	s17, s15, s16
 800d850:	f000 f936 	bl	800dac0 <__ieee754_sqrtf>
 800d854:	4b40      	ldr	r3, [pc, #256]	; (800d958 <__ieee754_asinf+0x1c4>)
 800d856:	ee29 9a08 	vmul.f32	s18, s18, s16
 800d85a:	429c      	cmp	r4, r3
 800d85c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800d860:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800d864:	dd3d      	ble.n	800d8e2 <__ieee754_asinf+0x14e>
 800d866:	eea0 0a06 	vfma.f32	s0, s0, s12
 800d86a:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800d95c <__ieee754_asinf+0x1c8>
 800d86e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d872:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800d928 <__ieee754_asinf+0x194>
 800d876:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d87a:	2d00      	cmp	r5, #0
 800d87c:	bfd8      	it	le
 800d87e:	eeb1 0a40 	vnegle.f32	s0, s0
 800d882:	e79b      	b.n	800d7bc <__ieee754_asinf+0x28>
 800d884:	ee60 7a00 	vmul.f32	s15, s0, s0
 800d888:	eddf 6a29 	vldr	s13, [pc, #164]	; 800d930 <__ieee754_asinf+0x19c>
 800d88c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800d934 <__ieee754_asinf+0x1a0>
 800d890:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800d948 <__ieee754_asinf+0x1b4>
 800d894:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800d898:	eddf 6a28 	vldr	s13, [pc, #160]	; 800d93c <__ieee754_asinf+0x1a8>
 800d89c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d8a0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800d940 <__ieee754_asinf+0x1ac>
 800d8a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d8a8:	eddf 6a26 	vldr	s13, [pc, #152]	; 800d944 <__ieee754_asinf+0x1b0>
 800d8ac:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d8b0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800d938 <__ieee754_asinf+0x1a4>
 800d8b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d8b8:	eddf 6a24 	vldr	s13, [pc, #144]	; 800d94c <__ieee754_asinf+0x1b8>
 800d8bc:	eee7 6a86 	vfma.f32	s13, s15, s12
 800d8c0:	ed9f 6a23 	vldr	s12, [pc, #140]	; 800d950 <__ieee754_asinf+0x1bc>
 800d8c4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800d8c8:	eddf 6a22 	vldr	s13, [pc, #136]	; 800d954 <__ieee754_asinf+0x1c0>
 800d8cc:	eee6 6a27 	vfma.f32	s13, s12, s15
 800d8d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d8d4:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800d8d8:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800d8dc:	eea0 0a27 	vfma.f32	s0, s0, s15
 800d8e0:	e76c      	b.n	800d7bc <__ieee754_asinf+0x28>
 800d8e2:	ee10 3a10 	vmov	r3, s0
 800d8e6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d8ea:	f023 030f 	bic.w	r3, r3, #15
 800d8ee:	ee07 3a90 	vmov	s15, r3
 800d8f2:	eef1 6a67 	vneg.f32	s13, s15
 800d8f6:	eea6 8aa7 	vfma.f32	s16, s13, s15
 800d8fa:	ee70 5a00 	vadd.f32	s11, s0, s0
 800d8fe:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d902:	eddf 7a08 	vldr	s15, [pc, #32]	; 800d924 <__ieee754_asinf+0x190>
 800d906:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800d90a:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800d960 <__ieee754_asinf+0x1cc>
 800d90e:	eee5 7a47 	vfms.f32	s15, s10, s14
 800d912:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800d916:	eeb0 6a40 	vmov.f32	s12, s0
 800d91a:	eea6 6a87 	vfma.f32	s12, s13, s14
 800d91e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d922:	e7a8      	b.n	800d876 <__ieee754_asinf+0xe2>
 800d924:	b33bbd2e 	.word	0xb33bbd2e
 800d928:	3fc90fdb 	.word	0x3fc90fdb
 800d92c:	7149f2ca 	.word	0x7149f2ca
 800d930:	3811ef08 	.word	0x3811ef08
 800d934:	3a4f7f04 	.word	0x3a4f7f04
 800d938:	3e2aaaab 	.word	0x3e2aaaab
 800d93c:	bd241146 	.word	0xbd241146
 800d940:	3e4e0aa8 	.word	0x3e4e0aa8
 800d944:	bea6b090 	.word	0xbea6b090
 800d948:	3d9dc62e 	.word	0x3d9dc62e
 800d94c:	bf303361 	.word	0xbf303361
 800d950:	4001572d 	.word	0x4001572d
 800d954:	c019d139 	.word	0xc019d139
 800d958:	3f799999 	.word	0x3f799999
 800d95c:	333bbd2e 	.word	0x333bbd2e
 800d960:	3f490fdb 	.word	0x3f490fdb

0800d964 <__ieee754_atan2f>:
 800d964:	ee10 2a90 	vmov	r2, s1
 800d968:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800d96c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d970:	b510      	push	{r4, lr}
 800d972:	eef0 7a40 	vmov.f32	s15, s0
 800d976:	dc06      	bgt.n	800d986 <__ieee754_atan2f+0x22>
 800d978:	ee10 0a10 	vmov	r0, s0
 800d97c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800d980:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d984:	dd04      	ble.n	800d990 <__ieee754_atan2f+0x2c>
 800d986:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800d98a:	eeb0 0a67 	vmov.f32	s0, s15
 800d98e:	bd10      	pop	{r4, pc}
 800d990:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800d994:	d103      	bne.n	800d99e <__ieee754_atan2f+0x3a>
 800d996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d99a:	f7ff bd75 	b.w	800d488 <atanf>
 800d99e:	1794      	asrs	r4, r2, #30
 800d9a0:	f004 0402 	and.w	r4, r4, #2
 800d9a4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800d9a8:	b943      	cbnz	r3, 800d9bc <__ieee754_atan2f+0x58>
 800d9aa:	2c02      	cmp	r4, #2
 800d9ac:	d06e      	beq.n	800da8c <__ieee754_atan2f+0x128>
 800d9ae:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800da94 <__ieee754_atan2f+0x130>
 800d9b2:	2c03      	cmp	r4, #3
 800d9b4:	bf08      	it	eq
 800d9b6:	eef0 7a47 	vmoveq.f32	s15, s14
 800d9ba:	e7e6      	b.n	800d98a <__ieee754_atan2f+0x26>
 800d9bc:	b941      	cbnz	r1, 800d9d0 <__ieee754_atan2f+0x6c>
 800d9be:	eddf 7a36 	vldr	s15, [pc, #216]	; 800da98 <__ieee754_atan2f+0x134>
 800d9c2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800da9c <__ieee754_atan2f+0x138>
 800d9c6:	2800      	cmp	r0, #0
 800d9c8:	bfb8      	it	lt
 800d9ca:	eef0 7a47 	vmovlt.f32	s15, s14
 800d9ce:	e7dc      	b.n	800d98a <__ieee754_atan2f+0x26>
 800d9d0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d9d4:	d122      	bne.n	800da1c <__ieee754_atan2f+0xb8>
 800d9d6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d9da:	d112      	bne.n	800da02 <__ieee754_atan2f+0x9e>
 800d9dc:	2c02      	cmp	r4, #2
 800d9de:	d00a      	beq.n	800d9f6 <__ieee754_atan2f+0x92>
 800d9e0:	2c03      	cmp	r4, #3
 800d9e2:	d00b      	beq.n	800d9fc <__ieee754_atan2f+0x98>
 800d9e4:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800daa0 <__ieee754_atan2f+0x13c>
 800d9e8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800daa4 <__ieee754_atan2f+0x140>
 800d9ec:	2c01      	cmp	r4, #1
 800d9ee:	bf18      	it	ne
 800d9f0:	eef0 7a47 	vmovne.f32	s15, s14
 800d9f4:	e7c9      	b.n	800d98a <__ieee754_atan2f+0x26>
 800d9f6:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800daa8 <__ieee754_atan2f+0x144>
 800d9fa:	e7c6      	b.n	800d98a <__ieee754_atan2f+0x26>
 800d9fc:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800daac <__ieee754_atan2f+0x148>
 800da00:	e7c3      	b.n	800d98a <__ieee754_atan2f+0x26>
 800da02:	2c02      	cmp	r4, #2
 800da04:	d042      	beq.n	800da8c <__ieee754_atan2f+0x128>
 800da06:	2c03      	cmp	r4, #3
 800da08:	d005      	beq.n	800da16 <__ieee754_atan2f+0xb2>
 800da0a:	2c01      	cmp	r4, #1
 800da0c:	eddf 7a28 	vldr	s15, [pc, #160]	; 800dab0 <__ieee754_atan2f+0x14c>
 800da10:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800dab4 <__ieee754_atan2f+0x150>
 800da14:	e7eb      	b.n	800d9ee <__ieee754_atan2f+0x8a>
 800da16:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800da94 <__ieee754_atan2f+0x130>
 800da1a:	e7b6      	b.n	800d98a <__ieee754_atan2f+0x26>
 800da1c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800da20:	d0cd      	beq.n	800d9be <__ieee754_atan2f+0x5a>
 800da22:	1a5b      	subs	r3, r3, r1
 800da24:	15db      	asrs	r3, r3, #23
 800da26:	2b3c      	cmp	r3, #60	; 0x3c
 800da28:	dc1a      	bgt.n	800da60 <__ieee754_atan2f+0xfc>
 800da2a:	2a00      	cmp	r2, #0
 800da2c:	da01      	bge.n	800da32 <__ieee754_atan2f+0xce>
 800da2e:	333c      	adds	r3, #60	; 0x3c
 800da30:	db19      	blt.n	800da66 <__ieee754_atan2f+0x102>
 800da32:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800da36:	f7ff fdfb 	bl	800d630 <fabsf>
 800da3a:	f7ff fd25 	bl	800d488 <atanf>
 800da3e:	eef0 7a40 	vmov.f32	s15, s0
 800da42:	2c01      	cmp	r4, #1
 800da44:	d012      	beq.n	800da6c <__ieee754_atan2f+0x108>
 800da46:	2c02      	cmp	r4, #2
 800da48:	d017      	beq.n	800da7a <__ieee754_atan2f+0x116>
 800da4a:	2c00      	cmp	r4, #0
 800da4c:	d09d      	beq.n	800d98a <__ieee754_atan2f+0x26>
 800da4e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800dab8 <__ieee754_atan2f+0x154>
 800da52:	ee77 7a87 	vadd.f32	s15, s15, s14
 800da56:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800dabc <__ieee754_atan2f+0x158>
 800da5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800da5e:	e794      	b.n	800d98a <__ieee754_atan2f+0x26>
 800da60:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800da98 <__ieee754_atan2f+0x134>
 800da64:	e7ed      	b.n	800da42 <__ieee754_atan2f+0xde>
 800da66:	eddf 7a13 	vldr	s15, [pc, #76]	; 800dab4 <__ieee754_atan2f+0x150>
 800da6a:	e7ea      	b.n	800da42 <__ieee754_atan2f+0xde>
 800da6c:	ee17 3a90 	vmov	r3, s15
 800da70:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800da74:	ee07 3a90 	vmov	s15, r3
 800da78:	e787      	b.n	800d98a <__ieee754_atan2f+0x26>
 800da7a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800dab8 <__ieee754_atan2f+0x154>
 800da7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800da82:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800dabc <__ieee754_atan2f+0x158>
 800da86:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da8a:	e77e      	b.n	800d98a <__ieee754_atan2f+0x26>
 800da8c:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800dabc <__ieee754_atan2f+0x158>
 800da90:	e77b      	b.n	800d98a <__ieee754_atan2f+0x26>
 800da92:	bf00      	nop
 800da94:	c0490fdb 	.word	0xc0490fdb
 800da98:	3fc90fdb 	.word	0x3fc90fdb
 800da9c:	bfc90fdb 	.word	0xbfc90fdb
 800daa0:	bf490fdb 	.word	0xbf490fdb
 800daa4:	3f490fdb 	.word	0x3f490fdb
 800daa8:	4016cbe4 	.word	0x4016cbe4
 800daac:	c016cbe4 	.word	0xc016cbe4
 800dab0:	80000000 	.word	0x80000000
 800dab4:	00000000 	.word	0x00000000
 800dab8:	33bbbd2e 	.word	0x33bbbd2e
 800dabc:	40490fdb 	.word	0x40490fdb

0800dac0 <__ieee754_sqrtf>:
 800dac0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800dac4:	4770      	bx	lr

0800dac6 <matherr>:
 800dac6:	2000      	movs	r0, #0
 800dac8:	4770      	bx	lr
 800daca:	0000      	movs	r0, r0
 800dacc:	0000      	movs	r0, r0
	...

0800dad0 <nan>:
 800dad0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dad8 <nan+0x8>
 800dad4:	4770      	bx	lr
 800dad6:	bf00      	nop
 800dad8:	00000000 	.word	0x00000000
 800dadc:	7ff80000 	.word	0x7ff80000

0800dae0 <__errno>:
 800dae0:	4b01      	ldr	r3, [pc, #4]	; (800dae8 <__errno+0x8>)
 800dae2:	6818      	ldr	r0, [r3, #0]
 800dae4:	4770      	bx	lr
 800dae6:	bf00      	nop
 800dae8:	200000b4 	.word	0x200000b4

0800daec <__libc_init_array>:
 800daec:	b570      	push	{r4, r5, r6, lr}
 800daee:	4e0d      	ldr	r6, [pc, #52]	; (800db24 <__libc_init_array+0x38>)
 800daf0:	4c0d      	ldr	r4, [pc, #52]	; (800db28 <__libc_init_array+0x3c>)
 800daf2:	1ba4      	subs	r4, r4, r6
 800daf4:	10a4      	asrs	r4, r4, #2
 800daf6:	2500      	movs	r5, #0
 800daf8:	42a5      	cmp	r5, r4
 800dafa:	d109      	bne.n	800db10 <__libc_init_array+0x24>
 800dafc:	4e0b      	ldr	r6, [pc, #44]	; (800db2c <__libc_init_array+0x40>)
 800dafe:	4c0c      	ldr	r4, [pc, #48]	; (800db30 <__libc_init_array+0x44>)
 800db00:	f000 f884 	bl	800dc0c <_init>
 800db04:	1ba4      	subs	r4, r4, r6
 800db06:	10a4      	asrs	r4, r4, #2
 800db08:	2500      	movs	r5, #0
 800db0a:	42a5      	cmp	r5, r4
 800db0c:	d105      	bne.n	800db1a <__libc_init_array+0x2e>
 800db0e:	bd70      	pop	{r4, r5, r6, pc}
 800db10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800db14:	4798      	blx	r3
 800db16:	3501      	adds	r5, #1
 800db18:	e7ee      	b.n	800daf8 <__libc_init_array+0xc>
 800db1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800db1e:	4798      	blx	r3
 800db20:	3501      	adds	r5, #1
 800db22:	e7f2      	b.n	800db0a <__libc_init_array+0x1e>
 800db24:	0800ddc4 	.word	0x0800ddc4
 800db28:	0800ddc4 	.word	0x0800ddc4
 800db2c:	0800ddc4 	.word	0x0800ddc4
 800db30:	0800ddcc 	.word	0x0800ddcc

0800db34 <free>:
 800db34:	4b02      	ldr	r3, [pc, #8]	; (800db40 <free+0xc>)
 800db36:	4601      	mov	r1, r0
 800db38:	6818      	ldr	r0, [r3, #0]
 800db3a:	f000 b817 	b.w	800db6c <_free_r>
 800db3e:	bf00      	nop
 800db40:	200000b4 	.word	0x200000b4

0800db44 <memcpy>:
 800db44:	b510      	push	{r4, lr}
 800db46:	1e43      	subs	r3, r0, #1
 800db48:	440a      	add	r2, r1
 800db4a:	4291      	cmp	r1, r2
 800db4c:	d100      	bne.n	800db50 <memcpy+0xc>
 800db4e:	bd10      	pop	{r4, pc}
 800db50:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db54:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db58:	e7f7      	b.n	800db4a <memcpy+0x6>

0800db5a <memset>:
 800db5a:	4402      	add	r2, r0
 800db5c:	4603      	mov	r3, r0
 800db5e:	4293      	cmp	r3, r2
 800db60:	d100      	bne.n	800db64 <memset+0xa>
 800db62:	4770      	bx	lr
 800db64:	f803 1b01 	strb.w	r1, [r3], #1
 800db68:	e7f9      	b.n	800db5e <memset+0x4>
	...

0800db6c <_free_r>:
 800db6c:	b538      	push	{r3, r4, r5, lr}
 800db6e:	4605      	mov	r5, r0
 800db70:	2900      	cmp	r1, #0
 800db72:	d045      	beq.n	800dc00 <_free_r+0x94>
 800db74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db78:	1f0c      	subs	r4, r1, #4
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	bfb8      	it	lt
 800db7e:	18e4      	addlt	r4, r4, r3
 800db80:	f000 f842 	bl	800dc08 <__malloc_lock>
 800db84:	4a1f      	ldr	r2, [pc, #124]	; (800dc04 <_free_r+0x98>)
 800db86:	6813      	ldr	r3, [r2, #0]
 800db88:	4610      	mov	r0, r2
 800db8a:	b933      	cbnz	r3, 800db9a <_free_r+0x2e>
 800db8c:	6063      	str	r3, [r4, #4]
 800db8e:	6014      	str	r4, [r2, #0]
 800db90:	4628      	mov	r0, r5
 800db92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db96:	f000 b838 	b.w	800dc0a <__malloc_unlock>
 800db9a:	42a3      	cmp	r3, r4
 800db9c:	d90c      	bls.n	800dbb8 <_free_r+0x4c>
 800db9e:	6821      	ldr	r1, [r4, #0]
 800dba0:	1862      	adds	r2, r4, r1
 800dba2:	4293      	cmp	r3, r2
 800dba4:	bf04      	itt	eq
 800dba6:	681a      	ldreq	r2, [r3, #0]
 800dba8:	685b      	ldreq	r3, [r3, #4]
 800dbaa:	6063      	str	r3, [r4, #4]
 800dbac:	bf04      	itt	eq
 800dbae:	1852      	addeq	r2, r2, r1
 800dbb0:	6022      	streq	r2, [r4, #0]
 800dbb2:	6004      	str	r4, [r0, #0]
 800dbb4:	e7ec      	b.n	800db90 <_free_r+0x24>
 800dbb6:	4613      	mov	r3, r2
 800dbb8:	685a      	ldr	r2, [r3, #4]
 800dbba:	b10a      	cbz	r2, 800dbc0 <_free_r+0x54>
 800dbbc:	42a2      	cmp	r2, r4
 800dbbe:	d9fa      	bls.n	800dbb6 <_free_r+0x4a>
 800dbc0:	6819      	ldr	r1, [r3, #0]
 800dbc2:	1858      	adds	r0, r3, r1
 800dbc4:	42a0      	cmp	r0, r4
 800dbc6:	d10b      	bne.n	800dbe0 <_free_r+0x74>
 800dbc8:	6820      	ldr	r0, [r4, #0]
 800dbca:	4401      	add	r1, r0
 800dbcc:	1858      	adds	r0, r3, r1
 800dbce:	4282      	cmp	r2, r0
 800dbd0:	6019      	str	r1, [r3, #0]
 800dbd2:	d1dd      	bne.n	800db90 <_free_r+0x24>
 800dbd4:	6810      	ldr	r0, [r2, #0]
 800dbd6:	6852      	ldr	r2, [r2, #4]
 800dbd8:	605a      	str	r2, [r3, #4]
 800dbda:	4401      	add	r1, r0
 800dbdc:	6019      	str	r1, [r3, #0]
 800dbde:	e7d7      	b.n	800db90 <_free_r+0x24>
 800dbe0:	d902      	bls.n	800dbe8 <_free_r+0x7c>
 800dbe2:	230c      	movs	r3, #12
 800dbe4:	602b      	str	r3, [r5, #0]
 800dbe6:	e7d3      	b.n	800db90 <_free_r+0x24>
 800dbe8:	6820      	ldr	r0, [r4, #0]
 800dbea:	1821      	adds	r1, r4, r0
 800dbec:	428a      	cmp	r2, r1
 800dbee:	bf04      	itt	eq
 800dbf0:	6811      	ldreq	r1, [r2, #0]
 800dbf2:	6852      	ldreq	r2, [r2, #4]
 800dbf4:	6062      	str	r2, [r4, #4]
 800dbf6:	bf04      	itt	eq
 800dbf8:	1809      	addeq	r1, r1, r0
 800dbfa:	6021      	streq	r1, [r4, #0]
 800dbfc:	605c      	str	r4, [r3, #4]
 800dbfe:	e7c7      	b.n	800db90 <_free_r+0x24>
 800dc00:	bd38      	pop	{r3, r4, r5, pc}
 800dc02:	bf00      	nop
 800dc04:	20019688 	.word	0x20019688

0800dc08 <__malloc_lock>:
 800dc08:	4770      	bx	lr

0800dc0a <__malloc_unlock>:
 800dc0a:	4770      	bx	lr

0800dc0c <_init>:
 800dc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc0e:	bf00      	nop
 800dc10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc12:	bc08      	pop	{r3}
 800dc14:	469e      	mov	lr, r3
 800dc16:	4770      	bx	lr

0800dc18 <_fini>:
 800dc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc1a:	bf00      	nop
 800dc1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc1e:	bc08      	pop	{r3}
 800dc20:	469e      	mov	lr, r3
 800dc22:	4770      	bx	lr
